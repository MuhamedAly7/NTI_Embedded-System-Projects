
NTI_MohamedAli.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  000032ce  00003362  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  008000a6  008000a6  000033a8  2**0
                  ALLOC
  3 .stab         00003aec  00000000  00000000  000033a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000037e0  00000000  00000000  00006e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a674  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a7b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a924  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000c56d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d458  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e208  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e368  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e5f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000edc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__vector_1>
       8:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <__vector_2>
       c:	0c 94 11 0b 	jmp	0x1622	; 0x1622 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__vector_6>
      1c:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__vector_7>
      20:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__vector_8>
      24:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__vector_9>
      28:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__vector_10>
      2c:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ea       	ldi	r26, 0xA6	; 166
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3b       	cpi	r26, 0xB9	; 185
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 33 16 	call	0x2c66	; 0x2c66 <main>
      8a:	0c 94 65 19 	jmp	0x32ca	; 0x32ca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e6       	ldi	r26, 0x63	; 99
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e6       	ldi	r24, 0x63	; 99
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer1_Init>:
void(*Timer1_CompB_isr)(void) = NULL;
void(*Timer1_CompA_isr)(void) = NULL;
void(*Timer1_Capt_isr)(void) = NULL;

Error_Status_t Timer1_Init(const timer1_t *timer1_obj)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Timer1_Init+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9b 83       	std	Y+3, r25	; 0x03
     b54:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
     b56:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	9b 81       	ldd	r25, Y+3	; 0x03
     b5c:	00 97       	sbiw	r24, 0x00	; 0
     b5e:	19 f4       	brne	.+6      	; 0xb66 <Timer1_Init+0x20>
	{
		ret_status = NULL_POINTER;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	89 83       	std	Y+1, r24	; 0x01
     b64:	61 c0       	rjmp	.+194    	; 0xc28 <Timer1_Init+0xe2>
	}
	else
	{
		// To initialize mode
		TIMER1_CONTROL->TCCR1A_CFG.WGM1_0_BIT = (((timer1_obj->mode) >> 0) & 0x01);
     b66:	a6 e4       	ldi	r26, 0x46	; 70
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	ea 81       	ldd	r30, Y+2	; 0x02
     b6c:	fb 81       	ldd	r31, Y+3	; 0x03
     b6e:	80 85       	ldd	r24, Z+8	; 0x08
     b70:	8f 70       	andi	r24, 0x0F	; 15
     b72:	81 70       	andi	r24, 0x01	; 1
     b74:	81 70       	andi	r24, 0x01	; 1
     b76:	81 70       	andi	r24, 0x01	; 1
     b78:	98 2f       	mov	r25, r24
     b7a:	91 70       	andi	r25, 0x01	; 1
     b7c:	19 96       	adiw	r26, 0x09	; 9
     b7e:	8c 91       	ld	r24, X
     b80:	19 97       	sbiw	r26, 0x09	; 9
     b82:	8e 7f       	andi	r24, 0xFE	; 254
     b84:	89 2b       	or	r24, r25
     b86:	19 96       	adiw	r26, 0x09	; 9
     b88:	8c 93       	st	X, r24
		TIMER1_CONTROL->TCCR1A_CFG.WGM1_1_BIT = (((timer1_obj->mode) >> 1) & 0x01);
     b8a:	a6 e4       	ldi	r26, 0x46	; 70
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	ea 81       	ldd	r30, Y+2	; 0x02
     b90:	fb 81       	ldd	r31, Y+3	; 0x03
     b92:	80 85       	ldd	r24, Z+8	; 0x08
     b94:	8f 70       	andi	r24, 0x0F	; 15
     b96:	88 2f       	mov	r24, r24
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	95 95       	asr	r25
     b9c:	87 95       	ror	r24
     b9e:	81 70       	andi	r24, 0x01	; 1
     ba0:	81 70       	andi	r24, 0x01	; 1
     ba2:	81 70       	andi	r24, 0x01	; 1
     ba4:	81 70       	andi	r24, 0x01	; 1
     ba6:	98 2f       	mov	r25, r24
     ba8:	99 0f       	add	r25, r25
     baa:	19 96       	adiw	r26, 0x09	; 9
     bac:	8c 91       	ld	r24, X
     bae:	19 97       	sbiw	r26, 0x09	; 9
     bb0:	8d 7f       	andi	r24, 0xFD	; 253
     bb2:	89 2b       	or	r24, r25
     bb4:	19 96       	adiw	r26, 0x09	; 9
     bb6:	8c 93       	st	X, r24
		TIMER1_CONTROL->TCCR1B_CFG.WGM1_2_BIT = (((timer1_obj->mode) >> 2) & 0x01);
     bb8:	a6 e4       	ldi	r26, 0x46	; 70
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	ea 81       	ldd	r30, Y+2	; 0x02
     bbe:	fb 81       	ldd	r31, Y+3	; 0x03
     bc0:	80 85       	ldd	r24, Z+8	; 0x08
     bc2:	8f 70       	andi	r24, 0x0F	; 15
     bc4:	88 2f       	mov	r24, r24
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	95 95       	asr	r25
     bca:	87 95       	ror	r24
     bcc:	95 95       	asr	r25
     bce:	87 95       	ror	r24
     bd0:	81 70       	andi	r24, 0x01	; 1
     bd2:	81 70       	andi	r24, 0x01	; 1
     bd4:	81 70       	andi	r24, 0x01	; 1
     bd6:	81 70       	andi	r24, 0x01	; 1
     bd8:	98 2f       	mov	r25, r24
     bda:	99 0f       	add	r25, r25
     bdc:	99 0f       	add	r25, r25
     bde:	99 0f       	add	r25, r25
     be0:	18 96       	adiw	r26, 0x08	; 8
     be2:	8c 91       	ld	r24, X
     be4:	18 97       	sbiw	r26, 0x08	; 8
     be6:	87 7f       	andi	r24, 0xF7	; 247
     be8:	89 2b       	or	r24, r25
     bea:	18 96       	adiw	r26, 0x08	; 8
     bec:	8c 93       	st	X, r24
		TIMER1_CONTROL->TCCR1B_CFG.WGM1_3_BIT = (((timer1_obj->mode) >> 3) & 0x01);
     bee:	a6 e4       	ldi	r26, 0x46	; 70
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	ea 81       	ldd	r30, Y+2	; 0x02
     bf4:	fb 81       	ldd	r31, Y+3	; 0x03
     bf6:	80 85       	ldd	r24, Z+8	; 0x08
     bf8:	8f 70       	andi	r24, 0x0F	; 15
     bfa:	88 2f       	mov	r24, r24
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	95 95       	asr	r25
     c00:	87 95       	ror	r24
     c02:	95 95       	asr	r25
     c04:	87 95       	ror	r24
     c06:	95 95       	asr	r25
     c08:	87 95       	ror	r24
     c0a:	81 70       	andi	r24, 0x01	; 1
     c0c:	81 70       	andi	r24, 0x01	; 1
     c0e:	81 70       	andi	r24, 0x01	; 1
     c10:	81 70       	andi	r24, 0x01	; 1
     c12:	98 2f       	mov	r25, r24
     c14:	92 95       	swap	r25
     c16:	90 7f       	andi	r25, 0xF0	; 240
     c18:	18 96       	adiw	r26, 0x08	; 8
     c1a:	8c 91       	ld	r24, X
     c1c:	18 97       	sbiw	r26, 0x08	; 8
     c1e:	8f 7e       	andi	r24, 0xEF	; 239
     c20:	89 2b       	or	r24, r25
     c22:	18 96       	adiw	r26, 0x08	; 8
     c24:	8c 93       	st	X, r24
     c26:	18 97       	sbiw	r26, 0x08	; 8


	}
	return ret_status;
     c28:	89 81       	ldd	r24, Y+1	; 0x01
}
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	cf 91       	pop	r28
     c32:	df 91       	pop	r29
     c34:	08 95       	ret

00000c36 <__vector_9>:

/* ---------------------------------------- ISRs ---------------------------- */
// Define the ISR function with attribute
void TIMER1_OVF_VECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER1_OVF_VECTOR(void)
{
     c36:	1f 92       	push	r1
     c38:	0f 92       	push	r0
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	0f 92       	push	r0
     c3e:	11 24       	eor	r1, r1
     c40:	2f 93       	push	r18
     c42:	3f 93       	push	r19
     c44:	4f 93       	push	r20
     c46:	5f 93       	push	r21
     c48:	6f 93       	push	r22
     c4a:	7f 93       	push	r23
     c4c:	8f 93       	push	r24
     c4e:	9f 93       	push	r25
     c50:	af 93       	push	r26
     c52:	bf 93       	push	r27
     c54:	ef 93       	push	r30
     c56:	ff 93       	push	r31
     c58:	df 93       	push	r29
     c5a:	cf 93       	push	r28
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	TIMER1_CONTROL->TIFR1_CFG.TOV1_BIT = 0;
     c60:	e6 e4       	ldi	r30, 0x46	; 70
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	83 89       	ldd	r24, Z+19	; 0x13
     c66:	8b 7f       	andi	r24, 0xFB	; 251
     c68:	83 8b       	std	Z+19, r24	; 0x13

	// execute ISR if it existed
	if(Timer1_Over_Flow_isr)
     c6a:	80 91 a6 00 	lds	r24, 0x00A6
     c6e:	90 91 a7 00 	lds	r25, 0x00A7
     c72:	00 97       	sbiw	r24, 0x00	; 0
     c74:	29 f0       	breq	.+10     	; 0xc80 <__vector_9+0x4a>
	{
		Timer1_Over_Flow_isr();
     c76:	e0 91 a6 00 	lds	r30, 0x00A6
     c7a:	f0 91 a7 00 	lds	r31, 0x00A7
     c7e:	09 95       	icall
	}
}
     c80:	cf 91       	pop	r28
     c82:	df 91       	pop	r29
     c84:	ff 91       	pop	r31
     c86:	ef 91       	pop	r30
     c88:	bf 91       	pop	r27
     c8a:	af 91       	pop	r26
     c8c:	9f 91       	pop	r25
     c8e:	8f 91       	pop	r24
     c90:	7f 91       	pop	r23
     c92:	6f 91       	pop	r22
     c94:	5f 91       	pop	r21
     c96:	4f 91       	pop	r20
     c98:	3f 91       	pop	r19
     c9a:	2f 91       	pop	r18
     c9c:	0f 90       	pop	r0
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	0f 90       	pop	r0
     ca2:	1f 90       	pop	r1
     ca4:	18 95       	reti

00000ca6 <__vector_8>:


// Define the ISR function with attribute
void TIMER1_COMPBVECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER1_COMPBVECTOR(void)
{
     ca6:	1f 92       	push	r1
     ca8:	0f 92       	push	r0
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	0f 92       	push	r0
     cae:	11 24       	eor	r1, r1
     cb0:	2f 93       	push	r18
     cb2:	3f 93       	push	r19
     cb4:	4f 93       	push	r20
     cb6:	5f 93       	push	r21
     cb8:	6f 93       	push	r22
     cba:	7f 93       	push	r23
     cbc:	8f 93       	push	r24
     cbe:	9f 93       	push	r25
     cc0:	af 93       	push	r26
     cc2:	bf 93       	push	r27
     cc4:	ef 93       	push	r30
     cc6:	ff 93       	push	r31
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	TIMER1_CONTROL->TIFR1_CFG.OCF1B_BIT = 0;
     cd0:	e6 e4       	ldi	r30, 0x46	; 70
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	83 89       	ldd	r24, Z+19	; 0x13
     cd6:	87 7f       	andi	r24, 0xF7	; 247
     cd8:	83 8b       	std	Z+19, r24	; 0x13

	// execute ISR if it existed
	if(Timer1_CompB_isr)
     cda:	80 91 a8 00 	lds	r24, 0x00A8
     cde:	90 91 a9 00 	lds	r25, 0x00A9
     ce2:	00 97       	sbiw	r24, 0x00	; 0
     ce4:	29 f0       	breq	.+10     	; 0xcf0 <__vector_8+0x4a>
	{
		Timer1_CompB_isr();
     ce6:	e0 91 a8 00 	lds	r30, 0x00A8
     cea:	f0 91 a9 00 	lds	r31, 0x00A9
     cee:	09 95       	icall
	}
}
     cf0:	cf 91       	pop	r28
     cf2:	df 91       	pop	r29
     cf4:	ff 91       	pop	r31
     cf6:	ef 91       	pop	r30
     cf8:	bf 91       	pop	r27
     cfa:	af 91       	pop	r26
     cfc:	9f 91       	pop	r25
     cfe:	8f 91       	pop	r24
     d00:	7f 91       	pop	r23
     d02:	6f 91       	pop	r22
     d04:	5f 91       	pop	r21
     d06:	4f 91       	pop	r20
     d08:	3f 91       	pop	r19
     d0a:	2f 91       	pop	r18
     d0c:	0f 90       	pop	r0
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	0f 90       	pop	r0
     d12:	1f 90       	pop	r1
     d14:	18 95       	reti

00000d16 <__vector_7>:


// Define the ISR function with attribute
void TIMER1_COMPAVECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER1_COMPAVECTOR(void)
{
     d16:	1f 92       	push	r1
     d18:	0f 92       	push	r0
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	0f 92       	push	r0
     d1e:	11 24       	eor	r1, r1
     d20:	2f 93       	push	r18
     d22:	3f 93       	push	r19
     d24:	4f 93       	push	r20
     d26:	5f 93       	push	r21
     d28:	6f 93       	push	r22
     d2a:	7f 93       	push	r23
     d2c:	8f 93       	push	r24
     d2e:	9f 93       	push	r25
     d30:	af 93       	push	r26
     d32:	bf 93       	push	r27
     d34:	ef 93       	push	r30
     d36:	ff 93       	push	r31
     d38:	df 93       	push	r29
     d3a:	cf 93       	push	r28
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	TIMER1_CONTROL->TIFR1_CFG.OCF1A_BIT = 0;
     d40:	e6 e4       	ldi	r30, 0x46	; 70
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	83 89       	ldd	r24, Z+19	; 0x13
     d46:	8f 7e       	andi	r24, 0xEF	; 239
     d48:	83 8b       	std	Z+19, r24	; 0x13

	// execute ISR if it existed
	if(Timer1_CompA_isr)
     d4a:	80 91 aa 00 	lds	r24, 0x00AA
     d4e:	90 91 ab 00 	lds	r25, 0x00AB
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	29 f0       	breq	.+10     	; 0xd60 <__vector_7+0x4a>
	{
		Timer1_CompA_isr();
     d56:	e0 91 aa 00 	lds	r30, 0x00AA
     d5a:	f0 91 ab 00 	lds	r31, 0x00AB
     d5e:	09 95       	icall
	}
}
     d60:	cf 91       	pop	r28
     d62:	df 91       	pop	r29
     d64:	ff 91       	pop	r31
     d66:	ef 91       	pop	r30
     d68:	bf 91       	pop	r27
     d6a:	af 91       	pop	r26
     d6c:	9f 91       	pop	r25
     d6e:	8f 91       	pop	r24
     d70:	7f 91       	pop	r23
     d72:	6f 91       	pop	r22
     d74:	5f 91       	pop	r21
     d76:	4f 91       	pop	r20
     d78:	3f 91       	pop	r19
     d7a:	2f 91       	pop	r18
     d7c:	0f 90       	pop	r0
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	0f 90       	pop	r0
     d82:	1f 90       	pop	r1
     d84:	18 95       	reti

00000d86 <__vector_6>:


// Define the ISR function with attribute
void TIMER1_CAPTVECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER1_CAPTVECTOR(void)
{
     d86:	1f 92       	push	r1
     d88:	0f 92       	push	r0
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	0f 92       	push	r0
     d8e:	11 24       	eor	r1, r1
     d90:	2f 93       	push	r18
     d92:	3f 93       	push	r19
     d94:	4f 93       	push	r20
     d96:	5f 93       	push	r21
     d98:	6f 93       	push	r22
     d9a:	7f 93       	push	r23
     d9c:	8f 93       	push	r24
     d9e:	9f 93       	push	r25
     da0:	af 93       	push	r26
     da2:	bf 93       	push	r27
     da4:	ef 93       	push	r30
     da6:	ff 93       	push	r31
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	TIMER1_CONTROL->TIFR1_CFG.ICF1_BIT = 0;
     db0:	e6 e4       	ldi	r30, 0x46	; 70
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	83 89       	ldd	r24, Z+19	; 0x13
     db6:	8f 7d       	andi	r24, 0xDF	; 223
     db8:	83 8b       	std	Z+19, r24	; 0x13

	// execute ISR if it existed
	if(Timer1_Capt_isr)
     dba:	80 91 ac 00 	lds	r24, 0x00AC
     dbe:	90 91 ad 00 	lds	r25, 0x00AD
     dc2:	00 97       	sbiw	r24, 0x00	; 0
     dc4:	29 f0       	breq	.+10     	; 0xdd0 <__vector_6+0x4a>
	{
		Timer1_Capt_isr();
     dc6:	e0 91 ac 00 	lds	r30, 0x00AC
     dca:	f0 91 ad 00 	lds	r31, 0x00AD
     dce:	09 95       	icall
	}
}
     dd0:	cf 91       	pop	r28
     dd2:	df 91       	pop	r29
     dd4:	ff 91       	pop	r31
     dd6:	ef 91       	pop	r30
     dd8:	bf 91       	pop	r27
     dda:	af 91       	pop	r26
     ddc:	9f 91       	pop	r25
     dde:	8f 91       	pop	r24
     de0:	7f 91       	pop	r23
     de2:	6f 91       	pop	r22
     de4:	5f 91       	pop	r21
     de6:	4f 91       	pop	r20
     de8:	3f 91       	pop	r19
     dea:	2f 91       	pop	r18
     dec:	0f 90       	pop	r0
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	0f 90       	pop	r0
     df2:	1f 90       	pop	r1
     df4:	18 95       	reti

00000df6 <Timer0_Init>:
void (*Timer0_Over_Flow_isr)(void) = NULL;
void(*Timer0_Comp_isr)(void) = NULL;


Error_Status_t Timer0_Init(const timer0_t *timer0_obj)
{
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	00 d0       	rcall	.+0      	; 0xdfc <Timer0_Init+0x6>
     dfc:	0f 92       	push	r0
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	9b 83       	std	Y+3, r25	; 0x03
     e04:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
     e06:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
     e08:	8a 81       	ldd	r24, Y+2	; 0x02
     e0a:	9b 81       	ldd	r25, Y+3	; 0x03
     e0c:	00 97       	sbiw	r24, 0x00	; 0
     e0e:	19 f4       	brne	.+6      	; 0xe16 <Timer0_Init+0x20>
	{
		ret_status = NULL_POINTER;
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	89 83       	std	Y+1, r24	; 0x01
     e14:	4a c0       	rjmp	.+148    	; 0xeaa <Timer0_Init+0xb4>
	}
	else
	{
		// To select mode
		TIMER0_CONTROL->TCCR0_CFG.WGM00_BIT = (((timer0_obj->mode) >> 0) & 0x01);
     e16:	a2 e5       	ldi	r26, 0x52	; 82
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	ea 81       	ldd	r30, Y+2	; 0x02
     e1c:	fb 81       	ldd	r31, Y+3	; 0x03
     e1e:	84 81       	ldd	r24, Z+4	; 0x04
     e20:	86 95       	lsr	r24
     e22:	86 95       	lsr	r24
     e24:	86 95       	lsr	r24
     e26:	83 70       	andi	r24, 0x03	; 3
     e28:	81 70       	andi	r24, 0x01	; 1
     e2a:	81 70       	andi	r24, 0x01	; 1
     e2c:	81 70       	andi	r24, 0x01	; 1
     e2e:	81 70       	andi	r24, 0x01	; 1
     e30:	98 2f       	mov	r25, r24
     e32:	92 95       	swap	r25
     e34:	99 0f       	add	r25, r25
     e36:	99 0f       	add	r25, r25
     e38:	90 7c       	andi	r25, 0xC0	; 192
     e3a:	11 96       	adiw	r26, 0x01	; 1
     e3c:	8c 91       	ld	r24, X
     e3e:	11 97       	sbiw	r26, 0x01	; 1
     e40:	8f 7b       	andi	r24, 0xBF	; 191
     e42:	89 2b       	or	r24, r25
     e44:	11 96       	adiw	r26, 0x01	; 1
     e46:	8c 93       	st	X, r24
		TIMER0_CONTROL->TCCR0_CFG.WGM01_BIT = (((timer0_obj->mode) >> 1) & 0x01);
     e48:	a2 e5       	ldi	r26, 0x52	; 82
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	ea 81       	ldd	r30, Y+2	; 0x02
     e4e:	fb 81       	ldd	r31, Y+3	; 0x03
     e50:	84 81       	ldd	r24, Z+4	; 0x04
     e52:	86 95       	lsr	r24
     e54:	86 95       	lsr	r24
     e56:	86 95       	lsr	r24
     e58:	83 70       	andi	r24, 0x03	; 3
     e5a:	88 2f       	mov	r24, r24
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	95 95       	asr	r25
     e60:	87 95       	ror	r24
     e62:	81 70       	andi	r24, 0x01	; 1
     e64:	81 70       	andi	r24, 0x01	; 1
     e66:	81 70       	andi	r24, 0x01	; 1
     e68:	81 70       	andi	r24, 0x01	; 1
     e6a:	98 2f       	mov	r25, r24
     e6c:	99 0f       	add	r25, r25
     e6e:	99 0f       	add	r25, r25
     e70:	99 0f       	add	r25, r25
     e72:	11 96       	adiw	r26, 0x01	; 1
     e74:	8c 91       	ld	r24, X
     e76:	11 97       	sbiw	r26, 0x01	; 1
     e78:	87 7f       	andi	r24, 0xF7	; 247
     e7a:	89 2b       	or	r24, r25
     e7c:	11 96       	adiw	r26, 0x01	; 1
     e7e:	8c 93       	st	X, r24

		// To select the output compare match pin
		TIMER0_CONTROL->TCCR0_CFG.COM0_BITS = timer0_obj->ctc_mode_cfg;
     e80:	a2 e5       	ldi	r26, 0x52	; 82
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	ea 81       	ldd	r30, Y+2	; 0x02
     e86:	fb 81       	ldd	r31, Y+3	; 0x03
     e88:	84 81       	ldd	r24, Z+4	; 0x04
     e8a:	82 95       	swap	r24
     e8c:	86 95       	lsr	r24
     e8e:	87 70       	andi	r24, 0x07	; 7
     e90:	83 70       	andi	r24, 0x03	; 3
     e92:	83 70       	andi	r24, 0x03	; 3
     e94:	98 2f       	mov	r25, r24
     e96:	92 95       	swap	r25
     e98:	90 7f       	andi	r25, 0xF0	; 240
     e9a:	11 96       	adiw	r26, 0x01	; 1
     e9c:	8c 91       	ld	r24, X
     e9e:	11 97       	sbiw	r26, 0x01	; 1
     ea0:	8f 7c       	andi	r24, 0xCF	; 207
     ea2:	89 2b       	or	r24, r25
     ea4:	11 96       	adiw	r26, 0x01	; 1
     ea6:	8c 93       	st	X, r24
     ea8:	11 97       	sbiw	r26, 0x01	; 1
		}
	return ret_status;
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
}
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	08 95       	ret

00000eb8 <Timer0_start>:


Error_Status_t Timer0_start(const timer0_t *timer0_obj)
{
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	00 d0       	rcall	.+0      	; 0xebe <Timer0_start+0x6>
     ebe:	0f 92       	push	r0
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	9b 83       	std	Y+3, r25	; 0x03
     ec6:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
     ec8:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	9b 81       	ldd	r25, Y+3	; 0x03
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	19 f4       	brne	.+6      	; 0xed8 <Timer0_start+0x20>
	{
		ret_status = NULL_POINTER;
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	89 83       	std	Y+1, r24	; 0x01
     ed6:	2a c0       	rjmp	.+84     	; 0xf2c <Timer0_start+0x74>
	}
	else
	{
		if(TIMER0_NORMAL_MODE == timer0_obj->mode){
     ed8:	ea 81       	ldd	r30, Y+2	; 0x02
     eda:	fb 81       	ldd	r31, Y+3	; 0x03
     edc:	84 81       	ldd	r24, Z+4	; 0x04
     ede:	88 71       	andi	r24, 0x18	; 24
     ee0:	88 23       	and	r24, r24
     ee2:	89 f4       	brne	.+34     	; 0xf06 <Timer0_start+0x4e>
			TIMER0_CONTROL->TCCR0_CFG.CS0_BITS = timer0_obj->prescaler_select;
     ee4:	a2 e5       	ldi	r26, 0x52	; 82
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	ea 81       	ldd	r30, Y+2	; 0x02
     eea:	fb 81       	ldd	r31, Y+3	; 0x03
     eec:	84 81       	ldd	r24, Z+4	; 0x04
     eee:	87 70       	andi	r24, 0x07	; 7
     ef0:	98 2f       	mov	r25, r24
     ef2:	97 70       	andi	r25, 0x07	; 7
     ef4:	11 96       	adiw	r26, 0x01	; 1
     ef6:	8c 91       	ld	r24, X
     ef8:	11 97       	sbiw	r26, 0x01	; 1
     efa:	88 7f       	andi	r24, 0xF8	; 248
     efc:	89 2b       	or	r24, r25
     efe:	11 96       	adiw	r26, 0x01	; 1
     f00:	8c 93       	st	X, r24
     f02:	11 97       	sbiw	r26, 0x01	; 1
     f04:	13 c0       	rjmp	.+38     	; 0xf2c <Timer0_start+0x74>
		}
		else
		{
			TIMER0_CONTROL->TCCR0_CFG.CS0_BITS = timer0_obj->prescaler_select;
     f06:	a2 e5       	ldi	r26, 0x52	; 82
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	ea 81       	ldd	r30, Y+2	; 0x02
     f0c:	fb 81       	ldd	r31, Y+3	; 0x03
     f0e:	84 81       	ldd	r24, Z+4	; 0x04
     f10:	87 70       	andi	r24, 0x07	; 7
     f12:	98 2f       	mov	r25, r24
     f14:	97 70       	andi	r25, 0x07	; 7
     f16:	11 96       	adiw	r26, 0x01	; 1
     f18:	8c 91       	ld	r24, X
     f1a:	11 97       	sbiw	r26, 0x01	; 1
     f1c:	88 7f       	andi	r24, 0xF8	; 248
     f1e:	89 2b       	or	r24, r25
     f20:	11 96       	adiw	r26, 0x01	; 1
     f22:	8c 93       	st	X, r24
     f24:	11 97       	sbiw	r26, 0x01	; 1
			TIMER0_CONTROL->OCR0_CFG = 0;
     f26:	e2 e5       	ldi	r30, 0x52	; 82
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	12 86       	std	Z+10, r1	; 0x0a
		}

	}
	return ret_status;
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	cf 91       	pop	r28
     f36:	df 91       	pop	r29
     f38:	08 95       	ret

00000f3a <Timer0_stop>:
Error_Status_t Timer0_stop(const timer0_t *timer0_obj)
{
     f3a:	df 93       	push	r29
     f3c:	cf 93       	push	r28
     f3e:	00 d0       	rcall	.+0      	; 0xf40 <Timer0_stop+0x6>
     f40:	0f 92       	push	r0
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	9b 83       	std	Y+3, r25	; 0x03
     f48:	8a 83       	std	Y+2, r24	; 0x02

	Error_Status_t ret_status = NO_ERROR;
     f4a:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	9b 81       	ldd	r25, Y+3	; 0x03
     f50:	00 97       	sbiw	r24, 0x00	; 0
     f52:	19 f4       	brne	.+6      	; 0xf5a <Timer0_stop+0x20>
	{
		ret_status = NULL_POINTER;
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	89 83       	std	Y+1, r24	; 0x01
     f58:	05 c0       	rjmp	.+10     	; 0xf64 <Timer0_stop+0x2a>
	}
	else
	{
		TIMER0_CONTROL->TCCR0_CFG.CS0_BITS = TIMER0_STOP_TIMER;
     f5a:	e2 e5       	ldi	r30, 0x52	; 82
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	81 81       	ldd	r24, Z+1	; 0x01
     f60:	88 7f       	andi	r24, 0xF8	; 248
     f62:	81 83       	std	Z+1, r24	; 0x01
	}
	return ret_status;
     f64:	89 81       	ldd	r24, Y+1	; 0x01
}
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	08 95       	ret

00000f72 <Timer0_GetCounts>:
Error_Status_t Timer0_GetCounts(const timer0_t *timer0_obj, u8 *Num_of_count)
{
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	00 d0       	rcall	.+0      	; 0xf78 <Timer0_GetCounts+0x6>
     f78:	00 d0       	rcall	.+0      	; 0xf7a <Timer0_GetCounts+0x8>
     f7a:	0f 92       	push	r0
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	9b 83       	std	Y+3, r25	; 0x03
     f82:	8a 83       	std	Y+2, r24	; 0x02
     f84:	7d 83       	std	Y+5, r23	; 0x05
     f86:	6c 83       	std	Y+4, r22	; 0x04
	Error_Status_t ret_status = NO_ERROR;
     f88:	19 82       	std	Y+1, r1	; 0x01
	if((NULL == timer0_obj) || (NULL == Num_of_count))
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	9b 81       	ldd	r25, Y+3	; 0x03
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	21 f0       	breq	.+8      	; 0xf9a <Timer0_GetCounts+0x28>
     f92:	8c 81       	ldd	r24, Y+4	; 0x04
     f94:	9d 81       	ldd	r25, Y+5	; 0x05
     f96:	00 97       	sbiw	r24, 0x00	; 0
     f98:	19 f4       	brne	.+6      	; 0xfa0 <Timer0_GetCounts+0x2e>
	{
		ret_status = NULL_POINTER;
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	89 83       	std	Y+1, r24	; 0x01
     f9e:	06 c0       	rjmp	.+12     	; 0xfac <Timer0_GetCounts+0x3a>
	}
	else
	{
		*Num_of_count = TIMER0_CONTROL->TCNT0_CFG;
     fa0:	e2 e5       	ldi	r30, 0x52	; 82
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	ec 81       	ldd	r30, Y+4	; 0x04
     fa8:	fd 81       	ldd	r31, Y+5	; 0x05
     faa:	80 83       	st	Z, r24
	}
	return ret_status;
     fac:	89 81       	ldd	r24, Y+1	; 0x01
}
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <Timer0_setDelayTimeMilliSec>:



Error_Status_t Timer0_setDelayTimeMilliSec(const timer0_t *timer0_obj, u8 Time_ms)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <Timer0_setDelayTimeMilliSec+0x6>
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <Timer0_setDelayTimeMilliSec+0x8>
     fc6:	0f 92       	push	r0
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	9b 83       	std	Y+3, r25	; 0x03
     fce:	8a 83       	std	Y+2, r24	; 0x02
     fd0:	6c 83       	std	Y+4, r22	; 0x04
	Error_Status_t ret_status = NO_ERROR;
     fd2:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	9b 81       	ldd	r25, Y+3	; 0x03
     fd8:	00 97       	sbiw	r24, 0x00	; 0
     fda:	19 f4       	brne	.+6      	; 0xfe2 <Timer0_setDelayTimeMilliSec+0x24>
	{
		ret_status = NULL_POINTER;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	05 c0       	rjmp	.+10     	; 0xfec <Timer0_setDelayTimeMilliSec+0x2e>
	}
	else
	{
		if(TIMER0_NORMAL_MODE == timer0_obj->mode)
     fe2:	ea 81       	ldd	r30, Y+2	; 0x02
     fe4:	fb 81       	ldd	r31, Y+3	; 0x03
     fe6:	84 81       	ldd	r24, Z+4	; 0x04
     fe8:	98 2f       	mov	r25, r24
     fea:	98 71       	andi	r25, 0x18	; 24
		{

		}
		else{/* Nothing */}
	}
	return ret_status;
     fec:	89 81       	ldd	r24, Y+1	; 0x01
}
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <Timer0_EnableInt>:




Error_Status_t Timer0_EnableInt(void)
{
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
	// Enable global interrupts
	GIE_Enable();
    1006:	ef e5       	ldi	r30, 0x5F	; 95
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	80 68       	ori	r24, 0x80	; 128
    100e:	80 83       	st	Z, r24
	// Enable timer0 overflow interrupt and compare match interrupt
	TIMER0_CONTROL->TIMSK_CFG.TOIE0_BIT = 1;
    1010:	e2 e5       	ldi	r30, 0x52	; 82
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	87 81       	ldd	r24, Z+7	; 0x07
    1016:	81 60       	ori	r24, 0x01	; 1
    1018:	87 83       	std	Z+7, r24	; 0x07
	TIMER0_CONTROL->TIMSK_CFG.OCIE0_BIT = 1;
    101a:	e2 e5       	ldi	r30, 0x52	; 82
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	87 81       	ldd	r24, Z+7	; 0x07
    1020:	82 60       	ori	r24, 0x02	; 2
    1022:	87 83       	std	Z+7, r24	; 0x07

	return NO_ERROR;
    1024:	80 e0       	ldi	r24, 0x00	; 0
}
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <Timer0_DisableInt>:




Error_Status_t Timer0_DisableInt(void)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
	// Disable timer0 overflow interrupt and compare match interrupt
	GIE_Disable();
    1034:	ef e5       	ldi	r30, 0x5F	; 95
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	8f 77       	andi	r24, 0x7F	; 127
    103c:	80 83       	st	Z, r24
	TIMER0_CONTROL->TIMSK_CFG.OCIE0_BIT = 0;
    103e:	e2 e5       	ldi	r30, 0x52	; 82
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	87 81       	ldd	r24, Z+7	; 0x07
    1044:	8d 7f       	andi	r24, 0xFD	; 253
    1046:	87 83       	std	Z+7, r24	; 0x07

	return NO_ERROR;
    1048:	80 e0       	ldi	r24, 0x00	; 0
}
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	08 95       	ret

00001050 <Timer0_setCallBack>:



Error_Status_t Timer0_setCallBack(const timer0_t *timer0_obj)
{
    1050:	df 93       	push	r29
    1052:	cf 93       	push	r28
    1054:	00 d0       	rcall	.+0      	; 0x1056 <Timer0_setCallBack+0x6>
    1056:	0f 92       	push	r0
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	9b 83       	std	Y+3, r25	; 0x03
    105e:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1060:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	9b 81       	ldd	r25, Y+3	; 0x03
    1066:	00 97       	sbiw	r24, 0x00	; 0
    1068:	19 f4       	brne	.+6      	; 0x1070 <Timer0_setCallBack+0x20>
	{
		ret_status = NULL_POINTER;
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	89 83       	std	Y+1, r24	; 0x01
    106e:	10 c0       	rjmp	.+32     	; 0x1090 <Timer0_setCallBack+0x40>
	}
	else
	{
		Timer0_Over_Flow_isr = timer0_obj->timer0_over_flow_isr;
    1070:	ea 81       	ldd	r30, Y+2	; 0x02
    1072:	fb 81       	ldd	r31, Y+3	; 0x03
    1074:	80 81       	ld	r24, Z
    1076:	91 81       	ldd	r25, Z+1	; 0x01
    1078:	90 93 af 00 	sts	0x00AF, r25
    107c:	80 93 ae 00 	sts	0x00AE, r24
		Timer0_Comp_isr = timer0_obj->timer0_comp_isr;
    1080:	ea 81       	ldd	r30, Y+2	; 0x02
    1082:	fb 81       	ldd	r31, Y+3	; 0x03
    1084:	82 81       	ldd	r24, Z+2	; 0x02
    1086:	93 81       	ldd	r25, Z+3	; 0x03
    1088:	90 93 b1 00 	sts	0x00B1, r25
    108c:	80 93 b0 00 	sts	0x00B0, r24
	}
	return ret_status;
    1090:	89 81       	ldd	r24, Y+1	; 0x01
}
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <Timer0_setFastPWM>:
Error_Status_t Timer0_setFastPWM(const timer0_t *timer0_obj, u8 frequency ,u8 duty)
{
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <Timer0_setFastPWM+0x6>
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <Timer0_setFastPWM+0x8>
    10a6:	0f 92       	push	r0
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	9b 83       	std	Y+3, r25	; 0x03
    10ae:	8a 83       	std	Y+2, r24	; 0x02
    10b0:	6c 83       	std	Y+4, r22	; 0x04
    10b2:	4d 83       	std	Y+5, r20	; 0x05
	Error_Status_t ret_status = NO_ERROR;
    10b4:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	19 f4       	brne	.+6      	; 0x10c4 <Timer0_setFastPWM+0x26>
	{
		ret_status = NULL_POINTER;
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	89 83       	std	Y+1, r24	; 0x01
    10c2:	49 c0       	rjmp	.+146    	; 0x1156 <Timer0_setFastPWM+0xb8>
	}
	else
	{
		if(TIMER0_FAST_PWM_MODE == timer0_obj->mode)
    10c4:	ea 81       	ldd	r30, Y+2	; 0x02
    10c6:	fb 81       	ldd	r31, Y+3	; 0x03
    10c8:	84 81       	ldd	r24, Z+4	; 0x04
    10ca:	88 71       	andi	r24, 0x18	; 24
    10cc:	88 31       	cpi	r24, 0x18	; 24
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <Timer0_setFastPWM+0x34>
    10d0:	42 c0       	rjmp	.+132    	; 0x1156 <Timer0_setFastPWM+0xb8>
		{
			if(TIMER0_FAST_PWM_CLEAR_OC0_ON_COMPARE_MATCH == timer0_obj->ctc_mode_cfg)
    10d2:	ea 81       	ldd	r30, Y+2	; 0x02
    10d4:	fb 81       	ldd	r31, Y+3	; 0x03
    10d6:	84 81       	ldd	r24, Z+4	; 0x04
    10d8:	80 76       	andi	r24, 0x60	; 96
    10da:	80 34       	cpi	r24, 0x40	; 64
    10dc:	d9 f4       	brne	.+54     	; 0x1114 <Timer0_setFastPWM+0x76>
			{
				TIMER0_CONTROL->OCR0_CFG = (duty * 255) / 100;
    10de:	e2 e5       	ldi	r30, 0x52	; 82
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	8d 81       	ldd	r24, Y+5	; 0x05
    10e4:	48 2f       	mov	r20, r24
    10e6:	50 e0       	ldi	r21, 0x00	; 0
    10e8:	ca 01       	movw	r24, r20
    10ea:	9c 01       	movw	r18, r24
    10ec:	22 0f       	add	r18, r18
    10ee:	33 1f       	adc	r19, r19
    10f0:	c9 01       	movw	r24, r18
    10f2:	96 95       	lsr	r25
    10f4:	98 2f       	mov	r25, r24
    10f6:	88 27       	eor	r24, r24
    10f8:	97 95       	ror	r25
    10fa:	87 95       	ror	r24
    10fc:	82 1b       	sub	r24, r18
    10fe:	93 0b       	sbc	r25, r19
    1100:	84 0f       	add	r24, r20
    1102:	95 1f       	adc	r25, r21
    1104:	24 e6       	ldi	r18, 0x64	; 100
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	b9 01       	movw	r22, r18
    110a:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <__divmodhi4>
    110e:	cb 01       	movw	r24, r22
    1110:	82 87       	std	Z+10, r24	; 0x0a
    1112:	21 c0       	rjmp	.+66     	; 0x1156 <Timer0_setFastPWM+0xb8>
			}
			else if(TIMER0_FAST_PWM_SET_OC0_ON_COMPARE_MATCH == timer0_obj->ctc_mode_cfg)
    1114:	ea 81       	ldd	r30, Y+2	; 0x02
    1116:	fb 81       	ldd	r31, Y+3	; 0x03
    1118:	84 81       	ldd	r24, Z+4	; 0x04
    111a:	80 76       	andi	r24, 0x60	; 96
    111c:	80 36       	cpi	r24, 0x60	; 96
    111e:	d9 f4       	brne	.+54     	; 0x1156 <Timer0_setFastPWM+0xb8>
			{
				//TIMER0_CONTROL->TCNT0_CFG =
				TIMER0_CONTROL->OCR0_CFG = 255 - ((duty * 255) / 100);
    1120:	e2 e5       	ldi	r30, 0x52	; 82
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	8d 81       	ldd	r24, Y+5	; 0x05
    1126:	48 2f       	mov	r20, r24
    1128:	50 e0       	ldi	r21, 0x00	; 0
    112a:	ca 01       	movw	r24, r20
    112c:	9c 01       	movw	r18, r24
    112e:	22 0f       	add	r18, r18
    1130:	33 1f       	adc	r19, r19
    1132:	c9 01       	movw	r24, r18
    1134:	96 95       	lsr	r25
    1136:	98 2f       	mov	r25, r24
    1138:	88 27       	eor	r24, r24
    113a:	97 95       	ror	r25
    113c:	87 95       	ror	r24
    113e:	82 1b       	sub	r24, r18
    1140:	93 0b       	sbc	r25, r19
    1142:	84 0f       	add	r24, r20
    1144:	95 1f       	adc	r25, r21
    1146:	24 e6       	ldi	r18, 0x64	; 100
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	b9 01       	movw	r22, r18
    114c:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <__divmodhi4>
    1150:	cb 01       	movw	r24, r22
    1152:	80 95       	com	r24
    1154:	82 87       	std	Z+10, r24	; 0x0a
			}
			else{/* Nothing */}
		}
		else{/* Nothing */}
	}
	return ret_status;
    1156:	89 81       	ldd	r24, Y+1	; 0x01
}
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	cf 91       	pop	r28
    1164:	df 91       	pop	r29
    1166:	08 95       	ret

00001168 <Timer0_setphaseCorrectPWM>:


Error_Status_t Timer0_setphaseCorrectPWM(const timer0_t *timer0_obj, u8 frequency , u8 duty)
{
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	00 d0       	rcall	.+0      	; 0x116e <Timer0_setphaseCorrectPWM+0x6>
    116e:	00 d0       	rcall	.+0      	; 0x1170 <Timer0_setphaseCorrectPWM+0x8>
    1170:	0f 92       	push	r0
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	9b 83       	std	Y+3, r25	; 0x03
    1178:	8a 83       	std	Y+2, r24	; 0x02
    117a:	6c 83       	std	Y+4, r22	; 0x04
    117c:	4d 83       	std	Y+5, r20	; 0x05
	Error_Status_t ret_status = NO_ERROR;
    117e:	19 82       	std	Y+1, r1	; 0x01
		if(NULL == timer0_obj)
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	9b 81       	ldd	r25, Y+3	; 0x03
    1184:	00 97       	sbiw	r24, 0x00	; 0
    1186:	19 f4       	brne	.+6      	; 0x118e <Timer0_setphaseCorrectPWM+0x26>
		{
			ret_status = NULL_POINTER;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	89 83       	std	Y+1, r24	; 0x01
    118c:	48 c0       	rjmp	.+144    	; 0x121e <Timer0_setphaseCorrectPWM+0xb6>
		}
		else
		{
			if(TIMER0_PWM_PHASE_CORRECT_MODE == timer0_obj->mode)
    118e:	ea 81       	ldd	r30, Y+2	; 0x02
    1190:	fb 81       	ldd	r31, Y+3	; 0x03
    1192:	84 81       	ldd	r24, Z+4	; 0x04
    1194:	88 71       	andi	r24, 0x18	; 24
    1196:	88 30       	cpi	r24, 0x08	; 8
    1198:	09 f0       	breq	.+2      	; 0x119c <Timer0_setphaseCorrectPWM+0x34>
    119a:	41 c0       	rjmp	.+130    	; 0x121e <Timer0_setphaseCorrectPWM+0xb6>
			{
				if(TIMER0_PHASE_CORRECT_PWM_CLEAR_OC0_ON_COMPARE_MATCH == timer0_obj->ctc_mode_cfg)
    119c:	ea 81       	ldd	r30, Y+2	; 0x02
    119e:	fb 81       	ldd	r31, Y+3	; 0x03
    11a0:	84 81       	ldd	r24, Z+4	; 0x04
    11a2:	80 76       	andi	r24, 0x60	; 96
    11a4:	80 34       	cpi	r24, 0x40	; 64
    11a6:	c9 f4       	brne	.+50     	; 0x11da <Timer0_setphaseCorrectPWM+0x72>
				{
					TIMER0_CONTROL->OCR0_CFG = (u8)(((u8)(duty * 255) / 100) / 2);
    11a8:	e2 e5       	ldi	r30, 0x52	; 82
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	8d 81       	ldd	r24, Y+5	; 0x05
    11ae:	48 2f       	mov	r20, r24
    11b0:	50 e0       	ldi	r21, 0x00	; 0
    11b2:	ca 01       	movw	r24, r20
    11b4:	9c 01       	movw	r18, r24
    11b6:	22 0f       	add	r18, r18
    11b8:	33 1f       	adc	r19, r19
    11ba:	c9 01       	movw	r24, r18
    11bc:	96 95       	lsr	r25
    11be:	98 2f       	mov	r25, r24
    11c0:	88 27       	eor	r24, r24
    11c2:	97 95       	ror	r25
    11c4:	87 95       	ror	r24
    11c6:	82 1b       	sub	r24, r18
    11c8:	93 0b       	sbc	r25, r19
    11ca:	84 0f       	add	r24, r20
    11cc:	95 1f       	adc	r25, r21
    11ce:	98 ec       	ldi	r25, 0xC8	; 200
    11d0:	69 2f       	mov	r22, r25
    11d2:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__udivmodqi4>
    11d6:	82 87       	std	Z+10, r24	; 0x0a
    11d8:	22 c0       	rjmp	.+68     	; 0x121e <Timer0_setphaseCorrectPWM+0xb6>
				}
				else if(TIMER0_PHASE_CORRECT_PWM_SET_OC0_ON_COMPARE_MATCH == timer0_obj->ctc_mode_cfg)
    11da:	ea 81       	ldd	r30, Y+2	; 0x02
    11dc:	fb 81       	ldd	r31, Y+3	; 0x03
    11de:	84 81       	ldd	r24, Z+4	; 0x04
    11e0:	80 76       	andi	r24, 0x60	; 96
    11e2:	80 36       	cpi	r24, 0x60	; 96
    11e4:	e1 f4       	brne	.+56     	; 0x121e <Timer0_setphaseCorrectPWM+0xb6>
				{
					TIMER0_CONTROL->OCR0_CFG = (u8)(255 - ((u8)((duty * 255) / 100) / 2));
    11e6:	e2 e5       	ldi	r30, 0x52	; 82
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	8d 81       	ldd	r24, Y+5	; 0x05
    11ec:	48 2f       	mov	r20, r24
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	ca 01       	movw	r24, r20
    11f2:	9c 01       	movw	r18, r24
    11f4:	22 0f       	add	r18, r18
    11f6:	33 1f       	adc	r19, r19
    11f8:	c9 01       	movw	r24, r18
    11fa:	96 95       	lsr	r25
    11fc:	98 2f       	mov	r25, r24
    11fe:	88 27       	eor	r24, r24
    1200:	97 95       	ror	r25
    1202:	87 95       	ror	r24
    1204:	82 1b       	sub	r24, r18
    1206:	93 0b       	sbc	r25, r19
    1208:	84 0f       	add	r24, r20
    120a:	95 1f       	adc	r25, r21
    120c:	24 e6       	ldi	r18, 0x64	; 100
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	b9 01       	movw	r22, r18
    1212:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <__divmodhi4>
    1216:	cb 01       	movw	r24, r22
    1218:	86 95       	lsr	r24
    121a:	80 95       	com	r24
    121c:	82 87       	std	Z+10, r24	; 0x0a
				}
				else{/* Nothing */}
			}
			else{/* Nothing */}
		}
		return ret_status;
    121e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <__vector_11>:
/* ------------------------------------------------ Timer0 ISRs -------------------------------*/

// Define the ISR function with attribute
void TIMER0_OVF_VECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER0_OVF_VECTOR(void)
{
    1230:	1f 92       	push	r1
    1232:	0f 92       	push	r0
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	0f 92       	push	r0
    1238:	11 24       	eor	r1, r1
    123a:	2f 93       	push	r18
    123c:	3f 93       	push	r19
    123e:	4f 93       	push	r20
    1240:	5f 93       	push	r21
    1242:	6f 93       	push	r22
    1244:	7f 93       	push	r23
    1246:	8f 93       	push	r24
    1248:	9f 93       	push	r25
    124a:	af 93       	push	r26
    124c:	bf 93       	push	r27
    124e:	ef 93       	push	r30
    1250:	ff 93       	push	r31
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	TIMER0_CONTROL->TIFR_CFG.TOF0_BIT = 0;
    125a:	e2 e5       	ldi	r30, 0x52	; 82
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	86 81       	ldd	r24, Z+6	; 0x06
    1260:	8e 7f       	andi	r24, 0xFE	; 254
    1262:	86 83       	std	Z+6, r24	; 0x06

	// execute ISR if it existed
	if(Timer0_Over_Flow_isr)
    1264:	80 91 ae 00 	lds	r24, 0x00AE
    1268:	90 91 af 00 	lds	r25, 0x00AF
    126c:	00 97       	sbiw	r24, 0x00	; 0
    126e:	29 f0       	breq	.+10     	; 0x127a <__vector_11+0x4a>
	{
		Timer0_Over_Flow_isr();
    1270:	e0 91 ae 00 	lds	r30, 0x00AE
    1274:	f0 91 af 00 	lds	r31, 0x00AF
    1278:	09 95       	icall
	}
}
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	ff 91       	pop	r31
    1280:	ef 91       	pop	r30
    1282:	bf 91       	pop	r27
    1284:	af 91       	pop	r26
    1286:	9f 91       	pop	r25
    1288:	8f 91       	pop	r24
    128a:	7f 91       	pop	r23
    128c:	6f 91       	pop	r22
    128e:	5f 91       	pop	r21
    1290:	4f 91       	pop	r20
    1292:	3f 91       	pop	r19
    1294:	2f 91       	pop	r18
    1296:	0f 90       	pop	r0
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	0f 90       	pop	r0
    129c:	1f 90       	pop	r1
    129e:	18 95       	reti

000012a0 <__vector_10>:


// Define the ISR function with attribute
void TIMER0_COMPA_VECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER0_COMPA_VECTOR(void)
{
    12a0:	1f 92       	push	r1
    12a2:	0f 92       	push	r0
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	0f 92       	push	r0
    12a8:	11 24       	eor	r1, r1
    12aa:	2f 93       	push	r18
    12ac:	3f 93       	push	r19
    12ae:	4f 93       	push	r20
    12b0:	5f 93       	push	r21
    12b2:	6f 93       	push	r22
    12b4:	7f 93       	push	r23
    12b6:	8f 93       	push	r24
    12b8:	9f 93       	push	r25
    12ba:	af 93       	push	r26
    12bc:	bf 93       	push	r27
    12be:	ef 93       	push	r30
    12c0:	ff 93       	push	r31
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
	// clear flag
	TIMER0_CONTROL->TIFR_CFG.OCF0_BIT = 0;
    12ca:	e2 e5       	ldi	r30, 0x52	; 82
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	86 81       	ldd	r24, Z+6	; 0x06
    12d0:	8d 7f       	andi	r24, 0xFD	; 253
    12d2:	86 83       	std	Z+6, r24	; 0x06

	// execute ISR if it existed
	if(Timer0_Comp_isr)
    12d4:	80 91 b0 00 	lds	r24, 0x00B0
    12d8:	90 91 b1 00 	lds	r25, 0x00B1
    12dc:	00 97       	sbiw	r24, 0x00	; 0
    12de:	29 f0       	breq	.+10     	; 0x12ea <__vector_10+0x4a>
	{
			Timer0_Comp_isr();
    12e0:	e0 91 b0 00 	lds	r30, 0x00B0
    12e4:	f0 91 b1 00 	lds	r31, 0x00B1
    12e8:	09 95       	icall
	}
}
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	ff 91       	pop	r31
    12f0:	ef 91       	pop	r30
    12f2:	bf 91       	pop	r27
    12f4:	af 91       	pop	r26
    12f6:	9f 91       	pop	r25
    12f8:	8f 91       	pop	r24
    12fa:	7f 91       	pop	r23
    12fc:	6f 91       	pop	r22
    12fe:	5f 91       	pop	r21
    1300:	4f 91       	pop	r20
    1302:	3f 91       	pop	r19
    1304:	2f 91       	pop	r18
    1306:	0f 90       	pop	r0
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	0f 90       	pop	r0
    130c:	1f 90       	pop	r1
    130e:	18 95       	reti

00001310 <M_EXTI_voidEnable>:
void (*INT0_ISR)(void) = NULL;
void (*INT1_ISR)(void) = NULL;
void (*INT2_ISR)(void) = NULL;

Error_Status_t M_EXTI_voidEnable(const EXT_INTERRUPT_T *exti_obj)
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	00 d0       	rcall	.+0      	; 0x1316 <M_EXTI_voidEnable+0x6>
    1316:	00 d0       	rcall	.+0      	; 0x1318 <M_EXTI_voidEnable+0x8>
    1318:	0f 92       	push	r0
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	9b 83       	std	Y+3, r25	; 0x03
    1320:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1322:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == exti_obj)
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	9b 81       	ldd	r25, Y+3	; 0x03
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	19 f4       	brne	.+6      	; 0x1332 <M_EXTI_voidEnable+0x22>
	{
		ret_status = NULL_POINTER;
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	89 83       	std	Y+1, r24	; 0x01
    1330:	69 c0       	rjmp	.+210    	; 0x1404 <M_EXTI_voidEnable+0xf4>
	}
	else
	{
		GIE_Enable();
    1332:	ef e5       	ldi	r30, 0x5F	; 95
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	80 68       	ori	r24, 0x80	; 128
    133a:	80 83       	st	Z, r24
		switch (exti_obj->INTx_select) {
    133c:	ea 81       	ldd	r30, Y+2	; 0x02
    133e:	fb 81       	ldd	r31, Y+3	; 0x03
    1340:	82 81       	ldd	r24, Z+2	; 0x02
    1342:	83 70       	andi	r24, 0x03	; 3
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	3d 83       	std	Y+5, r19	; 0x05
    134a:	2c 83       	std	Y+4, r18	; 0x04
    134c:	8c 81       	ldd	r24, Y+4	; 0x04
    134e:	9d 81       	ldd	r25, Y+5	; 0x05
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	91 05       	cpc	r25, r1
    1354:	11 f1       	breq	.+68     	; 0x139a <M_EXTI_voidEnable+0x8a>
    1356:	2c 81       	ldd	r18, Y+4	; 0x04
    1358:	3d 81       	ldd	r19, Y+5	; 0x05
    135a:	22 30       	cpi	r18, 0x02	; 2
    135c:	31 05       	cpc	r19, r1
    135e:	b9 f1       	breq	.+110    	; 0x13ce <M_EXTI_voidEnable+0xbe>
    1360:	8c 81       	ldd	r24, Y+4	; 0x04
    1362:	9d 81       	ldd	r25, Y+5	; 0x05
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	09 f0       	breq	.+2      	; 0x136a <M_EXTI_voidEnable+0x5a>
    1368:	4b c0       	rjmp	.+150    	; 0x1400 <M_EXTI_voidEnable+0xf0>
			case EXTI_INT0_ID:
				EXT_INT_CONTROL->GICR_CFG.INT0_BIT = EXTI0_ENABLE;
    136a:	e4 e5       	ldi	r30, 0x54	; 84
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	87 81       	ldd	r24, Z+7	; 0x07
    1370:	80 64       	ori	r24, 0x40	; 64
    1372:	87 83       	std	Z+7, r24	; 0x07
				EXT_INT_CONTROL->MCUCR_CFG.ISC0_BITS = exti_obj->INTx_sense;
    1374:	a4 e5       	ldi	r26, 0x54	; 84
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	ea 81       	ldd	r30, Y+2	; 0x02
    137a:	fb 81       	ldd	r31, Y+3	; 0x03
    137c:	82 81       	ldd	r24, Z+2	; 0x02
    137e:	86 95       	lsr	r24
    1380:	86 95       	lsr	r24
    1382:	83 70       	andi	r24, 0x03	; 3
    1384:	98 2f       	mov	r25, r24
    1386:	93 70       	andi	r25, 0x03	; 3
    1388:	11 96       	adiw	r26, 0x01	; 1
    138a:	8c 91       	ld	r24, X
    138c:	11 97       	sbiw	r26, 0x01	; 1
    138e:	8c 7f       	andi	r24, 0xFC	; 252
    1390:	89 2b       	or	r24, r25
    1392:	11 96       	adiw	r26, 0x01	; 1
    1394:	8c 93       	st	X, r24
    1396:	11 97       	sbiw	r26, 0x01	; 1
    1398:	35 c0       	rjmp	.+106    	; 0x1404 <M_EXTI_voidEnable+0xf4>
				break;
			case EXTI_INT1_ID:
				EXT_INT_CONTROL->GICR_CFG.INT1_BIT = EXTI1_ENABLE;
    139a:	e4 e5       	ldi	r30, 0x54	; 84
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	87 81       	ldd	r24, Z+7	; 0x07
    13a0:	80 68       	ori	r24, 0x80	; 128
    13a2:	87 83       	std	Z+7, r24	; 0x07
				EXT_INT_CONTROL->MCUCR_CFG.ISC1_BITS = exti_obj->INTx_sense;
    13a4:	a4 e5       	ldi	r26, 0x54	; 84
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	ea 81       	ldd	r30, Y+2	; 0x02
    13aa:	fb 81       	ldd	r31, Y+3	; 0x03
    13ac:	82 81       	ldd	r24, Z+2	; 0x02
    13ae:	86 95       	lsr	r24
    13b0:	86 95       	lsr	r24
    13b2:	83 70       	andi	r24, 0x03	; 3
    13b4:	83 70       	andi	r24, 0x03	; 3
    13b6:	98 2f       	mov	r25, r24
    13b8:	99 0f       	add	r25, r25
    13ba:	99 0f       	add	r25, r25
    13bc:	11 96       	adiw	r26, 0x01	; 1
    13be:	8c 91       	ld	r24, X
    13c0:	11 97       	sbiw	r26, 0x01	; 1
    13c2:	83 7f       	andi	r24, 0xF3	; 243
    13c4:	89 2b       	or	r24, r25
    13c6:	11 96       	adiw	r26, 0x01	; 1
    13c8:	8c 93       	st	X, r24
    13ca:	11 97       	sbiw	r26, 0x01	; 1
    13cc:	1b c0       	rjmp	.+54     	; 0x1404 <M_EXTI_voidEnable+0xf4>
				break;
			case EXTI_INT2_ID:
				EXT_INT_CONTROL->GICR_CFG.INT2_BIT = EXTI2_ENABLE;
    13ce:	e4 e5       	ldi	r30, 0x54	; 84
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	87 81       	ldd	r24, Z+7	; 0x07
    13d4:	80 62       	ori	r24, 0x20	; 32
    13d6:	87 83       	std	Z+7, r24	; 0x07
				EXT_INT_CONTROL->MCUCSR_CFG.ISC2_BIT = exti_obj->INTx_sense;
    13d8:	a4 e5       	ldi	r26, 0x54	; 84
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	ea 81       	ldd	r30, Y+2	; 0x02
    13de:	fb 81       	ldd	r31, Y+3	; 0x03
    13e0:	82 81       	ldd	r24, Z+2	; 0x02
    13e2:	86 95       	lsr	r24
    13e4:	86 95       	lsr	r24
    13e6:	83 70       	andi	r24, 0x03	; 3
    13e8:	81 70       	andi	r24, 0x01	; 1
    13ea:	81 70       	andi	r24, 0x01	; 1
    13ec:	98 2f       	mov	r25, r24
    13ee:	92 95       	swap	r25
    13f0:	99 0f       	add	r25, r25
    13f2:	99 0f       	add	r25, r25
    13f4:	90 7c       	andi	r25, 0xC0	; 192
    13f6:	8c 91       	ld	r24, X
    13f8:	8f 7b       	andi	r24, 0xBF	; 191
    13fa:	89 2b       	or	r24, r25
    13fc:	8c 93       	st	X, r24
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <M_EXTI_voidEnable+0xf4>
				break;
			default:
				ret_status = OUT_OF_RANGE_VALUE;
    1400:	82 e0       	ldi	r24, 0x02	; 2
    1402:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}
	return ret_status;
    1404:	89 81       	ldd	r24, Y+1	; 0x01
}
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <M_EXTI_voidDisable>:
Error_Status_t M_EXTI_voidDisable(const EXT_INTERRUPT_T *exti_obj)
{
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	00 d0       	rcall	.+0      	; 0x141c <M_EXTI_voidDisable+0x6>
    141c:	00 d0       	rcall	.+0      	; 0x141e <M_EXTI_voidDisable+0x8>
    141e:	0f 92       	push	r0
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	9b 83       	std	Y+3, r25	; 0x03
    1426:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1428:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == exti_obj)
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	9b 81       	ldd	r25, Y+3	; 0x03
    142e:	00 97       	sbiw	r24, 0x00	; 0
    1430:	19 f4       	brne	.+6      	; 0x1438 <M_EXTI_voidDisable+0x22>
	{
		ret_status = NULL_POINTER;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	89 83       	std	Y+1, r24	; 0x01
    1436:	2f c0       	rjmp	.+94     	; 0x1496 <M_EXTI_voidDisable+0x80>
	}
	else
	{
		GIE_Disable();
    1438:	ef e5       	ldi	r30, 0x5F	; 95
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	8f 77       	andi	r24, 0x7F	; 127
    1440:	80 83       	st	Z, r24
		switch (exti_obj->INTx_select) {
    1442:	ea 81       	ldd	r30, Y+2	; 0x02
    1444:	fb 81       	ldd	r31, Y+3	; 0x03
    1446:	82 81       	ldd	r24, Z+2	; 0x02
    1448:	83 70       	andi	r24, 0x03	; 3
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	3d 83       	std	Y+5, r19	; 0x05
    1450:	2c 83       	std	Y+4, r18	; 0x04
    1452:	8c 81       	ldd	r24, Y+4	; 0x04
    1454:	9d 81       	ldd	r25, Y+5	; 0x05
    1456:	81 30       	cpi	r24, 0x01	; 1
    1458:	91 05       	cpc	r25, r1
    145a:	79 f0       	breq	.+30     	; 0x147a <M_EXTI_voidDisable+0x64>
    145c:	2c 81       	ldd	r18, Y+4	; 0x04
    145e:	3d 81       	ldd	r19, Y+5	; 0x05
    1460:	22 30       	cpi	r18, 0x02	; 2
    1462:	31 05       	cpc	r19, r1
    1464:	81 f0       	breq	.+32     	; 0x1486 <M_EXTI_voidDisable+0x70>
    1466:	8c 81       	ldd	r24, Y+4	; 0x04
    1468:	9d 81       	ldd	r25, Y+5	; 0x05
    146a:	00 97       	sbiw	r24, 0x00	; 0
    146c:	91 f4       	brne	.+36     	; 0x1492 <M_EXTI_voidDisable+0x7c>
			case EXTI_INT0_ID:
				EXT_INT_CONTROL->GICR_CFG.INT0_BIT = EXTI0_DISABLE;
    146e:	e4 e5       	ldi	r30, 0x54	; 84
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	87 81       	ldd	r24, Z+7	; 0x07
    1474:	8f 7b       	andi	r24, 0xBF	; 191
    1476:	87 83       	std	Z+7, r24	; 0x07
    1478:	0e c0       	rjmp	.+28     	; 0x1496 <M_EXTI_voidDisable+0x80>
				break;
			case EXTI_INT1_ID:
				EXT_INT_CONTROL->GICR_CFG.INT1_BIT = EXTI1_DISABLE;
    147a:	e4 e5       	ldi	r30, 0x54	; 84
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	87 81       	ldd	r24, Z+7	; 0x07
    1480:	8f 77       	andi	r24, 0x7F	; 127
    1482:	87 83       	std	Z+7, r24	; 0x07
    1484:	08 c0       	rjmp	.+16     	; 0x1496 <M_EXTI_voidDisable+0x80>
				break;
			case EXTI_INT2_ID:
				EXT_INT_CONTROL->GICR_CFG.INT2_BIT = EXTI2_DISABLE;
    1486:	e4 e5       	ldi	r30, 0x54	; 84
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	87 81       	ldd	r24, Z+7	; 0x07
    148c:	8f 7d       	andi	r24, 0xDF	; 223
    148e:	87 83       	std	Z+7, r24	; 0x07
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <M_EXTI_voidDisable+0x80>
				break;
			default:
				ret_status = OUT_OF_RANGE_VALUE;
    1492:	82 e0       	ldi	r24, 0x02	; 2
    1494:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}
	return ret_status;
    1496:	89 81       	ldd	r24, Y+1	; 0x01
}
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	08 95       	ret

000014a8 <M_EXTI_voidSet_CallBack>:
Error_Status_t M_EXTI_voidSet_CallBack(const EXT_INTERRUPT_T *exti_obj)
{
    14a8:	df 93       	push	r29
    14aa:	cf 93       	push	r28
    14ac:	00 d0       	rcall	.+0      	; 0x14ae <M_EXTI_voidSet_CallBack+0x6>
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <M_EXTI_voidSet_CallBack+0x8>
    14b0:	0f 92       	push	r0
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	9b 83       	std	Y+3, r25	; 0x03
    14b8:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    14ba:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == exti_obj)
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	9b 81       	ldd	r25, Y+3	; 0x03
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	19 f4       	brne	.+6      	; 0x14ca <M_EXTI_voidSet_CallBack+0x22>
	{
		ret_status = NULL_POINTER;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	33 c0       	rjmp	.+102    	; 0x1530 <M_EXTI_voidSet_CallBack+0x88>
	}
	else
	{
		switch (exti_obj->INTx_select) {
    14ca:	ea 81       	ldd	r30, Y+2	; 0x02
    14cc:	fb 81       	ldd	r31, Y+3	; 0x03
    14ce:	82 81       	ldd	r24, Z+2	; 0x02
    14d0:	83 70       	andi	r24, 0x03	; 3
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	3d 83       	std	Y+5, r19	; 0x05
    14d8:	2c 83       	std	Y+4, r18	; 0x04
    14da:	8c 81       	ldd	r24, Y+4	; 0x04
    14dc:	9d 81       	ldd	r25, Y+5	; 0x05
    14de:	81 30       	cpi	r24, 0x01	; 1
    14e0:	91 05       	cpc	r25, r1
    14e2:	91 f0       	breq	.+36     	; 0x1508 <M_EXTI_voidSet_CallBack+0x60>
    14e4:	2c 81       	ldd	r18, Y+4	; 0x04
    14e6:	3d 81       	ldd	r19, Y+5	; 0x05
    14e8:	22 30       	cpi	r18, 0x02	; 2
    14ea:	31 05       	cpc	r19, r1
    14ec:	b1 f0       	breq	.+44     	; 0x151a <M_EXTI_voidSet_CallBack+0x72>
    14ee:	8c 81       	ldd	r24, Y+4	; 0x04
    14f0:	9d 81       	ldd	r25, Y+5	; 0x05
    14f2:	00 97       	sbiw	r24, 0x00	; 0
    14f4:	d9 f4       	brne	.+54     	; 0x152c <M_EXTI_voidSet_CallBack+0x84>
			case EXTI_INT0_ID:
				INT0_ISR = exti_obj->EXT_INT_ISR;
    14f6:	ea 81       	ldd	r30, Y+2	; 0x02
    14f8:	fb 81       	ldd	r31, Y+3	; 0x03
    14fa:	80 81       	ld	r24, Z
    14fc:	91 81       	ldd	r25, Z+1	; 0x01
    14fe:	90 93 b3 00 	sts	0x00B3, r25
    1502:	80 93 b2 00 	sts	0x00B2, r24
    1506:	14 c0       	rjmp	.+40     	; 0x1530 <M_EXTI_voidSet_CallBack+0x88>
				break;
			case EXTI_INT1_ID:
				INT1_ISR = exti_obj->EXT_INT_ISR;
    1508:	ea 81       	ldd	r30, Y+2	; 0x02
    150a:	fb 81       	ldd	r31, Y+3	; 0x03
    150c:	80 81       	ld	r24, Z
    150e:	91 81       	ldd	r25, Z+1	; 0x01
    1510:	90 93 b5 00 	sts	0x00B5, r25
    1514:	80 93 b4 00 	sts	0x00B4, r24
    1518:	0b c0       	rjmp	.+22     	; 0x1530 <M_EXTI_voidSet_CallBack+0x88>
				break;
			case EXTI_INT2_ID:
				INT2_ISR = exti_obj->EXT_INT_ISR;
    151a:	ea 81       	ldd	r30, Y+2	; 0x02
    151c:	fb 81       	ldd	r31, Y+3	; 0x03
    151e:	80 81       	ld	r24, Z
    1520:	91 81       	ldd	r25, Z+1	; 0x01
    1522:	90 93 b7 00 	sts	0x00B7, r25
    1526:	80 93 b6 00 	sts	0x00B6, r24
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <M_EXTI_voidSet_CallBack+0x88>
				break;
			default:
				ret_status = OUT_OF_RANGE_VALUE;
    152c:	82 e0       	ldi	r24, 0x02	; 2
    152e:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}
	return ret_status;
    1530:	89 81       	ldd	r24, Y+1	; 0x01
}
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	08 95       	ret

00001542 <__vector_1>:

/* ----------------------------------------- External Interrupt ISRs -------------------------- */
// Define the ISR function with attribute
void INT0_VECTOR(void) __attribute__((signal));
void INT0_VECTOR(void)
{
    1542:	1f 92       	push	r1
    1544:	0f 92       	push	r0
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	0f 92       	push	r0
    154a:	11 24       	eor	r1, r1
    154c:	2f 93       	push	r18
    154e:	3f 93       	push	r19
    1550:	4f 93       	push	r20
    1552:	5f 93       	push	r21
    1554:	6f 93       	push	r22
    1556:	7f 93       	push	r23
    1558:	8f 93       	push	r24
    155a:	9f 93       	push	r25
    155c:	af 93       	push	r26
    155e:	bf 93       	push	r27
    1560:	ef 93       	push	r30
    1562:	ff 93       	push	r31
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	EXT_INT_CONTROL->GIFR_CFG.INTF0_BIT = 0;
    156c:	e4 e5       	ldi	r30, 0x54	; 84
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	86 81       	ldd	r24, Z+6	; 0x06
    1572:	8f 7b       	andi	r24, 0xBF	; 191
    1574:	86 83       	std	Z+6, r24	; 0x06
	// execute ISR if it existed
	if(INT0_ISR)
    1576:	80 91 b2 00 	lds	r24, 0x00B2
    157a:	90 91 b3 00 	lds	r25, 0x00B3
    157e:	00 97       	sbiw	r24, 0x00	; 0
    1580:	29 f0       	breq	.+10     	; 0x158c <__vector_1+0x4a>
	{
		INT0_ISR();
    1582:	e0 91 b2 00 	lds	r30, 0x00B2
    1586:	f0 91 b3 00 	lds	r31, 0x00B3
    158a:	09 95       	icall
	}
}
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	ff 91       	pop	r31
    1592:	ef 91       	pop	r30
    1594:	bf 91       	pop	r27
    1596:	af 91       	pop	r26
    1598:	9f 91       	pop	r25
    159a:	8f 91       	pop	r24
    159c:	7f 91       	pop	r23
    159e:	6f 91       	pop	r22
    15a0:	5f 91       	pop	r21
    15a2:	4f 91       	pop	r20
    15a4:	3f 91       	pop	r19
    15a6:	2f 91       	pop	r18
    15a8:	0f 90       	pop	r0
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	0f 90       	pop	r0
    15ae:	1f 90       	pop	r1
    15b0:	18 95       	reti

000015b2 <__vector_2>:


// Define the ISR function with attribute
void INT1_VECTOR(void) __attribute__((signal));
void INT1_VECTOR(void)
{
    15b2:	1f 92       	push	r1
    15b4:	0f 92       	push	r0
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	0f 92       	push	r0
    15ba:	11 24       	eor	r1, r1
    15bc:	2f 93       	push	r18
    15be:	3f 93       	push	r19
    15c0:	4f 93       	push	r20
    15c2:	5f 93       	push	r21
    15c4:	6f 93       	push	r22
    15c6:	7f 93       	push	r23
    15c8:	8f 93       	push	r24
    15ca:	9f 93       	push	r25
    15cc:	af 93       	push	r26
    15ce:	bf 93       	push	r27
    15d0:	ef 93       	push	r30
    15d2:	ff 93       	push	r31
    15d4:	df 93       	push	r29
    15d6:	cf 93       	push	r28
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
	// clear flag
	EXT_INT_CONTROL->GIFR_CFG.INTF1_BIT = 0;
    15dc:	e4 e5       	ldi	r30, 0x54	; 84
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	86 81       	ldd	r24, Z+6	; 0x06
    15e2:	8f 77       	andi	r24, 0x7F	; 127
    15e4:	86 83       	std	Z+6, r24	; 0x06
	// execute ISR if it existed
	if(INT1_ISR)
    15e6:	80 91 b4 00 	lds	r24, 0x00B4
    15ea:	90 91 b5 00 	lds	r25, 0x00B5
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	29 f0       	breq	.+10     	; 0x15fc <__vector_2+0x4a>
	{
		INT1_ISR();
    15f2:	e0 91 b4 00 	lds	r30, 0x00B4
    15f6:	f0 91 b5 00 	lds	r31, 0x00B5
    15fa:	09 95       	icall
	}
}
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	ff 91       	pop	r31
    1602:	ef 91       	pop	r30
    1604:	bf 91       	pop	r27
    1606:	af 91       	pop	r26
    1608:	9f 91       	pop	r25
    160a:	8f 91       	pop	r24
    160c:	7f 91       	pop	r23
    160e:	6f 91       	pop	r22
    1610:	5f 91       	pop	r21
    1612:	4f 91       	pop	r20
    1614:	3f 91       	pop	r19
    1616:	2f 91       	pop	r18
    1618:	0f 90       	pop	r0
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	0f 90       	pop	r0
    161e:	1f 90       	pop	r1
    1620:	18 95       	reti

00001622 <__vector_3>:


// Define the ISR function with attribute
void INT2_VECTOR(void) __attribute__((signal));
void INT2_VECTOR(void)
{
    1622:	1f 92       	push	r1
    1624:	0f 92       	push	r0
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	0f 92       	push	r0
    162a:	11 24       	eor	r1, r1
    162c:	2f 93       	push	r18
    162e:	3f 93       	push	r19
    1630:	4f 93       	push	r20
    1632:	5f 93       	push	r21
    1634:	6f 93       	push	r22
    1636:	7f 93       	push	r23
    1638:	8f 93       	push	r24
    163a:	9f 93       	push	r25
    163c:	af 93       	push	r26
    163e:	bf 93       	push	r27
    1640:	ef 93       	push	r30
    1642:	ff 93       	push	r31
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
	// clear flag
	EXT_INT_CONTROL->GIFR_CFG.INTF2_BIT = 1;
    164c:	e4 e5       	ldi	r30, 0x54	; 84
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	86 81       	ldd	r24, Z+6	; 0x06
    1652:	80 62       	ori	r24, 0x20	; 32
    1654:	86 83       	std	Z+6, r24	; 0x06
	// execute ISR if it existed
	if(INT2_ISR)
    1656:	80 91 b6 00 	lds	r24, 0x00B6
    165a:	90 91 b7 00 	lds	r25, 0x00B7
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	29 f0       	breq	.+10     	; 0x166c <__vector_3+0x4a>
	{
		INT2_ISR();
    1662:	e0 91 b6 00 	lds	r30, 0x00B6
    1666:	f0 91 b7 00 	lds	r31, 0x00B7
    166a:	09 95       	icall
	}
}
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	ff 91       	pop	r31
    1672:	ef 91       	pop	r30
    1674:	bf 91       	pop	r27
    1676:	af 91       	pop	r26
    1678:	9f 91       	pop	r25
    167a:	8f 91       	pop	r24
    167c:	7f 91       	pop	r23
    167e:	6f 91       	pop	r22
    1680:	5f 91       	pop	r21
    1682:	4f 91       	pop	r20
    1684:	3f 91       	pop	r19
    1686:	2f 91       	pop	r18
    1688:	0f 90       	pop	r0
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	0f 90       	pop	r0
    168e:	1f 90       	pop	r1
    1690:	18 95       	reti

00001692 <DIO_voidSetPinDirection>:

volatile DIO_t *Ports_index[NUM_PORTS] = {GPIO_PINS_A, GPIO_PINS_B, GPIO_PINS_C, GPIO_PINS_D};


void DIO_voidSetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId,  u8 Copy_u8Direction)
{
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	00 d0       	rcall	.+0      	; 0x1698 <DIO_voidSetPinDirection+0x6>
    1698:	00 d0       	rcall	.+0      	; 0x169a <DIO_voidSetPinDirection+0x8>
    169a:	0f 92       	push	r0
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    16a0:	89 83       	std	Y+1, r24	; 0x01
    16a2:	6a 83       	std	Y+2, r22	; 0x02
    16a4:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_u8PortId <= NUM_PORTS-1) && Copy_u8PinId <= NUM_PINS-1)
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	84 30       	cpi	r24, 0x04	; 4
    16aa:	08 f0       	brcs	.+2      	; 0x16ae <DIO_voidSetPinDirection+0x1c>
    16ac:	61 c0       	rjmp	.+194    	; 0x1770 <DIO_voidSetPinDirection+0xde>
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	88 30       	cpi	r24, 0x08	; 8
    16b2:	08 f0       	brcs	.+2      	; 0x16b6 <DIO_voidSetPinDirection+0x24>
    16b4:	5d c0       	rjmp	.+186    	; 0x1770 <DIO_voidSetPinDirection+0xde>
	{
		switch(Copy_u8Direction){
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	3d 83       	std	Y+5, r19	; 0x05
    16be:	2c 83       	std	Y+4, r18	; 0x04
    16c0:	8c 81       	ldd	r24, Y+4	; 0x04
    16c2:	9d 81       	ldd	r25, Y+5	; 0x05
    16c4:	00 97       	sbiw	r24, 0x00	; 0
    16c6:	69 f1       	breq	.+90     	; 0x1722 <DIO_voidSetPinDirection+0x90>
    16c8:	2c 81       	ldd	r18, Y+4	; 0x04
    16ca:	3d 81       	ldd	r19, Y+5	; 0x05
    16cc:	21 30       	cpi	r18, 0x01	; 1
    16ce:	31 05       	cpc	r19, r1
    16d0:	09 f0       	breq	.+2      	; 0x16d4 <DIO_voidSetPinDirection+0x42>
    16d2:	4e c0       	rjmp	.+156    	; 0x1770 <DIO_voidSetPinDirection+0xde>
			case(GPIO_DIRECTION_OUTPUT):
				SET_BIT(Ports_index[Copy_u8PortId]->DDRx, Copy_u8PinId);
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	88 2f       	mov	r24, r24
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	fc 01       	movw	r30, r24
    16e0:	e5 59       	subi	r30, 0x95	; 149
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	a0 81       	ld	r26, Z
    16e6:	b1 81       	ldd	r27, Z+1	; 0x01
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	88 2f       	mov	r24, r24
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	fc 01       	movw	r30, r24
    16f4:	e5 59       	subi	r30, 0x95	; 149
    16f6:	ff 4f       	sbci	r31, 0xFF	; 255
    16f8:	01 90       	ld	r0, Z+
    16fa:	f0 81       	ld	r31, Z
    16fc:	e0 2d       	mov	r30, r0
    16fe:	81 81       	ldd	r24, Z+1	; 0x01
    1700:	48 2f       	mov	r20, r24
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	02 2e       	mov	r0, r18
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <DIO_voidSetPinDirection+0x82>
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	0a 94       	dec	r0
    1716:	e2 f7       	brpl	.-8      	; 0x1710 <DIO_voidSetPinDirection+0x7e>
    1718:	84 2b       	or	r24, r20
    171a:	11 96       	adiw	r26, 0x01	; 1
    171c:	8c 93       	st	X, r24
    171e:	11 97       	sbiw	r26, 0x01	; 1
    1720:	27 c0       	rjmp	.+78     	; 0x1770 <DIO_voidSetPinDirection+0xde>
			break;
			case(GPIO_DIRECTION_INPUT):
				CLEAR_BIT(Ports_index[Copy_u8PortId]->DDRx, Copy_u8PinId);
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	88 2f       	mov	r24, r24
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	fc 01       	movw	r30, r24
    172e:	e5 59       	subi	r30, 0x95	; 149
    1730:	ff 4f       	sbci	r31, 0xFF	; 255
    1732:	a0 81       	ld	r26, Z
    1734:	b1 81       	ldd	r27, Z+1	; 0x01
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	88 2f       	mov	r24, r24
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	fc 01       	movw	r30, r24
    1742:	e5 59       	subi	r30, 0x95	; 149
    1744:	ff 4f       	sbci	r31, 0xFF	; 255
    1746:	01 90       	ld	r0, Z+
    1748:	f0 81       	ld	r31, Z
    174a:	e0 2d       	mov	r30, r0
    174c:	81 81       	ldd	r24, Z+1	; 0x01
    174e:	48 2f       	mov	r20, r24
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	28 2f       	mov	r18, r24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	02 2e       	mov	r0, r18
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <DIO_voidSetPinDirection+0xd0>
    175e:	88 0f       	add	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	0a 94       	dec	r0
    1764:	e2 f7       	brpl	.-8      	; 0x175e <DIO_voidSetPinDirection+0xcc>
    1766:	80 95       	com	r24
    1768:	84 23       	and	r24, r20
    176a:	11 96       	adiw	r26, 0x01	; 1
    176c:	8c 93       	st	X, r24
    176e:	11 97       	sbiw	r26, 0x01	; 1
			break;
		}
	}
	else{/* Nothing */}
}
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	cf 91       	pop	r28
    177c:	df 91       	pop	r29
    177e:	08 95       	ret

00001780 <DIO_voidSetPinValue>:


void DIO_voidSetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8Value)
{
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	00 d0       	rcall	.+0      	; 0x1786 <DIO_voidSetPinValue+0x6>
    1786:	00 d0       	rcall	.+0      	; 0x1788 <DIO_voidSetPinValue+0x8>
    1788:	0f 92       	push	r0
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
    178e:	89 83       	std	Y+1, r24	; 0x01
    1790:	6a 83       	std	Y+2, r22	; 0x02
    1792:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_u8PortId <= NUM_PORTS-1) && (Copy_u8PinId <= NUM_PINS-1))
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	84 30       	cpi	r24, 0x04	; 4
    1798:	08 f0       	brcs	.+2      	; 0x179c <DIO_voidSetPinValue+0x1c>
    179a:	61 c0       	rjmp	.+194    	; 0x185e <DIO_voidSetPinValue+0xde>
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	88 30       	cpi	r24, 0x08	; 8
    17a0:	08 f0       	brcs	.+2      	; 0x17a4 <DIO_voidSetPinValue+0x24>
    17a2:	5d c0       	rjmp	.+186    	; 0x185e <DIO_voidSetPinValue+0xde>
	{
		switch(Copy_u8Value){
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	3d 83       	std	Y+5, r19	; 0x05
    17ac:	2c 83       	std	Y+4, r18	; 0x04
    17ae:	8c 81       	ldd	r24, Y+4	; 0x04
    17b0:	9d 81       	ldd	r25, Y+5	; 0x05
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	69 f1       	breq	.+90     	; 0x1810 <DIO_voidSetPinValue+0x90>
    17b6:	2c 81       	ldd	r18, Y+4	; 0x04
    17b8:	3d 81       	ldd	r19, Y+5	; 0x05
    17ba:	21 30       	cpi	r18, 0x01	; 1
    17bc:	31 05       	cpc	r19, r1
    17be:	09 f0       	breq	.+2      	; 0x17c2 <DIO_voidSetPinValue+0x42>
    17c0:	4e c0       	rjmp	.+156    	; 0x185e <DIO_voidSetPinValue+0xde>
		case(GPIO_HIGH):
		SET_BIT(Ports_index[Copy_u8PortId]->PORTx, Copy_u8PinId);
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	88 2f       	mov	r24, r24
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	fc 01       	movw	r30, r24
    17ce:	e5 59       	subi	r30, 0x95	; 149
    17d0:	ff 4f       	sbci	r31, 0xFF	; 255
    17d2:	a0 81       	ld	r26, Z
    17d4:	b1 81       	ldd	r27, Z+1	; 0x01
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	88 2f       	mov	r24, r24
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	88 0f       	add	r24, r24
    17de:	99 1f       	adc	r25, r25
    17e0:	fc 01       	movw	r30, r24
    17e2:	e5 59       	subi	r30, 0x95	; 149
    17e4:	ff 4f       	sbci	r31, 0xFF	; 255
    17e6:	01 90       	ld	r0, Z+
    17e8:	f0 81       	ld	r31, Z
    17ea:	e0 2d       	mov	r30, r0
    17ec:	82 81       	ldd	r24, Z+2	; 0x02
    17ee:	48 2f       	mov	r20, r24
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	28 2f       	mov	r18, r24
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	02 2e       	mov	r0, r18
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <DIO_voidSetPinValue+0x82>
    17fe:	88 0f       	add	r24, r24
    1800:	99 1f       	adc	r25, r25
    1802:	0a 94       	dec	r0
    1804:	e2 f7       	brpl	.-8      	; 0x17fe <DIO_voidSetPinValue+0x7e>
    1806:	84 2b       	or	r24, r20
    1808:	12 96       	adiw	r26, 0x02	; 2
    180a:	8c 93       	st	X, r24
    180c:	12 97       	sbiw	r26, 0x02	; 2
    180e:	27 c0       	rjmp	.+78     	; 0x185e <DIO_voidSetPinValue+0xde>
		break;
		case(GPIO_LOW):
		CLEAR_BIT(Ports_index[Copy_u8PortId]->PORTx, Copy_u8PinId);
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	88 2f       	mov	r24, r24
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	88 0f       	add	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	fc 01       	movw	r30, r24
    181c:	e5 59       	subi	r30, 0x95	; 149
    181e:	ff 4f       	sbci	r31, 0xFF	; 255
    1820:	a0 81       	ld	r26, Z
    1822:	b1 81       	ldd	r27, Z+1	; 0x01
    1824:	89 81       	ldd	r24, Y+1	; 0x01
    1826:	88 2f       	mov	r24, r24
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	fc 01       	movw	r30, r24
    1830:	e5 59       	subi	r30, 0x95	; 149
    1832:	ff 4f       	sbci	r31, 0xFF	; 255
    1834:	01 90       	ld	r0, Z+
    1836:	f0 81       	ld	r31, Z
    1838:	e0 2d       	mov	r30, r0
    183a:	82 81       	ldd	r24, Z+2	; 0x02
    183c:	48 2f       	mov	r20, r24
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	02 2e       	mov	r0, r18
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <DIO_voidSetPinValue+0xd0>
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	0a 94       	dec	r0
    1852:	e2 f7       	brpl	.-8      	; 0x184c <DIO_voidSetPinValue+0xcc>
    1854:	80 95       	com	r24
    1856:	84 23       	and	r24, r20
    1858:	12 96       	adiw	r26, 0x02	; 2
    185a:	8c 93       	st	X, r24
    185c:	12 97       	sbiw	r26, 0x02	; 2
		break;
		}
	}
	else{/* Nothing */}
}
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId)
{
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	00 d0       	rcall	.+0      	; 0x1874 <DIO_u8GetPinValue+0x6>
    1874:	0f 92       	push	r0
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	8a 83       	std	Y+2, r24	; 0x02
    187c:	6b 83       	std	Y+3, r22	; 0x03
	u8 ret_val = 0;
    187e:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8PortId <= NUM_PORTS-1) && (Copy_u8PinId <= NUM_PINS-1)){
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	84 30       	cpi	r24, 0x04	; 4
    1884:	e8 f4       	brcc	.+58     	; 0x18c0 <DIO_u8GetPinValue+0x52>
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
    1888:	88 30       	cpi	r24, 0x08	; 8
    188a:	d0 f4       	brcc	.+52     	; 0x18c0 <DIO_u8GetPinValue+0x52>
		ret_val = READ_BIT(Ports_index[Copy_u8PortId]->PINx, Copy_u8PinId);
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	88 2f       	mov	r24, r24
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	fc 01       	movw	r30, r24
    1898:	e5 59       	subi	r30, 0x95	; 149
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	01 90       	ld	r0, Z+
    189e:	f0 81       	ld	r31, Z
    18a0:	e0 2d       	mov	r30, r0
    18a2:	80 81       	ld	r24, Z
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	88 2f       	mov	r24, r24
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	a9 01       	movw	r20, r18
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <DIO_u8GetPinValue+0x48>
    18b2:	55 95       	asr	r21
    18b4:	47 95       	ror	r20
    18b6:	8a 95       	dec	r24
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <DIO_u8GetPinValue+0x44>
    18ba:	ca 01       	movw	r24, r20
    18bc:	81 70       	andi	r24, 0x01	; 1
    18be:	89 83       	std	Y+1, r24	; 0x01
	}else{/* Nothing */}
	return ret_val;
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	cf 91       	pop	r28
    18ca:	df 91       	pop	r29
    18cc:	08 95       	ret

000018ce <DIO_voidSetPortDirection>:


void DIO_voidSetPortDirection(u8 Copy_u8PortId,  u8 Copy_u8Direction)
{
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	00 d0       	rcall	.+0      	; 0x18d4 <DIO_voidSetPortDirection+0x6>
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortId <= NUM_PORTS-1){
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	84 30       	cpi	r24, 0x04	; 4
    18e0:	68 f4       	brcc	.+26     	; 0x18fc <DIO_voidSetPortDirection+0x2e>
		Ports_index[Copy_u8PortId]->DDRx = Copy_u8Direction;
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
    18e4:	88 2f       	mov	r24, r24
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	fc 01       	movw	r30, r24
    18ee:	e5 59       	subi	r30, 0x95	; 149
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	01 90       	ld	r0, Z+
    18f4:	f0 81       	ld	r31, Z
    18f6:	e0 2d       	mov	r30, r0
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	81 83       	std	Z+1, r24	; 0x01
	}
	else{/* Nothing */}
}
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	08 95       	ret

00001906 <DIO_voidSetPortValues>:


void DIO_voidSetPortValues(u8 Copy_u8PortId, u8 Copy_u8Value)
{
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	00 d0       	rcall	.+0      	; 0x190c <DIO_voidSetPortValues+0x6>
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    1910:	89 83       	std	Y+1, r24	; 0x01
    1912:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortId <= NUM_PORTS-1){
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	84 30       	cpi	r24, 0x04	; 4
    1918:	68 f4       	brcc	.+26     	; 0x1934 <DIO_voidSetPortValues+0x2e>
    Ports_index[Copy_u8PortId]->PORTx = Copy_u8Value;
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	88 2f       	mov	r24, r24
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	88 0f       	add	r24, r24
    1922:	99 1f       	adc	r25, r25
    1924:	fc 01       	movw	r30, r24
    1926:	e5 59       	subi	r30, 0x95	; 149
    1928:	ff 4f       	sbci	r31, 0xFF	; 255
    192a:	01 90       	ld	r0, Z+
    192c:	f0 81       	ld	r31, Z
    192e:	e0 2d       	mov	r30, r0
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	82 83       	std	Z+2, r24	; 0x02
	}
	else{/* Nothing */}
}
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	cf 91       	pop	r28
    193a:	df 91       	pop	r29
    193c:	08 95       	ret

0000193e <DIO_u8GetPortValues>:


u8 DIO_u8GetPortValues(u8 Copy_u8PortId)
{
    193e:	df 93       	push	r29
    1940:	cf 93       	push	r28
    1942:	00 d0       	rcall	.+0      	; 0x1944 <DIO_u8GetPortValues+0x6>
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	8a 83       	std	Y+2, r24	; 0x02
	u8 ret_val = 0;
    194a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortId <= NUM_PORTS-1){
    194c:	8a 81       	ldd	r24, Y+2	; 0x02
    194e:	84 30       	cpi	r24, 0x04	; 4
    1950:	68 f4       	brcc	.+26     	; 0x196c <DIO_u8GetPortValues+0x2e>
		ret_val = (Ports_index[Copy_u8PortId]->PINx);
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	88 2f       	mov	r24, r24
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	88 0f       	add	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	fc 01       	movw	r30, r24
    195e:	e5 59       	subi	r30, 0x95	; 149
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	01 90       	ld	r0, Z+
    1964:	f0 81       	ld	r31, Z
    1966:	e0 2d       	mov	r30, r0
    1968:	80 81       	ld	r24, Z
    196a:	89 83       	std	Y+1, r24	; 0x01
	}else{/* Nothing */}
	return ret_val;
    196c:	89 81       	ldd	r24, Y+1	; 0x01
}
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	08 95       	ret

00001978 <ADC_voidInit>:
 */

#include "ADC.h"

void ADC_voidInit(const ADC_cfg_t *ADC_obj)
{
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	00 d0       	rcall	.+0      	; 0x197e <ADC_voidInit+0x6>
    197e:	cd b7       	in	r28, 0x3d	; 61
    1980:	de b7       	in	r29, 0x3e	; 62
    1982:	9a 83       	std	Y+2, r25	; 0x02
    1984:	89 83       	std	Y+1, r24	; 0x01
	if(NULL != ADC_obj)
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	9a 81       	ldd	r25, Y+2	; 0x02
    198a:	00 97       	sbiw	r24, 0x00	; 0
    198c:	09 f4       	brne	.+2      	; 0x1990 <ADC_voidInit+0x18>
    198e:	4e c0       	rjmp	.+156    	; 0x1a2c <ADC_voidInit+0xb4>
	{
		ADC_DISABLE_CFG();
    1990:	e4 e2       	ldi	r30, 0x24	; 36
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	82 81       	ldd	r24, Z+2	; 0x02
    1996:	8f 77       	andi	r24, 0x7F	; 127
    1998:	82 83       	std	Z+2, r24	; 0x02
		/* Make ADC port as input */
		DIO_voidSetPortDirection(PORTA_INDEX, 0x00);
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	60 e0       	ldi	r22, 0x00	; 0
    199e:	0e 94 67 0c 	call	0x18ce	; 0x18ce <DIO_voidSetPortDirection>
		ADC_SELECT_VOLTAGE_REF_CFG(ADC_obj->voltage_reference_select);
    19a2:	a4 e2       	ldi	r26, 0x24	; 36
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e9 81       	ldd	r30, Y+1	; 0x01
    19a8:	fa 81       	ldd	r31, Y+2	; 0x02
    19aa:	80 81       	ld	r24, Z
    19ac:	86 95       	lsr	r24
    19ae:	86 95       	lsr	r24
    19b0:	86 95       	lsr	r24
    19b2:	83 70       	andi	r24, 0x03	; 3
    19b4:	98 2f       	mov	r25, r24
    19b6:	92 95       	swap	r25
    19b8:	99 0f       	add	r25, r25
    19ba:	99 0f       	add	r25, r25
    19bc:	90 7c       	andi	r25, 0xC0	; 192
    19be:	13 96       	adiw	r26, 0x03	; 3
    19c0:	8c 91       	ld	r24, X
    19c2:	13 97       	sbiw	r26, 0x03	; 3
    19c4:	8f 73       	andi	r24, 0x3F	; 63
    19c6:	89 2b       	or	r24, r25
    19c8:	13 96       	adiw	r26, 0x03	; 3
    19ca:	8c 93       	st	X, r24
		ADC_SELECT_PRESCALER(ADC_obj->prescaler_select);
    19cc:	a4 e2       	ldi	r26, 0x24	; 36
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	e9 81       	ldd	r30, Y+1	; 0x01
    19d2:	fa 81       	ldd	r31, Y+2	; 0x02
    19d4:	80 81       	ld	r24, Z
    19d6:	82 95       	swap	r24
    19d8:	86 95       	lsr	r24
    19da:	86 95       	lsr	r24
    19dc:	83 70       	andi	r24, 0x03	; 3
    19de:	81 70       	andi	r24, 0x01	; 1
    19e0:	87 70       	andi	r24, 0x07	; 7
    19e2:	98 2f       	mov	r25, r24
    19e4:	97 70       	andi	r25, 0x07	; 7
    19e6:	12 96       	adiw	r26, 0x02	; 2
    19e8:	8c 91       	ld	r24, X
    19ea:	12 97       	sbiw	r26, 0x02	; 2
    19ec:	88 7f       	andi	r24, 0xF8	; 248
    19ee:	89 2b       	or	r24, r25
    19f0:	12 96       	adiw	r26, 0x02	; 2
    19f2:	8c 93       	st	X, r24
		ADC_AUTO_TRIGGER_ENABLE_CONFIG();
    19f4:	e4 e2       	ldi	r30, 0x24	; 36
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	82 81       	ldd	r24, Z+2	; 0x02
    19fa:	80 62       	ori	r24, 0x20	; 32
    19fc:	82 83       	std	Z+2, r24	; 0x02
		ADC_SELECT_TRIGGER_SOURCE_EVENT(ADC_obj->select_trigger_source);
    19fe:	a4 e2       	ldi	r26, 0x24	; 36
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	e9 81       	ldd	r30, Y+1	; 0x01
    1a04:	fa 81       	ldd	r31, Y+2	; 0x02
    1a06:	80 81       	ld	r24, Z
    1a08:	87 70       	andi	r24, 0x07	; 7
    1a0a:	98 2f       	mov	r25, r24
    1a0c:	92 95       	swap	r25
    1a0e:	99 0f       	add	r25, r25
    1a10:	90 7e       	andi	r25, 0xE0	; 224
    1a12:	9d 96       	adiw	r26, 0x2d	; 45
    1a14:	8c 91       	ld	r24, X
    1a16:	9d 97       	sbiw	r26, 0x2d	; 45
    1a18:	8f 71       	andi	r24, 0x1F	; 31
    1a1a:	89 2b       	or	r24, r25
    1a1c:	9d 96       	adiw	r26, 0x2d	; 45
    1a1e:	8c 93       	st	X, r24
    1a20:	9d 97       	sbiw	r26, 0x2d	; 45
		/* Enable ADC */
		ADC_ENABLE_CFG();
    1a22:	e4 e2       	ldi	r30, 0x24	; 36
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	82 81       	ldd	r24, Z+2	; 0x02
    1a28:	80 68       	ori	r24, 0x80	; 128
    1a2a:	82 83       	std	Z+2, r24	; 0x02
	}
	else{/* Nothing */}
}
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	08 95       	ret

00001a36 <ADC_getDigitalValueSynchNonBlocking>:

void ADC_getDigitalValueSynchNonBlocking(u8 Copy_u8Channel)
{
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	0f 92       	push	r0
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	89 83       	std	Y+1, r24	; 0x01
	// select the channel
	ADC_SELECT_CHANNEL_CFG(Copy_u8Channel);
    1a42:	e4 e2       	ldi	r30, 0x24	; 36
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
    1a48:	8f 71       	andi	r24, 0x1F	; 31
    1a4a:	98 2f       	mov	r25, r24
    1a4c:	9f 71       	andi	r25, 0x1F	; 31
    1a4e:	83 81       	ldd	r24, Z+3	; 0x03
    1a50:	80 7e       	andi	r24, 0xE0	; 224
    1a52:	89 2b       	or	r24, r25
    1a54:	83 83       	std	Z+3, r24	; 0x03

	// start conversion
	ADC_START_CONVERSION_CFG();
    1a56:	e4 e2       	ldi	r30, 0x24	; 36
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	82 81       	ldd	r24, Z+2	; 0x02
    1a5c:	80 64       	ori	r24, 0x40	; 64
    1a5e:	82 83       	std	Z+2, r24	; 0x02


}
    1a60:	0f 90       	pop	r0
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	08 95       	ret

00001a68 <H_LCD_void_Init>:
#include "char_lcd.h"

u8 countDigits(s32 number);

void H_LCD_void_Init(void)
{
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
    1a70:	aa 97       	sbiw	r28, 0x2a	; 42
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	f8 94       	cli
    1a76:	de bf       	out	0x3e, r29	; 62
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	cd bf       	out	0x3d, r28	; 61
#if LCD_MODE_SELECT == LCD_4_BIT_MODE_SELECT

	// configure enale and rs and data pins
	DIO_voidSetPinDirection(LCD_4BIT_RS_PIN_PORT, LCD_4BIT_RS_PIN, GPIO_DIRECTION_OUTPUT);
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	63 e0       	ldi	r22, 0x03	; 3
    1a80:	41 e0       	ldi	r20, 0x01	; 1
    1a82:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_DIRECTION_OUTPUT);
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	62 e0       	ldi	r22, 0x02	; 2
    1a8a:	41 e0       	ldi	r20, 0x01	; 1
    1a8c:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_4BIT_D7_PIN_PORT, LCD_4_BIT_D7_PIN, GPIO_DIRECTION_OUTPUT);
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	60 e0       	ldi	r22, 0x00	; 0
    1a94:	41 e0       	ldi	r20, 0x01	; 1
    1a96:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_4BIT_D6_PIN_PORT, LCD_4_BIT_D6_PIN, GPIO_DIRECTION_OUTPUT);
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	61 e0       	ldi	r22, 0x01	; 1
    1a9e:	41 e0       	ldi	r20, 0x01	; 1
    1aa0:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_4BIT_D5_PIN_PORT, LCD_4_BIT_D5_PIN, GPIO_DIRECTION_OUTPUT);
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	62 e0       	ldi	r22, 0x02	; 2
    1aa8:	41 e0       	ldi	r20, 0x01	; 1
    1aaa:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_4BIT_D4_PIN_PORT, LCD_4_BIT_D4_PIN, GPIO_DIRECTION_OUTPUT);
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	64 e0       	ldi	r22, 0x04	; 4
    1ab2:	41 e0       	ldi	r20, 0x01	; 1
    1ab4:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_voidSetPinDirection>
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	a0 ea       	ldi	r26, 0xA0	; 160
    1abe:	b1 e4       	ldi	r27, 0x41	; 65
    1ac0:	8f a3       	std	Y+39, r24	; 0x27
    1ac2:	98 a7       	std	Y+40, r25	; 0x28
    1ac4:	a9 a7       	std	Y+41, r26	; 0x29
    1ac6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac8:	6f a1       	ldd	r22, Y+39	; 0x27
    1aca:	78 a5       	ldd	r23, Y+40	; 0x28
    1acc:	89 a5       	ldd	r24, Y+41	; 0x29
    1ace:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	4a ef       	ldi	r20, 0xFA	; 250
    1ad6:	54 e4       	ldi	r21, 0x44	; 68
    1ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	8b a3       	std	Y+35, r24	; 0x23
    1ae2:	9c a3       	std	Y+36, r25	; 0x24
    1ae4:	ad a3       	std	Y+37, r26	; 0x25
    1ae6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ae8:	6b a1       	ldd	r22, Y+35	; 0x23
    1aea:	7c a1       	ldd	r23, Y+36	; 0x24
    1aec:	8d a1       	ldd	r24, Y+37	; 0x25
    1aee:	9e a1       	ldd	r25, Y+38	; 0x26
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e8       	ldi	r20, 0x80	; 128
    1af6:	5f e3       	ldi	r21, 0x3F	; 63
    1af8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1afc:	88 23       	and	r24, r24
    1afe:	2c f4       	brge	.+10     	; 0x1b0a <H_LCD_void_Init+0xa2>
		__ticks = 1;
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	9a a3       	std	Y+34, r25	; 0x22
    1b06:	89 a3       	std	Y+33, r24	; 0x21
    1b08:	3f c0       	rjmp	.+126    	; 0x1b88 <H_LCD_void_Init+0x120>
	else if (__tmp > 65535)
    1b0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b10:	9e a1       	ldd	r25, Y+38	; 0x26
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	3f ef       	ldi	r19, 0xFF	; 255
    1b16:	4f e7       	ldi	r20, 0x7F	; 127
    1b18:	57 e4       	ldi	r21, 0x47	; 71
    1b1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b1e:	18 16       	cp	r1, r24
    1b20:	4c f5       	brge	.+82     	; 0x1b74 <H_LCD_void_Init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b22:	6f a1       	ldd	r22, Y+39	; 0x27
    1b24:	78 a5       	ldd	r23, Y+40	; 0x28
    1b26:	89 a5       	ldd	r24, Y+41	; 0x29
    1b28:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	40 e2       	ldi	r20, 0x20	; 32
    1b30:	51 e4       	ldi	r21, 0x41	; 65
    1b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	bc 01       	movw	r22, r24
    1b3c:	cd 01       	movw	r24, r26
    1b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	9a a3       	std	Y+34, r25	; 0x22
    1b48:	89 a3       	std	Y+33, r24	; 0x21
    1b4a:	0f c0       	rjmp	.+30     	; 0x1b6a <H_LCD_void_Init+0x102>
    1b4c:	88 ec       	ldi	r24, 0xC8	; 200
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	98 a3       	std	Y+32, r25	; 0x20
    1b52:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b54:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b56:	98 a1       	ldd	r25, Y+32	; 0x20
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	f1 f7       	brne	.-4      	; 0x1b58 <H_LCD_void_Init+0xf0>
    1b5c:	98 a3       	std	Y+32, r25	; 0x20
    1b5e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b60:	89 a1       	ldd	r24, Y+33	; 0x21
    1b62:	9a a1       	ldd	r25, Y+34	; 0x22
    1b64:	01 97       	sbiw	r24, 0x01	; 1
    1b66:	9a a3       	std	Y+34, r25	; 0x22
    1b68:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b6e:	00 97       	sbiw	r24, 0x00	; 0
    1b70:	69 f7       	brne	.-38     	; 0x1b4c <H_LCD_void_Init+0xe4>
    1b72:	14 c0       	rjmp	.+40     	; 0x1b9c <H_LCD_void_Init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b74:	6b a1       	ldd	r22, Y+35	; 0x23
    1b76:	7c a1       	ldd	r23, Y+36	; 0x24
    1b78:	8d a1       	ldd	r24, Y+37	; 0x25
    1b7a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	9a a3       	std	Y+34, r25	; 0x22
    1b86:	89 a3       	std	Y+33, r24	; 0x21
    1b88:	89 a1       	ldd	r24, Y+33	; 0x21
    1b8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b8c:	9e 8f       	std	Y+30, r25	; 0x1e
    1b8e:	8d 8f       	std	Y+29, r24	; 0x1d
    1b90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <H_LCD_void_Init+0x12c>
    1b98:	9e 8f       	std	Y+30, r25	; 0x1e
    1b9a:	8d 8f       	std	Y+29, r24	; 0x1d

	// delay before any start
	_delay_ms(20);
	H_LCD_void_SendCommand(LCD_8BIT_MODE_2_LINE);
    1b9c:	88 e3       	ldi	r24, 0x38	; 56
    1b9e:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <H_LCD_void_SendCommand>
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	a0 ea       	ldi	r26, 0xA0	; 160
    1ba8:	b0 e4       	ldi	r27, 0x40	; 64
    1baa:	89 8f       	std	Y+25, r24	; 0x19
    1bac:	9a 8f       	std	Y+26, r25	; 0x1a
    1bae:	ab 8f       	std	Y+27, r26	; 0x1b
    1bb0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb2:	69 8d       	ldd	r22, Y+25	; 0x19
    1bb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	4a ef       	ldi	r20, 0xFA	; 250
    1bc0:	54 e4       	ldi	r21, 0x44	; 68
    1bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	8d 8b       	std	Y+21, r24	; 0x15
    1bcc:	9e 8b       	std	Y+22, r25	; 0x16
    1bce:	af 8b       	std	Y+23, r26	; 0x17
    1bd0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1bd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1bd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	40 e8       	ldi	r20, 0x80	; 128
    1be0:	5f e3       	ldi	r21, 0x3F	; 63
    1be2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1be6:	88 23       	and	r24, r24
    1be8:	2c f4       	brge	.+10     	; 0x1bf4 <H_LCD_void_Init+0x18c>
		__ticks = 1;
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	9c 8b       	std	Y+20, r25	; 0x14
    1bf0:	8b 8b       	std	Y+19, r24	; 0x13
    1bf2:	3f c0       	rjmp	.+126    	; 0x1c72 <H_LCD_void_Init+0x20a>
	else if (__tmp > 65535)
    1bf4:	6d 89       	ldd	r22, Y+21	; 0x15
    1bf6:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf8:	8f 89       	ldd	r24, Y+23	; 0x17
    1bfa:	98 8d       	ldd	r25, Y+24	; 0x18
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	3f ef       	ldi	r19, 0xFF	; 255
    1c00:	4f e7       	ldi	r20, 0x7F	; 127
    1c02:	57 e4       	ldi	r21, 0x47	; 71
    1c04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c08:	18 16       	cp	r1, r24
    1c0a:	4c f5       	brge	.+82     	; 0x1c5e <H_LCD_void_Init+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	40 e2       	ldi	r20, 0x20	; 32
    1c1a:	51 e4       	ldi	r21, 0x41	; 65
    1c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	bc 01       	movw	r22, r24
    1c26:	cd 01       	movw	r24, r26
    1c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	9c 8b       	std	Y+20, r25	; 0x14
    1c32:	8b 8b       	std	Y+19, r24	; 0x13
    1c34:	0f c0       	rjmp	.+30     	; 0x1c54 <H_LCD_void_Init+0x1ec>
    1c36:	88 ec       	ldi	r24, 0xC8	; 200
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	9a 8b       	std	Y+18, r25	; 0x12
    1c3c:	89 8b       	std	Y+17, r24	; 0x11
    1c3e:	89 89       	ldd	r24, Y+17	; 0x11
    1c40:	9a 89       	ldd	r25, Y+18	; 0x12
    1c42:	01 97       	sbiw	r24, 0x01	; 1
    1c44:	f1 f7       	brne	.-4      	; 0x1c42 <H_LCD_void_Init+0x1da>
    1c46:	9a 8b       	std	Y+18, r25	; 0x12
    1c48:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	9c 8b       	std	Y+20, r25	; 0x14
    1c52:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c54:	8b 89       	ldd	r24, Y+19	; 0x13
    1c56:	9c 89       	ldd	r25, Y+20	; 0x14
    1c58:	00 97       	sbiw	r24, 0x00	; 0
    1c5a:	69 f7       	brne	.-38     	; 0x1c36 <H_LCD_void_Init+0x1ce>
    1c5c:	14 c0       	rjmp	.+40     	; 0x1c86 <H_LCD_void_Init+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c60:	7e 89       	ldd	r23, Y+22	; 0x16
    1c62:	8f 89       	ldd	r24, Y+23	; 0x17
    1c64:	98 8d       	ldd	r25, Y+24	; 0x18
    1c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	9c 8b       	std	Y+20, r25	; 0x14
    1c70:	8b 8b       	std	Y+19, r24	; 0x13
    1c72:	8b 89       	ldd	r24, Y+19	; 0x13
    1c74:	9c 89       	ldd	r25, Y+20	; 0x14
    1c76:	98 8b       	std	Y+16, r25	; 0x10
    1c78:	8f 87       	std	Y+15, r24	; 0x0f
    1c7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c7c:	98 89       	ldd	r25, Y+16	; 0x10
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	f1 f7       	brne	.-4      	; 0x1c7e <H_LCD_void_Init+0x216>
    1c82:	98 8b       	std	Y+16, r25	; 0x10
    1c84:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	H_LCD_void_SendCommand(LCD_8BIT_MODE_2_LINE);
    1c86:	88 e3       	ldi	r24, 0x38	; 56
    1c88:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <H_LCD_void_SendCommand>
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	a6 e1       	ldi	r26, 0x16	; 22
    1c92:	b3 e4       	ldi	r27, 0x43	; 67
    1c94:	8b 87       	std	Y+11, r24	; 0x0b
    1c96:	9c 87       	std	Y+12, r25	; 0x0c
    1c98:	ad 87       	std	Y+13, r26	; 0x0d
    1c9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	4a ef       	ldi	r20, 0xFA	; 250
    1caa:	54 e4       	ldi	r21, 0x44	; 68
    1cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	8f 83       	std	Y+7, r24	; 0x07
    1cb6:	98 87       	std	Y+8, r25	; 0x08
    1cb8:	a9 87       	std	Y+9, r26	; 0x09
    1cba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cbe:	78 85       	ldd	r23, Y+8	; 0x08
    1cc0:	89 85       	ldd	r24, Y+9	; 0x09
    1cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e8       	ldi	r20, 0x80	; 128
    1cca:	5f e3       	ldi	r21, 0x3F	; 63
    1ccc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cd0:	88 23       	and	r24, r24
    1cd2:	2c f4       	brge	.+10     	; 0x1cde <H_LCD_void_Init+0x276>
		__ticks = 1;
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	9e 83       	std	Y+6, r25	; 0x06
    1cda:	8d 83       	std	Y+5, r24	; 0x05
    1cdc:	3f c0       	rjmp	.+126    	; 0x1d5c <H_LCD_void_Init+0x2f4>
	else if (__tmp > 65535)
    1cde:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce0:	78 85       	ldd	r23, Y+8	; 0x08
    1ce2:	89 85       	ldd	r24, Y+9	; 0x09
    1ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	3f ef       	ldi	r19, 0xFF	; 255
    1cea:	4f e7       	ldi	r20, 0x7F	; 127
    1cec:	57 e4       	ldi	r21, 0x47	; 71
    1cee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cf2:	18 16       	cp	r1, r24
    1cf4:	4c f5       	brge	.+82     	; 0x1d48 <H_LCD_void_Init+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e2       	ldi	r20, 0x20	; 32
    1d04:	51 e4       	ldi	r21, 0x41	; 65
    1d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	bc 01       	movw	r22, r24
    1d10:	cd 01       	movw	r24, r26
    1d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	9e 83       	std	Y+6, r25	; 0x06
    1d1c:	8d 83       	std	Y+5, r24	; 0x05
    1d1e:	0f c0       	rjmp	.+30     	; 0x1d3e <H_LCD_void_Init+0x2d6>
    1d20:	88 ec       	ldi	r24, 0xC8	; 200
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	9c 83       	std	Y+4, r25	; 0x04
    1d26:	8b 83       	std	Y+3, r24	; 0x03
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	f1 f7       	brne	.-4      	; 0x1d2c <H_LCD_void_Init+0x2c4>
    1d30:	9c 83       	std	Y+4, r25	; 0x04
    1d32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d34:	8d 81       	ldd	r24, Y+5	; 0x05
    1d36:	9e 81       	ldd	r25, Y+6	; 0x06
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	9e 83       	std	Y+6, r25	; 0x06
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d40:	9e 81       	ldd	r25, Y+6	; 0x06
    1d42:	00 97       	sbiw	r24, 0x00	; 0
    1d44:	69 f7       	brne	.-38     	; 0x1d20 <H_LCD_void_Init+0x2b8>
    1d46:	14 c0       	rjmp	.+40     	; 0x1d70 <H_LCD_void_Init+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d48:	6f 81       	ldd	r22, Y+7	; 0x07
    1d4a:	78 85       	ldd	r23, Y+8	; 0x08
    1d4c:	89 85       	ldd	r24, Y+9	; 0x09
    1d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	9e 83       	std	Y+6, r25	; 0x06
    1d5a:	8d 83       	std	Y+5, r24	; 0x05
    1d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d60:	9a 83       	std	Y+2, r25	; 0x02
    1d62:	89 83       	std	Y+1, r24	; 0x01
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	9a 81       	ldd	r25, Y+2	; 0x02
    1d68:	01 97       	sbiw	r24, 0x01	; 1
    1d6a:	f1 f7       	brne	.-4      	; 0x1d68 <H_LCD_void_Init+0x300>
    1d6c:	9a 83       	std	Y+2, r25	; 0x02
    1d6e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(150);
	H_LCD_void_SendCommand(LCD_8BIT_MODE_2_LINE);
    1d70:	88 e3       	ldi	r24, 0x38	; 56
    1d72:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_CLEAR);
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_RETURN_HOME);
    1d7c:	82 e0       	ldi	r24, 0x02	; 2
    1d7e:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_ENTRY_MODE);
    1d82:	86 e0       	ldi	r24, 0x06	; 6
    1d84:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_CURSOR_OFF_DISPLAY_ON);
    1d88:	8c e0       	ldi	r24, 0x0C	; 12
    1d8a:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_4BIT_MODE_2_LINE);
    1d8e:	88 e2       	ldi	r24, 0x28	; 40
    1d90:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_DDRAM_START); // start column
    1d94:	80 e8       	ldi	r24, 0x80	; 128
    1d96:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <H_LCD_void_SendCommand>

#elif LCD_MODE_SELECT == LCD_8_BIT_MODE_SELECT


#endif
}
    1d9a:	aa 96       	adiw	r28, 0x2a	; 42
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	f8 94       	cli
    1da0:	de bf       	out	0x3e, r29	; 62
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	cd bf       	out	0x3d, r28	; 61
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	08 95       	ret

00001dac <H_LCD_void_SendCommand>:



void H_LCD_void_SendCommand(u8 Copy_u8Command)
{
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	6d 97       	sbiw	r28, 0x1d	; 29
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	f8 94       	cli
    1dba:	de bf       	out	0x3e, r29	; 62
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	cd bf       	out	0x3d, r28	; 61
    1dc0:	8d 8f       	std	Y+29, r24	; 0x1d
#if LCD_MODE_SELECT == LCD_4_BIT_MODE_SELECT
	// write logic low to rs pin
	DIO_voidSetPinValue(LCD_4BIT_RS_PIN_PORT, LCD_4BIT_RS_PIN, GPIO_LOW);
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	63 e0       	ldi	r22, 0x03	; 3
    1dc6:	40 e0       	ldi	r20, 0x00	; 0
    1dc8:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>

	// Sending most significant nibble of command through data pins
	DIO_voidSetPinValue(LCD_4BIT_D7_PIN_PORT, LCD_4_BIT_D7_PIN, (Copy_u8Command >> 4)&(u8)1);
    1dcc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dce:	82 95       	swap	r24
    1dd0:	8f 70       	andi	r24, 0x0F	; 15
    1dd2:	98 2f       	mov	r25, r24
    1dd4:	91 70       	andi	r25, 0x01	; 1
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	60 e0       	ldi	r22, 0x00	; 0
    1dda:	49 2f       	mov	r20, r25
    1ddc:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D6_PIN_PORT, LCD_4_BIT_D6_PIN, (Copy_u8Command >> 5)&(u8)1);
    1de0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1de2:	82 95       	swap	r24
    1de4:	86 95       	lsr	r24
    1de6:	87 70       	andi	r24, 0x07	; 7
    1de8:	98 2f       	mov	r25, r24
    1dea:	91 70       	andi	r25, 0x01	; 1
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	61 e0       	ldi	r22, 0x01	; 1
    1df0:	49 2f       	mov	r20, r25
    1df2:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D5_PIN_PORT, LCD_4_BIT_D5_PIN, (Copy_u8Command >> 6)&(u8)1);
    1df6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1df8:	82 95       	swap	r24
    1dfa:	86 95       	lsr	r24
    1dfc:	86 95       	lsr	r24
    1dfe:	83 70       	andi	r24, 0x03	; 3
    1e00:	98 2f       	mov	r25, r24
    1e02:	91 70       	andi	r25, 0x01	; 1
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	62 e0       	ldi	r22, 0x02	; 2
    1e08:	49 2f       	mov	r20, r25
    1e0a:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D4_PIN_PORT, LCD_4_BIT_D4_PIN, (Copy_u8Command >> 7)&(u8)1);
    1e0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e10:	98 2f       	mov	r25, r24
    1e12:	99 1f       	adc	r25, r25
    1e14:	99 27       	eor	r25, r25
    1e16:	99 1f       	adc	r25, r25
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	64 e0       	ldi	r22, 0x04	; 4
    1e1c:	49 2f       	mov	r20, r25
    1e1e:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>

	// send enable signal
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_HIGH);
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	62 e0       	ldi	r22, 0x02	; 2
    1e26:	41 e0       	ldi	r20, 0x01	; 1
    1e28:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	a0 ea       	ldi	r26, 0xA0	; 160
    1e32:	b0 e4       	ldi	r27, 0x40	; 64
    1e34:	89 8f       	std	Y+25, r24	; 0x19
    1e36:	9a 8f       	std	Y+26, r25	; 0x1a
    1e38:	ab 8f       	std	Y+27, r26	; 0x1b
    1e3a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	4a ef       	ldi	r20, 0xFA	; 250
    1e4a:	54 e4       	ldi	r21, 0x44	; 68
    1e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	8d 8b       	std	Y+21, r24	; 0x15
    1e56:	9e 8b       	std	Y+22, r25	; 0x16
    1e58:	af 8b       	std	Y+23, r26	; 0x17
    1e5a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e60:	8f 89       	ldd	r24, Y+23	; 0x17
    1e62:	98 8d       	ldd	r25, Y+24	; 0x18
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e8       	ldi	r20, 0x80	; 128
    1e6a:	5f e3       	ldi	r21, 0x3F	; 63
    1e6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e70:	88 23       	and	r24, r24
    1e72:	2c f4       	brge	.+10     	; 0x1e7e <H_LCD_void_SendCommand+0xd2>
		__ticks = 1;
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	9c 8b       	std	Y+20, r25	; 0x14
    1e7a:	8b 8b       	std	Y+19, r24	; 0x13
    1e7c:	3f c0       	rjmp	.+126    	; 0x1efc <H_LCD_void_SendCommand+0x150>
	else if (__tmp > 65535)
    1e7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e80:	7e 89       	ldd	r23, Y+22	; 0x16
    1e82:	8f 89       	ldd	r24, Y+23	; 0x17
    1e84:	98 8d       	ldd	r25, Y+24	; 0x18
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	3f ef       	ldi	r19, 0xFF	; 255
    1e8a:	4f e7       	ldi	r20, 0x7F	; 127
    1e8c:	57 e4       	ldi	r21, 0x47	; 71
    1e8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e92:	18 16       	cp	r1, r24
    1e94:	4c f5       	brge	.+82     	; 0x1ee8 <H_LCD_void_SendCommand+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e96:	69 8d       	ldd	r22, Y+25	; 0x19
    1e98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e2       	ldi	r20, 0x20	; 32
    1ea4:	51 e4       	ldi	r21, 0x41	; 65
    1ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	bc 01       	movw	r22, r24
    1eb0:	cd 01       	movw	r24, r26
    1eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	9c 8b       	std	Y+20, r25	; 0x14
    1ebc:	8b 8b       	std	Y+19, r24	; 0x13
    1ebe:	0f c0       	rjmp	.+30     	; 0x1ede <H_LCD_void_SendCommand+0x132>
    1ec0:	88 ec       	ldi	r24, 0xC8	; 200
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	9a 8b       	std	Y+18, r25	; 0x12
    1ec6:	89 8b       	std	Y+17, r24	; 0x11
    1ec8:	89 89       	ldd	r24, Y+17	; 0x11
    1eca:	9a 89       	ldd	r25, Y+18	; 0x12
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	f1 f7       	brne	.-4      	; 0x1ecc <H_LCD_void_SendCommand+0x120>
    1ed0:	9a 8b       	std	Y+18, r25	; 0x12
    1ed2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	9c 8b       	std	Y+20, r25	; 0x14
    1edc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ede:	8b 89       	ldd	r24, Y+19	; 0x13
    1ee0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ee2:	00 97       	sbiw	r24, 0x00	; 0
    1ee4:	69 f7       	brne	.-38     	; 0x1ec0 <H_LCD_void_SendCommand+0x114>
    1ee6:	14 c0       	rjmp	.+40     	; 0x1f10 <H_LCD_void_SendCommand+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee8:	6d 89       	ldd	r22, Y+21	; 0x15
    1eea:	7e 89       	ldd	r23, Y+22	; 0x16
    1eec:	8f 89       	ldd	r24, Y+23	; 0x17
    1eee:	98 8d       	ldd	r25, Y+24	; 0x18
    1ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	9c 8b       	std	Y+20, r25	; 0x14
    1efa:	8b 8b       	std	Y+19, r24	; 0x13
    1efc:	8b 89       	ldd	r24, Y+19	; 0x13
    1efe:	9c 89       	ldd	r25, Y+20	; 0x14
    1f00:	98 8b       	std	Y+16, r25	; 0x10
    1f02:	8f 87       	std	Y+15, r24	; 0x0f
    1f04:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f06:	98 89       	ldd	r25, Y+16	; 0x10
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <H_LCD_void_SendCommand+0x15c>
    1f0c:	98 8b       	std	Y+16, r25	; 0x10
    1f0e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_LOW);
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	62 e0       	ldi	r22, 0x02	; 2
    1f14:	40 e0       	ldi	r20, 0x00	; 0
    1f16:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>

	// Sending least significant nibble of command through data pins
	DIO_voidSetPinValue(LCD_4BIT_D7_PIN_PORT, LCD_4_BIT_D7_PIN, ((Copy_u8Command) >> 0)&(u8)1);
    1f1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f1c:	98 2f       	mov	r25, r24
    1f1e:	91 70       	andi	r25, 0x01	; 1
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	60 e0       	ldi	r22, 0x00	; 0
    1f24:	49 2f       	mov	r20, r25
    1f26:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D6_PIN_PORT, LCD_4_BIT_D6_PIN, ((Copy_u8Command) >> 1)&(u8)1);
    1f2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f2c:	86 95       	lsr	r24
    1f2e:	98 2f       	mov	r25, r24
    1f30:	91 70       	andi	r25, 0x01	; 1
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	61 e0       	ldi	r22, 0x01	; 1
    1f36:	49 2f       	mov	r20, r25
    1f38:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D5_PIN_PORT, LCD_4_BIT_D5_PIN, ((Copy_u8Command) >> 2)&(u8)1);
    1f3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f3e:	86 95       	lsr	r24
    1f40:	86 95       	lsr	r24
    1f42:	98 2f       	mov	r25, r24
    1f44:	91 70       	andi	r25, 0x01	; 1
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	62 e0       	ldi	r22, 0x02	; 2
    1f4a:	49 2f       	mov	r20, r25
    1f4c:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D4_PIN_PORT, LCD_4_BIT_D4_PIN, ((Copy_u8Command) >> 3)&(u8)1);
    1f50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f52:	86 95       	lsr	r24
    1f54:	86 95       	lsr	r24
    1f56:	86 95       	lsr	r24
    1f58:	98 2f       	mov	r25, r24
    1f5a:	91 70       	andi	r25, 0x01	; 1
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	64 e0       	ldi	r22, 0x04	; 4
    1f60:	49 2f       	mov	r20, r25
    1f62:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>

	// send enable signal
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_HIGH);
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	62 e0       	ldi	r22, 0x02	; 2
    1f6a:	41 e0       	ldi	r20, 0x01	; 1
    1f6c:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	a0 ea       	ldi	r26, 0xA0	; 160
    1f76:	b0 e4       	ldi	r27, 0x40	; 64
    1f78:	8b 87       	std	Y+11, r24	; 0x0b
    1f7a:	9c 87       	std	Y+12, r25	; 0x0c
    1f7c:	ad 87       	std	Y+13, r26	; 0x0d
    1f7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	4a ef       	ldi	r20, 0xFA	; 250
    1f8e:	54 e4       	ldi	r21, 0x44	; 68
    1f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	8f 83       	std	Y+7, r24	; 0x07
    1f9a:	98 87       	std	Y+8, r25	; 0x08
    1f9c:	a9 87       	std	Y+9, r26	; 0x09
    1f9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fa0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa2:	78 85       	ldd	r23, Y+8	; 0x08
    1fa4:	89 85       	ldd	r24, Y+9	; 0x09
    1fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	40 e8       	ldi	r20, 0x80	; 128
    1fae:	5f e3       	ldi	r21, 0x3F	; 63
    1fb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fb4:	88 23       	and	r24, r24
    1fb6:	2c f4       	brge	.+10     	; 0x1fc2 <H_LCD_void_SendCommand+0x216>
		__ticks = 1;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	9e 83       	std	Y+6, r25	; 0x06
    1fbe:	8d 83       	std	Y+5, r24	; 0x05
    1fc0:	3f c0       	rjmp	.+126    	; 0x2040 <H_LCD_void_SendCommand+0x294>
	else if (__tmp > 65535)
    1fc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc4:	78 85       	ldd	r23, Y+8	; 0x08
    1fc6:	89 85       	ldd	r24, Y+9	; 0x09
    1fc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	3f ef       	ldi	r19, 0xFF	; 255
    1fce:	4f e7       	ldi	r20, 0x7F	; 127
    1fd0:	57 e4       	ldi	r21, 0x47	; 71
    1fd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fd6:	18 16       	cp	r1, r24
    1fd8:	4c f5       	brge	.+82     	; 0x202c <H_LCD_void_SendCommand+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fda:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fde:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	40 e2       	ldi	r20, 0x20	; 32
    1fe8:	51 e4       	ldi	r21, 0x41	; 65
    1fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	bc 01       	movw	r22, r24
    1ff4:	cd 01       	movw	r24, r26
    1ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	9e 83       	std	Y+6, r25	; 0x06
    2000:	8d 83       	std	Y+5, r24	; 0x05
    2002:	0f c0       	rjmp	.+30     	; 0x2022 <H_LCD_void_SendCommand+0x276>
    2004:	88 ec       	ldi	r24, 0xC8	; 200
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	9c 83       	std	Y+4, r25	; 0x04
    200a:	8b 83       	std	Y+3, r24	; 0x03
    200c:	8b 81       	ldd	r24, Y+3	; 0x03
    200e:	9c 81       	ldd	r25, Y+4	; 0x04
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	f1 f7       	brne	.-4      	; 0x2010 <H_LCD_void_SendCommand+0x264>
    2014:	9c 83       	std	Y+4, r25	; 0x04
    2016:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2018:	8d 81       	ldd	r24, Y+5	; 0x05
    201a:	9e 81       	ldd	r25, Y+6	; 0x06
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	9e 83       	std	Y+6, r25	; 0x06
    2020:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2022:	8d 81       	ldd	r24, Y+5	; 0x05
    2024:	9e 81       	ldd	r25, Y+6	; 0x06
    2026:	00 97       	sbiw	r24, 0x00	; 0
    2028:	69 f7       	brne	.-38     	; 0x2004 <H_LCD_void_SendCommand+0x258>
    202a:	14 c0       	rjmp	.+40     	; 0x2054 <H_LCD_void_SendCommand+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    202c:	6f 81       	ldd	r22, Y+7	; 0x07
    202e:	78 85       	ldd	r23, Y+8	; 0x08
    2030:	89 85       	ldd	r24, Y+9	; 0x09
    2032:	9a 85       	ldd	r25, Y+10	; 0x0a
    2034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	9e 83       	std	Y+6, r25	; 0x06
    203e:	8d 83       	std	Y+5, r24	; 0x05
    2040:	8d 81       	ldd	r24, Y+5	; 0x05
    2042:	9e 81       	ldd	r25, Y+6	; 0x06
    2044:	9a 83       	std	Y+2, r25	; 0x02
    2046:	89 83       	std	Y+1, r24	; 0x01
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	9a 81       	ldd	r25, Y+2	; 0x02
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <H_LCD_void_SendCommand+0x2a0>
    2050:	9a 83       	std	Y+2, r25	; 0x02
    2052:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_LOW);
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	62 e0       	ldi	r22, 0x02	; 2
    2058:	40 e0       	ldi	r20, 0x00	; 0
    205a:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>
#elif LCD_MODE_SELECT == LCD_8_BIT_MODE_SELECT


#endif

}
    205e:	6d 96       	adiw	r28, 0x1d	; 29
    2060:	0f b6       	in	r0, 0x3f	; 63
    2062:	f8 94       	cli
    2064:	de bf       	out	0x3e, r29	; 62
    2066:	0f be       	out	0x3f, r0	; 63
    2068:	cd bf       	out	0x3d, r28	; 61
    206a:	cf 91       	pop	r28
    206c:	df 91       	pop	r29
    206e:	08 95       	ret

00002070 <H_LCD_void_SendData>:
void H_LCD_void_SendData(u8 Copy_u8Data)
{
    2070:	df 93       	push	r29
    2072:	cf 93       	push	r28
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    2078:	6d 97       	sbiw	r28, 0x1d	; 29
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	f8 94       	cli
    207e:	de bf       	out	0x3e, r29	; 62
    2080:	0f be       	out	0x3f, r0	; 63
    2082:	cd bf       	out	0x3d, r28	; 61
    2084:	8d 8f       	std	Y+29, r24	; 0x1d
#if LCD_MODE_SELECT == LCD_4_BIT_MODE_SELECT
	// write logic high to rs pin
	DIO_voidSetPinValue(LCD_4BIT_RS_PIN_PORT, LCD_4BIT_RS_PIN, GPIO_HIGH);
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	63 e0       	ldi	r22, 0x03	; 3
    208a:	41 e0       	ldi	r20, 0x01	; 1
    208c:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>

	// Sending most significant nibble of command through data pins
	DIO_voidSetPinValue(LCD_4BIT_D7_PIN_PORT, LCD_4_BIT_D7_PIN, (Copy_u8Data >> 4)&(u8)1);
    2090:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2092:	82 95       	swap	r24
    2094:	8f 70       	andi	r24, 0x0F	; 15
    2096:	98 2f       	mov	r25, r24
    2098:	91 70       	andi	r25, 0x01	; 1
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	60 e0       	ldi	r22, 0x00	; 0
    209e:	49 2f       	mov	r20, r25
    20a0:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D6_PIN_PORT, LCD_4_BIT_D6_PIN, (Copy_u8Data >> 5)&(u8)1);
    20a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20a6:	82 95       	swap	r24
    20a8:	86 95       	lsr	r24
    20aa:	87 70       	andi	r24, 0x07	; 7
    20ac:	98 2f       	mov	r25, r24
    20ae:	91 70       	andi	r25, 0x01	; 1
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	61 e0       	ldi	r22, 0x01	; 1
    20b4:	49 2f       	mov	r20, r25
    20b6:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D5_PIN_PORT, LCD_4_BIT_D5_PIN, (Copy_u8Data >> 6)&(u8)1);
    20ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20bc:	82 95       	swap	r24
    20be:	86 95       	lsr	r24
    20c0:	86 95       	lsr	r24
    20c2:	83 70       	andi	r24, 0x03	; 3
    20c4:	98 2f       	mov	r25, r24
    20c6:	91 70       	andi	r25, 0x01	; 1
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	62 e0       	ldi	r22, 0x02	; 2
    20cc:	49 2f       	mov	r20, r25
    20ce:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D4_PIN_PORT, LCD_4_BIT_D4_PIN, (Copy_u8Data >> 7)&(u8)1);
    20d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20d4:	98 2f       	mov	r25, r24
    20d6:	99 1f       	adc	r25, r25
    20d8:	99 27       	eor	r25, r25
    20da:	99 1f       	adc	r25, r25
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	64 e0       	ldi	r22, 0x04	; 4
    20e0:	49 2f       	mov	r20, r25
    20e2:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>

	// send enable signal
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_HIGH);
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	62 e0       	ldi	r22, 0x02	; 2
    20ea:	41 e0       	ldi	r20, 0x01	; 1
    20ec:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	a0 ea       	ldi	r26, 0xA0	; 160
    20f6:	b0 e4       	ldi	r27, 0x40	; 64
    20f8:	89 8f       	std	Y+25, r24	; 0x19
    20fa:	9a 8f       	std	Y+26, r25	; 0x1a
    20fc:	ab 8f       	std	Y+27, r26	; 0x1b
    20fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2100:	69 8d       	ldd	r22, Y+25	; 0x19
    2102:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2104:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2106:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	4a ef       	ldi	r20, 0xFA	; 250
    210e:	54 e4       	ldi	r21, 0x44	; 68
    2110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	8d 8b       	std	Y+21, r24	; 0x15
    211a:	9e 8b       	std	Y+22, r25	; 0x16
    211c:	af 8b       	std	Y+23, r26	; 0x17
    211e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2120:	6d 89       	ldd	r22, Y+21	; 0x15
    2122:	7e 89       	ldd	r23, Y+22	; 0x16
    2124:	8f 89       	ldd	r24, Y+23	; 0x17
    2126:	98 8d       	ldd	r25, Y+24	; 0x18
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	40 e8       	ldi	r20, 0x80	; 128
    212e:	5f e3       	ldi	r21, 0x3F	; 63
    2130:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2134:	88 23       	and	r24, r24
    2136:	2c f4       	brge	.+10     	; 0x2142 <H_LCD_void_SendData+0xd2>
		__ticks = 1;
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	9c 8b       	std	Y+20, r25	; 0x14
    213e:	8b 8b       	std	Y+19, r24	; 0x13
    2140:	3f c0       	rjmp	.+126    	; 0x21c0 <H_LCD_void_SendData+0x150>
	else if (__tmp > 65535)
    2142:	6d 89       	ldd	r22, Y+21	; 0x15
    2144:	7e 89       	ldd	r23, Y+22	; 0x16
    2146:	8f 89       	ldd	r24, Y+23	; 0x17
    2148:	98 8d       	ldd	r25, Y+24	; 0x18
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	3f ef       	ldi	r19, 0xFF	; 255
    214e:	4f e7       	ldi	r20, 0x7F	; 127
    2150:	57 e4       	ldi	r21, 0x47	; 71
    2152:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2156:	18 16       	cp	r1, r24
    2158:	4c f5       	brge	.+82     	; 0x21ac <H_LCD_void_SendData+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215a:	69 8d       	ldd	r22, Y+25	; 0x19
    215c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    215e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2160:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e2       	ldi	r20, 0x20	; 32
    2168:	51 e4       	ldi	r21, 0x41	; 65
    216a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	bc 01       	movw	r22, r24
    2174:	cd 01       	movw	r24, r26
    2176:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	9c 8b       	std	Y+20, r25	; 0x14
    2180:	8b 8b       	std	Y+19, r24	; 0x13
    2182:	0f c0       	rjmp	.+30     	; 0x21a2 <H_LCD_void_SendData+0x132>
    2184:	88 ec       	ldi	r24, 0xC8	; 200
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	9a 8b       	std	Y+18, r25	; 0x12
    218a:	89 8b       	std	Y+17, r24	; 0x11
    218c:	89 89       	ldd	r24, Y+17	; 0x11
    218e:	9a 89       	ldd	r25, Y+18	; 0x12
    2190:	01 97       	sbiw	r24, 0x01	; 1
    2192:	f1 f7       	brne	.-4      	; 0x2190 <H_LCD_void_SendData+0x120>
    2194:	9a 8b       	std	Y+18, r25	; 0x12
    2196:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2198:	8b 89       	ldd	r24, Y+19	; 0x13
    219a:	9c 89       	ldd	r25, Y+20	; 0x14
    219c:	01 97       	sbiw	r24, 0x01	; 1
    219e:	9c 8b       	std	Y+20, r25	; 0x14
    21a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a2:	8b 89       	ldd	r24, Y+19	; 0x13
    21a4:	9c 89       	ldd	r25, Y+20	; 0x14
    21a6:	00 97       	sbiw	r24, 0x00	; 0
    21a8:	69 f7       	brne	.-38     	; 0x2184 <H_LCD_void_SendData+0x114>
    21aa:	14 c0       	rjmp	.+40     	; 0x21d4 <H_LCD_void_SendData+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ac:	6d 89       	ldd	r22, Y+21	; 0x15
    21ae:	7e 89       	ldd	r23, Y+22	; 0x16
    21b0:	8f 89       	ldd	r24, Y+23	; 0x17
    21b2:	98 8d       	ldd	r25, Y+24	; 0x18
    21b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	9c 8b       	std	Y+20, r25	; 0x14
    21be:	8b 8b       	std	Y+19, r24	; 0x13
    21c0:	8b 89       	ldd	r24, Y+19	; 0x13
    21c2:	9c 89       	ldd	r25, Y+20	; 0x14
    21c4:	98 8b       	std	Y+16, r25	; 0x10
    21c6:	8f 87       	std	Y+15, r24	; 0x0f
    21c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ca:	98 89       	ldd	r25, Y+16	; 0x10
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	f1 f7       	brne	.-4      	; 0x21cc <H_LCD_void_SendData+0x15c>
    21d0:	98 8b       	std	Y+16, r25	; 0x10
    21d2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_LOW);
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	62 e0       	ldi	r22, 0x02	; 2
    21d8:	40 e0       	ldi	r20, 0x00	; 0
    21da:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>

	// Sending least significant nibble of command through data pins
	DIO_voidSetPinValue(LCD_4BIT_D7_PIN_PORT, LCD_4_BIT_D7_PIN, ((Copy_u8Data) >> 0)&(u8)1);
    21de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21e0:	98 2f       	mov	r25, r24
    21e2:	91 70       	andi	r25, 0x01	; 1
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	60 e0       	ldi	r22, 0x00	; 0
    21e8:	49 2f       	mov	r20, r25
    21ea:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D6_PIN_PORT, LCD_4_BIT_D6_PIN, ((Copy_u8Data) >> 1)&(u8)1);
    21ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21f0:	86 95       	lsr	r24
    21f2:	98 2f       	mov	r25, r24
    21f4:	91 70       	andi	r25, 0x01	; 1
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	61 e0       	ldi	r22, 0x01	; 1
    21fa:	49 2f       	mov	r20, r25
    21fc:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D5_PIN_PORT, LCD_4_BIT_D5_PIN, ((Copy_u8Data) >> 2)&(u8)1);
    2200:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2202:	86 95       	lsr	r24
    2204:	86 95       	lsr	r24
    2206:	98 2f       	mov	r25, r24
    2208:	91 70       	andi	r25, 0x01	; 1
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	62 e0       	ldi	r22, 0x02	; 2
    220e:	49 2f       	mov	r20, r25
    2210:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D4_PIN_PORT, LCD_4_BIT_D4_PIN, ((Copy_u8Data) >> 3)&(u8)1);
    2214:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2216:	86 95       	lsr	r24
    2218:	86 95       	lsr	r24
    221a:	86 95       	lsr	r24
    221c:	98 2f       	mov	r25, r24
    221e:	91 70       	andi	r25, 0x01	; 1
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	64 e0       	ldi	r22, 0x04	; 4
    2224:	49 2f       	mov	r20, r25
    2226:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>

	// send enable signal
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_HIGH);
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	62 e0       	ldi	r22, 0x02	; 2
    222e:	41 e0       	ldi	r20, 0x01	; 1
    2230:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	a0 ea       	ldi	r26, 0xA0	; 160
    223a:	b0 e4       	ldi	r27, 0x40	; 64
    223c:	8b 87       	std	Y+11, r24	; 0x0b
    223e:	9c 87       	std	Y+12, r25	; 0x0c
    2240:	ad 87       	std	Y+13, r26	; 0x0d
    2242:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2244:	6b 85       	ldd	r22, Y+11	; 0x0b
    2246:	7c 85       	ldd	r23, Y+12	; 0x0c
    2248:	8d 85       	ldd	r24, Y+13	; 0x0d
    224a:	9e 85       	ldd	r25, Y+14	; 0x0e
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	4a ef       	ldi	r20, 0xFA	; 250
    2252:	54 e4       	ldi	r21, 0x44	; 68
    2254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	8f 83       	std	Y+7, r24	; 0x07
    225e:	98 87       	std	Y+8, r25	; 0x08
    2260:	a9 87       	std	Y+9, r26	; 0x09
    2262:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2264:	6f 81       	ldd	r22, Y+7	; 0x07
    2266:	78 85       	ldd	r23, Y+8	; 0x08
    2268:	89 85       	ldd	r24, Y+9	; 0x09
    226a:	9a 85       	ldd	r25, Y+10	; 0x0a
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	40 e8       	ldi	r20, 0x80	; 128
    2272:	5f e3       	ldi	r21, 0x3F	; 63
    2274:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2278:	88 23       	and	r24, r24
    227a:	2c f4       	brge	.+10     	; 0x2286 <H_LCD_void_SendData+0x216>
		__ticks = 1;
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	9e 83       	std	Y+6, r25	; 0x06
    2282:	8d 83       	std	Y+5, r24	; 0x05
    2284:	3f c0       	rjmp	.+126    	; 0x2304 <H_LCD_void_SendData+0x294>
	else if (__tmp > 65535)
    2286:	6f 81       	ldd	r22, Y+7	; 0x07
    2288:	78 85       	ldd	r23, Y+8	; 0x08
    228a:	89 85       	ldd	r24, Y+9	; 0x09
    228c:	9a 85       	ldd	r25, Y+10	; 0x0a
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	3f ef       	ldi	r19, 0xFF	; 255
    2292:	4f e7       	ldi	r20, 0x7F	; 127
    2294:	57 e4       	ldi	r21, 0x47	; 71
    2296:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    229a:	18 16       	cp	r1, r24
    229c:	4c f5       	brge	.+82     	; 0x22f0 <H_LCD_void_SendData+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    229e:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 e2       	ldi	r20, 0x20	; 32
    22ac:	51 e4       	ldi	r21, 0x41	; 65
    22ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	bc 01       	movw	r22, r24
    22b8:	cd 01       	movw	r24, r26
    22ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	9e 83       	std	Y+6, r25	; 0x06
    22c4:	8d 83       	std	Y+5, r24	; 0x05
    22c6:	0f c0       	rjmp	.+30     	; 0x22e6 <H_LCD_void_SendData+0x276>
    22c8:	88 ec       	ldi	r24, 0xC8	; 200
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	9c 83       	std	Y+4, r25	; 0x04
    22ce:	8b 83       	std	Y+3, r24	; 0x03
    22d0:	8b 81       	ldd	r24, Y+3	; 0x03
    22d2:	9c 81       	ldd	r25, Y+4	; 0x04
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	f1 f7       	brne	.-4      	; 0x22d4 <H_LCD_void_SendData+0x264>
    22d8:	9c 83       	std	Y+4, r25	; 0x04
    22da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22dc:	8d 81       	ldd	r24, Y+5	; 0x05
    22de:	9e 81       	ldd	r25, Y+6	; 0x06
    22e0:	01 97       	sbiw	r24, 0x01	; 1
    22e2:	9e 83       	std	Y+6, r25	; 0x06
    22e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e6:	8d 81       	ldd	r24, Y+5	; 0x05
    22e8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ea:	00 97       	sbiw	r24, 0x00	; 0
    22ec:	69 f7       	brne	.-38     	; 0x22c8 <H_LCD_void_SendData+0x258>
    22ee:	14 c0       	rjmp	.+40     	; 0x2318 <H_LCD_void_SendData+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f0:	6f 81       	ldd	r22, Y+7	; 0x07
    22f2:	78 85       	ldd	r23, Y+8	; 0x08
    22f4:	89 85       	ldd	r24, Y+9	; 0x09
    22f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	9e 83       	std	Y+6, r25	; 0x06
    2302:	8d 83       	std	Y+5, r24	; 0x05
    2304:	8d 81       	ldd	r24, Y+5	; 0x05
    2306:	9e 81       	ldd	r25, Y+6	; 0x06
    2308:	9a 83       	std	Y+2, r25	; 0x02
    230a:	89 83       	std	Y+1, r24	; 0x01
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	9a 81       	ldd	r25, Y+2	; 0x02
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	f1 f7       	brne	.-4      	; 0x2310 <H_LCD_void_SendData+0x2a0>
    2314:	9a 83       	std	Y+2, r25	; 0x02
    2316:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_LOW);
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	62 e0       	ldi	r22, 0x02	; 2
    231c:	40 e0       	ldi	r20, 0x00	; 0
    231e:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>

#elif LCD_MODE_SELECT == LCD_8_BIT_MODE_SELECT  // 8bits configurations


#endif
}
    2322:	6d 96       	adiw	r28, 0x1d	; 29
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	f8 94       	cli
    2328:	de bf       	out	0x3e, r29	; 62
    232a:	0f be       	out	0x3f, r0	; 63
    232c:	cd bf       	out	0x3d, r28	; 61
    232e:	cf 91       	pop	r28
    2330:	df 91       	pop	r29
    2332:	08 95       	ret

00002334 <H_LCD_void_SendString>:
void H_LCD_void_SendString(u8 *Copy_u8Str)
{
    2334:	df 93       	push	r29
    2336:	cf 93       	push	r28
    2338:	00 d0       	rcall	.+0      	; 0x233a <H_LCD_void_SendString+0x6>
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
    233e:	9a 83       	std	Y+2, r25	; 0x02
    2340:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Copy_u8Str)
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	9a 81       	ldd	r25, Y+2	; 0x02
    2346:	00 97       	sbiw	r24, 0x00	; 0
    2348:	89 f0       	breq	.+34     	; 0x236c <H_LCD_void_SendString+0x38>
    234a:	0b c0       	rjmp	.+22     	; 0x2362 <H_LCD_void_SendString+0x2e>
	}
	else
	{
		while(*Copy_u8Str)
		{
			H_LCD_void_SendData(*Copy_u8Str++);
    234c:	e9 81       	ldd	r30, Y+1	; 0x01
    234e:	fa 81       	ldd	r31, Y+2	; 0x02
    2350:	20 81       	ld	r18, Z
    2352:	89 81       	ldd	r24, Y+1	; 0x01
    2354:	9a 81       	ldd	r25, Y+2	; 0x02
    2356:	01 96       	adiw	r24, 0x01	; 1
    2358:	9a 83       	std	Y+2, r25	; 0x02
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	82 2f       	mov	r24, r18
    235e:	0e 94 38 10 	call	0x2070	; 0x2070 <H_LCD_void_SendData>
	{
		/* Nothing */
	}
	else
	{
		while(*Copy_u8Str)
    2362:	e9 81       	ldd	r30, Y+1	; 0x01
    2364:	fa 81       	ldd	r31, Y+2	; 0x02
    2366:	80 81       	ld	r24, Z
    2368:	88 23       	and	r24, r24
    236a:	81 f7       	brne	.-32     	; 0x234c <H_LCD_void_SendString+0x18>
		{
			H_LCD_void_SendData(*Copy_u8Str++);
		}
	}
}
    236c:	0f 90       	pop	r0
    236e:	0f 90       	pop	r0
    2370:	cf 91       	pop	r28
    2372:	df 91       	pop	r29
    2374:	08 95       	ret

00002376 <H_LCD_void_gotoXY>:
void H_LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    2376:	df 93       	push	r29
    2378:	cf 93       	push	r28
    237a:	00 d0       	rcall	.+0      	; 0x237c <H_LCD_void_gotoXY+0x6>
    237c:	00 d0       	rcall	.+0      	; 0x237e <H_LCD_void_gotoXY+0x8>
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
    2382:	89 83       	std	Y+1, r24	; 0x01
    2384:	6a 83       	std	Y+2, r22	; 0x02
	copy_u8Col--;
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	81 50       	subi	r24, 0x01	; 1
    238a:	8a 83       	std	Y+2, r24	; 0x02
	switch(copy_u8Row){
    238c:	89 81       	ldd	r24, Y+1	; 0x01
    238e:	28 2f       	mov	r18, r24
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	3c 83       	std	Y+4, r19	; 0x04
    2394:	2b 83       	std	Y+3, r18	; 0x03
    2396:	8b 81       	ldd	r24, Y+3	; 0x03
    2398:	9c 81       	ldd	r25, Y+4	; 0x04
    239a:	82 30       	cpi	r24, 0x02	; 2
    239c:	91 05       	cpc	r25, r1
    239e:	d9 f0       	breq	.+54     	; 0x23d6 <H_LCD_void_gotoXY+0x60>
    23a0:	2b 81       	ldd	r18, Y+3	; 0x03
    23a2:	3c 81       	ldd	r19, Y+4	; 0x04
    23a4:	23 30       	cpi	r18, 0x03	; 3
    23a6:	31 05       	cpc	r19, r1
    23a8:	34 f4       	brge	.+12     	; 0x23b6 <H_LCD_void_gotoXY+0x40>
    23aa:	8b 81       	ldd	r24, Y+3	; 0x03
    23ac:	9c 81       	ldd	r25, Y+4	; 0x04
    23ae:	81 30       	cpi	r24, 0x01	; 1
    23b0:	91 05       	cpc	r25, r1
    23b2:	61 f0       	breq	.+24     	; 0x23cc <H_LCD_void_gotoXY+0x56>
    23b4:	1e c0       	rjmp	.+60     	; 0x23f2 <H_LCD_void_gotoXY+0x7c>
    23b6:	2b 81       	ldd	r18, Y+3	; 0x03
    23b8:	3c 81       	ldd	r19, Y+4	; 0x04
    23ba:	23 30       	cpi	r18, 0x03	; 3
    23bc:	31 05       	cpc	r19, r1
    23be:	81 f0       	breq	.+32     	; 0x23e0 <H_LCD_void_gotoXY+0x6a>
    23c0:	8b 81       	ldd	r24, Y+3	; 0x03
    23c2:	9c 81       	ldd	r25, Y+4	; 0x04
    23c4:	84 30       	cpi	r24, 0x04	; 4
    23c6:	91 05       	cpc	r25, r1
    23c8:	81 f0       	breq	.+32     	; 0x23ea <H_LCD_void_gotoXY+0x74>
    23ca:	13 c0       	rjmp	.+38     	; 0x23f2 <H_LCD_void_gotoXY+0x7c>
	case ROW1:
		H_LCD_void_SendCommand(0x80 + copy_u8Col);
    23cc:	8a 81       	ldd	r24, Y+2	; 0x02
    23ce:	80 58       	subi	r24, 0x80	; 128
    23d0:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <H_LCD_void_SendCommand>
    23d4:	0e c0       	rjmp	.+28     	; 0x23f2 <H_LCD_void_gotoXY+0x7c>
		break;
	case ROW2:
		H_LCD_void_SendCommand(0xc0 + copy_u8Col);
    23d6:	8a 81       	ldd	r24, Y+2	; 0x02
    23d8:	80 54       	subi	r24, 0x40	; 64
    23da:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <H_LCD_void_SendCommand>
    23de:	09 c0       	rjmp	.+18     	; 0x23f2 <H_LCD_void_gotoXY+0x7c>
		break;
	case ROW3:
		H_LCD_void_SendCommand(0x94 + copy_u8Col);
    23e0:	8a 81       	ldd	r24, Y+2	; 0x02
    23e2:	8c 56       	subi	r24, 0x6C	; 108
    23e4:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <H_LCD_void_SendCommand>
    23e8:	04 c0       	rjmp	.+8      	; 0x23f2 <H_LCD_void_gotoXY+0x7c>
		break;
	case ROW4:
		H_LCD_void_SendCommand(0xd4 + copy_u8Col);
    23ea:	8a 81       	ldd	r24, Y+2	; 0x02
    23ec:	8c 52       	subi	r24, 0x2C	; 44
    23ee:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <H_LCD_void_SendCommand>
		break;
	default:

		break;
	}
}
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	cf 91       	pop	r28
    23fc:	df 91       	pop	r29
    23fe:	08 95       	ret

00002400 <H_LCD_void_sendIntNum>:
void H_LCD_void_sendIntNum(s32 copy_s32Num)
{
    2400:	ef 92       	push	r14
    2402:	ff 92       	push	r15
    2404:	0f 93       	push	r16
    2406:	1f 93       	push	r17
    2408:	df 93       	push	r29
    240a:	cf 93       	push	r28
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
    2410:	27 97       	sbiw	r28, 0x07	; 7
    2412:	0f b6       	in	r0, 0x3f	; 63
    2414:	f8 94       	cli
    2416:	de bf       	out	0x3e, r29	; 62
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	cd bf       	out	0x3d, r28	; 61
    241c:	9d 83       	std	Y+5, r25	; 0x05
    241e:	8c 83       	std	Y+4, r24	; 0x04
	u8 temp_str[num_of_digits + 1];
	memset(temp_str, ' ', num_of_digits);
	temp_str[num_of_digits] = '\0';
	sprintf((u8 *)temp_str, "%i", copy_s32Num);
	H_LCD_void_SendString(temp_str);
}
    2420:	0d b7       	in	r16, 0x3d	; 61
    2422:	1e b7       	in	r17, 0x3e	; 62

		break;
	}
}
void H_LCD_void_sendIntNum(s32 copy_s32Num)
{
    2424:	8d b7       	in	r24, 0x3d	; 61
    2426:	9e b7       	in	r25, 0x3e	; 62
    2428:	7c 01       	movw	r14, r24
	u8 num_of_digits = countDigits(copy_s32Num);
    242a:	8c 81       	ldd	r24, Y+4	; 0x04
    242c:	9d 81       	ldd	r25, Y+5	; 0x05
    242e:	0e 94 c1 12 	call	0x2582	; 0x2582 <countDigits>
    2432:	89 83       	std	Y+1, r24	; 0x01
	u8 temp_str[num_of_digits + 1];
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	88 2f       	mov	r24, r24
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	01 96       	adiw	r24, 0x01	; 1
    243c:	2d b7       	in	r18, 0x3d	; 61
    243e:	3e b7       	in	r19, 0x3e	; 62
    2440:	28 1b       	sub	r18, r24
    2442:	39 0b       	sbc	r19, r25
    2444:	0f b6       	in	r0, 0x3f	; 63
    2446:	f8 94       	cli
    2448:	3e bf       	out	0x3e, r19	; 62
    244a:	0f be       	out	0x3f, r0	; 63
    244c:	2d bf       	out	0x3d, r18	; 61
    244e:	8d b7       	in	r24, 0x3d	; 61
    2450:	9e b7       	in	r25, 0x3e	; 62
    2452:	01 96       	adiw	r24, 0x01	; 1
    2454:	9f 83       	std	Y+7, r25	; 0x07
    2456:	8e 83       	std	Y+6, r24	; 0x06
    2458:	8e 81       	ldd	r24, Y+6	; 0x06
    245a:	9f 81       	ldd	r25, Y+7	; 0x07
    245c:	00 96       	adiw	r24, 0x00	; 0
    245e:	9f 83       	std	Y+7, r25	; 0x07
    2460:	8e 83       	std	Y+6, r24	; 0x06
    2462:	2e 81       	ldd	r18, Y+6	; 0x06
    2464:	3f 81       	ldd	r19, Y+7	; 0x07
    2466:	3b 83       	std	Y+3, r19	; 0x03
    2468:	2a 83       	std	Y+2, r18	; 0x02
	memset(temp_str, ' ', num_of_digits);
    246a:	2a 81       	ldd	r18, Y+2	; 0x02
    246c:	3b 81       	ldd	r19, Y+3	; 0x03
    246e:	89 81       	ldd	r24, Y+1	; 0x01
    2470:	48 2f       	mov	r20, r24
    2472:	50 e0       	ldi	r21, 0x00	; 0
    2474:	c9 01       	movw	r24, r18
    2476:	60 e2       	ldi	r22, 0x20	; 32
    2478:	70 e0       	ldi	r23, 0x00	; 0
    247a:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <memset>
	temp_str[num_of_digits] = '\0';
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	28 2f       	mov	r18, r24
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	8a 81       	ldd	r24, Y+2	; 0x02
    2486:	9b 81       	ldd	r25, Y+3	; 0x03
    2488:	fc 01       	movw	r30, r24
    248a:	e2 0f       	add	r30, r18
    248c:	f3 1f       	adc	r31, r19
    248e:	10 82       	st	Z, r1
	sprintf((u8 *)temp_str, "%i", copy_s32Num);
    2490:	8a 81       	ldd	r24, Y+2	; 0x02
    2492:	9b 81       	ldd	r25, Y+3	; 0x03
    2494:	00 d0       	rcall	.+0      	; 0x2496 <H_LCD_void_sendIntNum+0x96>
    2496:	00 d0       	rcall	.+0      	; 0x2498 <H_LCD_void_sendIntNum+0x98>
    2498:	00 d0       	rcall	.+0      	; 0x249a <H_LCD_void_sendIntNum+0x9a>
    249a:	ed b7       	in	r30, 0x3d	; 61
    249c:	fe b7       	in	r31, 0x3e	; 62
    249e:	31 96       	adiw	r30, 0x01	; 1
    24a0:	91 83       	std	Z+1, r25	; 0x01
    24a2:	80 83       	st	Z, r24
    24a4:	80 e6       	ldi	r24, 0x60	; 96
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	93 83       	std	Z+3, r25	; 0x03
    24aa:	82 83       	std	Z+2, r24	; 0x02
    24ac:	8c 81       	ldd	r24, Y+4	; 0x04
    24ae:	9d 81       	ldd	r25, Y+5	; 0x05
    24b0:	95 83       	std	Z+5, r25	; 0x05
    24b2:	84 83       	std	Z+4, r24	; 0x04
    24b4:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <sprintf>
    24b8:	8d b7       	in	r24, 0x3d	; 61
    24ba:	9e b7       	in	r25, 0x3e	; 62
    24bc:	06 96       	adiw	r24, 0x06	; 6
    24be:	0f b6       	in	r0, 0x3f	; 63
    24c0:	f8 94       	cli
    24c2:	9e bf       	out	0x3e, r25	; 62
    24c4:	0f be       	out	0x3f, r0	; 63
    24c6:	8d bf       	out	0x3d, r24	; 61
	H_LCD_void_SendString(temp_str);
    24c8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ca:	9b 81       	ldd	r25, Y+3	; 0x03
    24cc:	0e 94 9a 11 	call	0x2334	; 0x2334 <H_LCD_void_SendString>
    24d0:	0f b6       	in	r0, 0x3f	; 63
    24d2:	f8 94       	cli
    24d4:	fe be       	out	0x3e, r15	; 62
    24d6:	0f be       	out	0x3f, r0	; 63
    24d8:	ed be       	out	0x3d, r14	; 61
}
    24da:	0f b6       	in	r0, 0x3f	; 63
    24dc:	f8 94       	cli
    24de:	1e bf       	out	0x3e, r17	; 62
    24e0:	0f be       	out	0x3f, r0	; 63
    24e2:	0d bf       	out	0x3d, r16	; 61
    24e4:	27 96       	adiw	r28, 0x07	; 7
    24e6:	0f b6       	in	r0, 0x3f	; 63
    24e8:	f8 94       	cli
    24ea:	de bf       	out	0x3e, r29	; 62
    24ec:	0f be       	out	0x3f, r0	; 63
    24ee:	cd bf       	out	0x3d, r28	; 61
    24f0:	cf 91       	pop	r28
    24f2:	df 91       	pop	r29
    24f4:	1f 91       	pop	r17
    24f6:	0f 91       	pop	r16
    24f8:	ff 90       	pop	r15
    24fa:	ef 90       	pop	r14
    24fc:	08 95       	ret

000024fe <H_LCD_void_Clear_Display>:


void H_LCD_void_Clear_Display(void)
{
    24fe:	df 93       	push	r29
    2500:	cf 93       	push	r28
    2502:	cd b7       	in	r28, 0x3d	; 61
    2504:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_SendCommand(LCD_CLEAR);
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <H_LCD_void_SendCommand>
}
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <H_LCD_void_creatCustomChar>:



void H_LCD_void_creatCustomChar(const u8 * ArrPattern,u8 copy_u8charCode)
{
    2512:	df 93       	push	r29
    2514:	cf 93       	push	r28
    2516:	00 d0       	rcall	.+0      	; 0x2518 <H_LCD_void_creatCustomChar+0x6>
    2518:	00 d0       	rcall	.+0      	; 0x251a <H_LCD_void_creatCustomChar+0x8>
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	9b 83       	std	Y+3, r25	; 0x03
    2520:	8a 83       	std	Y+2, r24	; 0x02
    2522:	6c 83       	std	Y+4, r22	; 0x04
	u8 lcd_counter = 0;
    2524:	19 82       	std	Y+1, r1	; 0x01
	if(NULL != ArrPattern)
    2526:	8a 81       	ldd	r24, Y+2	; 0x02
    2528:	9b 81       	ldd	r25, Y+3	; 0x03
    252a:	00 97       	sbiw	r24, 0x00	; 0
    252c:	b1 f0       	breq	.+44     	; 0x255a <H_LCD_void_creatCustomChar+0x48>
	{
		H_LCD_void_SendCommand(LCD_CGRAM_START);
    252e:	80 e4       	ldi	r24, 0x40	; 64
    2530:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <H_LCD_void_SendCommand>
		for(lcd_counter = 0; lcd_counter <= 7; ++lcd_counter)
    2534:	19 82       	std	Y+1, r1	; 0x01
    2536:	0e c0       	rjmp	.+28     	; 0x2554 <H_LCD_void_creatCustomChar+0x42>
		{
			H_LCD_void_SendData(ArrPattern[lcd_counter]);
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	28 2f       	mov	r18, r24
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	9b 81       	ldd	r25, Y+3	; 0x03
    2542:	fc 01       	movw	r30, r24
    2544:	e2 0f       	add	r30, r18
    2546:	f3 1f       	adc	r31, r19
    2548:	80 81       	ld	r24, Z
    254a:	0e 94 38 10 	call	0x2070	; 0x2070 <H_LCD_void_SendData>
{
	u8 lcd_counter = 0;
	if(NULL != ArrPattern)
	{
		H_LCD_void_SendCommand(LCD_CGRAM_START);
		for(lcd_counter = 0; lcd_counter <= 7; ++lcd_counter)
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	8f 5f       	subi	r24, 0xFF	; 255
    2552:	89 83       	std	Y+1, r24	; 0x01
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	88 30       	cpi	r24, 0x08	; 8
    2558:	78 f3       	brcs	.-34     	; 0x2538 <H_LCD_void_creatCustomChar+0x26>
		{
			H_LCD_void_SendData(ArrPattern[lcd_counter]);
		}
	}
	else{/* Nothing */}
}
    255a:	0f 90       	pop	r0
    255c:	0f 90       	pop	r0
    255e:	0f 90       	pop	r0
    2560:	0f 90       	pop	r0
    2562:	cf 91       	pop	r28
    2564:	df 91       	pop	r29
    2566:	08 95       	ret

00002568 <H_LCD_void_displayCustomChar>:

void H_LCD_void_displayCustomChar(u8 copy_u8charCode)
{
    2568:	df 93       	push	r29
    256a:	cf 93       	push	r28
    256c:	0f 92       	push	r0
    256e:	cd b7       	in	r28, 0x3d	; 61
    2570:	de b7       	in	r29, 0x3e	; 62
    2572:	89 83       	std	Y+1, r24	; 0x01
	H_LCD_void_SendData(copy_u8charCode);
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	0e 94 38 10 	call	0x2070	; 0x2070 <H_LCD_void_SendData>
}
    257a:	0f 90       	pop	r0
    257c:	cf 91       	pop	r28
    257e:	df 91       	pop	r29
    2580:	08 95       	ret

00002582 <countDigits>:


/* --------------------------------------- helper function --------------------------------------- */
u8 countDigits(s32 number) {
    2582:	df 93       	push	r29
    2584:	cf 93       	push	r28
    2586:	00 d0       	rcall	.+0      	; 0x2588 <countDigits+0x6>
    2588:	00 d0       	rcall	.+0      	; 0x258a <countDigits+0x8>
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
    258e:	9b 83       	std	Y+3, r25	; 0x03
    2590:	8a 83       	std	Y+2, r24	; 0x02
    u8 count = 0;
    2592:	19 82       	std	Y+1, r1	; 0x01

    // Handle the case where the number is 0 separately
    if (number == 0) {
    2594:	8a 81       	ldd	r24, Y+2	; 0x02
    2596:	9b 81       	ldd	r25, Y+3	; 0x03
    2598:	00 97       	sbiw	r24, 0x00	; 0
    259a:	19 f4       	brne	.+6      	; 0x25a2 <countDigits+0x20>
        return 1;
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	8c 83       	std	Y+4, r24	; 0x04
    25a0:	1f c0       	rjmp	.+62     	; 0x25e0 <countDigits+0x5e>
    }
    // For negative numbers, convert to positive before counting digits
    if (number < 0) {
    25a2:	8a 81       	ldd	r24, Y+2	; 0x02
    25a4:	9b 81       	ldd	r25, Y+3	; 0x03
    25a6:	99 23       	and	r25, r25
    25a8:	ac f4       	brge	.+42     	; 0x25d4 <countDigits+0x52>
    	number = -1 * number;
    25aa:	8a 81       	ldd	r24, Y+2	; 0x02
    25ac:	9b 81       	ldd	r25, Y+3	; 0x03
    25ae:	90 95       	com	r25
    25b0:	81 95       	neg	r24
    25b2:	9f 4f       	sbci	r25, 0xFF	; 255
    25b4:	9b 83       	std	Y+3, r25	; 0x03
    25b6:	8a 83       	std	Y+2, r24	; 0x02
    25b8:	0d c0       	rjmp	.+26     	; 0x25d4 <countDigits+0x52>
    }
    // Count the digits by dividing by 10 until the number becomes 0
    while (number != 0) {
        number /= 10;
    25ba:	8a 81       	ldd	r24, Y+2	; 0x02
    25bc:	9b 81       	ldd	r25, Y+3	; 0x03
    25be:	2a e0       	ldi	r18, 0x0A	; 10
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	b9 01       	movw	r22, r18
    25c4:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <__divmodhi4>
    25c8:	cb 01       	movw	r24, r22
    25ca:	9b 83       	std	Y+3, r25	; 0x03
    25cc:	8a 83       	std	Y+2, r24	; 0x02
        ++count;
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
    25d0:	8f 5f       	subi	r24, 0xFF	; 255
    25d2:	89 83       	std	Y+1, r24	; 0x01
    // For negative numbers, convert to positive before counting digits
    if (number < 0) {
    	number = -1 * number;
    }
    // Count the digits by dividing by 10 until the number becomes 0
    while (number != 0) {
    25d4:	8a 81       	ldd	r24, Y+2	; 0x02
    25d6:	9b 81       	ldd	r25, Y+3	; 0x03
    25d8:	00 97       	sbiw	r24, 0x00	; 0
    25da:	79 f7       	brne	.-34     	; 0x25ba <countDigits+0x38>
        number /= 10;
        ++count;
    }

    return count;
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	8c 83       	std	Y+4, r24	; 0x04
    25e0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    25e2:	0f 90       	pop	r0
    25e4:	0f 90       	pop	r0
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	cf 91       	pop	r28
    25ec:	df 91       	pop	r29
    25ee:	08 95       	ret

000025f0 <SevenSeG_voidinit>:
 *      Author: Mohamed Aly
 */
#include "seven_segment.h"

void SevenSeG_voidinit(void)
{
    25f0:	df 93       	push	r29
    25f2:	cf 93       	push	r28
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(SEGMENT_PIN0_PORT, SEGMENT_PIN0, GPIO_DIRECTION_OUTPUT);
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	60 e0       	ldi	r22, 0x00	; 0
    25fc:	41 e0       	ldi	r20, 0x01	; 1
    25fe:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(SEGMENT_PIN1_PORT, SEGMENT_PIN1, GPIO_DIRECTION_OUTPUT);
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	61 e0       	ldi	r22, 0x01	; 1
    2606:	41 e0       	ldi	r20, 0x01	; 1
    2608:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(SEGMENT_PIN2_PORT, SEGMENT_PIN2, GPIO_DIRECTION_OUTPUT);
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	62 e0       	ldi	r22, 0x02	; 2
    2610:	41 e0       	ldi	r20, 0x01	; 1
    2612:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(SEGMENT_PIN3_PORT, SEGMENT_PIN3, GPIO_DIRECTION_OUTPUT);
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	64 e0       	ldi	r22, 0x04	; 4
    261a:	41 e0       	ldi	r20, 0x01	; 1
    261c:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_voidSetPinDirection>
}
    2620:	cf 91       	pop	r28
    2622:	df 91       	pop	r29
    2624:	08 95       	ret

00002626 <SevenSeG_voidWriteNum>:

void SevenSeG_voidWriteNum(u8 Copy_u8Number)
{
    2626:	df 93       	push	r29
    2628:	cf 93       	push	r28
    262a:	0f 92       	push	r0
    262c:	cd b7       	in	r28, 0x3d	; 61
    262e:	de b7       	in	r29, 0x3e	; 62
    2630:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPinValue(SEGMENT_PIN0_PORT, SEGMENT_PIN0, ((Copy_u8Number >> 0) & 0x01));
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	98 2f       	mov	r25, r24
    2636:	91 70       	andi	r25, 0x01	; 1
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	60 e0       	ldi	r22, 0x00	; 0
    263c:	49 2f       	mov	r20, r25
    263e:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(SEGMENT_PIN1_PORT, SEGMENT_PIN1, ((Copy_u8Number >> 1) & 0x01));
    2642:	89 81       	ldd	r24, Y+1	; 0x01
    2644:	86 95       	lsr	r24
    2646:	98 2f       	mov	r25, r24
    2648:	91 70       	andi	r25, 0x01	; 1
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	61 e0       	ldi	r22, 0x01	; 1
    264e:	49 2f       	mov	r20, r25
    2650:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(SEGMENT_PIN2_PORT, SEGMENT_PIN2, ((Copy_u8Number >> 2) & 0x01));
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	86 95       	lsr	r24
    2658:	86 95       	lsr	r24
    265a:	98 2f       	mov	r25, r24
    265c:	91 70       	andi	r25, 0x01	; 1
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	62 e0       	ldi	r22, 0x02	; 2
    2662:	49 2f       	mov	r20, r25
    2664:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(SEGMENT_PIN3_PORT, SEGMENT_PIN3, ((Copy_u8Number >> 3) & 0x01));
    2668:	89 81       	ldd	r24, Y+1	; 0x01
    266a:	86 95       	lsr	r24
    266c:	86 95       	lsr	r24
    266e:	86 95       	lsr	r24
    2670:	98 2f       	mov	r25, r24
    2672:	91 70       	andi	r25, 0x01	; 1
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	64 e0       	ldi	r22, 0x04	; 4
    2678:	49 2f       	mov	r20, r25
    267a:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>
}
    267e:	0f 90       	pop	r0
    2680:	cf 91       	pop	r28
    2682:	df 91       	pop	r29
    2684:	08 95       	ret

00002686 <H_KEYPAD_void_Init>:
static u8 rows_ports[4] = {KEYPAD_R1_PORT, KEYPAD_R2_PORT, KEYPAD_R3_PORT, KEYPAD_R4_PORT};
static u8 cols_ports[4] = {KEYPAD_C1_PORT, KEYPAD_C2_PORT, KEYPAD_C3_PORT, KEYPAD_C4_PORT};


void H_KEYPAD_void_Init(void)
{
    2686:	df 93       	push	r29
    2688:	cf 93       	push	r28
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
	// initialize rows to be output mode
	DIO_voidSetPinDirection(KEYPAD_R1_PORT, KEYPAD_R1_PIN, GPIO_DIRECTION_OUTPUT);
    268e:	82 e0       	ldi	r24, 0x02	; 2
    2690:	65 e0       	ldi	r22, 0x05	; 5
    2692:	41 e0       	ldi	r20, 0x01	; 1
    2694:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_R2_PORT, KEYPAD_R2_PIN, GPIO_DIRECTION_OUTPUT);
    2698:	82 e0       	ldi	r24, 0x02	; 2
    269a:	64 e0       	ldi	r22, 0x04	; 4
    269c:	41 e0       	ldi	r20, 0x01	; 1
    269e:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_R3_PORT, KEYPAD_R3_PIN, GPIO_DIRECTION_OUTPUT);
    26a2:	82 e0       	ldi	r24, 0x02	; 2
    26a4:	63 e0       	ldi	r22, 0x03	; 3
    26a6:	41 e0       	ldi	r20, 0x01	; 1
    26a8:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_R4_PORT, KEYPAD_R4_PIN, GPIO_DIRECTION_OUTPUT);
    26ac:	82 e0       	ldi	r24, 0x02	; 2
    26ae:	62 e0       	ldi	r22, 0x02	; 2
    26b0:	41 e0       	ldi	r20, 0x01	; 1
    26b2:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_voidSetPinDirection>

	// initialize columns to be output mode
	DIO_voidSetPinDirection(KEYPAD_C1_PORT, KEYPAD_R1_PIN, GPIO_DIRECTION_INPUT);
    26b6:	83 e0       	ldi	r24, 0x03	; 3
    26b8:	65 e0       	ldi	r22, 0x05	; 5
    26ba:	40 e0       	ldi	r20, 0x00	; 0
    26bc:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_C2_PORT, KEYPAD_R2_PIN, GPIO_DIRECTION_INPUT);
    26c0:	83 e0       	ldi	r24, 0x03	; 3
    26c2:	64 e0       	ldi	r22, 0x04	; 4
    26c4:	40 e0       	ldi	r20, 0x00	; 0
    26c6:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_C3_PORT, KEYPAD_R3_PIN, GPIO_DIRECTION_INPUT);
    26ca:	83 e0       	ldi	r24, 0x03	; 3
    26cc:	63 e0       	ldi	r22, 0x03	; 3
    26ce:	40 e0       	ldi	r20, 0x00	; 0
    26d0:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_C4_PORT, KEYPAD_R4_PIN, GPIO_DIRECTION_INPUT);
    26d4:	83 e0       	ldi	r24, 0x03	; 3
    26d6:	62 e0       	ldi	r22, 0x02	; 2
    26d8:	40 e0       	ldi	r20, 0x00	; 0
    26da:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_voidSetPinDirection>
}
    26de:	cf 91       	pop	r28
    26e0:	df 91       	pop	r29
    26e2:	08 95       	ret

000026e4 <H_KEYPAD_u8_getPressedKey>:

void H_KEYPAD_u8_getPressedKey(u8 * pPressedKey)
{
    26e4:	df 93       	push	r29
    26e6:	cf 93       	push	r28
    26e8:	cd b7       	in	r28, 0x3d	; 61
    26ea:	de b7       	in	r29, 0x3e	; 62
    26ec:	64 97       	sbiw	r28, 0x14	; 20
    26ee:	0f b6       	in	r0, 0x3f	; 63
    26f0:	f8 94       	cli
    26f2:	de bf       	out	0x3e, r29	; 62
    26f4:	0f be       	out	0x3f, r0	; 63
    26f6:	cd bf       	out	0x3d, r28	; 61
    26f8:	9c 8b       	std	Y+20, r25	; 0x14
    26fa:	8b 8b       	std	Y+19, r24	; 0x13
	u8 l_row_counter = 0;
    26fc:	1a 8a       	std	Y+18, r1	; 0x12
	u8 l_column_counter = 0;
    26fe:	19 8a       	std	Y+17, r1	; 0x11
	u8 l_counter = 0;
    2700:	18 8a       	std	Y+16, r1	; 0x10
	u8 row_logic = 1;
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	8f 87       	std	Y+15, r24	; 0x0f
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
    2706:	1a 8a       	std	Y+18, r1	; 0x12
    2708:	d5 c0       	rjmp	.+426    	; 0x28b4 <H_KEYPAD_u8_getPressedKey+0x1d0>
	{
		// Set All pins to be low at first
		for(l_counter = 0; l_counter < KEYPAD_ROWS; l_counter++)
    270a:	18 8a       	std	Y+16, r1	; 0x10
    270c:	16 c0       	rjmp	.+44     	; 0x273a <H_KEYPAD_u8_getPressedKey+0x56>
		{
			DIO_voidSetPinValue(rows_ports[l_counter], rows_pins[l_counter], GPIO_HIGH);
    270e:	88 89       	ldd	r24, Y+16	; 0x10
    2710:	88 2f       	mov	r24, r24
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	fc 01       	movw	r30, r24
    2716:	e5 58       	subi	r30, 0x85	; 133
    2718:	ff 4f       	sbci	r31, 0xFF	; 255
    271a:	20 81       	ld	r18, Z
    271c:	88 89       	ldd	r24, Y+16	; 0x10
    271e:	88 2f       	mov	r24, r24
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	fc 01       	movw	r30, r24
    2724:	ed 58       	subi	r30, 0x8D	; 141
    2726:	ff 4f       	sbci	r31, 0xFF	; 255
    2728:	90 81       	ld	r25, Z
    272a:	82 2f       	mov	r24, r18
    272c:	69 2f       	mov	r22, r25
    272e:	41 e0       	ldi	r20, 0x01	; 1
    2730:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>
	u8 l_counter = 0;
	u8 row_logic = 1;
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
	{
		// Set All pins to be low at first
		for(l_counter = 0; l_counter < KEYPAD_ROWS; l_counter++)
    2734:	88 89       	ldd	r24, Y+16	; 0x10
    2736:	8f 5f       	subi	r24, 0xFF	; 255
    2738:	88 8b       	std	Y+16, r24	; 0x10
    273a:	88 89       	ldd	r24, Y+16	; 0x10
    273c:	84 30       	cpi	r24, 0x04	; 4
    273e:	38 f3       	brcs	.-50     	; 0x270e <H_KEYPAD_u8_getPressedKey+0x2a>
		{
			DIO_voidSetPinValue(rows_ports[l_counter], rows_pins[l_counter], GPIO_HIGH);
		}

		DIO_voidSetPinValue(rows_ports[l_row_counter], rows_pins[l_row_counter], GPIO_LOW);
    2740:	8a 89       	ldd	r24, Y+18	; 0x12
    2742:	88 2f       	mov	r24, r24
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	fc 01       	movw	r30, r24
    2748:	e5 58       	subi	r30, 0x85	; 133
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	20 81       	ld	r18, Z
    274e:	8a 89       	ldd	r24, Y+18	; 0x12
    2750:	88 2f       	mov	r24, r24
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	fc 01       	movw	r30, r24
    2756:	ed 58       	subi	r30, 0x8D	; 141
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	90 81       	ld	r25, Z
    275c:	82 2f       	mov	r24, r18
    275e:	69 2f       	mov	r22, r25
    2760:	40 e0       	ldi	r20, 0x00	; 0
    2762:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	a0 e2       	ldi	r26, 0x20	; 32
    276c:	b1 e4       	ldi	r27, 0x41	; 65
    276e:	8b 87       	std	Y+11, r24	; 0x0b
    2770:	9c 87       	std	Y+12, r25	; 0x0c
    2772:	ad 87       	std	Y+13, r26	; 0x0d
    2774:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2776:	6b 85       	ldd	r22, Y+11	; 0x0b
    2778:	7c 85       	ldd	r23, Y+12	; 0x0c
    277a:	8d 85       	ldd	r24, Y+13	; 0x0d
    277c:	9e 85       	ldd	r25, Y+14	; 0x0e
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	4a ef       	ldi	r20, 0xFA	; 250
    2784:	54 e4       	ldi	r21, 0x44	; 68
    2786:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	8f 83       	std	Y+7, r24	; 0x07
    2790:	98 87       	std	Y+8, r25	; 0x08
    2792:	a9 87       	std	Y+9, r26	; 0x09
    2794:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2796:	6f 81       	ldd	r22, Y+7	; 0x07
    2798:	78 85       	ldd	r23, Y+8	; 0x08
    279a:	89 85       	ldd	r24, Y+9	; 0x09
    279c:	9a 85       	ldd	r25, Y+10	; 0x0a
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	40 e8       	ldi	r20, 0x80	; 128
    27a4:	5f e3       	ldi	r21, 0x3F	; 63
    27a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27aa:	88 23       	and	r24, r24
    27ac:	2c f4       	brge	.+10     	; 0x27b8 <H_KEYPAD_u8_getPressedKey+0xd4>
		__ticks = 1;
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	9e 83       	std	Y+6, r25	; 0x06
    27b4:	8d 83       	std	Y+5, r24	; 0x05
    27b6:	3f c0       	rjmp	.+126    	; 0x2836 <H_KEYPAD_u8_getPressedKey+0x152>
	else if (__tmp > 65535)
    27b8:	6f 81       	ldd	r22, Y+7	; 0x07
    27ba:	78 85       	ldd	r23, Y+8	; 0x08
    27bc:	89 85       	ldd	r24, Y+9	; 0x09
    27be:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	3f ef       	ldi	r19, 0xFF	; 255
    27c4:	4f e7       	ldi	r20, 0x7F	; 127
    27c6:	57 e4       	ldi	r21, 0x47	; 71
    27c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27cc:	18 16       	cp	r1, r24
    27ce:	4c f5       	brge	.+82     	; 0x2822 <H_KEYPAD_u8_getPressedKey+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	40 e2       	ldi	r20, 0x20	; 32
    27de:	51 e4       	ldi	r21, 0x41	; 65
    27e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	bc 01       	movw	r22, r24
    27ea:	cd 01       	movw	r24, r26
    27ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f0:	dc 01       	movw	r26, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	9e 83       	std	Y+6, r25	; 0x06
    27f6:	8d 83       	std	Y+5, r24	; 0x05
    27f8:	0f c0       	rjmp	.+30     	; 0x2818 <H_KEYPAD_u8_getPressedKey+0x134>
    27fa:	88 ec       	ldi	r24, 0xC8	; 200
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	9c 83       	std	Y+4, r25	; 0x04
    2800:	8b 83       	std	Y+3, r24	; 0x03
    2802:	8b 81       	ldd	r24, Y+3	; 0x03
    2804:	9c 81       	ldd	r25, Y+4	; 0x04
    2806:	01 97       	sbiw	r24, 0x01	; 1
    2808:	f1 f7       	brne	.-4      	; 0x2806 <H_KEYPAD_u8_getPressedKey+0x122>
    280a:	9c 83       	std	Y+4, r25	; 0x04
    280c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280e:	8d 81       	ldd	r24, Y+5	; 0x05
    2810:	9e 81       	ldd	r25, Y+6	; 0x06
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	9e 83       	std	Y+6, r25	; 0x06
    2816:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2818:	8d 81       	ldd	r24, Y+5	; 0x05
    281a:	9e 81       	ldd	r25, Y+6	; 0x06
    281c:	00 97       	sbiw	r24, 0x00	; 0
    281e:	69 f7       	brne	.-38     	; 0x27fa <H_KEYPAD_u8_getPressedKey+0x116>
    2820:	14 c0       	rjmp	.+40     	; 0x284a <H_KEYPAD_u8_getPressedKey+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2822:	6f 81       	ldd	r22, Y+7	; 0x07
    2824:	78 85       	ldd	r23, Y+8	; 0x08
    2826:	89 85       	ldd	r24, Y+9	; 0x09
    2828:	9a 85       	ldd	r25, Y+10	; 0x0a
    282a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	9e 83       	std	Y+6, r25	; 0x06
    2834:	8d 83       	std	Y+5, r24	; 0x05
    2836:	8d 81       	ldd	r24, Y+5	; 0x05
    2838:	9e 81       	ldd	r25, Y+6	; 0x06
    283a:	9a 83       	std	Y+2, r25	; 0x02
    283c:	89 83       	std	Y+1, r24	; 0x01
    283e:	89 81       	ldd	r24, Y+1	; 0x01
    2840:	9a 81       	ldd	r25, Y+2	; 0x02
    2842:	01 97       	sbiw	r24, 0x01	; 1
    2844:	f1 f7       	brne	.-4      	; 0x2842 <H_KEYPAD_u8_getPressedKey+0x15e>
    2846:	9a 83       	std	Y+2, r25	; 0x02
    2848:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(10);

		for(l_column_counter = 0; l_column_counter < KEYPAD_COLUMNS; l_column_counter++)
    284a:	19 8a       	std	Y+17, r1	; 0x11
    284c:	2d c0       	rjmp	.+90     	; 0x28a8 <H_KEYPAD_u8_getPressedKey+0x1c4>
		{
			row_logic = DIO_u8GetPinValue(cols_ports[l_column_counter], cols_pins[l_column_counter]);
    284e:	89 89       	ldd	r24, Y+17	; 0x11
    2850:	88 2f       	mov	r24, r24
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	fc 01       	movw	r30, r24
    2856:	e1 58       	subi	r30, 0x81	; 129
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	20 81       	ld	r18, Z
    285c:	89 89       	ldd	r24, Y+17	; 0x11
    285e:	88 2f       	mov	r24, r24
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	fc 01       	movw	r30, r24
    2864:	e9 58       	subi	r30, 0x89	; 137
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	90 81       	ld	r25, Z
    286a:	82 2f       	mov	r24, r18
    286c:	69 2f       	mov	r22, r25
    286e:	0e 94 37 0c 	call	0x186e	; 0x186e <DIO_u8GetPinValue>
    2872:	8f 87       	std	Y+15, r24	; 0x0f

			if(row_logic == GPIO_LOW)
    2874:	8f 85       	ldd	r24, Y+15	; 0x0f
    2876:	88 23       	and	r24, r24
    2878:	a1 f4       	brne	.+40     	; 0x28a2 <H_KEYPAD_u8_getPressedKey+0x1be>
			{
				*pPressedKey = btn_values[l_row_counter][l_column_counter];
    287a:	8a 89       	ldd	r24, Y+18	; 0x12
    287c:	48 2f       	mov	r20, r24
    287e:	50 e0       	ldi	r21, 0x00	; 0
    2880:	89 89       	ldd	r24, Y+17	; 0x11
    2882:	28 2f       	mov	r18, r24
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	ca 01       	movw	r24, r20
    2888:	88 0f       	add	r24, r24
    288a:	99 1f       	adc	r25, r25
    288c:	88 0f       	add	r24, r24
    288e:	99 1f       	adc	r25, r25
    2890:	82 0f       	add	r24, r18
    2892:	93 1f       	adc	r25, r19
    2894:	fc 01       	movw	r30, r24
    2896:	ea 57       	subi	r30, 0x7A	; 122
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	80 81       	ld	r24, Z
    289c:	eb 89       	ldd	r30, Y+19	; 0x13
    289e:	fc 89       	ldd	r31, Y+20	; 0x14
    28a0:	80 83       	st	Z, r24

		DIO_voidSetPinValue(rows_ports[l_row_counter], rows_pins[l_row_counter], GPIO_LOW);

		_delay_ms(10);

		for(l_column_counter = 0; l_column_counter < KEYPAD_COLUMNS; l_column_counter++)
    28a2:	89 89       	ldd	r24, Y+17	; 0x11
    28a4:	8f 5f       	subi	r24, 0xFF	; 255
    28a6:	89 8b       	std	Y+17, r24	; 0x11
    28a8:	89 89       	ldd	r24, Y+17	; 0x11
    28aa:	84 30       	cpi	r24, 0x04	; 4
    28ac:	80 f2       	brcs	.-96     	; 0x284e <H_KEYPAD_u8_getPressedKey+0x16a>
{
	u8 l_row_counter = 0;
	u8 l_column_counter = 0;
	u8 l_counter = 0;
	u8 row_logic = 1;
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
    28ae:	8a 89       	ldd	r24, Y+18	; 0x12
    28b0:	8f 5f       	subi	r24, 0xFF	; 255
    28b2:	8a 8b       	std	Y+18, r24	; 0x12
    28b4:	8a 89       	ldd	r24, Y+18	; 0x12
    28b6:	84 30       	cpi	r24, 0x04	; 4
    28b8:	08 f4       	brcc	.+2      	; 0x28bc <H_KEYPAD_u8_getPressedKey+0x1d8>
    28ba:	27 cf       	rjmp	.-434    	; 0x270a <H_KEYPAD_u8_getPressedKey+0x26>
				*pPressedKey = btn_values[l_row_counter][l_column_counter];
			}
			else{/* Nothing */}
		}
	}
}
    28bc:	64 96       	adiw	r28, 0x14	; 20
    28be:	0f b6       	in	r0, 0x3f	; 63
    28c0:	f8 94       	cli
    28c2:	de bf       	out	0x3e, r29	; 62
    28c4:	0f be       	out	0x3f, r0	; 63
    28c6:	cd bf       	out	0x3d, r28	; 61
    28c8:	cf 91       	pop	r28
    28ca:	df 91       	pop	r29
    28cc:	08 95       	ret

000028ce <keypad_cursor_init>:

/* -------------------------------------------------------------- Additional functions ----------------------------------------- */

// to initialize digits
void keypad_cursor_init(keypad_digit_t *digits_obj)
{
    28ce:	df 93       	push	r29
    28d0:	cf 93       	push	r28
    28d2:	00 d0       	rcall	.+0      	; 0x28d4 <keypad_cursor_init+0x6>
    28d4:	0f 92       	push	r0
    28d6:	cd b7       	in	r28, 0x3d	; 61
    28d8:	de b7       	in	r29, 0x3e	; 62
    28da:	9b 83       	std	Y+3, r25	; 0x03
    28dc:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t l_cursor = 0;
    28de:	19 82       	std	Y+1, r1	; 0x01
	if(NULL != digits_obj)
    28e0:	8a 81       	ldd	r24, Y+2	; 0x02
    28e2:	9b 81       	ldd	r25, Y+3	; 0x03
    28e4:	00 97       	sbiw	r24, 0x00	; 0
    28e6:	a1 f0       	breq	.+40     	; 0x2910 <keypad_cursor_init+0x42>
	{
		digits_obj->cursor = 0;
    28e8:	ea 81       	ldd	r30, Y+2	; 0x02
    28ea:	fb 81       	ldd	r31, Y+3	; 0x03
    28ec:	15 82       	std	Z+5, r1	; 0x05
		for(l_cursor = 0; l_cursor < 5; l_cursor++)
    28ee:	19 82       	std	Y+1, r1	; 0x01
    28f0:	0c c0       	rjmp	.+24     	; 0x290a <keypad_cursor_init+0x3c>
		{
			digits_obj->digits[l_cursor] = 0;
    28f2:	89 81       	ldd	r24, Y+1	; 0x01
    28f4:	28 2f       	mov	r18, r24
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	8a 81       	ldd	r24, Y+2	; 0x02
    28fa:	9b 81       	ldd	r25, Y+3	; 0x03
    28fc:	fc 01       	movw	r30, r24
    28fe:	e2 0f       	add	r30, r18
    2900:	f3 1f       	adc	r31, r19
    2902:	10 82       	st	Z, r1
{
	uint8_t l_cursor = 0;
	if(NULL != digits_obj)
	{
		digits_obj->cursor = 0;
		for(l_cursor = 0; l_cursor < 5; l_cursor++)
    2904:	89 81       	ldd	r24, Y+1	; 0x01
    2906:	8f 5f       	subi	r24, 0xFF	; 255
    2908:	89 83       	std	Y+1, r24	; 0x01
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	85 30       	cpi	r24, 0x05	; 5
    290e:	88 f3       	brcs	.-30     	; 0x28f2 <keypad_cursor_init+0x24>
		{
			digits_obj->digits[l_cursor] = 0;
		}
	}
}
    2910:	0f 90       	pop	r0
    2912:	0f 90       	pop	r0
    2914:	0f 90       	pop	r0
    2916:	cf 91       	pop	r28
    2918:	df 91       	pop	r29
    291a:	08 95       	ret

0000291c <H_KEYPAD_u8_WriteOnDigits>:


void H_KEYPAD_u8_WriteOnDigits(keypad_digit_t *digits_obj)
{
    291c:	df 93       	push	r29
    291e:	cf 93       	push	r28
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
    2924:	64 97       	sbiw	r28, 0x14	; 20
    2926:	0f b6       	in	r0, 0x3f	; 63
    2928:	f8 94       	cli
    292a:	de bf       	out	0x3e, r29	; 62
    292c:	0f be       	out	0x3f, r0	; 63
    292e:	cd bf       	out	0x3d, r28	; 61
    2930:	9c 8b       	std	Y+20, r25	; 0x14
    2932:	8b 8b       	std	Y+19, r24	; 0x13
	u8 l_row_counter = 0;
    2934:	1a 8a       	std	Y+18, r1	; 0x12
	u8 l_column_counter = 0;
    2936:	19 8a       	std	Y+17, r1	; 0x11
	u8 l_counter = 0;
    2938:	18 8a       	std	Y+16, r1	; 0x10
	u8 row_logic = 1;
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	8f 87       	std	Y+15, r24	; 0x0f
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
    293e:	1a 8a       	std	Y+18, r1	; 0x12
    2940:	fb c0       	rjmp	.+502    	; 0x2b38 <H_KEYPAD_u8_WriteOnDigits+0x21c>
	{
		// Set All pins to be low at first
		for(l_counter = 0; l_counter < KEYPAD_ROWS; l_counter++)
    2942:	18 8a       	std	Y+16, r1	; 0x10
    2944:	16 c0       	rjmp	.+44     	; 0x2972 <H_KEYPAD_u8_WriteOnDigits+0x56>
		{
			DIO_voidSetPinValue(rows_ports[l_counter], rows_pins[l_counter], GPIO_HIGH);
    2946:	88 89       	ldd	r24, Y+16	; 0x10
    2948:	88 2f       	mov	r24, r24
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	fc 01       	movw	r30, r24
    294e:	e5 58       	subi	r30, 0x85	; 133
    2950:	ff 4f       	sbci	r31, 0xFF	; 255
    2952:	20 81       	ld	r18, Z
    2954:	88 89       	ldd	r24, Y+16	; 0x10
    2956:	88 2f       	mov	r24, r24
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	fc 01       	movw	r30, r24
    295c:	ed 58       	subi	r30, 0x8D	; 141
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	90 81       	ld	r25, Z
    2962:	82 2f       	mov	r24, r18
    2964:	69 2f       	mov	r22, r25
    2966:	41 e0       	ldi	r20, 0x01	; 1
    2968:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>
	u8 l_counter = 0;
	u8 row_logic = 1;
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
	{
		// Set All pins to be low at first
		for(l_counter = 0; l_counter < KEYPAD_ROWS; l_counter++)
    296c:	88 89       	ldd	r24, Y+16	; 0x10
    296e:	8f 5f       	subi	r24, 0xFF	; 255
    2970:	88 8b       	std	Y+16, r24	; 0x10
    2972:	88 89       	ldd	r24, Y+16	; 0x10
    2974:	84 30       	cpi	r24, 0x04	; 4
    2976:	38 f3       	brcs	.-50     	; 0x2946 <H_KEYPAD_u8_WriteOnDigits+0x2a>
		{
			DIO_voidSetPinValue(rows_ports[l_counter], rows_pins[l_counter], GPIO_HIGH);
		}

		DIO_voidSetPinValue(rows_ports[l_row_counter], rows_pins[l_row_counter], GPIO_LOW);
    2978:	8a 89       	ldd	r24, Y+18	; 0x12
    297a:	88 2f       	mov	r24, r24
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	fc 01       	movw	r30, r24
    2980:	e5 58       	subi	r30, 0x85	; 133
    2982:	ff 4f       	sbci	r31, 0xFF	; 255
    2984:	20 81       	ld	r18, Z
    2986:	8a 89       	ldd	r24, Y+18	; 0x12
    2988:	88 2f       	mov	r24, r24
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	fc 01       	movw	r30, r24
    298e:	ed 58       	subi	r30, 0x8D	; 141
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	90 81       	ld	r25, Z
    2994:	82 2f       	mov	r24, r18
    2996:	69 2f       	mov	r22, r25
    2998:	40 e0       	ldi	r20, 0x00	; 0
    299a:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	a0 e2       	ldi	r26, 0x20	; 32
    29a4:	b1 e4       	ldi	r27, 0x41	; 65
    29a6:	8b 87       	std	Y+11, r24	; 0x0b
    29a8:	9c 87       	std	Y+12, r25	; 0x0c
    29aa:	ad 87       	std	Y+13, r26	; 0x0d
    29ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    29b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	4a ef       	ldi	r20, 0xFA	; 250
    29bc:	54 e4       	ldi	r21, 0x44	; 68
    29be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	8f 83       	std	Y+7, r24	; 0x07
    29c8:	98 87       	std	Y+8, r25	; 0x08
    29ca:	a9 87       	std	Y+9, r26	; 0x09
    29cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29ce:	6f 81       	ldd	r22, Y+7	; 0x07
    29d0:	78 85       	ldd	r23, Y+8	; 0x08
    29d2:	89 85       	ldd	r24, Y+9	; 0x09
    29d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	40 e8       	ldi	r20, 0x80	; 128
    29dc:	5f e3       	ldi	r21, 0x3F	; 63
    29de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29e2:	88 23       	and	r24, r24
    29e4:	2c f4       	brge	.+10     	; 0x29f0 <H_KEYPAD_u8_WriteOnDigits+0xd4>
		__ticks = 1;
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	9e 83       	std	Y+6, r25	; 0x06
    29ec:	8d 83       	std	Y+5, r24	; 0x05
    29ee:	3f c0       	rjmp	.+126    	; 0x2a6e <H_KEYPAD_u8_WriteOnDigits+0x152>
	else if (__tmp > 65535)
    29f0:	6f 81       	ldd	r22, Y+7	; 0x07
    29f2:	78 85       	ldd	r23, Y+8	; 0x08
    29f4:	89 85       	ldd	r24, Y+9	; 0x09
    29f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	3f ef       	ldi	r19, 0xFF	; 255
    29fc:	4f e7       	ldi	r20, 0x7F	; 127
    29fe:	57 e4       	ldi	r21, 0x47	; 71
    2a00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a04:	18 16       	cp	r1, r24
    2a06:	4c f5       	brge	.+82     	; 0x2a5a <H_KEYPAD_u8_WriteOnDigits+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a08:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	40 e2       	ldi	r20, 0x20	; 32
    2a16:	51 e4       	ldi	r21, 0x41	; 65
    2a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	bc 01       	movw	r22, r24
    2a22:	cd 01       	movw	r24, r26
    2a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	9e 83       	std	Y+6, r25	; 0x06
    2a2e:	8d 83       	std	Y+5, r24	; 0x05
    2a30:	0f c0       	rjmp	.+30     	; 0x2a50 <H_KEYPAD_u8_WriteOnDigits+0x134>
    2a32:	88 ec       	ldi	r24, 0xC8	; 200
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	9c 83       	std	Y+4, r25	; 0x04
    2a38:	8b 83       	std	Y+3, r24	; 0x03
    2a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3e:	01 97       	sbiw	r24, 0x01	; 1
    2a40:	f1 f7       	brne	.-4      	; 0x2a3e <H_KEYPAD_u8_WriteOnDigits+0x122>
    2a42:	9c 83       	std	Y+4, r25	; 0x04
    2a44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a46:	8d 81       	ldd	r24, Y+5	; 0x05
    2a48:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4a:	01 97       	sbiw	r24, 0x01	; 1
    2a4c:	9e 83       	std	Y+6, r25	; 0x06
    2a4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a50:	8d 81       	ldd	r24, Y+5	; 0x05
    2a52:	9e 81       	ldd	r25, Y+6	; 0x06
    2a54:	00 97       	sbiw	r24, 0x00	; 0
    2a56:	69 f7       	brne	.-38     	; 0x2a32 <H_KEYPAD_u8_WriteOnDigits+0x116>
    2a58:	14 c0       	rjmp	.+40     	; 0x2a82 <H_KEYPAD_u8_WriteOnDigits+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a5c:	78 85       	ldd	r23, Y+8	; 0x08
    2a5e:	89 85       	ldd	r24, Y+9	; 0x09
    2a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	9e 83       	std	Y+6, r25	; 0x06
    2a6c:	8d 83       	std	Y+5, r24	; 0x05
    2a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a70:	9e 81       	ldd	r25, Y+6	; 0x06
    2a72:	9a 83       	std	Y+2, r25	; 0x02
    2a74:	89 83       	std	Y+1, r24	; 0x01
    2a76:	89 81       	ldd	r24, Y+1	; 0x01
    2a78:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7a:	01 97       	sbiw	r24, 0x01	; 1
    2a7c:	f1 f7       	brne	.-4      	; 0x2a7a <H_KEYPAD_u8_WriteOnDigits+0x15e>
    2a7e:	9a 83       	std	Y+2, r25	; 0x02
    2a80:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(10);

		for(l_column_counter = 0; l_column_counter < KEYPAD_COLUMNS; l_column_counter++)
    2a82:	19 8a       	std	Y+17, r1	; 0x11
    2a84:	52 c0       	rjmp	.+164    	; 0x2b2a <H_KEYPAD_u8_WriteOnDigits+0x20e>
		{
			row_logic = DIO_u8GetPinValue(cols_ports[l_column_counter], cols_pins[l_column_counter]);
    2a86:	89 89       	ldd	r24, Y+17	; 0x11
    2a88:	88 2f       	mov	r24, r24
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	fc 01       	movw	r30, r24
    2a8e:	e1 58       	subi	r30, 0x81	; 129
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	20 81       	ld	r18, Z
    2a94:	89 89       	ldd	r24, Y+17	; 0x11
    2a96:	88 2f       	mov	r24, r24
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	fc 01       	movw	r30, r24
    2a9c:	e9 58       	subi	r30, 0x89	; 137
    2a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa0:	90 81       	ld	r25, Z
    2aa2:	82 2f       	mov	r24, r18
    2aa4:	69 2f       	mov	r22, r25
    2aa6:	0e 94 37 0c 	call	0x186e	; 0x186e <DIO_u8GetPinValue>
    2aaa:	8f 87       	std	Y+15, r24	; 0x0f

			if(row_logic == GPIO_LOW)
    2aac:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aae:	88 23       	and	r24, r24
    2ab0:	19 f5       	brne	.+70     	; 0x2af8 <H_KEYPAD_u8_WriteOnDigits+0x1dc>
			{
				digits_obj->digits[digits_obj->cursor] = btn_values2[l_row_counter][l_column_counter];
    2ab2:	eb 89       	ldd	r30, Y+19	; 0x13
    2ab4:	fc 89       	ldd	r31, Y+20	; 0x14
    2ab6:	85 81       	ldd	r24, Z+5	; 0x05
    2ab8:	68 2f       	mov	r22, r24
    2aba:	70 e0       	ldi	r23, 0x00	; 0
    2abc:	8a 89       	ldd	r24, Y+18	; 0x12
    2abe:	48 2f       	mov	r20, r24
    2ac0:	50 e0       	ldi	r21, 0x00	; 0
    2ac2:	89 89       	ldd	r24, Y+17	; 0x11
    2ac4:	28 2f       	mov	r18, r24
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	ca 01       	movw	r24, r20
    2aca:	88 0f       	add	r24, r24
    2acc:	99 1f       	adc	r25, r25
    2ace:	88 0f       	add	r24, r24
    2ad0:	99 1f       	adc	r25, r25
    2ad2:	82 0f       	add	r24, r18
    2ad4:	93 1f       	adc	r25, r19
    2ad6:	fc 01       	movw	r30, r24
    2ad8:	ea 56       	subi	r30, 0x6A	; 106
    2ada:	ff 4f       	sbci	r31, 0xFF	; 255
    2adc:	20 81       	ld	r18, Z
    2ade:	8b 89       	ldd	r24, Y+19	; 0x13
    2ae0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ae2:	fc 01       	movw	r30, r24
    2ae4:	e6 0f       	add	r30, r22
    2ae6:	f7 1f       	adc	r31, r23
    2ae8:	20 83       	st	Z, r18
				digits_obj->cursor += 1;
    2aea:	eb 89       	ldd	r30, Y+19	; 0x13
    2aec:	fc 89       	ldd	r31, Y+20	; 0x14
    2aee:	85 81       	ldd	r24, Z+5	; 0x05
    2af0:	8f 5f       	subi	r24, 0xFF	; 255
    2af2:	eb 89       	ldd	r30, Y+19	; 0x13
    2af4:	fc 89       	ldd	r31, Y+20	; 0x14
    2af6:	85 83       	std	Z+5, r24	; 0x05
			}
			else{/* Nothing */}

			if(btn_values2[l_row_counter][l_column_counter] == '#')
    2af8:	8a 89       	ldd	r24, Y+18	; 0x12
    2afa:	48 2f       	mov	r20, r24
    2afc:	50 e0       	ldi	r21, 0x00	; 0
    2afe:	89 89       	ldd	r24, Y+17	; 0x11
    2b00:	28 2f       	mov	r18, r24
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	ca 01       	movw	r24, r20
    2b06:	88 0f       	add	r24, r24
    2b08:	99 1f       	adc	r25, r25
    2b0a:	88 0f       	add	r24, r24
    2b0c:	99 1f       	adc	r25, r25
    2b0e:	82 0f       	add	r24, r18
    2b10:	93 1f       	adc	r25, r19
    2b12:	fc 01       	movw	r30, r24
    2b14:	ea 56       	subi	r30, 0x6A	; 106
    2b16:	ff 4f       	sbci	r31, 0xFF	; 255
    2b18:	80 81       	ld	r24, Z
    2b1a:	83 32       	cpi	r24, 0x23	; 35
    2b1c:	19 f4       	brne	.+6      	; 0x2b24 <H_KEYPAD_u8_WriteOnDigits+0x208>
			{
				digits_obj->cursor = 0;
    2b1e:	eb 89       	ldd	r30, Y+19	; 0x13
    2b20:	fc 89       	ldd	r31, Y+20	; 0x14
    2b22:	15 82       	std	Z+5, r1	; 0x05

		DIO_voidSetPinValue(rows_ports[l_row_counter], rows_pins[l_row_counter], GPIO_LOW);

		_delay_ms(10);

		for(l_column_counter = 0; l_column_counter < KEYPAD_COLUMNS; l_column_counter++)
    2b24:	89 89       	ldd	r24, Y+17	; 0x11
    2b26:	8f 5f       	subi	r24, 0xFF	; 255
    2b28:	89 8b       	std	Y+17, r24	; 0x11
    2b2a:	89 89       	ldd	r24, Y+17	; 0x11
    2b2c:	84 30       	cpi	r24, 0x04	; 4
    2b2e:	08 f4       	brcc	.+2      	; 0x2b32 <H_KEYPAD_u8_WriteOnDigits+0x216>
    2b30:	aa cf       	rjmp	.-172    	; 0x2a86 <H_KEYPAD_u8_WriteOnDigits+0x16a>
{
	u8 l_row_counter = 0;
	u8 l_column_counter = 0;
	u8 l_counter = 0;
	u8 row_logic = 1;
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
    2b32:	8a 89       	ldd	r24, Y+18	; 0x12
    2b34:	8f 5f       	subi	r24, 0xFF	; 255
    2b36:	8a 8b       	std	Y+18, r24	; 0x12
    2b38:	8a 89       	ldd	r24, Y+18	; 0x12
    2b3a:	84 30       	cpi	r24, 0x04	; 4
    2b3c:	08 f4       	brcc	.+2      	; 0x2b40 <H_KEYPAD_u8_WriteOnDigits+0x224>
    2b3e:	01 cf       	rjmp	.-510    	; 0x2942 <H_KEYPAD_u8_WriteOnDigits+0x26>
			{
				digits_obj->cursor = 0;
			}
		}
	}
}
    2b40:	64 96       	adiw	r28, 0x14	; 20
    2b42:	0f b6       	in	r0, 0x3f	; 63
    2b44:	f8 94       	cli
    2b46:	de bf       	out	0x3e, r29	; 62
    2b48:	0f be       	out	0x3f, r0	; 63
    2b4a:	cd bf       	out	0x3d, r28	; 61
    2b4c:	cf 91       	pop	r28
    2b4e:	df 91       	pop	r29
    2b50:	08 95       	ret

00002b52 <int0_isr>:


#include "main.h"

void int0_isr(void)
{
    2b52:	df 93       	push	r29
    2b54:	cf 93       	push	r28
    2b56:	cd b7       	in	r28, 0x3d	; 61
    2b58:	de b7       	in	r29, 0x3e	; 62
    2b5a:	2e 97       	sbiw	r28, 0x0e	; 14
    2b5c:	0f b6       	in	r0, 0x3f	; 63
    2b5e:	f8 94       	cli
    2b60:	de bf       	out	0x3e, r29	; 62
    2b62:	0f be       	out	0x3f, r0	; 63
    2b64:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(PORTA_INDEX, PIN0_INDEX, GPIO_LOW);
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	60 e0       	ldi	r22, 0x00	; 0
    2b6a:	40 e0       	ldi	r20, 0x00	; 0
    2b6c:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>
    2b70:	80 e0       	ldi	r24, 0x00	; 0
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	a8 ec       	ldi	r26, 0xC8	; 200
    2b76:	b2 e4       	ldi	r27, 0x42	; 66
    2b78:	8b 87       	std	Y+11, r24	; 0x0b
    2b7a:	9c 87       	std	Y+12, r25	; 0x0c
    2b7c:	ad 87       	std	Y+13, r26	; 0x0d
    2b7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b80:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b82:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b84:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b86:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	4a ef       	ldi	r20, 0xFA	; 250
    2b8e:	54 e4       	ldi	r21, 0x44	; 68
    2b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b94:	dc 01       	movw	r26, r24
    2b96:	cb 01       	movw	r24, r22
    2b98:	8f 83       	std	Y+7, r24	; 0x07
    2b9a:	98 87       	std	Y+8, r25	; 0x08
    2b9c:	a9 87       	std	Y+9, r26	; 0x09
    2b9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ba0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba2:	78 85       	ldd	r23, Y+8	; 0x08
    2ba4:	89 85       	ldd	r24, Y+9	; 0x09
    2ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	40 e8       	ldi	r20, 0x80	; 128
    2bae:	5f e3       	ldi	r21, 0x3F	; 63
    2bb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bb4:	88 23       	and	r24, r24
    2bb6:	2c f4       	brge	.+10     	; 0x2bc2 <int0_isr+0x70>
		__ticks = 1;
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	9e 83       	std	Y+6, r25	; 0x06
    2bbe:	8d 83       	std	Y+5, r24	; 0x05
    2bc0:	3f c0       	rjmp	.+126    	; 0x2c40 <int0_isr+0xee>
	else if (__tmp > 65535)
    2bc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc4:	78 85       	ldd	r23, Y+8	; 0x08
    2bc6:	89 85       	ldd	r24, Y+9	; 0x09
    2bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	3f ef       	ldi	r19, 0xFF	; 255
    2bce:	4f e7       	ldi	r20, 0x7F	; 127
    2bd0:	57 e4       	ldi	r21, 0x47	; 71
    2bd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bd6:	18 16       	cp	r1, r24
    2bd8:	4c f5       	brge	.+82     	; 0x2c2c <int0_isr+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bda:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bde:	8d 85       	ldd	r24, Y+13	; 0x0d
    2be0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be2:	20 e0       	ldi	r18, 0x00	; 0
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	40 e2       	ldi	r20, 0x20	; 32
    2be8:	51 e4       	ldi	r21, 0x41	; 65
    2bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bee:	dc 01       	movw	r26, r24
    2bf0:	cb 01       	movw	r24, r22
    2bf2:	bc 01       	movw	r22, r24
    2bf4:	cd 01       	movw	r24, r26
    2bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	9e 83       	std	Y+6, r25	; 0x06
    2c00:	8d 83       	std	Y+5, r24	; 0x05
    2c02:	0f c0       	rjmp	.+30     	; 0x2c22 <int0_isr+0xd0>
    2c04:	88 ec       	ldi	r24, 0xC8	; 200
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	9c 83       	std	Y+4, r25	; 0x04
    2c0a:	8b 83       	std	Y+3, r24	; 0x03
    2c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c10:	01 97       	sbiw	r24, 0x01	; 1
    2c12:	f1 f7       	brne	.-4      	; 0x2c10 <int0_isr+0xbe>
    2c14:	9c 83       	std	Y+4, r25	; 0x04
    2c16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c18:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1c:	01 97       	sbiw	r24, 0x01	; 1
    2c1e:	9e 83       	std	Y+6, r25	; 0x06
    2c20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c22:	8d 81       	ldd	r24, Y+5	; 0x05
    2c24:	9e 81       	ldd	r25, Y+6	; 0x06
    2c26:	00 97       	sbiw	r24, 0x00	; 0
    2c28:	69 f7       	brne	.-38     	; 0x2c04 <int0_isr+0xb2>
    2c2a:	14 c0       	rjmp	.+40     	; 0x2c54 <int0_isr+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c2e:	78 85       	ldd	r23, Y+8	; 0x08
    2c30:	89 85       	ldd	r24, Y+9	; 0x09
    2c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	9e 83       	std	Y+6, r25	; 0x06
    2c3e:	8d 83       	std	Y+5, r24	; 0x05
    2c40:	8d 81       	ldd	r24, Y+5	; 0x05
    2c42:	9e 81       	ldd	r25, Y+6	; 0x06
    2c44:	9a 83       	std	Y+2, r25	; 0x02
    2c46:	89 83       	std	Y+1, r24	; 0x01
    2c48:	89 81       	ldd	r24, Y+1	; 0x01
    2c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c4c:	01 97       	sbiw	r24, 0x01	; 1
    2c4e:	f1 f7       	brne	.-4      	; 0x2c4c <int0_isr+0xfa>
    2c50:	9a 83       	std	Y+2, r25	; 0x02
    2c52:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    2c54:	2e 96       	adiw	r28, 0x0e	; 14
    2c56:	0f b6       	in	r0, 0x3f	; 63
    2c58:	f8 94       	cli
    2c5a:	de bf       	out	0x3e, r29	; 62
    2c5c:	0f be       	out	0x3f, r0	; 63
    2c5e:	cd bf       	out	0x3d, r28	; 61
    2c60:	cf 91       	pop	r28
    2c62:	df 91       	pop	r29
    2c64:	08 95       	ret

00002c66 <main>:
						   .EXT_INT_ISR = int0_isr};



int main()
{
    2c66:	df 93       	push	r29
    2c68:	cf 93       	push	r28
    2c6a:	cd b7       	in	r28, 0x3d	; 61
    2c6c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(PORTA_INDEX, PIN0_INDEX, GPIO_DIRECTION_OUTPUT);
    2c6e:	80 e0       	ldi	r24, 0x00	; 0
    2c70:	60 e0       	ldi	r22, 0x00	; 0
    2c72:	41 e0       	ldi	r20, 0x01	; 1
    2c74:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD_INDEX, PIN2_INDEX, GPIO_DIRECTION_INPUT);
    2c78:	83 e0       	ldi	r24, 0x03	; 3
    2c7a:	62 e0       	ldi	r22, 0x02	; 2
    2c7c:	40 e0       	ldi	r20, 0x00	; 0
    2c7e:	0e 94 49 0b 	call	0x1692	; 0x1692 <DIO_voidSetPinDirection>
	ret_status = M_EXTI_voidEnable(&ext_obj);
    2c82:	83 e8       	ldi	r24, 0x83	; 131
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	0e 94 88 09 	call	0x1310	; 0x1310 <M_EXTI_voidEnable>
    2c8a:	80 93 b8 00 	sts	0x00B8, r24
	ret_status = M_EXTI_voidSet_CallBack(&ext_obj);
    2c8e:	83 e8       	ldi	r24, 0x83	; 131
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <M_EXTI_voidSet_CallBack>
    2c96:	80 93 b8 00 	sts	0x00B8, r24
	while (1)
	{
		DIO_voidSetPinValue(PORTA_INDEX, PIN0_INDEX, GPIO_HIGH);
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	60 e0       	ldi	r22, 0x00	; 0
    2c9e:	41 e0       	ldi	r20, 0x01	; 1
    2ca0:	0e 94 c0 0b 	call	0x1780	; 0x1780 <DIO_voidSetPinValue>
    2ca4:	fa cf       	rjmp	.-12     	; 0x2c9a <main+0x34>

00002ca6 <__udivmodqi4>:
    2ca6:	99 1b       	sub	r25, r25
    2ca8:	79 e0       	ldi	r23, 0x09	; 9
    2caa:	04 c0       	rjmp	.+8      	; 0x2cb4 <__udivmodqi4_ep>

00002cac <__udivmodqi4_loop>:
    2cac:	99 1f       	adc	r25, r25
    2cae:	96 17       	cp	r25, r22
    2cb0:	08 f0       	brcs	.+2      	; 0x2cb4 <__udivmodqi4_ep>
    2cb2:	96 1b       	sub	r25, r22

00002cb4 <__udivmodqi4_ep>:
    2cb4:	88 1f       	adc	r24, r24
    2cb6:	7a 95       	dec	r23
    2cb8:	c9 f7       	brne	.-14     	; 0x2cac <__udivmodqi4_loop>
    2cba:	80 95       	com	r24
    2cbc:	08 95       	ret

00002cbe <__divmodhi4>:
    2cbe:	97 fb       	bst	r25, 7
    2cc0:	09 2e       	mov	r0, r25
    2cc2:	07 26       	eor	r0, r23
    2cc4:	0a d0       	rcall	.+20     	; 0x2cda <__divmodhi4_neg1>
    2cc6:	77 fd       	sbrc	r23, 7
    2cc8:	04 d0       	rcall	.+8      	; 0x2cd2 <__divmodhi4_neg2>
    2cca:	0c d0       	rcall	.+24     	; 0x2ce4 <__udivmodhi4>
    2ccc:	06 d0       	rcall	.+12     	; 0x2cda <__divmodhi4_neg1>
    2cce:	00 20       	and	r0, r0
    2cd0:	1a f4       	brpl	.+6      	; 0x2cd8 <__divmodhi4_exit>

00002cd2 <__divmodhi4_neg2>:
    2cd2:	70 95       	com	r23
    2cd4:	61 95       	neg	r22
    2cd6:	7f 4f       	sbci	r23, 0xFF	; 255

00002cd8 <__divmodhi4_exit>:
    2cd8:	08 95       	ret

00002cda <__divmodhi4_neg1>:
    2cda:	f6 f7       	brtc	.-4      	; 0x2cd8 <__divmodhi4_exit>
    2cdc:	90 95       	com	r25
    2cde:	81 95       	neg	r24
    2ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ce2:	08 95       	ret

00002ce4 <__udivmodhi4>:
    2ce4:	aa 1b       	sub	r26, r26
    2ce6:	bb 1b       	sub	r27, r27
    2ce8:	51 e1       	ldi	r21, 0x11	; 17
    2cea:	07 c0       	rjmp	.+14     	; 0x2cfa <__udivmodhi4_ep>

00002cec <__udivmodhi4_loop>:
    2cec:	aa 1f       	adc	r26, r26
    2cee:	bb 1f       	adc	r27, r27
    2cf0:	a6 17       	cp	r26, r22
    2cf2:	b7 07       	cpc	r27, r23
    2cf4:	10 f0       	brcs	.+4      	; 0x2cfa <__udivmodhi4_ep>
    2cf6:	a6 1b       	sub	r26, r22
    2cf8:	b7 0b       	sbc	r27, r23

00002cfa <__udivmodhi4_ep>:
    2cfa:	88 1f       	adc	r24, r24
    2cfc:	99 1f       	adc	r25, r25
    2cfe:	5a 95       	dec	r21
    2d00:	a9 f7       	brne	.-22     	; 0x2cec <__udivmodhi4_loop>
    2d02:	80 95       	com	r24
    2d04:	90 95       	com	r25
    2d06:	bc 01       	movw	r22, r24
    2d08:	cd 01       	movw	r24, r26
    2d0a:	08 95       	ret

00002d0c <__prologue_saves__>:
    2d0c:	2f 92       	push	r2
    2d0e:	3f 92       	push	r3
    2d10:	4f 92       	push	r4
    2d12:	5f 92       	push	r5
    2d14:	6f 92       	push	r6
    2d16:	7f 92       	push	r7
    2d18:	8f 92       	push	r8
    2d1a:	9f 92       	push	r9
    2d1c:	af 92       	push	r10
    2d1e:	bf 92       	push	r11
    2d20:	cf 92       	push	r12
    2d22:	df 92       	push	r13
    2d24:	ef 92       	push	r14
    2d26:	ff 92       	push	r15
    2d28:	0f 93       	push	r16
    2d2a:	1f 93       	push	r17
    2d2c:	cf 93       	push	r28
    2d2e:	df 93       	push	r29
    2d30:	cd b7       	in	r28, 0x3d	; 61
    2d32:	de b7       	in	r29, 0x3e	; 62
    2d34:	ca 1b       	sub	r28, r26
    2d36:	db 0b       	sbc	r29, r27
    2d38:	0f b6       	in	r0, 0x3f	; 63
    2d3a:	f8 94       	cli
    2d3c:	de bf       	out	0x3e, r29	; 62
    2d3e:	0f be       	out	0x3f, r0	; 63
    2d40:	cd bf       	out	0x3d, r28	; 61
    2d42:	09 94       	ijmp

00002d44 <__epilogue_restores__>:
    2d44:	2a 88       	ldd	r2, Y+18	; 0x12
    2d46:	39 88       	ldd	r3, Y+17	; 0x11
    2d48:	48 88       	ldd	r4, Y+16	; 0x10
    2d4a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d4c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d4e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d50:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d52:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d54:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d56:	b9 84       	ldd	r11, Y+9	; 0x09
    2d58:	c8 84       	ldd	r12, Y+8	; 0x08
    2d5a:	df 80       	ldd	r13, Y+7	; 0x07
    2d5c:	ee 80       	ldd	r14, Y+6	; 0x06
    2d5e:	fd 80       	ldd	r15, Y+5	; 0x05
    2d60:	0c 81       	ldd	r16, Y+4	; 0x04
    2d62:	1b 81       	ldd	r17, Y+3	; 0x03
    2d64:	aa 81       	ldd	r26, Y+2	; 0x02
    2d66:	b9 81       	ldd	r27, Y+1	; 0x01
    2d68:	ce 0f       	add	r28, r30
    2d6a:	d1 1d       	adc	r29, r1
    2d6c:	0f b6       	in	r0, 0x3f	; 63
    2d6e:	f8 94       	cli
    2d70:	de bf       	out	0x3e, r29	; 62
    2d72:	0f be       	out	0x3f, r0	; 63
    2d74:	cd bf       	out	0x3d, r28	; 61
    2d76:	ed 01       	movw	r28, r26
    2d78:	08 95       	ret

00002d7a <memset>:
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	01 c0       	rjmp	.+2      	; 0x2d80 <memset+0x6>
    2d7e:	6d 93       	st	X+, r22
    2d80:	41 50       	subi	r20, 0x01	; 1
    2d82:	50 40       	sbci	r21, 0x00	; 0
    2d84:	e0 f7       	brcc	.-8      	; 0x2d7e <memset+0x4>
    2d86:	08 95       	ret

00002d88 <sprintf>:
    2d88:	ae e0       	ldi	r26, 0x0E	; 14
    2d8a:	b0 e0       	ldi	r27, 0x00	; 0
    2d8c:	ea ec       	ldi	r30, 0xCA	; 202
    2d8e:	f6 e1       	ldi	r31, 0x16	; 22
    2d90:	0c 94 94 16 	jmp	0x2d28	; 0x2d28 <__prologue_saves__+0x1c>
    2d94:	0d 89       	ldd	r16, Y+21	; 0x15
    2d96:	1e 89       	ldd	r17, Y+22	; 0x16
    2d98:	86 e0       	ldi	r24, 0x06	; 6
    2d9a:	8c 83       	std	Y+4, r24	; 0x04
    2d9c:	1a 83       	std	Y+2, r17	; 0x02
    2d9e:	09 83       	std	Y+1, r16	; 0x01
    2da0:	8f ef       	ldi	r24, 0xFF	; 255
    2da2:	9f e7       	ldi	r25, 0x7F	; 127
    2da4:	9e 83       	std	Y+6, r25	; 0x06
    2da6:	8d 83       	std	Y+5, r24	; 0x05
    2da8:	9e 01       	movw	r18, r28
    2daa:	27 5e       	subi	r18, 0xE7	; 231
    2dac:	3f 4f       	sbci	r19, 0xFF	; 255
    2dae:	ce 01       	movw	r24, r28
    2db0:	01 96       	adiw	r24, 0x01	; 1
    2db2:	6f 89       	ldd	r22, Y+23	; 0x17
    2db4:	78 8d       	ldd	r23, Y+24	; 0x18
    2db6:	a9 01       	movw	r20, r18
    2db8:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <vfprintf>
    2dbc:	2f 81       	ldd	r18, Y+7	; 0x07
    2dbe:	38 85       	ldd	r19, Y+8	; 0x08
    2dc0:	02 0f       	add	r16, r18
    2dc2:	13 1f       	adc	r17, r19
    2dc4:	f8 01       	movw	r30, r16
    2dc6:	10 82       	st	Z, r1
    2dc8:	2e 96       	adiw	r28, 0x0e	; 14
    2dca:	e4 e0       	ldi	r30, 0x04	; 4
    2dcc:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <__epilogue_restores__+0x1c>

00002dd0 <vfprintf>:
    2dd0:	ab e0       	ldi	r26, 0x0B	; 11
    2dd2:	b0 e0       	ldi	r27, 0x00	; 0
    2dd4:	ee ee       	ldi	r30, 0xEE	; 238
    2dd6:	f6 e1       	ldi	r31, 0x16	; 22
    2dd8:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__prologue_saves__>
    2ddc:	3c 01       	movw	r6, r24
    2dde:	2b 01       	movw	r4, r22
    2de0:	5a 01       	movw	r10, r20
    2de2:	fc 01       	movw	r30, r24
    2de4:	17 82       	std	Z+7, r1	; 0x07
    2de6:	16 82       	std	Z+6, r1	; 0x06
    2de8:	83 81       	ldd	r24, Z+3	; 0x03
    2dea:	81 fd       	sbrc	r24, 1
    2dec:	03 c0       	rjmp	.+6      	; 0x2df4 <vfprintf+0x24>
    2dee:	6f ef       	ldi	r22, 0xFF	; 255
    2df0:	7f ef       	ldi	r23, 0xFF	; 255
    2df2:	c6 c1       	rjmp	.+908    	; 0x3180 <vfprintf+0x3b0>
    2df4:	9a e0       	ldi	r25, 0x0A	; 10
    2df6:	89 2e       	mov	r8, r25
    2df8:	1e 01       	movw	r2, r28
    2dfa:	08 94       	sec
    2dfc:	21 1c       	adc	r2, r1
    2dfe:	31 1c       	adc	r3, r1
    2e00:	f3 01       	movw	r30, r6
    2e02:	23 81       	ldd	r18, Z+3	; 0x03
    2e04:	f2 01       	movw	r30, r4
    2e06:	23 fd       	sbrc	r18, 3
    2e08:	85 91       	lpm	r24, Z+
    2e0a:	23 ff       	sbrs	r18, 3
    2e0c:	81 91       	ld	r24, Z+
    2e0e:	2f 01       	movw	r4, r30
    2e10:	88 23       	and	r24, r24
    2e12:	09 f4       	brne	.+2      	; 0x2e16 <vfprintf+0x46>
    2e14:	b2 c1       	rjmp	.+868    	; 0x317a <vfprintf+0x3aa>
    2e16:	85 32       	cpi	r24, 0x25	; 37
    2e18:	39 f4       	brne	.+14     	; 0x2e28 <vfprintf+0x58>
    2e1a:	23 fd       	sbrc	r18, 3
    2e1c:	85 91       	lpm	r24, Z+
    2e1e:	23 ff       	sbrs	r18, 3
    2e20:	81 91       	ld	r24, Z+
    2e22:	2f 01       	movw	r4, r30
    2e24:	85 32       	cpi	r24, 0x25	; 37
    2e26:	29 f4       	brne	.+10     	; 0x2e32 <vfprintf+0x62>
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	b3 01       	movw	r22, r6
    2e2c:	0e 94 db 18 	call	0x31b6	; 0x31b6 <fputc>
    2e30:	e7 cf       	rjmp	.-50     	; 0x2e00 <vfprintf+0x30>
    2e32:	98 2f       	mov	r25, r24
    2e34:	ff 24       	eor	r15, r15
    2e36:	ee 24       	eor	r14, r14
    2e38:	99 24       	eor	r9, r9
    2e3a:	ff e1       	ldi	r31, 0x1F	; 31
    2e3c:	ff 15       	cp	r31, r15
    2e3e:	d0 f0       	brcs	.+52     	; 0x2e74 <vfprintf+0xa4>
    2e40:	9b 32       	cpi	r25, 0x2B	; 43
    2e42:	69 f0       	breq	.+26     	; 0x2e5e <vfprintf+0x8e>
    2e44:	9c 32       	cpi	r25, 0x2C	; 44
    2e46:	28 f4       	brcc	.+10     	; 0x2e52 <vfprintf+0x82>
    2e48:	90 32       	cpi	r25, 0x20	; 32
    2e4a:	59 f0       	breq	.+22     	; 0x2e62 <vfprintf+0x92>
    2e4c:	93 32       	cpi	r25, 0x23	; 35
    2e4e:	91 f4       	brne	.+36     	; 0x2e74 <vfprintf+0xa4>
    2e50:	0e c0       	rjmp	.+28     	; 0x2e6e <vfprintf+0x9e>
    2e52:	9d 32       	cpi	r25, 0x2D	; 45
    2e54:	49 f0       	breq	.+18     	; 0x2e68 <vfprintf+0x98>
    2e56:	90 33       	cpi	r25, 0x30	; 48
    2e58:	69 f4       	brne	.+26     	; 0x2e74 <vfprintf+0xa4>
    2e5a:	41 e0       	ldi	r20, 0x01	; 1
    2e5c:	24 c0       	rjmp	.+72     	; 0x2ea6 <vfprintf+0xd6>
    2e5e:	52 e0       	ldi	r21, 0x02	; 2
    2e60:	f5 2a       	or	r15, r21
    2e62:	84 e0       	ldi	r24, 0x04	; 4
    2e64:	f8 2a       	or	r15, r24
    2e66:	28 c0       	rjmp	.+80     	; 0x2eb8 <vfprintf+0xe8>
    2e68:	98 e0       	ldi	r25, 0x08	; 8
    2e6a:	f9 2a       	or	r15, r25
    2e6c:	25 c0       	rjmp	.+74     	; 0x2eb8 <vfprintf+0xe8>
    2e6e:	e0 e1       	ldi	r30, 0x10	; 16
    2e70:	fe 2a       	or	r15, r30
    2e72:	22 c0       	rjmp	.+68     	; 0x2eb8 <vfprintf+0xe8>
    2e74:	f7 fc       	sbrc	r15, 7
    2e76:	29 c0       	rjmp	.+82     	; 0x2eca <vfprintf+0xfa>
    2e78:	89 2f       	mov	r24, r25
    2e7a:	80 53       	subi	r24, 0x30	; 48
    2e7c:	8a 30       	cpi	r24, 0x0A	; 10
    2e7e:	70 f4       	brcc	.+28     	; 0x2e9c <vfprintf+0xcc>
    2e80:	f6 fe       	sbrs	r15, 6
    2e82:	05 c0       	rjmp	.+10     	; 0x2e8e <vfprintf+0xbe>
    2e84:	98 9c       	mul	r9, r8
    2e86:	90 2c       	mov	r9, r0
    2e88:	11 24       	eor	r1, r1
    2e8a:	98 0e       	add	r9, r24
    2e8c:	15 c0       	rjmp	.+42     	; 0x2eb8 <vfprintf+0xe8>
    2e8e:	e8 9c       	mul	r14, r8
    2e90:	e0 2c       	mov	r14, r0
    2e92:	11 24       	eor	r1, r1
    2e94:	e8 0e       	add	r14, r24
    2e96:	f0 e2       	ldi	r31, 0x20	; 32
    2e98:	ff 2a       	or	r15, r31
    2e9a:	0e c0       	rjmp	.+28     	; 0x2eb8 <vfprintf+0xe8>
    2e9c:	9e 32       	cpi	r25, 0x2E	; 46
    2e9e:	29 f4       	brne	.+10     	; 0x2eaa <vfprintf+0xda>
    2ea0:	f6 fc       	sbrc	r15, 6
    2ea2:	6b c1       	rjmp	.+726    	; 0x317a <vfprintf+0x3aa>
    2ea4:	40 e4       	ldi	r20, 0x40	; 64
    2ea6:	f4 2a       	or	r15, r20
    2ea8:	07 c0       	rjmp	.+14     	; 0x2eb8 <vfprintf+0xe8>
    2eaa:	9c 36       	cpi	r25, 0x6C	; 108
    2eac:	19 f4       	brne	.+6      	; 0x2eb4 <vfprintf+0xe4>
    2eae:	50 e8       	ldi	r21, 0x80	; 128
    2eb0:	f5 2a       	or	r15, r21
    2eb2:	02 c0       	rjmp	.+4      	; 0x2eb8 <vfprintf+0xe8>
    2eb4:	98 36       	cpi	r25, 0x68	; 104
    2eb6:	49 f4       	brne	.+18     	; 0x2eca <vfprintf+0xfa>
    2eb8:	f2 01       	movw	r30, r4
    2eba:	23 fd       	sbrc	r18, 3
    2ebc:	95 91       	lpm	r25, Z+
    2ebe:	23 ff       	sbrs	r18, 3
    2ec0:	91 91       	ld	r25, Z+
    2ec2:	2f 01       	movw	r4, r30
    2ec4:	99 23       	and	r25, r25
    2ec6:	09 f0       	breq	.+2      	; 0x2eca <vfprintf+0xfa>
    2ec8:	b8 cf       	rjmp	.-144    	; 0x2e3a <vfprintf+0x6a>
    2eca:	89 2f       	mov	r24, r25
    2ecc:	85 54       	subi	r24, 0x45	; 69
    2ece:	83 30       	cpi	r24, 0x03	; 3
    2ed0:	18 f0       	brcs	.+6      	; 0x2ed8 <vfprintf+0x108>
    2ed2:	80 52       	subi	r24, 0x20	; 32
    2ed4:	83 30       	cpi	r24, 0x03	; 3
    2ed6:	38 f4       	brcc	.+14     	; 0x2ee6 <vfprintf+0x116>
    2ed8:	44 e0       	ldi	r20, 0x04	; 4
    2eda:	50 e0       	ldi	r21, 0x00	; 0
    2edc:	a4 0e       	add	r10, r20
    2ede:	b5 1e       	adc	r11, r21
    2ee0:	5f e3       	ldi	r21, 0x3F	; 63
    2ee2:	59 83       	std	Y+1, r21	; 0x01
    2ee4:	0f c0       	rjmp	.+30     	; 0x2f04 <vfprintf+0x134>
    2ee6:	93 36       	cpi	r25, 0x63	; 99
    2ee8:	31 f0       	breq	.+12     	; 0x2ef6 <vfprintf+0x126>
    2eea:	93 37       	cpi	r25, 0x73	; 115
    2eec:	79 f0       	breq	.+30     	; 0x2f0c <vfprintf+0x13c>
    2eee:	93 35       	cpi	r25, 0x53	; 83
    2ef0:	09 f0       	breq	.+2      	; 0x2ef4 <vfprintf+0x124>
    2ef2:	56 c0       	rjmp	.+172    	; 0x2fa0 <vfprintf+0x1d0>
    2ef4:	20 c0       	rjmp	.+64     	; 0x2f36 <vfprintf+0x166>
    2ef6:	f5 01       	movw	r30, r10
    2ef8:	80 81       	ld	r24, Z
    2efa:	89 83       	std	Y+1, r24	; 0x01
    2efc:	42 e0       	ldi	r20, 0x02	; 2
    2efe:	50 e0       	ldi	r21, 0x00	; 0
    2f00:	a4 0e       	add	r10, r20
    2f02:	b5 1e       	adc	r11, r21
    2f04:	61 01       	movw	r12, r2
    2f06:	01 e0       	ldi	r16, 0x01	; 1
    2f08:	10 e0       	ldi	r17, 0x00	; 0
    2f0a:	12 c0       	rjmp	.+36     	; 0x2f30 <vfprintf+0x160>
    2f0c:	f5 01       	movw	r30, r10
    2f0e:	c0 80       	ld	r12, Z
    2f10:	d1 80       	ldd	r13, Z+1	; 0x01
    2f12:	f6 fc       	sbrc	r15, 6
    2f14:	03 c0       	rjmp	.+6      	; 0x2f1c <vfprintf+0x14c>
    2f16:	6f ef       	ldi	r22, 0xFF	; 255
    2f18:	7f ef       	ldi	r23, 0xFF	; 255
    2f1a:	02 c0       	rjmp	.+4      	; 0x2f20 <vfprintf+0x150>
    2f1c:	69 2d       	mov	r22, r9
    2f1e:	70 e0       	ldi	r23, 0x00	; 0
    2f20:	42 e0       	ldi	r20, 0x02	; 2
    2f22:	50 e0       	ldi	r21, 0x00	; 0
    2f24:	a4 0e       	add	r10, r20
    2f26:	b5 1e       	adc	r11, r21
    2f28:	c6 01       	movw	r24, r12
    2f2a:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <strnlen>
    2f2e:	8c 01       	movw	r16, r24
    2f30:	5f e7       	ldi	r21, 0x7F	; 127
    2f32:	f5 22       	and	r15, r21
    2f34:	14 c0       	rjmp	.+40     	; 0x2f5e <vfprintf+0x18e>
    2f36:	f5 01       	movw	r30, r10
    2f38:	c0 80       	ld	r12, Z
    2f3a:	d1 80       	ldd	r13, Z+1	; 0x01
    2f3c:	f6 fc       	sbrc	r15, 6
    2f3e:	03 c0       	rjmp	.+6      	; 0x2f46 <vfprintf+0x176>
    2f40:	6f ef       	ldi	r22, 0xFF	; 255
    2f42:	7f ef       	ldi	r23, 0xFF	; 255
    2f44:	02 c0       	rjmp	.+4      	; 0x2f4a <vfprintf+0x17a>
    2f46:	69 2d       	mov	r22, r9
    2f48:	70 e0       	ldi	r23, 0x00	; 0
    2f4a:	42 e0       	ldi	r20, 0x02	; 2
    2f4c:	50 e0       	ldi	r21, 0x00	; 0
    2f4e:	a4 0e       	add	r10, r20
    2f50:	b5 1e       	adc	r11, r21
    2f52:	c6 01       	movw	r24, r12
    2f54:	0e 94 c5 18 	call	0x318a	; 0x318a <strnlen_P>
    2f58:	8c 01       	movw	r16, r24
    2f5a:	50 e8       	ldi	r21, 0x80	; 128
    2f5c:	f5 2a       	or	r15, r21
    2f5e:	f3 fe       	sbrs	r15, 3
    2f60:	07 c0       	rjmp	.+14     	; 0x2f70 <vfprintf+0x1a0>
    2f62:	1a c0       	rjmp	.+52     	; 0x2f98 <vfprintf+0x1c8>
    2f64:	80 e2       	ldi	r24, 0x20	; 32
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	b3 01       	movw	r22, r6
    2f6a:	0e 94 db 18 	call	0x31b6	; 0x31b6 <fputc>
    2f6e:	ea 94       	dec	r14
    2f70:	8e 2d       	mov	r24, r14
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	08 17       	cp	r16, r24
    2f76:	19 07       	cpc	r17, r25
    2f78:	a8 f3       	brcs	.-22     	; 0x2f64 <vfprintf+0x194>
    2f7a:	0e c0       	rjmp	.+28     	; 0x2f98 <vfprintf+0x1c8>
    2f7c:	f6 01       	movw	r30, r12
    2f7e:	f7 fc       	sbrc	r15, 7
    2f80:	85 91       	lpm	r24, Z+
    2f82:	f7 fe       	sbrs	r15, 7
    2f84:	81 91       	ld	r24, Z+
    2f86:	6f 01       	movw	r12, r30
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	b3 01       	movw	r22, r6
    2f8c:	0e 94 db 18 	call	0x31b6	; 0x31b6 <fputc>
    2f90:	e1 10       	cpse	r14, r1
    2f92:	ea 94       	dec	r14
    2f94:	01 50       	subi	r16, 0x01	; 1
    2f96:	10 40       	sbci	r17, 0x00	; 0
    2f98:	01 15       	cp	r16, r1
    2f9a:	11 05       	cpc	r17, r1
    2f9c:	79 f7       	brne	.-34     	; 0x2f7c <vfprintf+0x1ac>
    2f9e:	ea c0       	rjmp	.+468    	; 0x3174 <vfprintf+0x3a4>
    2fa0:	94 36       	cpi	r25, 0x64	; 100
    2fa2:	11 f0       	breq	.+4      	; 0x2fa8 <vfprintf+0x1d8>
    2fa4:	99 36       	cpi	r25, 0x69	; 105
    2fa6:	69 f5       	brne	.+90     	; 0x3002 <vfprintf+0x232>
    2fa8:	f7 fe       	sbrs	r15, 7
    2faa:	08 c0       	rjmp	.+16     	; 0x2fbc <vfprintf+0x1ec>
    2fac:	f5 01       	movw	r30, r10
    2fae:	20 81       	ld	r18, Z
    2fb0:	31 81       	ldd	r19, Z+1	; 0x01
    2fb2:	42 81       	ldd	r20, Z+2	; 0x02
    2fb4:	53 81       	ldd	r21, Z+3	; 0x03
    2fb6:	84 e0       	ldi	r24, 0x04	; 4
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	0a c0       	rjmp	.+20     	; 0x2fd0 <vfprintf+0x200>
    2fbc:	f5 01       	movw	r30, r10
    2fbe:	80 81       	ld	r24, Z
    2fc0:	91 81       	ldd	r25, Z+1	; 0x01
    2fc2:	9c 01       	movw	r18, r24
    2fc4:	44 27       	eor	r20, r20
    2fc6:	37 fd       	sbrc	r19, 7
    2fc8:	40 95       	com	r20
    2fca:	54 2f       	mov	r21, r20
    2fcc:	82 e0       	ldi	r24, 0x02	; 2
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	a8 0e       	add	r10, r24
    2fd2:	b9 1e       	adc	r11, r25
    2fd4:	9f e6       	ldi	r25, 0x6F	; 111
    2fd6:	f9 22       	and	r15, r25
    2fd8:	57 ff       	sbrs	r21, 7
    2fda:	09 c0       	rjmp	.+18     	; 0x2fee <vfprintf+0x21e>
    2fdc:	50 95       	com	r21
    2fde:	40 95       	com	r20
    2fe0:	30 95       	com	r19
    2fe2:	21 95       	neg	r18
    2fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe6:	4f 4f       	sbci	r20, 0xFF	; 255
    2fe8:	5f 4f       	sbci	r21, 0xFF	; 255
    2fea:	e0 e8       	ldi	r30, 0x80	; 128
    2fec:	fe 2a       	or	r15, r30
    2fee:	ca 01       	movw	r24, r20
    2ff0:	b9 01       	movw	r22, r18
    2ff2:	a1 01       	movw	r20, r2
    2ff4:	2a e0       	ldi	r18, 0x0A	; 10
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	0e 94 07 19 	call	0x320e	; 0x320e <__ultoa_invert>
    2ffc:	d8 2e       	mov	r13, r24
    2ffe:	d2 18       	sub	r13, r2
    3000:	40 c0       	rjmp	.+128    	; 0x3082 <vfprintf+0x2b2>
    3002:	95 37       	cpi	r25, 0x75	; 117
    3004:	29 f4       	brne	.+10     	; 0x3010 <vfprintf+0x240>
    3006:	1f 2d       	mov	r17, r15
    3008:	1f 7e       	andi	r17, 0xEF	; 239
    300a:	2a e0       	ldi	r18, 0x0A	; 10
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	1d c0       	rjmp	.+58     	; 0x304a <vfprintf+0x27a>
    3010:	1f 2d       	mov	r17, r15
    3012:	19 7f       	andi	r17, 0xF9	; 249
    3014:	9f 36       	cpi	r25, 0x6F	; 111
    3016:	61 f0       	breq	.+24     	; 0x3030 <vfprintf+0x260>
    3018:	90 37       	cpi	r25, 0x70	; 112
    301a:	20 f4       	brcc	.+8      	; 0x3024 <vfprintf+0x254>
    301c:	98 35       	cpi	r25, 0x58	; 88
    301e:	09 f0       	breq	.+2      	; 0x3022 <vfprintf+0x252>
    3020:	ac c0       	rjmp	.+344    	; 0x317a <vfprintf+0x3aa>
    3022:	0f c0       	rjmp	.+30     	; 0x3042 <vfprintf+0x272>
    3024:	90 37       	cpi	r25, 0x70	; 112
    3026:	39 f0       	breq	.+14     	; 0x3036 <vfprintf+0x266>
    3028:	98 37       	cpi	r25, 0x78	; 120
    302a:	09 f0       	breq	.+2      	; 0x302e <vfprintf+0x25e>
    302c:	a6 c0       	rjmp	.+332    	; 0x317a <vfprintf+0x3aa>
    302e:	04 c0       	rjmp	.+8      	; 0x3038 <vfprintf+0x268>
    3030:	28 e0       	ldi	r18, 0x08	; 8
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	0a c0       	rjmp	.+20     	; 0x304a <vfprintf+0x27a>
    3036:	10 61       	ori	r17, 0x10	; 16
    3038:	14 fd       	sbrc	r17, 4
    303a:	14 60       	ori	r17, 0x04	; 4
    303c:	20 e1       	ldi	r18, 0x10	; 16
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	04 c0       	rjmp	.+8      	; 0x304a <vfprintf+0x27a>
    3042:	14 fd       	sbrc	r17, 4
    3044:	16 60       	ori	r17, 0x06	; 6
    3046:	20 e1       	ldi	r18, 0x10	; 16
    3048:	32 e0       	ldi	r19, 0x02	; 2
    304a:	17 ff       	sbrs	r17, 7
    304c:	08 c0       	rjmp	.+16     	; 0x305e <vfprintf+0x28e>
    304e:	f5 01       	movw	r30, r10
    3050:	60 81       	ld	r22, Z
    3052:	71 81       	ldd	r23, Z+1	; 0x01
    3054:	82 81       	ldd	r24, Z+2	; 0x02
    3056:	93 81       	ldd	r25, Z+3	; 0x03
    3058:	44 e0       	ldi	r20, 0x04	; 4
    305a:	50 e0       	ldi	r21, 0x00	; 0
    305c:	08 c0       	rjmp	.+16     	; 0x306e <vfprintf+0x29e>
    305e:	f5 01       	movw	r30, r10
    3060:	80 81       	ld	r24, Z
    3062:	91 81       	ldd	r25, Z+1	; 0x01
    3064:	bc 01       	movw	r22, r24
    3066:	80 e0       	ldi	r24, 0x00	; 0
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	42 e0       	ldi	r20, 0x02	; 2
    306c:	50 e0       	ldi	r21, 0x00	; 0
    306e:	a4 0e       	add	r10, r20
    3070:	b5 1e       	adc	r11, r21
    3072:	a1 01       	movw	r20, r2
    3074:	0e 94 07 19 	call	0x320e	; 0x320e <__ultoa_invert>
    3078:	d8 2e       	mov	r13, r24
    307a:	d2 18       	sub	r13, r2
    307c:	8f e7       	ldi	r24, 0x7F	; 127
    307e:	f8 2e       	mov	r15, r24
    3080:	f1 22       	and	r15, r17
    3082:	f6 fe       	sbrs	r15, 6
    3084:	0b c0       	rjmp	.+22     	; 0x309c <vfprintf+0x2cc>
    3086:	5e ef       	ldi	r21, 0xFE	; 254
    3088:	f5 22       	and	r15, r21
    308a:	d9 14       	cp	r13, r9
    308c:	38 f4       	brcc	.+14     	; 0x309c <vfprintf+0x2cc>
    308e:	f4 fe       	sbrs	r15, 4
    3090:	07 c0       	rjmp	.+14     	; 0x30a0 <vfprintf+0x2d0>
    3092:	f2 fc       	sbrc	r15, 2
    3094:	05 c0       	rjmp	.+10     	; 0x30a0 <vfprintf+0x2d0>
    3096:	8f ee       	ldi	r24, 0xEF	; 239
    3098:	f8 22       	and	r15, r24
    309a:	02 c0       	rjmp	.+4      	; 0x30a0 <vfprintf+0x2d0>
    309c:	1d 2d       	mov	r17, r13
    309e:	01 c0       	rjmp	.+2      	; 0x30a2 <vfprintf+0x2d2>
    30a0:	19 2d       	mov	r17, r9
    30a2:	f4 fe       	sbrs	r15, 4
    30a4:	0d c0       	rjmp	.+26     	; 0x30c0 <vfprintf+0x2f0>
    30a6:	fe 01       	movw	r30, r28
    30a8:	ed 0d       	add	r30, r13
    30aa:	f1 1d       	adc	r31, r1
    30ac:	80 81       	ld	r24, Z
    30ae:	80 33       	cpi	r24, 0x30	; 48
    30b0:	19 f4       	brne	.+6      	; 0x30b8 <vfprintf+0x2e8>
    30b2:	99 ee       	ldi	r25, 0xE9	; 233
    30b4:	f9 22       	and	r15, r25
    30b6:	08 c0       	rjmp	.+16     	; 0x30c8 <vfprintf+0x2f8>
    30b8:	1f 5f       	subi	r17, 0xFF	; 255
    30ba:	f2 fe       	sbrs	r15, 2
    30bc:	05 c0       	rjmp	.+10     	; 0x30c8 <vfprintf+0x2f8>
    30be:	03 c0       	rjmp	.+6      	; 0x30c6 <vfprintf+0x2f6>
    30c0:	8f 2d       	mov	r24, r15
    30c2:	86 78       	andi	r24, 0x86	; 134
    30c4:	09 f0       	breq	.+2      	; 0x30c8 <vfprintf+0x2f8>
    30c6:	1f 5f       	subi	r17, 0xFF	; 255
    30c8:	0f 2d       	mov	r16, r15
    30ca:	f3 fc       	sbrc	r15, 3
    30cc:	14 c0       	rjmp	.+40     	; 0x30f6 <vfprintf+0x326>
    30ce:	f0 fe       	sbrs	r15, 0
    30d0:	0f c0       	rjmp	.+30     	; 0x30f0 <vfprintf+0x320>
    30d2:	1e 15       	cp	r17, r14
    30d4:	10 f0       	brcs	.+4      	; 0x30da <vfprintf+0x30a>
    30d6:	9d 2c       	mov	r9, r13
    30d8:	0b c0       	rjmp	.+22     	; 0x30f0 <vfprintf+0x320>
    30da:	9d 2c       	mov	r9, r13
    30dc:	9e 0c       	add	r9, r14
    30de:	91 1a       	sub	r9, r17
    30e0:	1e 2d       	mov	r17, r14
    30e2:	06 c0       	rjmp	.+12     	; 0x30f0 <vfprintf+0x320>
    30e4:	80 e2       	ldi	r24, 0x20	; 32
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	b3 01       	movw	r22, r6
    30ea:	0e 94 db 18 	call	0x31b6	; 0x31b6 <fputc>
    30ee:	1f 5f       	subi	r17, 0xFF	; 255
    30f0:	1e 15       	cp	r17, r14
    30f2:	c0 f3       	brcs	.-16     	; 0x30e4 <vfprintf+0x314>
    30f4:	04 c0       	rjmp	.+8      	; 0x30fe <vfprintf+0x32e>
    30f6:	1e 15       	cp	r17, r14
    30f8:	10 f4       	brcc	.+4      	; 0x30fe <vfprintf+0x32e>
    30fa:	e1 1a       	sub	r14, r17
    30fc:	01 c0       	rjmp	.+2      	; 0x3100 <vfprintf+0x330>
    30fe:	ee 24       	eor	r14, r14
    3100:	04 ff       	sbrs	r16, 4
    3102:	0f c0       	rjmp	.+30     	; 0x3122 <vfprintf+0x352>
    3104:	80 e3       	ldi	r24, 0x30	; 48
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	b3 01       	movw	r22, r6
    310a:	0e 94 db 18 	call	0x31b6	; 0x31b6 <fputc>
    310e:	02 ff       	sbrs	r16, 2
    3110:	1d c0       	rjmp	.+58     	; 0x314c <vfprintf+0x37c>
    3112:	01 fd       	sbrc	r16, 1
    3114:	03 c0       	rjmp	.+6      	; 0x311c <vfprintf+0x34c>
    3116:	88 e7       	ldi	r24, 0x78	; 120
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	0e c0       	rjmp	.+28     	; 0x3138 <vfprintf+0x368>
    311c:	88 e5       	ldi	r24, 0x58	; 88
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	0b c0       	rjmp	.+22     	; 0x3138 <vfprintf+0x368>
    3122:	80 2f       	mov	r24, r16
    3124:	86 78       	andi	r24, 0x86	; 134
    3126:	91 f0       	breq	.+36     	; 0x314c <vfprintf+0x37c>
    3128:	01 ff       	sbrs	r16, 1
    312a:	02 c0       	rjmp	.+4      	; 0x3130 <vfprintf+0x360>
    312c:	8b e2       	ldi	r24, 0x2B	; 43
    312e:	01 c0       	rjmp	.+2      	; 0x3132 <vfprintf+0x362>
    3130:	80 e2       	ldi	r24, 0x20	; 32
    3132:	f7 fc       	sbrc	r15, 7
    3134:	8d e2       	ldi	r24, 0x2D	; 45
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	b3 01       	movw	r22, r6
    313a:	0e 94 db 18 	call	0x31b6	; 0x31b6 <fputc>
    313e:	06 c0       	rjmp	.+12     	; 0x314c <vfprintf+0x37c>
    3140:	80 e3       	ldi	r24, 0x30	; 48
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	b3 01       	movw	r22, r6
    3146:	0e 94 db 18 	call	0x31b6	; 0x31b6 <fputc>
    314a:	9a 94       	dec	r9
    314c:	d9 14       	cp	r13, r9
    314e:	c0 f3       	brcs	.-16     	; 0x3140 <vfprintf+0x370>
    3150:	da 94       	dec	r13
    3152:	f1 01       	movw	r30, r2
    3154:	ed 0d       	add	r30, r13
    3156:	f1 1d       	adc	r31, r1
    3158:	80 81       	ld	r24, Z
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	b3 01       	movw	r22, r6
    315e:	0e 94 db 18 	call	0x31b6	; 0x31b6 <fputc>
    3162:	dd 20       	and	r13, r13
    3164:	a9 f7       	brne	.-22     	; 0x3150 <vfprintf+0x380>
    3166:	06 c0       	rjmp	.+12     	; 0x3174 <vfprintf+0x3a4>
    3168:	80 e2       	ldi	r24, 0x20	; 32
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	b3 01       	movw	r22, r6
    316e:	0e 94 db 18 	call	0x31b6	; 0x31b6 <fputc>
    3172:	ea 94       	dec	r14
    3174:	ee 20       	and	r14, r14
    3176:	c1 f7       	brne	.-16     	; 0x3168 <vfprintf+0x398>
    3178:	43 ce       	rjmp	.-890    	; 0x2e00 <vfprintf+0x30>
    317a:	f3 01       	movw	r30, r6
    317c:	66 81       	ldd	r22, Z+6	; 0x06
    317e:	77 81       	ldd	r23, Z+7	; 0x07
    3180:	cb 01       	movw	r24, r22
    3182:	2b 96       	adiw	r28, 0x0b	; 11
    3184:	e2 e1       	ldi	r30, 0x12	; 18
    3186:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <__epilogue_restores__>

0000318a <strnlen_P>:
    318a:	fc 01       	movw	r30, r24
    318c:	05 90       	lpm	r0, Z+
    318e:	61 50       	subi	r22, 0x01	; 1
    3190:	70 40       	sbci	r23, 0x00	; 0
    3192:	01 10       	cpse	r0, r1
    3194:	d8 f7       	brcc	.-10     	; 0x318c <strnlen_P+0x2>
    3196:	80 95       	com	r24
    3198:	90 95       	com	r25
    319a:	8e 0f       	add	r24, r30
    319c:	9f 1f       	adc	r25, r31
    319e:	08 95       	ret

000031a0 <strnlen>:
    31a0:	fc 01       	movw	r30, r24
    31a2:	61 50       	subi	r22, 0x01	; 1
    31a4:	70 40       	sbci	r23, 0x00	; 0
    31a6:	01 90       	ld	r0, Z+
    31a8:	01 10       	cpse	r0, r1
    31aa:	d8 f7       	brcc	.-10     	; 0x31a2 <strnlen+0x2>
    31ac:	80 95       	com	r24
    31ae:	90 95       	com	r25
    31b0:	8e 0f       	add	r24, r30
    31b2:	9f 1f       	adc	r25, r31
    31b4:	08 95       	ret

000031b6 <fputc>:
    31b6:	0f 93       	push	r16
    31b8:	1f 93       	push	r17
    31ba:	cf 93       	push	r28
    31bc:	df 93       	push	r29
    31be:	8c 01       	movw	r16, r24
    31c0:	eb 01       	movw	r28, r22
    31c2:	8b 81       	ldd	r24, Y+3	; 0x03
    31c4:	81 ff       	sbrs	r24, 1
    31c6:	1b c0       	rjmp	.+54     	; 0x31fe <fputc+0x48>
    31c8:	82 ff       	sbrs	r24, 2
    31ca:	0d c0       	rjmp	.+26     	; 0x31e6 <fputc+0x30>
    31cc:	2e 81       	ldd	r18, Y+6	; 0x06
    31ce:	3f 81       	ldd	r19, Y+7	; 0x07
    31d0:	8c 81       	ldd	r24, Y+4	; 0x04
    31d2:	9d 81       	ldd	r25, Y+5	; 0x05
    31d4:	28 17       	cp	r18, r24
    31d6:	39 07       	cpc	r19, r25
    31d8:	64 f4       	brge	.+24     	; 0x31f2 <fputc+0x3c>
    31da:	e8 81       	ld	r30, Y
    31dc:	f9 81       	ldd	r31, Y+1	; 0x01
    31de:	01 93       	st	Z+, r16
    31e0:	f9 83       	std	Y+1, r31	; 0x01
    31e2:	e8 83       	st	Y, r30
    31e4:	06 c0       	rjmp	.+12     	; 0x31f2 <fputc+0x3c>
    31e6:	e8 85       	ldd	r30, Y+8	; 0x08
    31e8:	f9 85       	ldd	r31, Y+9	; 0x09
    31ea:	80 2f       	mov	r24, r16
    31ec:	09 95       	icall
    31ee:	89 2b       	or	r24, r25
    31f0:	31 f4       	brne	.+12     	; 0x31fe <fputc+0x48>
    31f2:	8e 81       	ldd	r24, Y+6	; 0x06
    31f4:	9f 81       	ldd	r25, Y+7	; 0x07
    31f6:	01 96       	adiw	r24, 0x01	; 1
    31f8:	9f 83       	std	Y+7, r25	; 0x07
    31fa:	8e 83       	std	Y+6, r24	; 0x06
    31fc:	02 c0       	rjmp	.+4      	; 0x3202 <fputc+0x4c>
    31fe:	0f ef       	ldi	r16, 0xFF	; 255
    3200:	1f ef       	ldi	r17, 0xFF	; 255
    3202:	c8 01       	movw	r24, r16
    3204:	df 91       	pop	r29
    3206:	cf 91       	pop	r28
    3208:	1f 91       	pop	r17
    320a:	0f 91       	pop	r16
    320c:	08 95       	ret

0000320e <__ultoa_invert>:
    320e:	fa 01       	movw	r30, r20
    3210:	aa 27       	eor	r26, r26
    3212:	28 30       	cpi	r18, 0x08	; 8
    3214:	51 f1       	breq	.+84     	; 0x326a <__ultoa_invert+0x5c>
    3216:	20 31       	cpi	r18, 0x10	; 16
    3218:	81 f1       	breq	.+96     	; 0x327a <__ultoa_invert+0x6c>
    321a:	e8 94       	clt
    321c:	6f 93       	push	r22
    321e:	6e 7f       	andi	r22, 0xFE	; 254
    3220:	6e 5f       	subi	r22, 0xFE	; 254
    3222:	7f 4f       	sbci	r23, 0xFF	; 255
    3224:	8f 4f       	sbci	r24, 0xFF	; 255
    3226:	9f 4f       	sbci	r25, 0xFF	; 255
    3228:	af 4f       	sbci	r26, 0xFF	; 255
    322a:	b1 e0       	ldi	r27, 0x01	; 1
    322c:	3e d0       	rcall	.+124    	; 0x32aa <__ultoa_invert+0x9c>
    322e:	b4 e0       	ldi	r27, 0x04	; 4
    3230:	3c d0       	rcall	.+120    	; 0x32aa <__ultoa_invert+0x9c>
    3232:	67 0f       	add	r22, r23
    3234:	78 1f       	adc	r23, r24
    3236:	89 1f       	adc	r24, r25
    3238:	9a 1f       	adc	r25, r26
    323a:	a1 1d       	adc	r26, r1
    323c:	68 0f       	add	r22, r24
    323e:	79 1f       	adc	r23, r25
    3240:	8a 1f       	adc	r24, r26
    3242:	91 1d       	adc	r25, r1
    3244:	a1 1d       	adc	r26, r1
    3246:	6a 0f       	add	r22, r26
    3248:	71 1d       	adc	r23, r1
    324a:	81 1d       	adc	r24, r1
    324c:	91 1d       	adc	r25, r1
    324e:	a1 1d       	adc	r26, r1
    3250:	20 d0       	rcall	.+64     	; 0x3292 <__ultoa_invert+0x84>
    3252:	09 f4       	brne	.+2      	; 0x3256 <__ultoa_invert+0x48>
    3254:	68 94       	set
    3256:	3f 91       	pop	r19
    3258:	2a e0       	ldi	r18, 0x0A	; 10
    325a:	26 9f       	mul	r18, r22
    325c:	11 24       	eor	r1, r1
    325e:	30 19       	sub	r19, r0
    3260:	30 5d       	subi	r19, 0xD0	; 208
    3262:	31 93       	st	Z+, r19
    3264:	de f6       	brtc	.-74     	; 0x321c <__ultoa_invert+0xe>
    3266:	cf 01       	movw	r24, r30
    3268:	08 95       	ret
    326a:	46 2f       	mov	r20, r22
    326c:	47 70       	andi	r20, 0x07	; 7
    326e:	40 5d       	subi	r20, 0xD0	; 208
    3270:	41 93       	st	Z+, r20
    3272:	b3 e0       	ldi	r27, 0x03	; 3
    3274:	0f d0       	rcall	.+30     	; 0x3294 <__ultoa_invert+0x86>
    3276:	c9 f7       	brne	.-14     	; 0x326a <__ultoa_invert+0x5c>
    3278:	f6 cf       	rjmp	.-20     	; 0x3266 <__ultoa_invert+0x58>
    327a:	46 2f       	mov	r20, r22
    327c:	4f 70       	andi	r20, 0x0F	; 15
    327e:	40 5d       	subi	r20, 0xD0	; 208
    3280:	4a 33       	cpi	r20, 0x3A	; 58
    3282:	18 f0       	brcs	.+6      	; 0x328a <__ultoa_invert+0x7c>
    3284:	49 5d       	subi	r20, 0xD9	; 217
    3286:	31 fd       	sbrc	r19, 1
    3288:	40 52       	subi	r20, 0x20	; 32
    328a:	41 93       	st	Z+, r20
    328c:	02 d0       	rcall	.+4      	; 0x3292 <__ultoa_invert+0x84>
    328e:	a9 f7       	brne	.-22     	; 0x327a <__ultoa_invert+0x6c>
    3290:	ea cf       	rjmp	.-44     	; 0x3266 <__ultoa_invert+0x58>
    3292:	b4 e0       	ldi	r27, 0x04	; 4
    3294:	a6 95       	lsr	r26
    3296:	97 95       	ror	r25
    3298:	87 95       	ror	r24
    329a:	77 95       	ror	r23
    329c:	67 95       	ror	r22
    329e:	ba 95       	dec	r27
    32a0:	c9 f7       	brne	.-14     	; 0x3294 <__ultoa_invert+0x86>
    32a2:	00 97       	sbiw	r24, 0x00	; 0
    32a4:	61 05       	cpc	r22, r1
    32a6:	71 05       	cpc	r23, r1
    32a8:	08 95       	ret
    32aa:	9b 01       	movw	r18, r22
    32ac:	ac 01       	movw	r20, r24
    32ae:	0a 2e       	mov	r0, r26
    32b0:	06 94       	lsr	r0
    32b2:	57 95       	ror	r21
    32b4:	47 95       	ror	r20
    32b6:	37 95       	ror	r19
    32b8:	27 95       	ror	r18
    32ba:	ba 95       	dec	r27
    32bc:	c9 f7       	brne	.-14     	; 0x32b0 <__ultoa_invert+0xa2>
    32be:	62 0f       	add	r22, r18
    32c0:	73 1f       	adc	r23, r19
    32c2:	84 1f       	adc	r24, r20
    32c4:	95 1f       	adc	r25, r21
    32c6:	a0 1d       	adc	r26, r0
    32c8:	08 95       	ret

000032ca <_exit>:
    32ca:	f8 94       	cli

000032cc <__stop_program>:
    32cc:	ff cf       	rjmp	.-2      	; 0x32cc <__stop_program>
