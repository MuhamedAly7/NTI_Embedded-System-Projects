
NTI_MohamedAli.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000048de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008e  00800060  000048de  00004972  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000082  008000ee  008000ee  00004a00  2**0
                  ALLOC
  3 .stab         000069d8  00000000  00000000  00004a00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004f7e  00000000  00000000  0000b3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00010356  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00010496  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00010606  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0001224f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0001313a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00013ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00014048  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000142d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014aa3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6e 0e 	jmp	0x1cdc	; 0x1cdc <__vector_1>
       8:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__vector_2>
       c:	0c 94 de 0e 	jmp	0x1dbc	; 0x1dbc <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 51 09 	jmp	0x12a2	; 0x12a2 <__vector_6>
      1c:	0c 94 19 09 	jmp	0x1232	; 0x1232 <__vector_7>
      20:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <__vector_8>
      24:	0c 94 a9 08 	jmp	0x1152	; 0x1152 <__vector_9>
      28:	0c 94 1d 0d 	jmp	0x1a3a	; 0x1a3a <__vector_10>
      2c:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <__vector_11>
      30:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ed       	ldi	r30, 0xDE	; 222
      68:	f8 e4       	ldi	r31, 0x48	; 72
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3e       	cpi	r26, 0xEE	; 238
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ee       	ldi	r26, 0xEE	; 238
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 37       	cpi	r26, 0x70	; 112
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <main>
      8a:	0c 94 6d 24 	jmp	0x48da	; 0x48da <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 64 21 	jmp	0x42c8	; 0x42c8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e9       	ldi	r26, 0x97	; 151
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 80 21 	jmp	0x4300	; 0x4300 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 70 21 	jmp	0x42e0	; 0x42e0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8c 21 	jmp	0x4318	; 0x4318 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 70 21 	jmp	0x42e0	; 0x42e0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8c 21 	jmp	0x4318	; 0x4318 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 64 21 	jmp	0x42c8	; 0x42c8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e9       	ldi	r24, 0x97	; 151
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 80 21 	jmp	0x4300	; 0x4300 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 70 21 	jmp	0x42e0	; 0x42e0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8c 21 	jmp	0x4318	; 0x4318 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 70 21 	jmp	0x42e0	; 0x42e0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8c 21 	jmp	0x4318	; 0x4318 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 70 21 	jmp	0x42e0	; 0x42e0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8c 21 	jmp	0x4318	; 0x4318 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 74 21 	jmp	0x42e8	; 0x42e8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 90 21 	jmp	0x4320	; 0x4320 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer1_Init>:
void(*Timer1_CompB_isr)(void) = NULL;
void(*Timer1_CompA_isr)(void) = NULL;
void(*Timer1_Capt_isr)(void) = NULL;

Error_Status_t Timer1_Init(const timer1_t *timer1_obj)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Timer1_Init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <Timer1_Init+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	9b 83       	std	Y+3, r25	; 0x03
     b56:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
     b58:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	9b 81       	ldd	r25, Y+3	; 0x03
     b5e:	00 97       	sbiw	r24, 0x00	; 0
     b60:	19 f4       	brne	.+6      	; 0xb68 <Timer1_Init+0x22>
	{
		ret_status = NULL_POINTER;
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	89 83       	std	Y+1, r24	; 0x01
     b66:	ae c0       	rjmp	.+348    	; 0xcc4 <Timer1_Init+0x17e>
	}
	else
	{
		// To initialize mode
		TIMER1_CONTROL->TCCR1A_CFG.WGM1_0_BIT = (((timer1_obj->mode) >> 0) & 0x01);
     b68:	a6 e4       	ldi	r26, 0x46	; 70
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	ea 81       	ldd	r30, Y+2	; 0x02
     b6e:	fb 81       	ldd	r31, Y+3	; 0x03
     b70:	80 85       	ldd	r24, Z+8	; 0x08
     b72:	8f 70       	andi	r24, 0x0F	; 15
     b74:	81 70       	andi	r24, 0x01	; 1
     b76:	81 70       	andi	r24, 0x01	; 1
     b78:	81 70       	andi	r24, 0x01	; 1
     b7a:	98 2f       	mov	r25, r24
     b7c:	91 70       	andi	r25, 0x01	; 1
     b7e:	19 96       	adiw	r26, 0x09	; 9
     b80:	8c 91       	ld	r24, X
     b82:	19 97       	sbiw	r26, 0x09	; 9
     b84:	8e 7f       	andi	r24, 0xFE	; 254
     b86:	89 2b       	or	r24, r25
     b88:	19 96       	adiw	r26, 0x09	; 9
     b8a:	8c 93       	st	X, r24
		TIMER1_CONTROL->TCCR1A_CFG.WGM1_1_BIT = (((timer1_obj->mode) >> 1) & 0x01);
     b8c:	a6 e4       	ldi	r26, 0x46	; 70
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	ea 81       	ldd	r30, Y+2	; 0x02
     b92:	fb 81       	ldd	r31, Y+3	; 0x03
     b94:	80 85       	ldd	r24, Z+8	; 0x08
     b96:	8f 70       	andi	r24, 0x0F	; 15
     b98:	88 2f       	mov	r24, r24
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	95 95       	asr	r25
     b9e:	87 95       	ror	r24
     ba0:	81 70       	andi	r24, 0x01	; 1
     ba2:	81 70       	andi	r24, 0x01	; 1
     ba4:	81 70       	andi	r24, 0x01	; 1
     ba6:	81 70       	andi	r24, 0x01	; 1
     ba8:	98 2f       	mov	r25, r24
     baa:	99 0f       	add	r25, r25
     bac:	19 96       	adiw	r26, 0x09	; 9
     bae:	8c 91       	ld	r24, X
     bb0:	19 97       	sbiw	r26, 0x09	; 9
     bb2:	8d 7f       	andi	r24, 0xFD	; 253
     bb4:	89 2b       	or	r24, r25
     bb6:	19 96       	adiw	r26, 0x09	; 9
     bb8:	8c 93       	st	X, r24
		TIMER1_CONTROL->TCCR1B_CFG.WGM1_2_BIT = (((timer1_obj->mode) >> 2) & 0x01);
     bba:	a6 e4       	ldi	r26, 0x46	; 70
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	ea 81       	ldd	r30, Y+2	; 0x02
     bc0:	fb 81       	ldd	r31, Y+3	; 0x03
     bc2:	80 85       	ldd	r24, Z+8	; 0x08
     bc4:	8f 70       	andi	r24, 0x0F	; 15
     bc6:	88 2f       	mov	r24, r24
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	95 95       	asr	r25
     bcc:	87 95       	ror	r24
     bce:	95 95       	asr	r25
     bd0:	87 95       	ror	r24
     bd2:	81 70       	andi	r24, 0x01	; 1
     bd4:	81 70       	andi	r24, 0x01	; 1
     bd6:	81 70       	andi	r24, 0x01	; 1
     bd8:	81 70       	andi	r24, 0x01	; 1
     bda:	98 2f       	mov	r25, r24
     bdc:	99 0f       	add	r25, r25
     bde:	99 0f       	add	r25, r25
     be0:	99 0f       	add	r25, r25
     be2:	18 96       	adiw	r26, 0x08	; 8
     be4:	8c 91       	ld	r24, X
     be6:	18 97       	sbiw	r26, 0x08	; 8
     be8:	87 7f       	andi	r24, 0xF7	; 247
     bea:	89 2b       	or	r24, r25
     bec:	18 96       	adiw	r26, 0x08	; 8
     bee:	8c 93       	st	X, r24
		TIMER1_CONTROL->TCCR1B_CFG.WGM1_3_BIT = (((timer1_obj->mode) >> 3) & 0x01);
     bf0:	a6 e4       	ldi	r26, 0x46	; 70
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	ea 81       	ldd	r30, Y+2	; 0x02
     bf6:	fb 81       	ldd	r31, Y+3	; 0x03
     bf8:	80 85       	ldd	r24, Z+8	; 0x08
     bfa:	8f 70       	andi	r24, 0x0F	; 15
     bfc:	88 2f       	mov	r24, r24
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	95 95       	asr	r25
     c02:	87 95       	ror	r24
     c04:	95 95       	asr	r25
     c06:	87 95       	ror	r24
     c08:	95 95       	asr	r25
     c0a:	87 95       	ror	r24
     c0c:	81 70       	andi	r24, 0x01	; 1
     c0e:	81 70       	andi	r24, 0x01	; 1
     c10:	81 70       	andi	r24, 0x01	; 1
     c12:	81 70       	andi	r24, 0x01	; 1
     c14:	98 2f       	mov	r25, r24
     c16:	92 95       	swap	r25
     c18:	90 7f       	andi	r25, 0xF0	; 240
     c1a:	18 96       	adiw	r26, 0x08	; 8
     c1c:	8c 91       	ld	r24, X
     c1e:	18 97       	sbiw	r26, 0x08	; 8
     c20:	8f 7e       	andi	r24, 0xEF	; 239
     c22:	89 2b       	or	r24, r25
     c24:	18 96       	adiw	r26, 0x08	; 8
     c26:	8c 93       	st	X, r24


		// To select the output compare match pin
		TIMER1_CONTROL->TCCR1A_CFG.COM1A_BITS = timer1_obj->ctc_mode_A_cfg;
     c28:	a6 e4       	ldi	r26, 0x46	; 70
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	ea 81       	ldd	r30, Y+2	; 0x02
     c2e:	fb 81       	ldd	r31, Y+3	; 0x03
     c30:	80 85       	ldd	r24, Z+8	; 0x08
     c32:	98 2f       	mov	r25, r24
     c34:	99 1f       	adc	r25, r25
     c36:	99 27       	eor	r25, r25
     c38:	99 1f       	adc	r25, r25
     c3a:	81 85       	ldd	r24, Z+9	; 0x09
     c3c:	81 70       	andi	r24, 0x01	; 1
     c3e:	88 0f       	add	r24, r24
     c40:	89 2b       	or	r24, r25
     c42:	98 2f       	mov	r25, r24
     c44:	92 95       	swap	r25
     c46:	99 0f       	add	r25, r25
     c48:	99 0f       	add	r25, r25
     c4a:	90 7c       	andi	r25, 0xC0	; 192
     c4c:	19 96       	adiw	r26, 0x09	; 9
     c4e:	8c 91       	ld	r24, X
     c50:	19 97       	sbiw	r26, 0x09	; 9
     c52:	8f 73       	andi	r24, 0x3F	; 63
     c54:	89 2b       	or	r24, r25
     c56:	19 96       	adiw	r26, 0x09	; 9
     c58:	8c 93       	st	X, r24
		TIMER1_CONTROL->TCCR1A_CFG.COM1B_BITS = timer1_obj->ctc_mode_B_cfg;
     c5a:	a6 e4       	ldi	r26, 0x46	; 70
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	ea 81       	ldd	r30, Y+2	; 0x02
     c60:	fb 81       	ldd	r31, Y+3	; 0x03
     c62:	81 85       	ldd	r24, Z+9	; 0x09
     c64:	86 95       	lsr	r24
     c66:	83 70       	andi	r24, 0x03	; 3
     c68:	83 70       	andi	r24, 0x03	; 3
     c6a:	98 2f       	mov	r25, r24
     c6c:	92 95       	swap	r25
     c6e:	90 7f       	andi	r25, 0xF0	; 240
     c70:	19 96       	adiw	r26, 0x09	; 9
     c72:	8c 91       	ld	r24, X
     c74:	19 97       	sbiw	r26, 0x09	; 9
     c76:	8f 7c       	andi	r24, 0xCF	; 207
     c78:	89 2b       	or	r24, r25
     c7a:	19 96       	adiw	r26, 0x09	; 9
     c7c:	8c 93       	st	X, r24
     c7e:	19 97       	sbiw	r26, 0x09	; 9


		// Set trigger of ICU
		switch(timer1_obj->icu_trigger) {
     c80:	ea 81       	ldd	r30, Y+2	; 0x02
     c82:	fb 81       	ldd	r31, Y+3	; 0x03
     c84:	81 85       	ldd	r24, Z+9	; 0x09
     c86:	86 95       	lsr	r24
     c88:	86 95       	lsr	r24
     c8a:	86 95       	lsr	r24
     c8c:	81 70       	andi	r24, 0x01	; 1
     c8e:	28 2f       	mov	r18, r24
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	3d 83       	std	Y+5, r19	; 0x05
     c94:	2c 83       	std	Y+4, r18	; 0x04
     c96:	8c 81       	ldd	r24, Y+4	; 0x04
     c98:	9d 81       	ldd	r25, Y+5	; 0x05
     c9a:	00 97       	sbiw	r24, 0x00	; 0
     c9c:	59 f0       	breq	.+22     	; 0xcb4 <Timer1_Init+0x16e>
     c9e:	2c 81       	ldd	r18, Y+4	; 0x04
     ca0:	3d 81       	ldd	r19, Y+5	; 0x05
     ca2:	21 30       	cpi	r18, 0x01	; 1
     ca4:	31 05       	cpc	r19, r1
     ca6:	61 f4       	brne	.+24     	; 0xcc0 <Timer1_Init+0x17a>
			case TIMER1_INPUT_CAPTURE_RISING_EDGE:
				TIMER1_ICU_TRIGGER_RISING_EDGE();
     ca8:	e6 e4       	ldi	r30, 0x46	; 70
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 85       	ldd	r24, Z+8	; 0x08
     cae:	80 64       	ori	r24, 0x40	; 64
     cb0:	80 87       	std	Z+8, r24	; 0x08
     cb2:	08 c0       	rjmp	.+16     	; 0xcc4 <Timer1_Init+0x17e>
				break;
			case TIMER1_INPUT_CAPTURE_FALLING_EDGE:
				TIMER1_ICU_TRIGGER_FALLING_EDGE();
     cb4:	e6 e4       	ldi	r30, 0x46	; 70
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 85       	ldd	r24, Z+8	; 0x08
     cba:	8f 7b       	andi	r24, 0xBF	; 191
     cbc:	80 87       	std	Z+8, r24	; 0x08
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <Timer1_Init+0x17e>
				break;
			default:
				ret_status = OUT_OF_RANGE_VALUE;
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}
	return ret_status;
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
}
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <Timer1_start>:


Error_Status_t Timer1_start(const timer1_t *timer1_obj)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <Timer1_start+0x6>
     cdc:	0f 92       	push	r0
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	9b 83       	std	Y+3, r25	; 0x03
     ce4:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
     ce6:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
     ce8:	8a 81       	ldd	r24, Y+2	; 0x02
     cea:	9b 81       	ldd	r25, Y+3	; 0x03
     cec:	00 97       	sbiw	r24, 0x00	; 0
     cee:	19 f4       	brne	.+6      	; 0xcf6 <Timer1_start+0x20>
	{
		ret_status = NULL_POINTER;
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	89 83       	std	Y+1, r24	; 0x01
     cf4:	43 c0       	rjmp	.+134    	; 0xd7c <Timer1_start+0xa6>
	}
	else
	{
		if(TIMER1_NORMAL_MODE == timer1_obj)
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	9b 81       	ldd	r25, Y+3	; 0x03
     cfa:	00 97       	sbiw	r24, 0x00	; 0
     cfc:	99 f4       	brne	.+38     	; 0xd24 <Timer1_start+0x4e>
		{
			TIMER1_CONTROL->TCCR1B_CFG.CS1_BITS = timer1_obj->prescaler_select;
     cfe:	a6 e4       	ldi	r26, 0x46	; 70
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	ea 81       	ldd	r30, Y+2	; 0x02
     d04:	fb 81       	ldd	r31, Y+3	; 0x03
     d06:	80 85       	ldd	r24, Z+8	; 0x08
     d08:	82 95       	swap	r24
     d0a:	8f 70       	andi	r24, 0x0F	; 15
     d0c:	87 70       	andi	r24, 0x07	; 7
     d0e:	98 2f       	mov	r25, r24
     d10:	97 70       	andi	r25, 0x07	; 7
     d12:	18 96       	adiw	r26, 0x08	; 8
     d14:	8c 91       	ld	r24, X
     d16:	18 97       	sbiw	r26, 0x08	; 8
     d18:	88 7f       	andi	r24, 0xF8	; 248
     d1a:	89 2b       	or	r24, r25
     d1c:	18 96       	adiw	r26, 0x08	; 8
     d1e:	8c 93       	st	X, r24
     d20:	18 97       	sbiw	r26, 0x08	; 8
     d22:	2c c0       	rjmp	.+88     	; 0xd7c <Timer1_start+0xa6>
		}
		else
		{
			TIMER1_CONTROL->TCCR1B_CFG.CS1_BITS = timer1_obj->prescaler_select;
     d24:	a6 e4       	ldi	r26, 0x46	; 70
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	ea 81       	ldd	r30, Y+2	; 0x02
     d2a:	fb 81       	ldd	r31, Y+3	; 0x03
     d2c:	80 85       	ldd	r24, Z+8	; 0x08
     d2e:	82 95       	swap	r24
     d30:	8f 70       	andi	r24, 0x0F	; 15
     d32:	87 70       	andi	r24, 0x07	; 7
     d34:	98 2f       	mov	r25, r24
     d36:	97 70       	andi	r25, 0x07	; 7
     d38:	18 96       	adiw	r26, 0x08	; 8
     d3a:	8c 91       	ld	r24, X
     d3c:	18 97       	sbiw	r26, 0x08	; 8
     d3e:	88 7f       	andi	r24, 0xF8	; 248
     d40:	89 2b       	or	r24, r25
     d42:	18 96       	adiw	r26, 0x08	; 8
     d44:	8c 93       	st	X, r24
			DIO_voidSetPinDirection(PORTD_INDEX, PIN4_INDEX, GPIO_DIRECTION_OUTPUT);
     d46:	83 e0       	ldi	r24, 0x03	; 3
     d48:	64 e0       	ldi	r22, 0x04	; 4
     d4a:	41 e0       	ldi	r20, 0x01	; 1
     d4c:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_voidSetPinDirection>
			DIO_voidSetPinDirection(PORTD_INDEX, PIN5_INDEX, GPIO_DIRECTION_OUTPUT);
     d50:	83 e0       	ldi	r24, 0x03	; 3
     d52:	65 e0       	ldi	r22, 0x05	; 5
     d54:	41 e0       	ldi	r20, 0x01	; 1
     d56:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_voidSetPinDirection>
			DIO_voidSetPinDirection(PORTD_INDEX, PIN6_INDEX, GPIO_DIRECTION_INPUT);
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	66 e0       	ldi	r22, 0x06	; 6
     d5e:	40 e0       	ldi	r20, 0x00	; 0
     d60:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_voidSetPinDirection>

			/* Initialize first value of OCR registers */
			TIMER1_CONTROL->OCR1AL_CFG = 0;
     d64:	e6 e4       	ldi	r30, 0x46	; 70
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	14 82       	std	Z+4, r1	; 0x04
			TIMER1_CONTROL->OCR1AH_CFG = 0;
     d6a:	e6 e4       	ldi	r30, 0x46	; 70
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	15 82       	std	Z+5, r1	; 0x05
			TIMER1_CONTROL->OCR1BL_CFG = 0;
     d70:	e6 e4       	ldi	r30, 0x46	; 70
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	12 82       	std	Z+2, r1	; 0x02
			TIMER1_CONTROL->OCR1BH_CFG = 0;
     d76:	e6 e4       	ldi	r30, 0x46	; 70
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	13 82       	std	Z+3, r1	; 0x03
		}
	}
	return ret_status;
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
}
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	cf 91       	pop	r28
     d86:	df 91       	pop	r29
     d88:	08 95       	ret

00000d8a <Timer1_stop>:


Error_Status_t Timer1_stop(const timer1_t *timer1_obj)
{
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <Timer1_stop+0x6>
     d90:	0f 92       	push	r0
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	9b 83       	std	Y+3, r25	; 0x03
     d98:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
     d9a:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
     d9e:	9b 81       	ldd	r25, Y+3	; 0x03
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	19 f4       	brne	.+6      	; 0xdaa <Timer1_stop+0x20>
	{
		ret_status = NULL_POINTER;
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	89 83       	std	Y+1, r24	; 0x01
     da8:	05 c0       	rjmp	.+10     	; 0xdb4 <Timer1_stop+0x2a>
	}
	else
	{
		// assign no pre-scaler to pre-scaler select bits
		TIMER1_CONTROL->TCCR1B_CFG.CS1_BITS = TIMER1_STOP_TIMER;
     daa:	e6 e4       	ldi	r30, 0x46	; 70
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 85       	ldd	r24, Z+8	; 0x08
     db0:	88 7f       	andi	r24, 0xF8	; 248
     db2:	80 87       	std	Z+8, r24	; 0x08
	}
	return ret_status;
     db4:	89 81       	ldd	r24, Y+1	; 0x01
}
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	08 95       	ret

00000dc2 <Timer1_GetCounts>:


Error_Status_t Timer1_GetCounts(u16 *Num_of_count)
{
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	00 d0       	rcall	.+0      	; 0xdc8 <Timer1_GetCounts+0x6>
     dc8:	0f 92       	push	r0
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
     dce:	9b 83       	std	Y+3, r25	; 0x03
     dd0:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
     dd2:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Num_of_count)
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	9b 81       	ldd	r25, Y+3	; 0x03
     dd8:	00 97       	sbiw	r24, 0x00	; 0
     dda:	19 f4       	brne	.+6      	; 0xde2 <Timer1_GetCounts+0x20>
	{
		ret_status = NULL_POINTER;
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	89 83       	std	Y+1, r24	; 0x01
     de0:	12 c0       	rjmp	.+36     	; 0xe06 <Timer1_GetCounts+0x44>
	}
	else
	{
		*Num_of_count = (u16)(((TIMER1_CONTROL->TCNT1H_CFG) << 8) + (TIMER1_CONTROL->TCNT1L_CFG));
     de2:	e6 e4       	ldi	r30, 0x46	; 70
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	87 81       	ldd	r24, Z+7	; 0x07
     de8:	88 2f       	mov	r24, r24
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	38 2f       	mov	r19, r24
     dee:	22 27       	eor	r18, r18
     df0:	e6 e4       	ldi	r30, 0x46	; 70
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	86 81       	ldd	r24, Z+6	; 0x06
     df6:	88 2f       	mov	r24, r24
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	82 0f       	add	r24, r18
     dfc:	93 1f       	adc	r25, r19
     dfe:	ea 81       	ldd	r30, Y+2	; 0x02
     e00:	fb 81       	ldd	r31, Y+3	; 0x03
     e02:	91 83       	std	Z+1, r25	; 0x01
     e04:	80 83       	st	Z, r24
	}
	return ret_status;
     e06:	89 81       	ldd	r24, Y+1	; 0x01
}
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	cf 91       	pop	r28
     e10:	df 91       	pop	r29
     e12:	08 95       	ret

00000e14 <Timer1_setDelayTimeMilliSec>:


Error_Status_t Timer1_setDelayTimeMilliSec(const timer1_t *timer1_obj, u8 Time_ms)
{
     e14:	df 93       	push	r29
     e16:	cf 93       	push	r28
     e18:	00 d0       	rcall	.+0      	; 0xe1a <Timer1_setDelayTimeMilliSec+0x6>
     e1a:	00 d0       	rcall	.+0      	; 0xe1c <Timer1_setDelayTimeMilliSec+0x8>
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	9b 83       	std	Y+3, r25	; 0x03
     e22:	8a 83       	std	Y+2, r24	; 0x02
     e24:	6c 83       	std	Y+4, r22	; 0x04
	Error_Status_t ret_status = NO_ERROR;
     e26:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	9b 81       	ldd	r25, Y+3	; 0x03
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	11 f4       	brne	.+4      	; 0xe34 <Timer1_setDelayTimeMilliSec+0x20>
	{
		ret_status = NULL_POINTER;
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return ret_status;
     e34:	89 81       	ldd	r24, Y+1	; 0x01
}
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	08 95       	ret

00000e44 <Timer1_OVF_IntEnable>:


Error_Status_t Timer1_OVF_IntEnable(void)
{
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	0f 92       	push	r0
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
     e4e:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.TOIE1_BIT = 1;
     e50:	e6 e4       	ldi	r30, 0x46	; 70
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	83 89       	ldd	r24, Z+19	; 0x13
     e56:	84 60       	ori	r24, 0x04	; 4
     e58:	83 8b       	std	Z+19, r24	; 0x13
	return ret_status;
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e5c:	0f 90       	pop	r0
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <Timer1_OCA_IntEnable>:


Error_Status_t Timer1_OCA_IntEnable(void)
{
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	0f 92       	push	r0
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
     e6e:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.OCIE1A_BIT = 1;
     e70:	e6 e4       	ldi	r30, 0x46	; 70
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	83 89       	ldd	r24, Z+19	; 0x13
     e76:	80 61       	ori	r24, 0x10	; 16
     e78:	83 8b       	std	Z+19, r24	; 0x13
	return ret_status;
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e7c:	0f 90       	pop	r0
     e7e:	cf 91       	pop	r28
     e80:	df 91       	pop	r29
     e82:	08 95       	ret

00000e84 <Timer1_OCB_IntEnable>:


Error_Status_t Timer1_OCB_IntEnable(void)
{
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	0f 92       	push	r0
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
     e8e:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.OCIE1B_BIT = 1;
     e90:	e6 e4       	ldi	r30, 0x46	; 70
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	83 89       	ldd	r24, Z+19	; 0x13
     e96:	88 60       	ori	r24, 0x08	; 8
     e98:	83 8b       	std	Z+19, r24	; 0x13
	return ret_status;
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e9c:	0f 90       	pop	r0
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <Timer1_ICU_IntEnable>:


Error_Status_t Timer1_ICU_IntEnable(void)
{
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	0f 92       	push	r0
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
     eae:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.TICIE1_BIT = 1;
     eb0:	e6 e4       	ldi	r30, 0x46	; 70
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	83 89       	ldd	r24, Z+19	; 0x13
     eb6:	80 62       	ori	r24, 0x20	; 32
     eb8:	83 8b       	std	Z+19, r24	; 0x13
	return ret_status;
     eba:	89 81       	ldd	r24, Y+1	; 0x01
}
     ebc:	0f 90       	pop	r0
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <Timer1_OVF_IntDisable>:


Error_Status_t Timer1_OVF_IntDisable(void)
{
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	0f 92       	push	r0
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
     ece:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.TOIE1_BIT = 0;
     ed0:	e6 e4       	ldi	r30, 0x46	; 70
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	83 89       	ldd	r24, Z+19	; 0x13
     ed6:	8b 7f       	andi	r24, 0xFB	; 251
     ed8:	83 8b       	std	Z+19, r24	; 0x13
	return ret_status;
     eda:	89 81       	ldd	r24, Y+1	; 0x01
}
     edc:	0f 90       	pop	r0
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	08 95       	ret

00000ee4 <Timer1_OCA_IntDisable>:


Error_Status_t Timer1_OCA_IntDisable(void)
{
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	0f 92       	push	r0
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
     eee:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.OCIE1A_BIT = 0;
     ef0:	e6 e4       	ldi	r30, 0x46	; 70
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	83 89       	ldd	r24, Z+19	; 0x13
     ef6:	8f 7e       	andi	r24, 0xEF	; 239
     ef8:	83 8b       	std	Z+19, r24	; 0x13
	return ret_status;
     efa:	89 81       	ldd	r24, Y+1	; 0x01
}
     efc:	0f 90       	pop	r0
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <Timer1_OCB_IntDisable>:


Error_Status_t Timer1_OCB_IntDisable(void)
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	0f 92       	push	r0
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
     f0e:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.OCIE1B_BIT = 0;
     f10:	e6 e4       	ldi	r30, 0x46	; 70
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	83 89       	ldd	r24, Z+19	; 0x13
     f16:	87 7f       	andi	r24, 0xF7	; 247
     f18:	83 8b       	std	Z+19, r24	; 0x13
	return ret_status;
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f1c:	0f 90       	pop	r0
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <Timer1_ICU_IntDisable>:


Error_Status_t Timer1_ICU_IntDisable(void)
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	0f 92       	push	r0
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
     f2e:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.TICIE1_BIT = 0;
     f30:	e6 e4       	ldi	r30, 0x46	; 70
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	83 89       	ldd	r24, Z+19	; 0x13
     f36:	8f 7d       	andi	r24, 0xDF	; 223
     f38:	83 8b       	std	Z+19, r24	; 0x13
	return ret_status;
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f3c:	0f 90       	pop	r0
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <Timer1_OVF_setCallBack>:


Error_Status_t Timer1_OVF_setCallBack(const timer1_t *timer1_obj)
{
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	00 d0       	rcall	.+0      	; 0xf4a <Timer1_OVF_setCallBack+0x6>
     f4a:	0f 92       	push	r0
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	9b 83       	std	Y+3, r25	; 0x03
     f52:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
     f54:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	9b 81       	ldd	r25, Y+3	; 0x03
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	19 f4       	brne	.+6      	; 0xf64 <Timer1_OVF_setCallBack+0x20>
	{
		ret_status = NULL_POINTER;
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	89 83       	std	Y+1, r24	; 0x01
     f62:	08 c0       	rjmp	.+16     	; 0xf74 <Timer1_OVF_setCallBack+0x30>
	}
	else
	{
		Timer1_Over_Flow_isr = timer1_obj->timer1_ovf_isr;
     f64:	ea 81       	ldd	r30, Y+2	; 0x02
     f66:	fb 81       	ldd	r31, Y+3	; 0x03
     f68:	80 81       	ld	r24, Z
     f6a:	91 81       	ldd	r25, Z+1	; 0x01
     f6c:	90 93 ef 00 	sts	0x00EF, r25
     f70:	80 93 ee 00 	sts	0x00EE, r24
	}
	return ret_status;
     f74:	89 81       	ldd	r24, Y+1	; 0x01
}
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	cf 91       	pop	r28
     f7e:	df 91       	pop	r29
     f80:	08 95       	ret

00000f82 <Timer1_OCA_setCallBack>:


Error_Status_t Timer1_OCA_setCallBack(const timer1_t *timer1_obj)
{
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	00 d0       	rcall	.+0      	; 0xf88 <Timer1_OCA_setCallBack+0x6>
     f88:	0f 92       	push	r0
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	9b 83       	std	Y+3, r25	; 0x03
     f90:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
     f92:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	9b 81       	ldd	r25, Y+3	; 0x03
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	19 f4       	brne	.+6      	; 0xfa2 <Timer1_OCA_setCallBack+0x20>
	{
		ret_status = NULL_POINTER;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	89 83       	std	Y+1, r24	; 0x01
     fa0:	08 c0       	rjmp	.+16     	; 0xfb2 <Timer1_OCA_setCallBack+0x30>
	}
	else
	{
		Timer1_CompA_isr = timer1_obj->timer1_compA_isr;
     fa2:	ea 81       	ldd	r30, Y+2	; 0x02
     fa4:	fb 81       	ldd	r31, Y+3	; 0x03
     fa6:	82 81       	ldd	r24, Z+2	; 0x02
     fa8:	93 81       	ldd	r25, Z+3	; 0x03
     faa:	90 93 f3 00 	sts	0x00F3, r25
     fae:	80 93 f2 00 	sts	0x00F2, r24
	}
	return ret_status;
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <Timer1_OCB_setCallBack>:
Error_Status_t Timer1_OCB_setCallBack(const timer1_t *timer1_obj)
{
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <Timer1_OCB_setCallBack+0x6>
     fc6:	0f 92       	push	r0
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	9b 83       	std	Y+3, r25	; 0x03
     fce:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
     fd0:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	9b 81       	ldd	r25, Y+3	; 0x03
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	19 f4       	brne	.+6      	; 0xfe0 <Timer1_OCB_setCallBack+0x20>
	{
		ret_status = NULL_POINTER;
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	89 83       	std	Y+1, r24	; 0x01
     fde:	08 c0       	rjmp	.+16     	; 0xff0 <Timer1_OCB_setCallBack+0x30>
	}
	else
	{
		Timer1_CompB_isr = timer1_obj->timer1_compB_isr;
     fe0:	ea 81       	ldd	r30, Y+2	; 0x02
     fe2:	fb 81       	ldd	r31, Y+3	; 0x03
     fe4:	84 81       	ldd	r24, Z+4	; 0x04
     fe6:	95 81       	ldd	r25, Z+5	; 0x05
     fe8:	90 93 f1 00 	sts	0x00F1, r25
     fec:	80 93 f0 00 	sts	0x00F0, r24
	}
	return ret_status;
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <Timer1_ICU_setCallBack>:
Error_Status_t Timer1_ICU_setCallBack(const timer1_t *timer1_obj)
{
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	00 d0       	rcall	.+0      	; 0x1004 <Timer1_ICU_setCallBack+0x6>
    1004:	0f 92       	push	r0
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	9b 83       	std	Y+3, r25	; 0x03
    100c:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    100e:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	9b 81       	ldd	r25, Y+3	; 0x03
    1014:	00 97       	sbiw	r24, 0x00	; 0
    1016:	19 f4       	brne	.+6      	; 0x101e <Timer1_ICU_setCallBack+0x20>
	{
		ret_status = NULL_POINTER;
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	89 83       	std	Y+1, r24	; 0x01
    101c:	08 c0       	rjmp	.+16     	; 0x102e <Timer1_ICU_setCallBack+0x30>
	}
	else
	{
		Timer1_Capt_isr = timer1_obj->timer1_capt_isr;
    101e:	ea 81       	ldd	r30, Y+2	; 0x02
    1020:	fb 81       	ldd	r31, Y+3	; 0x03
    1022:	86 81       	ldd	r24, Z+6	; 0x06
    1024:	97 81       	ldd	r25, Z+7	; 0x07
    1026:	90 93 f5 00 	sts	0x00F5, r25
    102a:	80 93 f4 00 	sts	0x00F4, r24
	}
	return ret_status;
    102e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	08 95       	ret

0000103c <Timer1_setFastPWM>:


Error_Status_t Timer1_setFastPWM(const timer1_t *timer1_obj, u8 frequency ,u8 duty)
{
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	00 d0       	rcall	.+0      	; 0x1042 <Timer1_setFastPWM+0x6>
    1042:	00 d0       	rcall	.+0      	; 0x1044 <Timer1_setFastPWM+0x8>
    1044:	0f 92       	push	r0
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	9b 83       	std	Y+3, r25	; 0x03
    104c:	8a 83       	std	Y+2, r24	; 0x02
    104e:	6c 83       	std	Y+4, r22	; 0x04
    1050:	4d 83       	std	Y+5, r20	; 0x05
	Error_Status_t ret_status = NO_ERROR;
    1052:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	9b 81       	ldd	r25, Y+3	; 0x03
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	11 f4       	brne	.+4      	; 0x1060 <Timer1_setFastPWM+0x24>
	{
		ret_status = NULL_POINTER;
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return ret_status;
    1060:	89 81       	ldd	r24, Y+1	; 0x01
}
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	08 95       	ret

00001072 <Timer1_setphaseCorrectPWM>:


Error_Status_t Timer1_setphaseCorrectPWM(const timer1_t *timer1_obj,u8 frequency , u8 duty)
{
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	00 d0       	rcall	.+0      	; 0x1078 <Timer1_setphaseCorrectPWM+0x6>
    1078:	00 d0       	rcall	.+0      	; 0x107a <Timer1_setphaseCorrectPWM+0x8>
    107a:	0f 92       	push	r0
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	9b 83       	std	Y+3, r25	; 0x03
    1082:	8a 83       	std	Y+2, r24	; 0x02
    1084:	6c 83       	std	Y+4, r22	; 0x04
    1086:	4d 83       	std	Y+5, r20	; 0x05
	Error_Status_t ret_status = NO_ERROR;
    1088:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	9b 81       	ldd	r25, Y+3	; 0x03
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	11 f4       	brne	.+4      	; 0x1096 <Timer1_setphaseCorrectPWM+0x24>
	{
		ret_status = NULL_POINTER;
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return ret_status;
    1096:	89 81       	ldd	r24, Y+1	; 0x01
}
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	08 95       	ret

000010a8 <Timer1_ICU_SetTrigger>:


Error_Status_t Timer1_ICU_SetTrigger(u8 trigger)
{
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	00 d0       	rcall	.+0      	; 0x10ae <Timer1_ICU_SetTrigger+0x6>
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <Timer1_ICU_SetTrigger+0x8>
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    10b6:	19 82       	std	Y+1, r1	; 0x01
	switch(trigger){
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	3c 83       	std	Y+4, r19	; 0x04
    10c0:	2b 83       	std	Y+3, r18	; 0x03
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	9c 81       	ldd	r25, Y+4	; 0x04
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	59 f0       	breq	.+22     	; 0x10e0 <Timer1_ICU_SetTrigger+0x38>
    10ca:	2b 81       	ldd	r18, Y+3	; 0x03
    10cc:	3c 81       	ldd	r19, Y+4	; 0x04
    10ce:	21 30       	cpi	r18, 0x01	; 1
    10d0:	31 05       	cpc	r19, r1
    10d2:	61 f4       	brne	.+24     	; 0x10ec <Timer1_ICU_SetTrigger+0x44>
	case TIMER1_INPUT_CAPTURE_RISING_EDGE:
		TIMER1_ICU_TRIGGER_RISING_EDGE();
    10d4:	e6 e4       	ldi	r30, 0x46	; 70
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 85       	ldd	r24, Z+8	; 0x08
    10da:	80 64       	ori	r24, 0x40	; 64
    10dc:	80 87       	std	Z+8, r24	; 0x08
    10de:	08 c0       	rjmp	.+16     	; 0x10f0 <Timer1_ICU_SetTrigger+0x48>
		break;
	case TIMER1_INPUT_CAPTURE_FALLING_EDGE:
		TIMER1_ICU_TRIGGER_FALLING_EDGE();
    10e0:	e6 e4       	ldi	r30, 0x46	; 70
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 85       	ldd	r24, Z+8	; 0x08
    10e6:	8f 7b       	andi	r24, 0xBF	; 191
    10e8:	80 87       	std	Z+8, r24	; 0x08
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <Timer1_ICU_SetTrigger+0x48>
		break;
	default:
		ret_status = OUT_OF_RANGE_VALUE;
    10ec:	82 e0       	ldi	r24, 0x02	; 2
    10ee:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return ret_status;
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <Timer1_ICU_takeReading>:


Error_Status_t Timer1_ICU_takeReading(u16 *icr_reading)
{
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	00 d0       	rcall	.+0      	; 0x1106 <Timer1_ICU_takeReading+0x6>
    1106:	0f 92       	push	r0
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	9b 83       	std	Y+3, r25	; 0x03
    110e:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1110:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == icr_reading)
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	9b 81       	ldd	r25, Y+3	; 0x03
    1116:	00 97       	sbiw	r24, 0x00	; 0
    1118:	19 f4       	brne	.+6      	; 0x1120 <Timer1_ICU_takeReading+0x20>
	{
		ret_status = NULL_POINTER;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	12 c0       	rjmp	.+36     	; 0x1144 <Timer1_ICU_takeReading+0x44>
	}
	else
	{
		*icr_reading = (u16)(((TIMER1_CONTROL->ICR1H_CFG) << 8) + TIMER1_CONTROL->ICR1L_CFG);
    1120:	e6 e4       	ldi	r30, 0x46	; 70
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	81 81       	ldd	r24, Z+1	; 0x01
    1126:	88 2f       	mov	r24, r24
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	38 2f       	mov	r19, r24
    112c:	22 27       	eor	r18, r18
    112e:	e6 e4       	ldi	r30, 0x46	; 70
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	88 2f       	mov	r24, r24
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	82 0f       	add	r24, r18
    113a:	93 1f       	adc	r25, r19
    113c:	ea 81       	ldd	r30, Y+2	; 0x02
    113e:	fb 81       	ldd	r31, Y+3	; 0x03
    1140:	91 83       	std	Z+1, r25	; 0x01
    1142:	80 83       	st	Z, r24
	}
	return ret_status;
    1144:	89 81       	ldd	r24, Y+1	; 0x01
}
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	08 95       	ret

00001152 <__vector_9>:

/* ---------------------------------------- ISRs ---------------------------- */
// Define the ISR function with attribute
void TIMER1_OVF_VECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER1_OVF_VECTOR(void)
{
    1152:	1f 92       	push	r1
    1154:	0f 92       	push	r0
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	0f 92       	push	r0
    115a:	11 24       	eor	r1, r1
    115c:	2f 93       	push	r18
    115e:	3f 93       	push	r19
    1160:	4f 93       	push	r20
    1162:	5f 93       	push	r21
    1164:	6f 93       	push	r22
    1166:	7f 93       	push	r23
    1168:	8f 93       	push	r24
    116a:	9f 93       	push	r25
    116c:	af 93       	push	r26
    116e:	bf 93       	push	r27
    1170:	ef 93       	push	r30
    1172:	ff 93       	push	r31
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	TIMER1_CONTROL->TIFR1_CFG.TOV1_BIT = 0;
    117c:	e6 e4       	ldi	r30, 0x46	; 70
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	82 89       	ldd	r24, Z+18	; 0x12
    1182:	8b 7f       	andi	r24, 0xFB	; 251
    1184:	82 8b       	std	Z+18, r24	; 0x12

	// execute ISR if it existed
	if(Timer1_Over_Flow_isr)
    1186:	80 91 ee 00 	lds	r24, 0x00EE
    118a:	90 91 ef 00 	lds	r25, 0x00EF
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	29 f0       	breq	.+10     	; 0x119c <__vector_9+0x4a>
	{
		Timer1_Over_Flow_isr();
    1192:	e0 91 ee 00 	lds	r30, 0x00EE
    1196:	f0 91 ef 00 	lds	r31, 0x00EF
    119a:	09 95       	icall
	}
}
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	ff 91       	pop	r31
    11a2:	ef 91       	pop	r30
    11a4:	bf 91       	pop	r27
    11a6:	af 91       	pop	r26
    11a8:	9f 91       	pop	r25
    11aa:	8f 91       	pop	r24
    11ac:	7f 91       	pop	r23
    11ae:	6f 91       	pop	r22
    11b0:	5f 91       	pop	r21
    11b2:	4f 91       	pop	r20
    11b4:	3f 91       	pop	r19
    11b6:	2f 91       	pop	r18
    11b8:	0f 90       	pop	r0
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	0f 90       	pop	r0
    11be:	1f 90       	pop	r1
    11c0:	18 95       	reti

000011c2 <__vector_8>:


// Define the ISR function with attribute
void TIMER1_COMPBVECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER1_COMPBVECTOR(void)
{
    11c2:	1f 92       	push	r1
    11c4:	0f 92       	push	r0
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	0f 92       	push	r0
    11ca:	11 24       	eor	r1, r1
    11cc:	2f 93       	push	r18
    11ce:	3f 93       	push	r19
    11d0:	4f 93       	push	r20
    11d2:	5f 93       	push	r21
    11d4:	6f 93       	push	r22
    11d6:	7f 93       	push	r23
    11d8:	8f 93       	push	r24
    11da:	9f 93       	push	r25
    11dc:	af 93       	push	r26
    11de:	bf 93       	push	r27
    11e0:	ef 93       	push	r30
    11e2:	ff 93       	push	r31
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	TIMER1_CONTROL->TIFR1_CFG.OCF1B_BIT = 0;
    11ec:	e6 e4       	ldi	r30, 0x46	; 70
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	82 89       	ldd	r24, Z+18	; 0x12
    11f2:	87 7f       	andi	r24, 0xF7	; 247
    11f4:	82 8b       	std	Z+18, r24	; 0x12

	// execute ISR if it existed
	if(Timer1_CompB_isr)
    11f6:	80 91 f0 00 	lds	r24, 0x00F0
    11fa:	90 91 f1 00 	lds	r25, 0x00F1
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	29 f0       	breq	.+10     	; 0x120c <__vector_8+0x4a>
	{
		Timer1_CompB_isr();
    1202:	e0 91 f0 00 	lds	r30, 0x00F0
    1206:	f0 91 f1 00 	lds	r31, 0x00F1
    120a:	09 95       	icall
	}
}
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	ff 91       	pop	r31
    1212:	ef 91       	pop	r30
    1214:	bf 91       	pop	r27
    1216:	af 91       	pop	r26
    1218:	9f 91       	pop	r25
    121a:	8f 91       	pop	r24
    121c:	7f 91       	pop	r23
    121e:	6f 91       	pop	r22
    1220:	5f 91       	pop	r21
    1222:	4f 91       	pop	r20
    1224:	3f 91       	pop	r19
    1226:	2f 91       	pop	r18
    1228:	0f 90       	pop	r0
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	0f 90       	pop	r0
    122e:	1f 90       	pop	r1
    1230:	18 95       	reti

00001232 <__vector_7>:


// Define the ISR function with attribute
void TIMER1_COMPAVECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER1_COMPAVECTOR(void)
{
    1232:	1f 92       	push	r1
    1234:	0f 92       	push	r0
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	0f 92       	push	r0
    123a:	11 24       	eor	r1, r1
    123c:	2f 93       	push	r18
    123e:	3f 93       	push	r19
    1240:	4f 93       	push	r20
    1242:	5f 93       	push	r21
    1244:	6f 93       	push	r22
    1246:	7f 93       	push	r23
    1248:	8f 93       	push	r24
    124a:	9f 93       	push	r25
    124c:	af 93       	push	r26
    124e:	bf 93       	push	r27
    1250:	ef 93       	push	r30
    1252:	ff 93       	push	r31
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	TIMER1_CONTROL->TIFR1_CFG.OCF1A_BIT = 0;
    125c:	e6 e4       	ldi	r30, 0x46	; 70
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	82 89       	ldd	r24, Z+18	; 0x12
    1262:	8f 7e       	andi	r24, 0xEF	; 239
    1264:	82 8b       	std	Z+18, r24	; 0x12

	// execute ISR if it existed
	if(Timer1_CompA_isr)
    1266:	80 91 f2 00 	lds	r24, 0x00F2
    126a:	90 91 f3 00 	lds	r25, 0x00F3
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	29 f0       	breq	.+10     	; 0x127c <__vector_7+0x4a>
	{
		Timer1_CompA_isr();
    1272:	e0 91 f2 00 	lds	r30, 0x00F2
    1276:	f0 91 f3 00 	lds	r31, 0x00F3
    127a:	09 95       	icall
	}
}
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	ff 91       	pop	r31
    1282:	ef 91       	pop	r30
    1284:	bf 91       	pop	r27
    1286:	af 91       	pop	r26
    1288:	9f 91       	pop	r25
    128a:	8f 91       	pop	r24
    128c:	7f 91       	pop	r23
    128e:	6f 91       	pop	r22
    1290:	5f 91       	pop	r21
    1292:	4f 91       	pop	r20
    1294:	3f 91       	pop	r19
    1296:	2f 91       	pop	r18
    1298:	0f 90       	pop	r0
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	0f 90       	pop	r0
    129e:	1f 90       	pop	r1
    12a0:	18 95       	reti

000012a2 <__vector_6>:


// Define the ISR function with attribute
void TIMER1_CAPTVECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER1_CAPTVECTOR(void)
{
    12a2:	1f 92       	push	r1
    12a4:	0f 92       	push	r0
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	0f 92       	push	r0
    12aa:	11 24       	eor	r1, r1
    12ac:	2f 93       	push	r18
    12ae:	3f 93       	push	r19
    12b0:	4f 93       	push	r20
    12b2:	5f 93       	push	r21
    12b4:	6f 93       	push	r22
    12b6:	7f 93       	push	r23
    12b8:	8f 93       	push	r24
    12ba:	9f 93       	push	r25
    12bc:	af 93       	push	r26
    12be:	bf 93       	push	r27
    12c0:	ef 93       	push	r30
    12c2:	ff 93       	push	r31
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	TIMER1_CONTROL->TIFR1_CFG.ICF1_BIT = 0;
    12cc:	e6 e4       	ldi	r30, 0x46	; 70
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	82 89       	ldd	r24, Z+18	; 0x12
    12d2:	8f 7d       	andi	r24, 0xDF	; 223
    12d4:	82 8b       	std	Z+18, r24	; 0x12

	// execute ISR if it existed
	if(Timer1_Capt_isr)
    12d6:	80 91 f4 00 	lds	r24, 0x00F4
    12da:	90 91 f5 00 	lds	r25, 0x00F5
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	29 f0       	breq	.+10     	; 0x12ec <__vector_6+0x4a>
	{
		Timer1_Capt_isr();
    12e2:	e0 91 f4 00 	lds	r30, 0x00F4
    12e6:	f0 91 f5 00 	lds	r31, 0x00F5
    12ea:	09 95       	icall
	}
}
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	ff 91       	pop	r31
    12f2:	ef 91       	pop	r30
    12f4:	bf 91       	pop	r27
    12f6:	af 91       	pop	r26
    12f8:	9f 91       	pop	r25
    12fa:	8f 91       	pop	r24
    12fc:	7f 91       	pop	r23
    12fe:	6f 91       	pop	r22
    1300:	5f 91       	pop	r21
    1302:	4f 91       	pop	r20
    1304:	3f 91       	pop	r19
    1306:	2f 91       	pop	r18
    1308:	0f 90       	pop	r0
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	0f 90       	pop	r0
    130e:	1f 90       	pop	r1
    1310:	18 95       	reti

00001312 <Timer0_Init>:
//u32 rem_counts = 0;
//static u32 countr_ovf = 0;


Error_Status_t Timer0_Init(const timer0_t *timer0_obj)
{
    1312:	df 93       	push	r29
    1314:	cf 93       	push	r28
    1316:	00 d0       	rcall	.+0      	; 0x1318 <Timer0_Init+0x6>
    1318:	0f 92       	push	r0
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	9b 83       	std	Y+3, r25	; 0x03
    1320:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1322:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	9b 81       	ldd	r25, Y+3	; 0x03
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	19 f4       	brne	.+6      	; 0x1332 <Timer0_Init+0x20>
	{
		ret_status = NULL_POINTER;
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	89 83       	std	Y+1, r24	; 0x01
    1330:	4a c0       	rjmp	.+148    	; 0x13c6 <Timer0_Init+0xb4>
	}
	else
	{
		// To select mode
		TIMER0_CONTROL->TCCR0_CFG.WGM00_BIT = (((timer0_obj->mode) >> 0) & 0x01);
    1332:	a2 e5       	ldi	r26, 0x52	; 82
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	ea 81       	ldd	r30, Y+2	; 0x02
    1338:	fb 81       	ldd	r31, Y+3	; 0x03
    133a:	84 81       	ldd	r24, Z+4	; 0x04
    133c:	86 95       	lsr	r24
    133e:	86 95       	lsr	r24
    1340:	86 95       	lsr	r24
    1342:	83 70       	andi	r24, 0x03	; 3
    1344:	81 70       	andi	r24, 0x01	; 1
    1346:	81 70       	andi	r24, 0x01	; 1
    1348:	81 70       	andi	r24, 0x01	; 1
    134a:	81 70       	andi	r24, 0x01	; 1
    134c:	98 2f       	mov	r25, r24
    134e:	92 95       	swap	r25
    1350:	99 0f       	add	r25, r25
    1352:	99 0f       	add	r25, r25
    1354:	90 7c       	andi	r25, 0xC0	; 192
    1356:	11 96       	adiw	r26, 0x01	; 1
    1358:	8c 91       	ld	r24, X
    135a:	11 97       	sbiw	r26, 0x01	; 1
    135c:	8f 7b       	andi	r24, 0xBF	; 191
    135e:	89 2b       	or	r24, r25
    1360:	11 96       	adiw	r26, 0x01	; 1
    1362:	8c 93       	st	X, r24
		TIMER0_CONTROL->TCCR0_CFG.WGM01_BIT = (((timer0_obj->mode) >> 1) & 0x01);
    1364:	a2 e5       	ldi	r26, 0x52	; 82
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	ea 81       	ldd	r30, Y+2	; 0x02
    136a:	fb 81       	ldd	r31, Y+3	; 0x03
    136c:	84 81       	ldd	r24, Z+4	; 0x04
    136e:	86 95       	lsr	r24
    1370:	86 95       	lsr	r24
    1372:	86 95       	lsr	r24
    1374:	83 70       	andi	r24, 0x03	; 3
    1376:	88 2f       	mov	r24, r24
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	95 95       	asr	r25
    137c:	87 95       	ror	r24
    137e:	81 70       	andi	r24, 0x01	; 1
    1380:	81 70       	andi	r24, 0x01	; 1
    1382:	81 70       	andi	r24, 0x01	; 1
    1384:	81 70       	andi	r24, 0x01	; 1
    1386:	98 2f       	mov	r25, r24
    1388:	99 0f       	add	r25, r25
    138a:	99 0f       	add	r25, r25
    138c:	99 0f       	add	r25, r25
    138e:	11 96       	adiw	r26, 0x01	; 1
    1390:	8c 91       	ld	r24, X
    1392:	11 97       	sbiw	r26, 0x01	; 1
    1394:	87 7f       	andi	r24, 0xF7	; 247
    1396:	89 2b       	or	r24, r25
    1398:	11 96       	adiw	r26, 0x01	; 1
    139a:	8c 93       	st	X, r24

		// To select the output compare match pin
		TIMER0_CONTROL->TCCR0_CFG.COM0_BITS = timer0_obj->ctc_mode_cfg;
    139c:	a2 e5       	ldi	r26, 0x52	; 82
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	ea 81       	ldd	r30, Y+2	; 0x02
    13a2:	fb 81       	ldd	r31, Y+3	; 0x03
    13a4:	84 81       	ldd	r24, Z+4	; 0x04
    13a6:	82 95       	swap	r24
    13a8:	86 95       	lsr	r24
    13aa:	87 70       	andi	r24, 0x07	; 7
    13ac:	83 70       	andi	r24, 0x03	; 3
    13ae:	83 70       	andi	r24, 0x03	; 3
    13b0:	98 2f       	mov	r25, r24
    13b2:	92 95       	swap	r25
    13b4:	90 7f       	andi	r25, 0xF0	; 240
    13b6:	11 96       	adiw	r26, 0x01	; 1
    13b8:	8c 91       	ld	r24, X
    13ba:	11 97       	sbiw	r26, 0x01	; 1
    13bc:	8f 7c       	andi	r24, 0xCF	; 207
    13be:	89 2b       	or	r24, r25
    13c0:	11 96       	adiw	r26, 0x01	; 1
    13c2:	8c 93       	st	X, r24
    13c4:	11 97       	sbiw	r26, 0x01	; 1
	}
	return ret_status;
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <Timer0_start>:


Error_Status_t Timer0_start(const timer0_t *timer0_obj)
{
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	00 d0       	rcall	.+0      	; 0x13da <Timer0_start+0x6>
    13da:	0f 92       	push	r0
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	9b 83       	std	Y+3, r25	; 0x03
    13e2:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    13e4:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	19 f4       	brne	.+6      	; 0x13f4 <Timer0_start+0x20>
	{
		ret_status = NULL_POINTER;
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	89 83       	std	Y+1, r24	; 0x01
    13f2:	2e c0       	rjmp	.+92     	; 0x1450 <Timer0_start+0x7c>
	}
	else
	{
		if(TIMER0_NORMAL_MODE == timer0_obj->mode){
    13f4:	ea 81       	ldd	r30, Y+2	; 0x02
    13f6:	fb 81       	ldd	r31, Y+3	; 0x03
    13f8:	84 81       	ldd	r24, Z+4	; 0x04
    13fa:	88 71       	andi	r24, 0x18	; 24
    13fc:	88 23       	and	r24, r24
    13fe:	89 f4       	brne	.+34     	; 0x1422 <Timer0_start+0x4e>
			TIMER0_CONTROL->TCCR0_CFG.CS0_BITS = timer0_obj->prescaler_select;
    1400:	a2 e5       	ldi	r26, 0x52	; 82
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	ea 81       	ldd	r30, Y+2	; 0x02
    1406:	fb 81       	ldd	r31, Y+3	; 0x03
    1408:	84 81       	ldd	r24, Z+4	; 0x04
    140a:	87 70       	andi	r24, 0x07	; 7
    140c:	98 2f       	mov	r25, r24
    140e:	97 70       	andi	r25, 0x07	; 7
    1410:	11 96       	adiw	r26, 0x01	; 1
    1412:	8c 91       	ld	r24, X
    1414:	11 97       	sbiw	r26, 0x01	; 1
    1416:	88 7f       	andi	r24, 0xF8	; 248
    1418:	89 2b       	or	r24, r25
    141a:	11 96       	adiw	r26, 0x01	; 1
    141c:	8c 93       	st	X, r24
    141e:	11 97       	sbiw	r26, 0x01	; 1
    1420:	17 c0       	rjmp	.+46     	; 0x1450 <Timer0_start+0x7c>
		}
		else
		{
			TIMER0_CONTROL->TCCR0_CFG.CS0_BITS = timer0_obj->prescaler_select;
    1422:	a2 e5       	ldi	r26, 0x52	; 82
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	ea 81       	ldd	r30, Y+2	; 0x02
    1428:	fb 81       	ldd	r31, Y+3	; 0x03
    142a:	84 81       	ldd	r24, Z+4	; 0x04
    142c:	87 70       	andi	r24, 0x07	; 7
    142e:	98 2f       	mov	r25, r24
    1430:	97 70       	andi	r25, 0x07	; 7
    1432:	11 96       	adiw	r26, 0x01	; 1
    1434:	8c 91       	ld	r24, X
    1436:	11 97       	sbiw	r26, 0x01	; 1
    1438:	88 7f       	andi	r24, 0xF8	; 248
    143a:	89 2b       	or	r24, r25
    143c:	11 96       	adiw	r26, 0x01	; 1
    143e:	8c 93       	st	X, r24
			DIO_voidSetPinDirection(PORTB_INDEX, PIN3_INDEX, GPIO_DIRECTION_OUTPUT);
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	63 e0       	ldi	r22, 0x03	; 3
    1444:	41 e0       	ldi	r20, 0x01	; 1
    1446:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_voidSetPinDirection>
			TIMER0_CONTROL->OCR0_CFG = 0;
    144a:	e2 e5       	ldi	r30, 0x52	; 82
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	12 86       	std	Z+10, r1	; 0x0a
		}

	}
	return ret_status;
    1450:	89 81       	ldd	r24, Y+1	; 0x01
}
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	08 95       	ret

0000145e <Timer0_stop>:
Error_Status_t Timer0_stop(const timer0_t *timer0_obj)
{
    145e:	df 93       	push	r29
    1460:	cf 93       	push	r28
    1462:	00 d0       	rcall	.+0      	; 0x1464 <Timer0_stop+0x6>
    1464:	0f 92       	push	r0
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	9b 83       	std	Y+3, r25	; 0x03
    146c:	8a 83       	std	Y+2, r24	; 0x02

	Error_Status_t ret_status = NO_ERROR;
    146e:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	9b 81       	ldd	r25, Y+3	; 0x03
    1474:	00 97       	sbiw	r24, 0x00	; 0
    1476:	19 f4       	brne	.+6      	; 0x147e <Timer0_stop+0x20>
	{
		ret_status = NULL_POINTER;
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	89 83       	std	Y+1, r24	; 0x01
    147c:	05 c0       	rjmp	.+10     	; 0x1488 <Timer0_stop+0x2a>
	}
	else
	{
		// assign no pre-scaler to pre-scaler select bits
		TIMER0_CONTROL->TCCR0_CFG.CS0_BITS = TIMER0_STOP_TIMER;
    147e:	e2 e5       	ldi	r30, 0x52	; 82
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	81 81       	ldd	r24, Z+1	; 0x01
    1484:	88 7f       	andi	r24, 0xF8	; 248
    1486:	81 83       	std	Z+1, r24	; 0x01
	}
	return ret_status;
    1488:	89 81       	ldd	r24, Y+1	; 0x01
}
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	08 95       	ret

00001496 <Timer0_GetCounts>:
Error_Status_t Timer0_GetCounts(const timer0_t *timer0_obj, u8 *Num_of_count)
{
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	00 d0       	rcall	.+0      	; 0x149c <Timer0_GetCounts+0x6>
    149c:	00 d0       	rcall	.+0      	; 0x149e <Timer0_GetCounts+0x8>
    149e:	0f 92       	push	r0
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	9b 83       	std	Y+3, r25	; 0x03
    14a6:	8a 83       	std	Y+2, r24	; 0x02
    14a8:	7d 83       	std	Y+5, r23	; 0x05
    14aa:	6c 83       	std	Y+4, r22	; 0x04
	Error_Status_t ret_status = NO_ERROR;
    14ac:	19 82       	std	Y+1, r1	; 0x01
	if((NULL == timer0_obj) || (NULL == Num_of_count))
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	9b 81       	ldd	r25, Y+3	; 0x03
    14b2:	00 97       	sbiw	r24, 0x00	; 0
    14b4:	21 f0       	breq	.+8      	; 0x14be <Timer0_GetCounts+0x28>
    14b6:	8c 81       	ldd	r24, Y+4	; 0x04
    14b8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	19 f4       	brne	.+6      	; 0x14c4 <Timer0_GetCounts+0x2e>
	{
		ret_status = NULL_POINTER;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	89 83       	std	Y+1, r24	; 0x01
    14c2:	06 c0       	rjmp	.+12     	; 0x14d0 <Timer0_GetCounts+0x3a>
	}
	else
	{
		*Num_of_count = TIMER0_CONTROL->TCNT0_CFG;
    14c4:	e2 e5       	ldi	r30, 0x52	; 82
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	ec 81       	ldd	r30, Y+4	; 0x04
    14cc:	fd 81       	ldd	r31, Y+5	; 0x05
    14ce:	80 83       	st	Z, r24
	}
	return ret_status;
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <Timer0_setDelayTimeMilliSec>:



Error_Status_t Timer0_setDelayTimeMilliSec(const timer0_t *timer0_obj , u8 Time_ms, u32 *num_of_ovfs, u32 *rem_counts)
{
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
    14ea:	66 97       	sbiw	r28, 0x16	; 22
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	de bf       	out	0x3e, r29	; 62
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	cd bf       	out	0x3d, r28	; 61
    14f6:	9f 83       	std	Y+7, r25	; 0x07
    14f8:	8e 83       	std	Y+6, r24	; 0x06
    14fa:	68 87       	std	Y+8, r22	; 0x08
    14fc:	5a 87       	std	Y+10, r21	; 0x0a
    14fe:	49 87       	std	Y+9, r20	; 0x09
    1500:	3c 87       	std	Y+12, r19	; 0x0c
    1502:	2b 87       	std	Y+11, r18	; 0x0b
	Error_Status_t ret_status = NO_ERROR;
    1504:	1d 82       	std	Y+5, r1	; 0x05
	u32 Total_counts = 0;
    1506:	19 82       	std	Y+1, r1	; 0x01
    1508:	1a 82       	std	Y+2, r1	; 0x02
    150a:	1b 82       	std	Y+3, r1	; 0x03
    150c:	1c 82       	std	Y+4, r1	; 0x04

	if(NULL == timer0_obj)
    150e:	8e 81       	ldd	r24, Y+6	; 0x06
    1510:	9f 81       	ldd	r25, Y+7	; 0x07
    1512:	00 97       	sbiw	r24, 0x00	; 0
    1514:	19 f4       	brne	.+6      	; 0x151c <Timer0_setDelayTimeMilliSec+0x3a>
	{
		ret_status = NULL_POINTER;
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	8d 83       	std	Y+5, r24	; 0x05
    151a:	0c c1       	rjmp	.+536    	; 0x1734 <Timer0_setDelayTimeMilliSec+0x252>
	}
	else
	{
		if(TIMER0_NORMAL_MODE == timer0_obj->mode)
    151c:	ee 81       	ldd	r30, Y+6	; 0x06
    151e:	ff 81       	ldd	r31, Y+7	; 0x07
    1520:	84 81       	ldd	r24, Z+4	; 0x04
    1522:	88 71       	andi	r24, 0x18	; 24
    1524:	88 23       	and	r24, r24
    1526:	09 f0       	breq	.+2      	; 0x152a <Timer0_setDelayTimeMilliSec+0x48>
    1528:	05 c1       	rjmp	.+522    	; 0x1734 <Timer0_setDelayTimeMilliSec+0x252>
		{
			switch(timer0_obj->prescaler_select){
    152a:	ee 81       	ldd	r30, Y+6	; 0x06
    152c:	ff 81       	ldd	r31, Y+7	; 0x07
    152e:	84 81       	ldd	r24, Z+4	; 0x04
    1530:	87 70       	andi	r24, 0x07	; 7
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	3e 87       	std	Y+14, r19	; 0x0e
    1538:	2d 87       	std	Y+13, r18	; 0x0d
    153a:	4d 85       	ldd	r20, Y+13	; 0x0d
    153c:	5e 85       	ldd	r21, Y+14	; 0x0e
    153e:	43 30       	cpi	r20, 0x03	; 3
    1540:	51 05       	cpc	r21, r1
    1542:	09 f4       	brne	.+2      	; 0x1546 <Timer0_setDelayTimeMilliSec+0x64>
    1544:	5d c0       	rjmp	.+186    	; 0x1600 <Timer0_setDelayTimeMilliSec+0x11e>
    1546:	8d 85       	ldd	r24, Y+13	; 0x0d
    1548:	9e 85       	ldd	r25, Y+14	; 0x0e
    154a:	84 30       	cpi	r24, 0x04	; 4
    154c:	91 05       	cpc	r25, r1
    154e:	5c f4       	brge	.+22     	; 0x1566 <Timer0_setDelayTimeMilliSec+0x84>
    1550:	2d 85       	ldd	r18, Y+13	; 0x0d
    1552:	3e 85       	ldd	r19, Y+14	; 0x0e
    1554:	21 30       	cpi	r18, 0x01	; 1
    1556:	31 05       	cpc	r19, r1
    1558:	99 f0       	breq	.+38     	; 0x1580 <Timer0_setDelayTimeMilliSec+0x9e>
    155a:	4d 85       	ldd	r20, Y+13	; 0x0d
    155c:	5e 85       	ldd	r21, Y+14	; 0x0e
    155e:	42 30       	cpi	r20, 0x02	; 2
    1560:	51 05       	cpc	r21, r1
    1562:	21 f1       	breq	.+72     	; 0x15ac <Timer0_setDelayTimeMilliSec+0xca>
    1564:	ca c0       	rjmp	.+404    	; 0x16fa <Timer0_setDelayTimeMilliSec+0x218>
    1566:	8d 85       	ldd	r24, Y+13	; 0x0d
    1568:	9e 85       	ldd	r25, Y+14	; 0x0e
    156a:	84 30       	cpi	r24, 0x04	; 4
    156c:	91 05       	cpc	r25, r1
    156e:	09 f4       	brne	.+2      	; 0x1572 <Timer0_setDelayTimeMilliSec+0x90>
    1570:	73 c0       	rjmp	.+230    	; 0x1658 <Timer0_setDelayTimeMilliSec+0x176>
    1572:	2d 85       	ldd	r18, Y+13	; 0x0d
    1574:	3e 85       	ldd	r19, Y+14	; 0x0e
    1576:	25 30       	cpi	r18, 0x05	; 5
    1578:	31 05       	cpc	r19, r1
    157a:	09 f4       	brne	.+2      	; 0x157e <Timer0_setDelayTimeMilliSec+0x9c>
    157c:	95 c0       	rjmp	.+298    	; 0x16a8 <Timer0_setDelayTimeMilliSec+0x1c6>
    157e:	bd c0       	rjmp	.+378    	; 0x16fa <Timer0_setDelayTimeMilliSec+0x218>
			case TIMER0_PRESCALER_DIV_1:
				Total_counts = (F_CPU * Time_ms * 1000) / 1;    // 1 : prescaler
    1580:	88 85       	ldd	r24, Y+8	; 0x08
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	80 e8       	ldi	r24, 0x80	; 128
    1588:	9e e3       	ldi	r25, 0x3E	; 62
    158a:	ac 01       	movw	r20, r24
    158c:	24 9f       	mul	r18, r20
    158e:	c0 01       	movw	r24, r0
    1590:	25 9f       	mul	r18, r21
    1592:	90 0d       	add	r25, r0
    1594:	34 9f       	mul	r19, r20
    1596:	90 0d       	add	r25, r0
    1598:	11 24       	eor	r1, r1
    159a:	aa 27       	eor	r26, r26
    159c:	97 fd       	sbrc	r25, 7
    159e:	a0 95       	com	r26
    15a0:	ba 2f       	mov	r27, r26
    15a2:	89 83       	std	Y+1, r24	; 0x01
    15a4:	9a 83       	std	Y+2, r25	; 0x02
    15a6:	ab 83       	std	Y+3, r26	; 0x03
    15a8:	bc 83       	std	Y+4, r27	; 0x04
    15aa:	a9 c0       	rjmp	.+338    	; 0x16fe <Timer0_setDelayTimeMilliSec+0x21c>
				break;
			case TIMER0_PRESCALER_DIV_8:
				Total_counts = (F_CPU * Time_ms * 1000) / 8;    // 8 : prescaler
    15ac:	88 85       	ldd	r24, Y+8	; 0x08
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	80 e8       	ldi	r24, 0x80	; 128
    15b4:	9e e3       	ldi	r25, 0x3E	; 62
    15b6:	ac 01       	movw	r20, r24
    15b8:	24 9f       	mul	r18, r20
    15ba:	c0 01       	movw	r24, r0
    15bc:	25 9f       	mul	r18, r21
    15be:	90 0d       	add	r25, r0
    15c0:	34 9f       	mul	r19, r20
    15c2:	90 0d       	add	r25, r0
    15c4:	11 24       	eor	r1, r1
    15c6:	98 8b       	std	Y+16, r25	; 0x10
    15c8:	8f 87       	std	Y+15, r24	; 0x0f
    15ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    15cc:	98 89       	ldd	r25, Y+16	; 0x10
    15ce:	99 23       	and	r25, r25
    15d0:	34 f4       	brge	.+12     	; 0x15de <Timer0_setDelayTimeMilliSec+0xfc>
    15d2:	2f 85       	ldd	r18, Y+15	; 0x0f
    15d4:	38 89       	ldd	r19, Y+16	; 0x10
    15d6:	29 5f       	subi	r18, 0xF9	; 249
    15d8:	3f 4f       	sbci	r19, 0xFF	; 255
    15da:	38 8b       	std	Y+16, r19	; 0x10
    15dc:	2f 87       	std	Y+15, r18	; 0x0f
    15de:	8f 85       	ldd	r24, Y+15	; 0x0f
    15e0:	98 89       	ldd	r25, Y+16	; 0x10
    15e2:	95 95       	asr	r25
    15e4:	87 95       	ror	r24
    15e6:	95 95       	asr	r25
    15e8:	87 95       	ror	r24
    15ea:	95 95       	asr	r25
    15ec:	87 95       	ror	r24
    15ee:	aa 27       	eor	r26, r26
    15f0:	97 fd       	sbrc	r25, 7
    15f2:	a0 95       	com	r26
    15f4:	ba 2f       	mov	r27, r26
    15f6:	89 83       	std	Y+1, r24	; 0x01
    15f8:	9a 83       	std	Y+2, r25	; 0x02
    15fa:	ab 83       	std	Y+3, r26	; 0x03
    15fc:	bc 83       	std	Y+4, r27	; 0x04
    15fe:	7f c0       	rjmp	.+254    	; 0x16fe <Timer0_setDelayTimeMilliSec+0x21c>
				break;
			case TIMER0_PRESCALER_DIV_64:
				Total_counts = (F_CPU * Time_ms * 1000) / 64;   // 64 : prescaler
    1600:	88 85       	ldd	r24, Y+8	; 0x08
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	80 e8       	ldi	r24, 0x80	; 128
    1608:	9e e3       	ldi	r25, 0x3E	; 62
    160a:	ac 01       	movw	r20, r24
    160c:	24 9f       	mul	r18, r20
    160e:	c0 01       	movw	r24, r0
    1610:	25 9f       	mul	r18, r21
    1612:	90 0d       	add	r25, r0
    1614:	34 9f       	mul	r19, r20
    1616:	90 0d       	add	r25, r0
    1618:	11 24       	eor	r1, r1
    161a:	9a 8b       	std	Y+18, r25	; 0x12
    161c:	89 8b       	std	Y+17, r24	; 0x11
    161e:	89 89       	ldd	r24, Y+17	; 0x11
    1620:	9a 89       	ldd	r25, Y+18	; 0x12
    1622:	99 23       	and	r25, r25
    1624:	34 f4       	brge	.+12     	; 0x1632 <Timer0_setDelayTimeMilliSec+0x150>
    1626:	29 89       	ldd	r18, Y+17	; 0x11
    1628:	3a 89       	ldd	r19, Y+18	; 0x12
    162a:	21 5c       	subi	r18, 0xC1	; 193
    162c:	3f 4f       	sbci	r19, 0xFF	; 255
    162e:	3a 8b       	std	Y+18, r19	; 0x12
    1630:	29 8b       	std	Y+17, r18	; 0x11
    1632:	89 89       	ldd	r24, Y+17	; 0x11
    1634:	9a 89       	ldd	r25, Y+18	; 0x12
    1636:	08 2e       	mov	r0, r24
    1638:	89 2f       	mov	r24, r25
    163a:	00 0c       	add	r0, r0
    163c:	88 1f       	adc	r24, r24
    163e:	99 0b       	sbc	r25, r25
    1640:	00 0c       	add	r0, r0
    1642:	88 1f       	adc	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	aa 27       	eor	r26, r26
    1648:	97 fd       	sbrc	r25, 7
    164a:	a0 95       	com	r26
    164c:	ba 2f       	mov	r27, r26
    164e:	89 83       	std	Y+1, r24	; 0x01
    1650:	9a 83       	std	Y+2, r25	; 0x02
    1652:	ab 83       	std	Y+3, r26	; 0x03
    1654:	bc 83       	std	Y+4, r27	; 0x04
    1656:	53 c0       	rjmp	.+166    	; 0x16fe <Timer0_setDelayTimeMilliSec+0x21c>
				break;
			case TIMER0_PRESCALER_DIV_256:
				Total_counts = (F_CPU * Time_ms * 1000) / 256;  // 256 : prescaler
    1658:	88 85       	ldd	r24, Y+8	; 0x08
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	80 e8       	ldi	r24, 0x80	; 128
    1660:	9e e3       	ldi	r25, 0x3E	; 62
    1662:	ac 01       	movw	r20, r24
    1664:	24 9f       	mul	r18, r20
    1666:	c0 01       	movw	r24, r0
    1668:	25 9f       	mul	r18, r21
    166a:	90 0d       	add	r25, r0
    166c:	34 9f       	mul	r19, r20
    166e:	90 0d       	add	r25, r0
    1670:	11 24       	eor	r1, r1
    1672:	9c 8b       	std	Y+20, r25	; 0x14
    1674:	8b 8b       	std	Y+19, r24	; 0x13
    1676:	8b 89       	ldd	r24, Y+19	; 0x13
    1678:	9c 89       	ldd	r25, Y+20	; 0x14
    167a:	99 23       	and	r25, r25
    167c:	34 f4       	brge	.+12     	; 0x168a <Timer0_setDelayTimeMilliSec+0x1a8>
    167e:	2b 89       	ldd	r18, Y+19	; 0x13
    1680:	3c 89       	ldd	r19, Y+20	; 0x14
    1682:	21 50       	subi	r18, 0x01	; 1
    1684:	3f 4f       	sbci	r19, 0xFF	; 255
    1686:	3c 8b       	std	Y+20, r19	; 0x14
    1688:	2b 8b       	std	Y+19, r18	; 0x13
    168a:	4b 89       	ldd	r20, Y+19	; 0x13
    168c:	5c 89       	ldd	r21, Y+20	; 0x14
    168e:	85 2f       	mov	r24, r21
    1690:	99 27       	eor	r25, r25
    1692:	87 fd       	sbrc	r24, 7
    1694:	9a 95       	dec	r25
    1696:	aa 27       	eor	r26, r26
    1698:	97 fd       	sbrc	r25, 7
    169a:	a0 95       	com	r26
    169c:	ba 2f       	mov	r27, r26
    169e:	89 83       	std	Y+1, r24	; 0x01
    16a0:	9a 83       	std	Y+2, r25	; 0x02
    16a2:	ab 83       	std	Y+3, r26	; 0x03
    16a4:	bc 83       	std	Y+4, r27	; 0x04
    16a6:	2b c0       	rjmp	.+86     	; 0x16fe <Timer0_setDelayTimeMilliSec+0x21c>
				break;
			case TIMER0_PRESCALER_DIV_1024:
				Total_counts = (F_CPU * Time_ms * 1000) / 1024;  // 1024 : prescaler
    16a8:	88 85       	ldd	r24, Y+8	; 0x08
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	80 e8       	ldi	r24, 0x80	; 128
    16b0:	9e e3       	ldi	r25, 0x3E	; 62
    16b2:	ac 01       	movw	r20, r24
    16b4:	24 9f       	mul	r18, r20
    16b6:	c0 01       	movw	r24, r0
    16b8:	25 9f       	mul	r18, r21
    16ba:	90 0d       	add	r25, r0
    16bc:	34 9f       	mul	r19, r20
    16be:	90 0d       	add	r25, r0
    16c0:	11 24       	eor	r1, r1
    16c2:	9e 8b       	std	Y+22, r25	; 0x16
    16c4:	8d 8b       	std	Y+21, r24	; 0x15
    16c6:	8d 89       	ldd	r24, Y+21	; 0x15
    16c8:	9e 89       	ldd	r25, Y+22	; 0x16
    16ca:	99 23       	and	r25, r25
    16cc:	34 f4       	brge	.+12     	; 0x16da <Timer0_setDelayTimeMilliSec+0x1f8>
    16ce:	2d 89       	ldd	r18, Y+21	; 0x15
    16d0:	3e 89       	ldd	r19, Y+22	; 0x16
    16d2:	21 50       	subi	r18, 0x01	; 1
    16d4:	3c 4f       	sbci	r19, 0xFC	; 252
    16d6:	3e 8b       	std	Y+22, r19	; 0x16
    16d8:	2d 8b       	std	Y+21, r18	; 0x15
    16da:	8d 89       	ldd	r24, Y+21	; 0x15
    16dc:	9e 89       	ldd	r25, Y+22	; 0x16
    16de:	89 2f       	mov	r24, r25
    16e0:	99 0f       	add	r25, r25
    16e2:	99 0b       	sbc	r25, r25
    16e4:	85 95       	asr	r24
    16e6:	85 95       	asr	r24
    16e8:	aa 27       	eor	r26, r26
    16ea:	97 fd       	sbrc	r25, 7
    16ec:	a0 95       	com	r26
    16ee:	ba 2f       	mov	r27, r26
    16f0:	89 83       	std	Y+1, r24	; 0x01
    16f2:	9a 83       	std	Y+2, r25	; 0x02
    16f4:	ab 83       	std	Y+3, r26	; 0x03
    16f6:	bc 83       	std	Y+4, r27	; 0x04
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <Timer0_setDelayTimeMilliSec+0x21c>
				break;
			default:
				ret_status = OUT_OF_RANGE_VALUE;
    16fa:	82 e0       	ldi	r24, 0x02	; 2
    16fc:	8d 83       	std	Y+5, r24	; 0x05
				break;
			}
			*num_of_ovfs = (u32)(Total_counts / 256);
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	9a 81       	ldd	r25, Y+2	; 0x02
    1702:	ab 81       	ldd	r26, Y+3	; 0x03
    1704:	bc 81       	ldd	r27, Y+4	; 0x04
    1706:	89 2f       	mov	r24, r25
    1708:	9a 2f       	mov	r25, r26
    170a:	ab 2f       	mov	r26, r27
    170c:	bb 27       	eor	r27, r27
    170e:	e9 85       	ldd	r30, Y+9	; 0x09
    1710:	fa 85       	ldd	r31, Y+10	; 0x0a
    1712:	80 83       	st	Z, r24
    1714:	91 83       	std	Z+1, r25	; 0x01
    1716:	a2 83       	std	Z+2, r26	; 0x02
    1718:	b3 83       	std	Z+3, r27	; 0x03
			*rem_counts = Total_counts % 256;
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	9a 81       	ldd	r25, Y+2	; 0x02
    171e:	ab 81       	ldd	r26, Y+3	; 0x03
    1720:	bc 81       	ldd	r27, Y+4	; 0x04
    1722:	90 70       	andi	r25, 0x00	; 0
    1724:	a0 70       	andi	r26, 0x00	; 0
    1726:	b0 70       	andi	r27, 0x00	; 0
    1728:	eb 85       	ldd	r30, Y+11	; 0x0b
    172a:	fc 85       	ldd	r31, Y+12	; 0x0c
    172c:	80 83       	st	Z, r24
    172e:	91 83       	std	Z+1, r25	; 0x01
    1730:	a2 83       	std	Z+2, r26	; 0x02
    1732:	b3 83       	std	Z+3, r27	; 0x03
		{

		}
		else{/* Nothing */}
	}
	return ret_status;
    1734:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1736:	66 96       	adiw	r28, 0x16	; 22
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	f8 94       	cli
    173c:	de bf       	out	0x3e, r29	; 62
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	cd bf       	out	0x3d, r28	; 61
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <Timer0_EnableInt>:




Error_Status_t Timer0_EnableInt(u8 Int_ID)
{
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	00 d0       	rcall	.+0      	; 0x174e <Timer0_EnableInt+0x6>
    174e:	0f 92       	push	r0
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	89 83       	std	Y+1, r24	; 0x01
	// Enable global interrupts

	// Enable timer0 overflow interrupt and compare match interrupt
	switch(Int_ID){
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	3b 83       	std	Y+3, r19	; 0x03
    175e:	2a 83       	std	Y+2, r18	; 0x02
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	9b 81       	ldd	r25, Y+3	; 0x03
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	31 f0       	breq	.+12     	; 0x1774 <Timer0_EnableInt+0x2c>
    1768:	2a 81       	ldd	r18, Y+2	; 0x02
    176a:	3b 81       	ldd	r19, Y+3	; 0x03
    176c:	21 30       	cpi	r18, 0x01	; 1
    176e:	31 05       	cpc	r19, r1
    1770:	39 f0       	breq	.+14     	; 0x1780 <Timer0_EnableInt+0x38>
    1772:	0b c0       	rjmp	.+22     	; 0x178a <Timer0_EnableInt+0x42>
		case TIMER0_OVF_INT_ENABLE:
			TIMER0_CONTROL->TIMSK_CFG.TOIE0_BIT = 1;
    1774:	e2 e5       	ldi	r30, 0x52	; 82
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	87 81       	ldd	r24, Z+7	; 0x07
    177a:	81 60       	ori	r24, 0x01	; 1
    177c:	87 83       	std	Z+7, r24	; 0x07
    177e:	05 c0       	rjmp	.+10     	; 0x178a <Timer0_EnableInt+0x42>
			break;
		case TIMER0_CTC_INT_ENABLE:
			TIMER0_CONTROL->TIMSK_CFG.OCIE0_BIT = 1;
    1780:	e2 e5       	ldi	r30, 0x52	; 82
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	87 81       	ldd	r24, Z+7	; 0x07
    1786:	82 60       	ori	r24, 0x02	; 2
    1788:	87 83       	std	Z+7, r24	; 0x07
			break;
	}
	return NO_ERROR;
    178a:	80 e0       	ldi	r24, 0x00	; 0
}
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	cf 91       	pop	r28
    1794:	df 91       	pop	r29
    1796:	08 95       	ret

00001798 <Timer0_DisableInt>:




Error_Status_t Timer0_DisableInt(u8 Int_ID)
{
    1798:	df 93       	push	r29
    179a:	cf 93       	push	r28
    179c:	00 d0       	rcall	.+0      	; 0x179e <Timer0_DisableInt+0x6>
    179e:	0f 92       	push	r0
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    17a4:	89 83       	std	Y+1, r24	; 0x01
	// Disable timer0 overflow interrupt and compare match interrupt
	switch(Int_ID){
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	3b 83       	std	Y+3, r19	; 0x03
    17ae:	2a 83       	std	Y+2, r18	; 0x02
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	9b 81       	ldd	r25, Y+3	; 0x03
    17b4:	82 30       	cpi	r24, 0x02	; 2
    17b6:	91 05       	cpc	r25, r1
    17b8:	31 f0       	breq	.+12     	; 0x17c6 <Timer0_DisableInt+0x2e>
    17ba:	2a 81       	ldd	r18, Y+2	; 0x02
    17bc:	3b 81       	ldd	r19, Y+3	; 0x03
    17be:	23 30       	cpi	r18, 0x03	; 3
    17c0:	31 05       	cpc	r19, r1
    17c2:	39 f0       	breq	.+14     	; 0x17d2 <Timer0_DisableInt+0x3a>
    17c4:	0b c0       	rjmp	.+22     	; 0x17dc <Timer0_DisableInt+0x44>
		case TIMER0_OVF_INT_DISABLE:
			TIMER0_CONTROL->TIMSK_CFG.TOIE0_BIT = 0;
    17c6:	e2 e5       	ldi	r30, 0x52	; 82
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	87 81       	ldd	r24, Z+7	; 0x07
    17cc:	8e 7f       	andi	r24, 0xFE	; 254
    17ce:	87 83       	std	Z+7, r24	; 0x07
    17d0:	05 c0       	rjmp	.+10     	; 0x17dc <Timer0_DisableInt+0x44>
			break;
		case TIMER0_CTC_INT_DISABLE:
			TIMER0_CONTROL->TIMSK_CFG.OCIE0_BIT = 0;
    17d2:	e2 e5       	ldi	r30, 0x52	; 82
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	87 81       	ldd	r24, Z+7	; 0x07
    17d8:	8d 7f       	andi	r24, 0xFD	; 253
    17da:	87 83       	std	Z+7, r24	; 0x07
			break;
	}
	return NO_ERROR;
    17dc:	80 e0       	ldi	r24, 0x00	; 0
}
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	08 95       	ret

000017ea <Timer0_setCallBack>:



Error_Status_t Timer0_setCallBack(const timer0_t *timer0_obj)
{
    17ea:	df 93       	push	r29
    17ec:	cf 93       	push	r28
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <Timer0_setCallBack+0x6>
    17f0:	0f 92       	push	r0
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	9b 83       	std	Y+3, r25	; 0x03
    17f8:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    17fa:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	19 f4       	brne	.+6      	; 0x180a <Timer0_setCallBack+0x20>
	{
		ret_status = NULL_POINTER;
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	89 83       	std	Y+1, r24	; 0x01
    1808:	10 c0       	rjmp	.+32     	; 0x182a <Timer0_setCallBack+0x40>
	}
	else
	{
		Timer0_Over_Flow_isr = timer0_obj->timer0_over_flow_isr;
    180a:	ea 81       	ldd	r30, Y+2	; 0x02
    180c:	fb 81       	ldd	r31, Y+3	; 0x03
    180e:	80 81       	ld	r24, Z
    1810:	91 81       	ldd	r25, Z+1	; 0x01
    1812:	90 93 f7 00 	sts	0x00F7, r25
    1816:	80 93 f6 00 	sts	0x00F6, r24
		Timer0_Comp_isr = timer0_obj->timer0_comp_isr;
    181a:	ea 81       	ldd	r30, Y+2	; 0x02
    181c:	fb 81       	ldd	r31, Y+3	; 0x03
    181e:	82 81       	ldd	r24, Z+2	; 0x02
    1820:	93 81       	ldd	r25, Z+3	; 0x03
    1822:	90 93 f9 00 	sts	0x00F9, r25
    1826:	80 93 f8 00 	sts	0x00F8, r24
	}
	return ret_status;
    182a:	89 81       	ldd	r24, Y+1	; 0x01
}
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <Timer0_setFastPWM>:
Error_Status_t Timer0_setFastPWM(const timer0_t *timer0_obj, u8 frequency ,u8 duty)
{
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	00 d0       	rcall	.+0      	; 0x183e <Timer0_setFastPWM+0x6>
    183e:	00 d0       	rcall	.+0      	; 0x1840 <Timer0_setFastPWM+0x8>
    1840:	0f 92       	push	r0
    1842:	cd b7       	in	r28, 0x3d	; 61
    1844:	de b7       	in	r29, 0x3e	; 62
    1846:	9b 83       	std	Y+3, r25	; 0x03
    1848:	8a 83       	std	Y+2, r24	; 0x02
    184a:	6c 83       	std	Y+4, r22	; 0x04
    184c:	4d 83       	std	Y+5, r20	; 0x05
	Error_Status_t ret_status = NO_ERROR;
    184e:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	9b 81       	ldd	r25, Y+3	; 0x03
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	19 f4       	brne	.+6      	; 0x185e <Timer0_setFastPWM+0x26>
	{
		ret_status = NULL_POINTER;
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	89 83       	std	Y+1, r24	; 0x01
    185c:	49 c0       	rjmp	.+146    	; 0x18f0 <Timer0_setFastPWM+0xb8>
	}
	else
	{
		if(TIMER0_FAST_PWM_MODE == timer0_obj->mode)
    185e:	ea 81       	ldd	r30, Y+2	; 0x02
    1860:	fb 81       	ldd	r31, Y+3	; 0x03
    1862:	84 81       	ldd	r24, Z+4	; 0x04
    1864:	88 71       	andi	r24, 0x18	; 24
    1866:	88 31       	cpi	r24, 0x18	; 24
    1868:	09 f0       	breq	.+2      	; 0x186c <Timer0_setFastPWM+0x34>
    186a:	42 c0       	rjmp	.+132    	; 0x18f0 <Timer0_setFastPWM+0xb8>
		{
			if(TIMER0_FAST_PWM_CLEAR_OC0_ON_COMPARE_MATCH == timer0_obj->ctc_mode_cfg)
    186c:	ea 81       	ldd	r30, Y+2	; 0x02
    186e:	fb 81       	ldd	r31, Y+3	; 0x03
    1870:	84 81       	ldd	r24, Z+4	; 0x04
    1872:	80 76       	andi	r24, 0x60	; 96
    1874:	80 34       	cpi	r24, 0x40	; 64
    1876:	d9 f4       	brne	.+54     	; 0x18ae <Timer0_setFastPWM+0x76>
			{
				TIMER0_CONTROL->OCR0_CFG = (duty * 255) / 100;
    1878:	e2 e5       	ldi	r30, 0x52	; 82
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	8d 81       	ldd	r24, Y+5	; 0x05
    187e:	48 2f       	mov	r20, r24
    1880:	50 e0       	ldi	r21, 0x00	; 0
    1882:	ca 01       	movw	r24, r20
    1884:	9c 01       	movw	r18, r24
    1886:	22 0f       	add	r18, r18
    1888:	33 1f       	adc	r19, r19
    188a:	c9 01       	movw	r24, r18
    188c:	96 95       	lsr	r25
    188e:	98 2f       	mov	r25, r24
    1890:	88 27       	eor	r24, r24
    1892:	97 95       	ror	r25
    1894:	87 95       	ror	r24
    1896:	82 1b       	sub	r24, r18
    1898:	93 0b       	sbc	r25, r19
    189a:	84 0f       	add	r24, r20
    189c:	95 1f       	adc	r25, r21
    189e:	24 e6       	ldi	r18, 0x64	; 100
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	b9 01       	movw	r22, r18
    18a4:	0e 94 3d 21 	call	0x427a	; 0x427a <__divmodhi4>
    18a8:	cb 01       	movw	r24, r22
    18aa:	82 87       	std	Z+10, r24	; 0x0a
    18ac:	21 c0       	rjmp	.+66     	; 0x18f0 <Timer0_setFastPWM+0xb8>
			}
			else if(TIMER0_FAST_PWM_SET_OC0_ON_COMPARE_MATCH == timer0_obj->ctc_mode_cfg)
    18ae:	ea 81       	ldd	r30, Y+2	; 0x02
    18b0:	fb 81       	ldd	r31, Y+3	; 0x03
    18b2:	84 81       	ldd	r24, Z+4	; 0x04
    18b4:	80 76       	andi	r24, 0x60	; 96
    18b6:	80 36       	cpi	r24, 0x60	; 96
    18b8:	d9 f4       	brne	.+54     	; 0x18f0 <Timer0_setFastPWM+0xb8>
			{
				//TIMER0_CONTROL->TCNT0_CFG =
				TIMER0_CONTROL->OCR0_CFG = 255 - ((duty * 255) / 100);
    18ba:	e2 e5       	ldi	r30, 0x52	; 82
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	8d 81       	ldd	r24, Y+5	; 0x05
    18c0:	48 2f       	mov	r20, r24
    18c2:	50 e0       	ldi	r21, 0x00	; 0
    18c4:	ca 01       	movw	r24, r20
    18c6:	9c 01       	movw	r18, r24
    18c8:	22 0f       	add	r18, r18
    18ca:	33 1f       	adc	r19, r19
    18cc:	c9 01       	movw	r24, r18
    18ce:	96 95       	lsr	r25
    18d0:	98 2f       	mov	r25, r24
    18d2:	88 27       	eor	r24, r24
    18d4:	97 95       	ror	r25
    18d6:	87 95       	ror	r24
    18d8:	82 1b       	sub	r24, r18
    18da:	93 0b       	sbc	r25, r19
    18dc:	84 0f       	add	r24, r20
    18de:	95 1f       	adc	r25, r21
    18e0:	24 e6       	ldi	r18, 0x64	; 100
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	b9 01       	movw	r22, r18
    18e6:	0e 94 3d 21 	call	0x427a	; 0x427a <__divmodhi4>
    18ea:	cb 01       	movw	r24, r22
    18ec:	80 95       	com	r24
    18ee:	82 87       	std	Z+10, r24	; 0x0a
			}
			else{/* Nothing */}
		}
		else{/* Nothing */}
	}
	return ret_status;
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <Timer0_setphaseCorrectPWM>:


Error_Status_t Timer0_setphaseCorrectPWM(const timer0_t *timer0_obj, u8 frequency , u8 duty)
{
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	00 d0       	rcall	.+0      	; 0x1908 <Timer0_setphaseCorrectPWM+0x6>
    1908:	00 d0       	rcall	.+0      	; 0x190a <Timer0_setphaseCorrectPWM+0x8>
    190a:	0f 92       	push	r0
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    1910:	9b 83       	std	Y+3, r25	; 0x03
    1912:	8a 83       	std	Y+2, r24	; 0x02
    1914:	6c 83       	std	Y+4, r22	; 0x04
    1916:	4d 83       	std	Y+5, r20	; 0x05
	Error_Status_t ret_status = NO_ERROR;
    1918:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	9b 81       	ldd	r25, Y+3	; 0x03
    191e:	00 97       	sbiw	r24, 0x00	; 0
    1920:	19 f4       	brne	.+6      	; 0x1928 <Timer0_setphaseCorrectPWM+0x26>
	{
		ret_status = NULL_POINTER;
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	89 83       	std	Y+1, r24	; 0x01
    1926:	48 c0       	rjmp	.+144    	; 0x19b8 <Timer0_setphaseCorrectPWM+0xb6>
	}
	else
	{
		if(TIMER0_PWM_PHASE_CORRECT_MODE == timer0_obj->mode)
    1928:	ea 81       	ldd	r30, Y+2	; 0x02
    192a:	fb 81       	ldd	r31, Y+3	; 0x03
    192c:	84 81       	ldd	r24, Z+4	; 0x04
    192e:	88 71       	andi	r24, 0x18	; 24
    1930:	88 30       	cpi	r24, 0x08	; 8
    1932:	09 f0       	breq	.+2      	; 0x1936 <Timer0_setphaseCorrectPWM+0x34>
    1934:	41 c0       	rjmp	.+130    	; 0x19b8 <Timer0_setphaseCorrectPWM+0xb6>
		{
			if(TIMER0_PHASE_CORRECT_PWM_CLEAR_OC0_ON_COMPARE_MATCH == timer0_obj->ctc_mode_cfg)
    1936:	ea 81       	ldd	r30, Y+2	; 0x02
    1938:	fb 81       	ldd	r31, Y+3	; 0x03
    193a:	84 81       	ldd	r24, Z+4	; 0x04
    193c:	80 76       	andi	r24, 0x60	; 96
    193e:	80 34       	cpi	r24, 0x40	; 64
    1940:	c9 f4       	brne	.+50     	; 0x1974 <Timer0_setphaseCorrectPWM+0x72>
			{
				TIMER0_CONTROL->OCR0_CFG = (u8)(((u8)(duty * 255) / 100) / 2);
    1942:	e2 e5       	ldi	r30, 0x52	; 82
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	8d 81       	ldd	r24, Y+5	; 0x05
    1948:	48 2f       	mov	r20, r24
    194a:	50 e0       	ldi	r21, 0x00	; 0
    194c:	ca 01       	movw	r24, r20
    194e:	9c 01       	movw	r18, r24
    1950:	22 0f       	add	r18, r18
    1952:	33 1f       	adc	r19, r19
    1954:	c9 01       	movw	r24, r18
    1956:	96 95       	lsr	r25
    1958:	98 2f       	mov	r25, r24
    195a:	88 27       	eor	r24, r24
    195c:	97 95       	ror	r25
    195e:	87 95       	ror	r24
    1960:	82 1b       	sub	r24, r18
    1962:	93 0b       	sbc	r25, r19
    1964:	84 0f       	add	r24, r20
    1966:	95 1f       	adc	r25, r21
    1968:	98 ec       	ldi	r25, 0xC8	; 200
    196a:	69 2f       	mov	r22, r25
    196c:	0e 94 31 21 	call	0x4262	; 0x4262 <__udivmodqi4>
    1970:	82 87       	std	Z+10, r24	; 0x0a
    1972:	22 c0       	rjmp	.+68     	; 0x19b8 <Timer0_setphaseCorrectPWM+0xb6>
			}
			else if(TIMER0_PHASE_CORRECT_PWM_SET_OC0_ON_COMPARE_MATCH == timer0_obj->ctc_mode_cfg)
    1974:	ea 81       	ldd	r30, Y+2	; 0x02
    1976:	fb 81       	ldd	r31, Y+3	; 0x03
    1978:	84 81       	ldd	r24, Z+4	; 0x04
    197a:	80 76       	andi	r24, 0x60	; 96
    197c:	80 36       	cpi	r24, 0x60	; 96
    197e:	e1 f4       	brne	.+56     	; 0x19b8 <Timer0_setphaseCorrectPWM+0xb6>
			{
				TIMER0_CONTROL->OCR0_CFG = (u8)(255 - ((u8)((duty * 255) / 100) / 2));
    1980:	e2 e5       	ldi	r30, 0x52	; 82
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	8d 81       	ldd	r24, Y+5	; 0x05
    1986:	48 2f       	mov	r20, r24
    1988:	50 e0       	ldi	r21, 0x00	; 0
    198a:	ca 01       	movw	r24, r20
    198c:	9c 01       	movw	r18, r24
    198e:	22 0f       	add	r18, r18
    1990:	33 1f       	adc	r19, r19
    1992:	c9 01       	movw	r24, r18
    1994:	96 95       	lsr	r25
    1996:	98 2f       	mov	r25, r24
    1998:	88 27       	eor	r24, r24
    199a:	97 95       	ror	r25
    199c:	87 95       	ror	r24
    199e:	82 1b       	sub	r24, r18
    19a0:	93 0b       	sbc	r25, r19
    19a2:	84 0f       	add	r24, r20
    19a4:	95 1f       	adc	r25, r21
    19a6:	24 e6       	ldi	r18, 0x64	; 100
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	b9 01       	movw	r22, r18
    19ac:	0e 94 3d 21 	call	0x427a	; 0x427a <__divmodhi4>
    19b0:	cb 01       	movw	r24, r22
    19b2:	86 95       	lsr	r24
    19b4:	80 95       	com	r24
    19b6:	82 87       	std	Z+10, r24	; 0x0a
			}
			else{/* Nothing */}
		}
		else{/* Nothing */}
	}
	return ret_status;
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	08 95       	ret

000019ca <__vector_11>:
/* ------------------------------------------------ Timer0 ISRs -------------------------------*/

// Define the ISR function with attribute
void TIMER0_OVF_VECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER0_OVF_VECTOR(void)
{
    19ca:	1f 92       	push	r1
    19cc:	0f 92       	push	r0
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	0f 92       	push	r0
    19d2:	11 24       	eor	r1, r1
    19d4:	2f 93       	push	r18
    19d6:	3f 93       	push	r19
    19d8:	4f 93       	push	r20
    19da:	5f 93       	push	r21
    19dc:	6f 93       	push	r22
    19de:	7f 93       	push	r23
    19e0:	8f 93       	push	r24
    19e2:	9f 93       	push	r25
    19e4:	af 93       	push	r26
    19e6:	bf 93       	push	r27
    19e8:	ef 93       	push	r30
    19ea:	ff 93       	push	r31
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	TIMER0_CONTROL->TIFR_CFG.TOF0_BIT = 0;
    19f4:	e2 e5       	ldi	r30, 0x52	; 82
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	86 81       	ldd	r24, Z+6	; 0x06
    19fa:	8e 7f       	andi	r24, 0xFE	; 254
    19fc:	86 83       	std	Z+6, r24	; 0x06
	//			Timer0_delay_callback();
	//		}
	//	}

	// execute ISR if it existed
	if(Timer0_Over_Flow_isr)
    19fe:	80 91 f6 00 	lds	r24, 0x00F6
    1a02:	90 91 f7 00 	lds	r25, 0x00F7
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	29 f0       	breq	.+10     	; 0x1a14 <__vector_11+0x4a>
	{
		Timer0_Over_Flow_isr();
    1a0a:	e0 91 f6 00 	lds	r30, 0x00F6
    1a0e:	f0 91 f7 00 	lds	r31, 0x00F7
    1a12:	09 95       	icall
	}
}
    1a14:	cf 91       	pop	r28
    1a16:	df 91       	pop	r29
    1a18:	ff 91       	pop	r31
    1a1a:	ef 91       	pop	r30
    1a1c:	bf 91       	pop	r27
    1a1e:	af 91       	pop	r26
    1a20:	9f 91       	pop	r25
    1a22:	8f 91       	pop	r24
    1a24:	7f 91       	pop	r23
    1a26:	6f 91       	pop	r22
    1a28:	5f 91       	pop	r21
    1a2a:	4f 91       	pop	r20
    1a2c:	3f 91       	pop	r19
    1a2e:	2f 91       	pop	r18
    1a30:	0f 90       	pop	r0
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	0f 90       	pop	r0
    1a36:	1f 90       	pop	r1
    1a38:	18 95       	reti

00001a3a <__vector_10>:


// Define the ISR function with attribute
void TIMER0_COMPA_VECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER0_COMPA_VECTOR(void)
{
    1a3a:	1f 92       	push	r1
    1a3c:	0f 92       	push	r0
    1a3e:	0f b6       	in	r0, 0x3f	; 63
    1a40:	0f 92       	push	r0
    1a42:	11 24       	eor	r1, r1
    1a44:	2f 93       	push	r18
    1a46:	3f 93       	push	r19
    1a48:	4f 93       	push	r20
    1a4a:	5f 93       	push	r21
    1a4c:	6f 93       	push	r22
    1a4e:	7f 93       	push	r23
    1a50:	8f 93       	push	r24
    1a52:	9f 93       	push	r25
    1a54:	af 93       	push	r26
    1a56:	bf 93       	push	r27
    1a58:	ef 93       	push	r30
    1a5a:	ff 93       	push	r31
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
	// clear flag
	TIMER0_CONTROL->TIFR_CFG.OCF0_BIT = 0;
    1a64:	e2 e5       	ldi	r30, 0x52	; 82
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	86 81       	ldd	r24, Z+6	; 0x06
    1a6a:	8d 7f       	andi	r24, 0xFD	; 253
    1a6c:	86 83       	std	Z+6, r24	; 0x06

	// execute ISR if it existed
	if(Timer0_Comp_isr)
    1a6e:	80 91 f8 00 	lds	r24, 0x00F8
    1a72:	90 91 f9 00 	lds	r25, 0x00F9
    1a76:	00 97       	sbiw	r24, 0x00	; 0
    1a78:	29 f0       	breq	.+10     	; 0x1a84 <__vector_10+0x4a>
	{
		Timer0_Comp_isr();
    1a7a:	e0 91 f8 00 	lds	r30, 0x00F8
    1a7e:	f0 91 f9 00 	lds	r31, 0x00F9
    1a82:	09 95       	icall
	}
}
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	ff 91       	pop	r31
    1a8a:	ef 91       	pop	r30
    1a8c:	bf 91       	pop	r27
    1a8e:	af 91       	pop	r26
    1a90:	9f 91       	pop	r25
    1a92:	8f 91       	pop	r24
    1a94:	7f 91       	pop	r23
    1a96:	6f 91       	pop	r22
    1a98:	5f 91       	pop	r21
    1a9a:	4f 91       	pop	r20
    1a9c:	3f 91       	pop	r19
    1a9e:	2f 91       	pop	r18
    1aa0:	0f 90       	pop	r0
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	0f 90       	pop	r0
    1aa6:	1f 90       	pop	r1
    1aa8:	18 95       	reti

00001aaa <M_EXTI_voidEnable>:
void (*INT0_ISR)(void) = NULL;
void (*INT1_ISR)(void) = NULL;
void (*INT2_ISR)(void) = NULL;

Error_Status_t M_EXTI_voidEnable(const EXT_INTERRUPT_T *exti_obj)
{
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	00 d0       	rcall	.+0      	; 0x1ab0 <M_EXTI_voidEnable+0x6>
    1ab0:	00 d0       	rcall	.+0      	; 0x1ab2 <M_EXTI_voidEnable+0x8>
    1ab2:	0f 92       	push	r0
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	9b 83       	std	Y+3, r25	; 0x03
    1aba:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1abc:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == exti_obj)
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac2:	00 97       	sbiw	r24, 0x00	; 0
    1ac4:	19 f4       	brne	.+6      	; 0x1acc <M_EXTI_voidEnable+0x22>
	{
		ret_status = NULL_POINTER;
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	89 83       	std	Y+1, r24	; 0x01
    1aca:	69 c0       	rjmp	.+210    	; 0x1b9e <M_EXTI_voidEnable+0xf4>
	}
	else
	{
		GIE_Enable();
    1acc:	ef e5       	ldi	r30, 0x5F	; 95
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	80 68       	ori	r24, 0x80	; 128
    1ad4:	80 83       	st	Z, r24
		switch (exti_obj->INTx_select) {
    1ad6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ad8:	fb 81       	ldd	r31, Y+3	; 0x03
    1ada:	82 81       	ldd	r24, Z+2	; 0x02
    1adc:	83 70       	andi	r24, 0x03	; 3
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	3d 83       	std	Y+5, r19	; 0x05
    1ae4:	2c 83       	std	Y+4, r18	; 0x04
    1ae6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aea:	81 30       	cpi	r24, 0x01	; 1
    1aec:	91 05       	cpc	r25, r1
    1aee:	11 f1       	breq	.+68     	; 0x1b34 <M_EXTI_voidEnable+0x8a>
    1af0:	2c 81       	ldd	r18, Y+4	; 0x04
    1af2:	3d 81       	ldd	r19, Y+5	; 0x05
    1af4:	22 30       	cpi	r18, 0x02	; 2
    1af6:	31 05       	cpc	r19, r1
    1af8:	b9 f1       	breq	.+110    	; 0x1b68 <M_EXTI_voidEnable+0xbe>
    1afa:	8c 81       	ldd	r24, Y+4	; 0x04
    1afc:	9d 81       	ldd	r25, Y+5	; 0x05
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	09 f0       	breq	.+2      	; 0x1b04 <M_EXTI_voidEnable+0x5a>
    1b02:	4b c0       	rjmp	.+150    	; 0x1b9a <M_EXTI_voidEnable+0xf0>
			case EXTI_INT0_ID:
				EXT_INT_CONTROL->GICR_CFG.INT0_BIT = EXTI0_ENABLE;
    1b04:	e4 e5       	ldi	r30, 0x54	; 84
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	87 81       	ldd	r24, Z+7	; 0x07
    1b0a:	80 64       	ori	r24, 0x40	; 64
    1b0c:	87 83       	std	Z+7, r24	; 0x07
				EXT_INT_CONTROL->MCUCR_CFG.ISC0_BITS = exti_obj->INTx_sense;
    1b0e:	a4 e5       	ldi	r26, 0x54	; 84
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	ea 81       	ldd	r30, Y+2	; 0x02
    1b14:	fb 81       	ldd	r31, Y+3	; 0x03
    1b16:	82 81       	ldd	r24, Z+2	; 0x02
    1b18:	86 95       	lsr	r24
    1b1a:	86 95       	lsr	r24
    1b1c:	83 70       	andi	r24, 0x03	; 3
    1b1e:	98 2f       	mov	r25, r24
    1b20:	93 70       	andi	r25, 0x03	; 3
    1b22:	11 96       	adiw	r26, 0x01	; 1
    1b24:	8c 91       	ld	r24, X
    1b26:	11 97       	sbiw	r26, 0x01	; 1
    1b28:	8c 7f       	andi	r24, 0xFC	; 252
    1b2a:	89 2b       	or	r24, r25
    1b2c:	11 96       	adiw	r26, 0x01	; 1
    1b2e:	8c 93       	st	X, r24
    1b30:	11 97       	sbiw	r26, 0x01	; 1
    1b32:	35 c0       	rjmp	.+106    	; 0x1b9e <M_EXTI_voidEnable+0xf4>
				break;
			case EXTI_INT1_ID:
				EXT_INT_CONTROL->GICR_CFG.INT1_BIT = EXTI1_ENABLE;
    1b34:	e4 e5       	ldi	r30, 0x54	; 84
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	87 81       	ldd	r24, Z+7	; 0x07
    1b3a:	80 68       	ori	r24, 0x80	; 128
    1b3c:	87 83       	std	Z+7, r24	; 0x07
				EXT_INT_CONTROL->MCUCR_CFG.ISC1_BITS = exti_obj->INTx_sense;
    1b3e:	a4 e5       	ldi	r26, 0x54	; 84
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	ea 81       	ldd	r30, Y+2	; 0x02
    1b44:	fb 81       	ldd	r31, Y+3	; 0x03
    1b46:	82 81       	ldd	r24, Z+2	; 0x02
    1b48:	86 95       	lsr	r24
    1b4a:	86 95       	lsr	r24
    1b4c:	83 70       	andi	r24, 0x03	; 3
    1b4e:	83 70       	andi	r24, 0x03	; 3
    1b50:	98 2f       	mov	r25, r24
    1b52:	99 0f       	add	r25, r25
    1b54:	99 0f       	add	r25, r25
    1b56:	11 96       	adiw	r26, 0x01	; 1
    1b58:	8c 91       	ld	r24, X
    1b5a:	11 97       	sbiw	r26, 0x01	; 1
    1b5c:	83 7f       	andi	r24, 0xF3	; 243
    1b5e:	89 2b       	or	r24, r25
    1b60:	11 96       	adiw	r26, 0x01	; 1
    1b62:	8c 93       	st	X, r24
    1b64:	11 97       	sbiw	r26, 0x01	; 1
    1b66:	1b c0       	rjmp	.+54     	; 0x1b9e <M_EXTI_voidEnable+0xf4>
				break;
			case EXTI_INT2_ID:
				EXT_INT_CONTROL->GICR_CFG.INT2_BIT = EXTI2_ENABLE;
    1b68:	e4 e5       	ldi	r30, 0x54	; 84
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	87 81       	ldd	r24, Z+7	; 0x07
    1b6e:	80 62       	ori	r24, 0x20	; 32
    1b70:	87 83       	std	Z+7, r24	; 0x07
				EXT_INT_CONTROL->MCUCSR_CFG.ISC2_BIT = exti_obj->INTx_sense;
    1b72:	a4 e5       	ldi	r26, 0x54	; 84
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	ea 81       	ldd	r30, Y+2	; 0x02
    1b78:	fb 81       	ldd	r31, Y+3	; 0x03
    1b7a:	82 81       	ldd	r24, Z+2	; 0x02
    1b7c:	86 95       	lsr	r24
    1b7e:	86 95       	lsr	r24
    1b80:	83 70       	andi	r24, 0x03	; 3
    1b82:	81 70       	andi	r24, 0x01	; 1
    1b84:	81 70       	andi	r24, 0x01	; 1
    1b86:	98 2f       	mov	r25, r24
    1b88:	92 95       	swap	r25
    1b8a:	99 0f       	add	r25, r25
    1b8c:	99 0f       	add	r25, r25
    1b8e:	90 7c       	andi	r25, 0xC0	; 192
    1b90:	8c 91       	ld	r24, X
    1b92:	8f 7b       	andi	r24, 0xBF	; 191
    1b94:	89 2b       	or	r24, r25
    1b96:	8c 93       	st	X, r24
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <M_EXTI_voidEnable+0xf4>
				break;
			default:
				ret_status = OUT_OF_RANGE_VALUE;
    1b9a:	82 e0       	ldi	r24, 0x02	; 2
    1b9c:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}
	return ret_status;
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	cf 91       	pop	r28
    1bac:	df 91       	pop	r29
    1bae:	08 95       	ret

00001bb0 <M_EXTI_voidDisable>:
Error_Status_t M_EXTI_voidDisable(const EXT_INTERRUPT_T *exti_obj)
{
    1bb0:	df 93       	push	r29
    1bb2:	cf 93       	push	r28
    1bb4:	00 d0       	rcall	.+0      	; 0x1bb6 <M_EXTI_voidDisable+0x6>
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <M_EXTI_voidDisable+0x8>
    1bb8:	0f 92       	push	r0
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	9b 83       	std	Y+3, r25	; 0x03
    1bc0:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1bc2:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == exti_obj)
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc8:	00 97       	sbiw	r24, 0x00	; 0
    1bca:	19 f4       	brne	.+6      	; 0x1bd2 <M_EXTI_voidDisable+0x22>
	{
		ret_status = NULL_POINTER;
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	89 83       	std	Y+1, r24	; 0x01
    1bd0:	2f c0       	rjmp	.+94     	; 0x1c30 <M_EXTI_voidDisable+0x80>
	}
	else
	{
		GIE_Disable();
    1bd2:	ef e5       	ldi	r30, 0x5F	; 95
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	8f 77       	andi	r24, 0x7F	; 127
    1bda:	80 83       	st	Z, r24
		switch (exti_obj->INTx_select) {
    1bdc:	ea 81       	ldd	r30, Y+2	; 0x02
    1bde:	fb 81       	ldd	r31, Y+3	; 0x03
    1be0:	82 81       	ldd	r24, Z+2	; 0x02
    1be2:	83 70       	andi	r24, 0x03	; 3
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	3d 83       	std	Y+5, r19	; 0x05
    1bea:	2c 83       	std	Y+4, r18	; 0x04
    1bec:	8c 81       	ldd	r24, Y+4	; 0x04
    1bee:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf0:	81 30       	cpi	r24, 0x01	; 1
    1bf2:	91 05       	cpc	r25, r1
    1bf4:	79 f0       	breq	.+30     	; 0x1c14 <M_EXTI_voidDisable+0x64>
    1bf6:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf8:	3d 81       	ldd	r19, Y+5	; 0x05
    1bfa:	22 30       	cpi	r18, 0x02	; 2
    1bfc:	31 05       	cpc	r19, r1
    1bfe:	81 f0       	breq	.+32     	; 0x1c20 <M_EXTI_voidDisable+0x70>
    1c00:	8c 81       	ldd	r24, Y+4	; 0x04
    1c02:	9d 81       	ldd	r25, Y+5	; 0x05
    1c04:	00 97       	sbiw	r24, 0x00	; 0
    1c06:	91 f4       	brne	.+36     	; 0x1c2c <M_EXTI_voidDisable+0x7c>
			case EXTI_INT0_ID:
				EXT_INT_CONTROL->GICR_CFG.INT0_BIT = EXTI0_DISABLE;
    1c08:	e4 e5       	ldi	r30, 0x54	; 84
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	87 81       	ldd	r24, Z+7	; 0x07
    1c0e:	8f 7b       	andi	r24, 0xBF	; 191
    1c10:	87 83       	std	Z+7, r24	; 0x07
    1c12:	0e c0       	rjmp	.+28     	; 0x1c30 <M_EXTI_voidDisable+0x80>
				break;
			case EXTI_INT1_ID:
				EXT_INT_CONTROL->GICR_CFG.INT1_BIT = EXTI1_DISABLE;
    1c14:	e4 e5       	ldi	r30, 0x54	; 84
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	87 81       	ldd	r24, Z+7	; 0x07
    1c1a:	8f 77       	andi	r24, 0x7F	; 127
    1c1c:	87 83       	std	Z+7, r24	; 0x07
    1c1e:	08 c0       	rjmp	.+16     	; 0x1c30 <M_EXTI_voidDisable+0x80>
				break;
			case EXTI_INT2_ID:
				EXT_INT_CONTROL->GICR_CFG.INT2_BIT = EXTI2_DISABLE;
    1c20:	e4 e5       	ldi	r30, 0x54	; 84
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	87 81       	ldd	r24, Z+7	; 0x07
    1c26:	8f 7d       	andi	r24, 0xDF	; 223
    1c28:	87 83       	std	Z+7, r24	; 0x07
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <M_EXTI_voidDisable+0x80>
				break;
			default:
				ret_status = OUT_OF_RANGE_VALUE;
    1c2c:	82 e0       	ldi	r24, 0x02	; 2
    1c2e:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}
	return ret_status;
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	08 95       	ret

00001c42 <M_EXTI_voidSet_CallBack>:
Error_Status_t M_EXTI_voidSet_CallBack(const EXT_INTERRUPT_T *exti_obj)
{
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <M_EXTI_voidSet_CallBack+0x6>
    1c48:	00 d0       	rcall	.+0      	; 0x1c4a <M_EXTI_voidSet_CallBack+0x8>
    1c4a:	0f 92       	push	r0
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	9b 83       	std	Y+3, r25	; 0x03
    1c52:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1c54:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == exti_obj)
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	9b 81       	ldd	r25, Y+3	; 0x03
    1c5a:	00 97       	sbiw	r24, 0x00	; 0
    1c5c:	19 f4       	brne	.+6      	; 0x1c64 <M_EXTI_voidSet_CallBack+0x22>
	{
		ret_status = NULL_POINTER;
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	89 83       	std	Y+1, r24	; 0x01
    1c62:	33 c0       	rjmp	.+102    	; 0x1cca <M_EXTI_voidSet_CallBack+0x88>
	}
	else
	{
		switch (exti_obj->INTx_select) {
    1c64:	ea 81       	ldd	r30, Y+2	; 0x02
    1c66:	fb 81       	ldd	r31, Y+3	; 0x03
    1c68:	82 81       	ldd	r24, Z+2	; 0x02
    1c6a:	83 70       	andi	r24, 0x03	; 3
    1c6c:	28 2f       	mov	r18, r24
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	3d 83       	std	Y+5, r19	; 0x05
    1c72:	2c 83       	std	Y+4, r18	; 0x04
    1c74:	8c 81       	ldd	r24, Y+4	; 0x04
    1c76:	9d 81       	ldd	r25, Y+5	; 0x05
    1c78:	81 30       	cpi	r24, 0x01	; 1
    1c7a:	91 05       	cpc	r25, r1
    1c7c:	91 f0       	breq	.+36     	; 0x1ca2 <M_EXTI_voidSet_CallBack+0x60>
    1c7e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c80:	3d 81       	ldd	r19, Y+5	; 0x05
    1c82:	22 30       	cpi	r18, 0x02	; 2
    1c84:	31 05       	cpc	r19, r1
    1c86:	b1 f0       	breq	.+44     	; 0x1cb4 <M_EXTI_voidSet_CallBack+0x72>
    1c88:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c8c:	00 97       	sbiw	r24, 0x00	; 0
    1c8e:	d9 f4       	brne	.+54     	; 0x1cc6 <M_EXTI_voidSet_CallBack+0x84>
			case EXTI_INT0_ID:
				INT0_ISR = exti_obj->EXT_INT_ISR;
    1c90:	ea 81       	ldd	r30, Y+2	; 0x02
    1c92:	fb 81       	ldd	r31, Y+3	; 0x03
    1c94:	80 81       	ld	r24, Z
    1c96:	91 81       	ldd	r25, Z+1	; 0x01
    1c98:	90 93 fb 00 	sts	0x00FB, r25
    1c9c:	80 93 fa 00 	sts	0x00FA, r24
    1ca0:	14 c0       	rjmp	.+40     	; 0x1cca <M_EXTI_voidSet_CallBack+0x88>
				break;
			case EXTI_INT1_ID:
				INT1_ISR = exti_obj->EXT_INT_ISR;
    1ca2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ca4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ca6:	80 81       	ld	r24, Z
    1ca8:	91 81       	ldd	r25, Z+1	; 0x01
    1caa:	90 93 fd 00 	sts	0x00FD, r25
    1cae:	80 93 fc 00 	sts	0x00FC, r24
    1cb2:	0b c0       	rjmp	.+22     	; 0x1cca <M_EXTI_voidSet_CallBack+0x88>
				break;
			case EXTI_INT2_ID:
				INT2_ISR = exti_obj->EXT_INT_ISR;
    1cb4:	ea 81       	ldd	r30, Y+2	; 0x02
    1cb6:	fb 81       	ldd	r31, Y+3	; 0x03
    1cb8:	80 81       	ld	r24, Z
    1cba:	91 81       	ldd	r25, Z+1	; 0x01
    1cbc:	90 93 ff 00 	sts	0x00FF, r25
    1cc0:	80 93 fe 00 	sts	0x00FE, r24
    1cc4:	02 c0       	rjmp	.+4      	; 0x1cca <M_EXTI_voidSet_CallBack+0x88>
				break;
			default:
				ret_status = OUT_OF_RANGE_VALUE;
    1cc6:	82 e0       	ldi	r24, 0x02	; 2
    1cc8:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}
	return ret_status;
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	08 95       	ret

00001cdc <__vector_1>:

/* ----------------------------------------- External Interrupt ISRs -------------------------- */
// Define the ISR function with attribute
void INT0_VECTOR(void) __attribute__((signal));
void INT0_VECTOR(void)
{
    1cdc:	1f 92       	push	r1
    1cde:	0f 92       	push	r0
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	0f 92       	push	r0
    1ce4:	11 24       	eor	r1, r1
    1ce6:	2f 93       	push	r18
    1ce8:	3f 93       	push	r19
    1cea:	4f 93       	push	r20
    1cec:	5f 93       	push	r21
    1cee:	6f 93       	push	r22
    1cf0:	7f 93       	push	r23
    1cf2:	8f 93       	push	r24
    1cf4:	9f 93       	push	r25
    1cf6:	af 93       	push	r26
    1cf8:	bf 93       	push	r27
    1cfa:	ef 93       	push	r30
    1cfc:	ff 93       	push	r31
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	EXT_INT_CONTROL->GIFR_CFG.INTF0_BIT = 0;
    1d06:	e4 e5       	ldi	r30, 0x54	; 84
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	86 81       	ldd	r24, Z+6	; 0x06
    1d0c:	8f 7b       	andi	r24, 0xBF	; 191
    1d0e:	86 83       	std	Z+6, r24	; 0x06
	// execute ISR if it existed
	if(INT0_ISR)
    1d10:	80 91 fa 00 	lds	r24, 0x00FA
    1d14:	90 91 fb 00 	lds	r25, 0x00FB
    1d18:	00 97       	sbiw	r24, 0x00	; 0
    1d1a:	29 f0       	breq	.+10     	; 0x1d26 <__vector_1+0x4a>
	{
		INT0_ISR();
    1d1c:	e0 91 fa 00 	lds	r30, 0x00FA
    1d20:	f0 91 fb 00 	lds	r31, 0x00FB
    1d24:	09 95       	icall
	}
}
    1d26:	cf 91       	pop	r28
    1d28:	df 91       	pop	r29
    1d2a:	ff 91       	pop	r31
    1d2c:	ef 91       	pop	r30
    1d2e:	bf 91       	pop	r27
    1d30:	af 91       	pop	r26
    1d32:	9f 91       	pop	r25
    1d34:	8f 91       	pop	r24
    1d36:	7f 91       	pop	r23
    1d38:	6f 91       	pop	r22
    1d3a:	5f 91       	pop	r21
    1d3c:	4f 91       	pop	r20
    1d3e:	3f 91       	pop	r19
    1d40:	2f 91       	pop	r18
    1d42:	0f 90       	pop	r0
    1d44:	0f be       	out	0x3f, r0	; 63
    1d46:	0f 90       	pop	r0
    1d48:	1f 90       	pop	r1
    1d4a:	18 95       	reti

00001d4c <__vector_2>:


// Define the ISR function with attribute
void INT1_VECTOR(void) __attribute__((signal));
void INT1_VECTOR(void)
{
    1d4c:	1f 92       	push	r1
    1d4e:	0f 92       	push	r0
    1d50:	0f b6       	in	r0, 0x3f	; 63
    1d52:	0f 92       	push	r0
    1d54:	11 24       	eor	r1, r1
    1d56:	2f 93       	push	r18
    1d58:	3f 93       	push	r19
    1d5a:	4f 93       	push	r20
    1d5c:	5f 93       	push	r21
    1d5e:	6f 93       	push	r22
    1d60:	7f 93       	push	r23
    1d62:	8f 93       	push	r24
    1d64:	9f 93       	push	r25
    1d66:	af 93       	push	r26
    1d68:	bf 93       	push	r27
    1d6a:	ef 93       	push	r30
    1d6c:	ff 93       	push	r31
    1d6e:	df 93       	push	r29
    1d70:	cf 93       	push	r28
    1d72:	cd b7       	in	r28, 0x3d	; 61
    1d74:	de b7       	in	r29, 0x3e	; 62
	// clear flag
	EXT_INT_CONTROL->GIFR_CFG.INTF1_BIT = 0;
    1d76:	e4 e5       	ldi	r30, 0x54	; 84
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	86 81       	ldd	r24, Z+6	; 0x06
    1d7c:	8f 77       	andi	r24, 0x7F	; 127
    1d7e:	86 83       	std	Z+6, r24	; 0x06
	// execute ISR if it existed
	if(INT1_ISR)
    1d80:	80 91 fc 00 	lds	r24, 0x00FC
    1d84:	90 91 fd 00 	lds	r25, 0x00FD
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	29 f0       	breq	.+10     	; 0x1d96 <__vector_2+0x4a>
	{
		INT1_ISR();
    1d8c:	e0 91 fc 00 	lds	r30, 0x00FC
    1d90:	f0 91 fd 00 	lds	r31, 0x00FD
    1d94:	09 95       	icall
	}
}
    1d96:	cf 91       	pop	r28
    1d98:	df 91       	pop	r29
    1d9a:	ff 91       	pop	r31
    1d9c:	ef 91       	pop	r30
    1d9e:	bf 91       	pop	r27
    1da0:	af 91       	pop	r26
    1da2:	9f 91       	pop	r25
    1da4:	8f 91       	pop	r24
    1da6:	7f 91       	pop	r23
    1da8:	6f 91       	pop	r22
    1daa:	5f 91       	pop	r21
    1dac:	4f 91       	pop	r20
    1dae:	3f 91       	pop	r19
    1db0:	2f 91       	pop	r18
    1db2:	0f 90       	pop	r0
    1db4:	0f be       	out	0x3f, r0	; 63
    1db6:	0f 90       	pop	r0
    1db8:	1f 90       	pop	r1
    1dba:	18 95       	reti

00001dbc <__vector_3>:


// Define the ISR function with attribute
void INT2_VECTOR(void) __attribute__((signal));
void INT2_VECTOR(void)
{
    1dbc:	1f 92       	push	r1
    1dbe:	0f 92       	push	r0
    1dc0:	0f b6       	in	r0, 0x3f	; 63
    1dc2:	0f 92       	push	r0
    1dc4:	11 24       	eor	r1, r1
    1dc6:	2f 93       	push	r18
    1dc8:	3f 93       	push	r19
    1dca:	4f 93       	push	r20
    1dcc:	5f 93       	push	r21
    1dce:	6f 93       	push	r22
    1dd0:	7f 93       	push	r23
    1dd2:	8f 93       	push	r24
    1dd4:	9f 93       	push	r25
    1dd6:	af 93       	push	r26
    1dd8:	bf 93       	push	r27
    1dda:	ef 93       	push	r30
    1ddc:	ff 93       	push	r31
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
	// clear flag
	EXT_INT_CONTROL->GIFR_CFG.INTF2_BIT = 1;
    1de6:	e4 e5       	ldi	r30, 0x54	; 84
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	86 81       	ldd	r24, Z+6	; 0x06
    1dec:	80 62       	ori	r24, 0x20	; 32
    1dee:	86 83       	std	Z+6, r24	; 0x06
	// execute ISR if it existed
	if(INT2_ISR)
    1df0:	80 91 fe 00 	lds	r24, 0x00FE
    1df4:	90 91 ff 00 	lds	r25, 0x00FF
    1df8:	00 97       	sbiw	r24, 0x00	; 0
    1dfa:	29 f0       	breq	.+10     	; 0x1e06 <__vector_3+0x4a>
	{
		INT2_ISR();
    1dfc:	e0 91 fe 00 	lds	r30, 0x00FE
    1e00:	f0 91 ff 00 	lds	r31, 0x00FF
    1e04:	09 95       	icall
	}
}
    1e06:	cf 91       	pop	r28
    1e08:	df 91       	pop	r29
    1e0a:	ff 91       	pop	r31
    1e0c:	ef 91       	pop	r30
    1e0e:	bf 91       	pop	r27
    1e10:	af 91       	pop	r26
    1e12:	9f 91       	pop	r25
    1e14:	8f 91       	pop	r24
    1e16:	7f 91       	pop	r23
    1e18:	6f 91       	pop	r22
    1e1a:	5f 91       	pop	r21
    1e1c:	4f 91       	pop	r20
    1e1e:	3f 91       	pop	r19
    1e20:	2f 91       	pop	r18
    1e22:	0f 90       	pop	r0
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	0f 90       	pop	r0
    1e28:	1f 90       	pop	r1
    1e2a:	18 95       	reti

00001e2c <UART_Init>:

#include "UART.h"


Error_Status_t UART_Init(void)
{
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <UART_Init+0x6>
    1e32:	00 d0       	rcall	.+0      	; 0x1e34 <UART_Init+0x8>
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
    1e38:	1c 82       	std	Y+4, r1	; 0x04

	u8 baud = 51;
    1e3a:	83 e3       	ldi	r24, 0x33	; 51
    1e3c:	8b 83       	std	Y+3, r24	; 0x03

	// set baud rate
	UART_CONTROL->UBRRH_UCSRC_CFG = (u8)(baud >> 8);
    1e3e:	e9 e2       	ldi	r30, 0x29	; 41
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	8b 81       	ldd	r24, Y+3	; 0x03
    1e44:	88 2f       	mov	r24, r24
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	89 2f       	mov	r24, r25
    1e4a:	99 0f       	add	r25, r25
    1e4c:	99 0b       	sbc	r25, r25
    1e4e:	87 8b       	std	Z+23, r24	; 0x17
	UART_CONTROL->UBRRL_CFG = (u8)(baud);
    1e50:	e9 e2       	ldi	r30, 0x29	; 41
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	8b 81       	ldd	r24, Y+3	; 0x03
    1e56:	80 83       	st	Z, r24

	// Enable transmtter and receiver
	u8 rx_tx = (0x01<<4) | (0x01<<3);
    1e58:	88 e1       	ldi	r24, 0x18	; 24
    1e5a:	8a 83       	std	Y+2, r24	; 0x02
	UART_CONTROL->UCSRB_CFG = rx_tx;
    1e5c:	e9 e2       	ldi	r30, 0x29	; 41
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	81 83       	std	Z+1, r24	; 0x01

	// set frame format
	u8 frame_form = (0x01<<7) | (0x01<<3) | (0x03<<1);
    1e64:	8e e8       	ldi	r24, 0x8E	; 142
    1e66:	89 83       	std	Y+1, r24	; 0x01
	UART_CONTROL->UBRRH_UCSRC_CFG = frame_form;
    1e68:	e9 e2       	ldi	r30, 0x29	; 41
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01
    1e6e:	87 8b       	std	Z+23, r24	; 0x17

	return ret_status;
    1e70:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	08 95       	ret

00001e80 <UART_SendByte>:


Error_Status_t UART_SendByte(u8 ch)
{
    1e80:	df 93       	push	r29
    1e82:	cf 93       	push	r28
    1e84:	00 d0       	rcall	.+0      	; 0x1e86 <UART_SendByte+0x6>
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1e8c:	19 82       	std	Y+1, r1	; 0x01
	while(!(UART_CONTROL->UCSRA_CFG & (0x01 << 5)));
    1e8e:	e9 e2       	ldi	r30, 0x29	; 41
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	82 81       	ldd	r24, Z+2	; 0x02
    1e94:	88 2f       	mov	r24, r24
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	80 72       	andi	r24, 0x20	; 32
    1e9a:	90 70       	andi	r25, 0x00	; 0
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	b9 f3       	breq	.-18     	; 0x1e8e <UART_SendByte+0xe>
	UART_CONTROL->UDR_CFG = ch;
    1ea0:	e9 e2       	ldi	r30, 0x29	; 41
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea6:	83 83       	std	Z+3, r24	; 0x03
	return ret_status;
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	08 95       	ret

00001eb4 <UART_ReceiveByte>:
Error_Status_t UART_ReceiveByte(u8 *RecByte)
{
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	00 d0       	rcall	.+0      	; 0x1eba <UART_ReceiveByte+0x6>
    1eba:	0f 92       	push	r0
    1ebc:	cd b7       	in	r28, 0x3d	; 61
    1ebe:	de b7       	in	r29, 0x3e	; 62
    1ec0:	9b 83       	std	Y+3, r25	; 0x03
    1ec2:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1ec4:	19 82       	std	Y+1, r1	; 0x01
	while(!(UART_CONTROL->UCSRA_CFG & (0x01 << 7)));
    1ec6:	e9 e2       	ldi	r30, 0x29	; 41
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	82 81       	ldd	r24, Z+2	; 0x02
    1ecc:	88 23       	and	r24, r24
    1ece:	dc f7       	brge	.-10     	; 0x1ec6 <UART_ReceiveByte+0x12>
	*RecByte = UART_CONTROL->UDR_CFG;
    1ed0:	e9 e2       	ldi	r30, 0x29	; 41
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	83 81       	ldd	r24, Z+3	; 0x03
    1ed6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ed8:	fb 81       	ldd	r31, Y+3	; 0x03
    1eda:	80 83       	st	Z, r24
	return ret_status;
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	cf 91       	pop	r28
    1ee6:	df 91       	pop	r29
    1ee8:	08 95       	ret

00001eea <UART_SendString>:
Error_Status_t UART_SendString(u8 *Str)
{
    1eea:	df 93       	push	r29
    1eec:	cf 93       	push	r28
    1eee:	00 d0       	rcall	.+0      	; 0x1ef0 <UART_SendString+0x6>
    1ef0:	0f 92       	push	r0
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
    1ef6:	9b 83       	std	Y+3, r25	; 0x03
    1ef8:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1efa:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Str)
    1efc:	8a 81       	ldd	r24, Y+2	; 0x02
    1efe:	9b 81       	ldd	r25, Y+3	; 0x03
    1f00:	00 97       	sbiw	r24, 0x00	; 0
    1f02:	71 f4       	brne	.+28     	; 0x1f20 <UART_SendString+0x36>
	{
		ret_status = NULL_POINTER;
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	89 83       	std	Y+1, r24	; 0x01
    1f08:	10 c0       	rjmp	.+32     	; 0x1f2a <UART_SendString+0x40>
	}
	else
	{
		while(*Str)
		{
			ret_status = UART_SendByte(*Str);
    1f0a:	ea 81       	ldd	r30, Y+2	; 0x02
    1f0c:	fb 81       	ldd	r31, Y+3	; 0x03
    1f0e:	80 81       	ld	r24, Z
    1f10:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <UART_SendByte>
    1f14:	89 83       	std	Y+1, r24	; 0x01
			Str++;
    1f16:	8a 81       	ldd	r24, Y+2	; 0x02
    1f18:	9b 81       	ldd	r25, Y+3	; 0x03
    1f1a:	01 96       	adiw	r24, 0x01	; 1
    1f1c:	9b 83       	std	Y+3, r25	; 0x03
    1f1e:	8a 83       	std	Y+2, r24	; 0x02
	{
		ret_status = NULL_POINTER;
	}
	else
	{
		while(*Str)
    1f20:	ea 81       	ldd	r30, Y+2	; 0x02
    1f22:	fb 81       	ldd	r31, Y+3	; 0x03
    1f24:	80 81       	ld	r24, Z
    1f26:	88 23       	and	r24, r24
    1f28:	81 f7       	brne	.-32     	; 0x1f0a <UART_SendString+0x20>
		{
			ret_status = UART_SendByte(*Str);
			Str++;
		}
	}
	return ret_status;
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	cf 91       	pop	r28
    1f34:	df 91       	pop	r29
    1f36:	08 95       	ret

00001f38 <SPI_Init>:

// SPI callback
void (*spi_callbackfun)(void) = NULL;

Error_Status_t SPI_Init(const SPI_T *spi_obj)
{
    1f38:	df 93       	push	r29
    1f3a:	cf 93       	push	r28
    1f3c:	00 d0       	rcall	.+0      	; 0x1f3e <SPI_Init+0x6>
    1f3e:	0f 92       	push	r0
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    1f44:	9b 83       	std	Y+3, r25	; 0x03
    1f46:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1f48:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == spi_obj)
    1f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	19 f4       	brne	.+6      	; 0x1f58 <SPI_Init+0x20>
	{
		ret_status = NULL_POINTER;
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	89 83       	std	Y+1, r24	; 0x01
    1f56:	22 c0       	rjmp	.+68     	; 0x1f9c <SPI_Init+0x64>
	}
	else
	{
		if(MASTER_CONFIG == spi_obj->MasterSlaveSelect)
    1f58:	ea 81       	ldd	r30, Y+2	; 0x02
    1f5a:	fb 81       	ldd	r31, Y+3	; 0x03
    1f5c:	82 81       	ldd	r24, Z+2	; 0x02
    1f5e:	88 23       	and	r24, r24
    1f60:	79 f4       	brne	.+30     	; 0x1f80 <SPI_Init+0x48>
		{
			DIO_voidSetPinDirection(PORTB_INDEX, PIN5_INDEX, GPIO_DIRECTION_OUTPUT);
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	65 e0       	ldi	r22, 0x05	; 5
    1f66:	41 e0       	ldi	r20, 0x01	; 1
    1f68:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_voidSetPinDirection>
			DIO_voidSetPinDirection(PORTB_INDEX, PIN7_INDEX, GPIO_DIRECTION_OUTPUT);
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	67 e0       	ldi	r22, 0x07	; 7
    1f70:	41 e0       	ldi	r20, 0x01	; 1
    1f72:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_voidSetPinDirection>
			SPI_MAP->SPCR_CFG = (0x01 << 6) | (0x01 << 4) | (0x01 << 0);
    1f76:	ed e2       	ldi	r30, 0x2D	; 45
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	81 e5       	ldi	r24, 0x51	; 81
    1f7c:	80 83       	st	Z, r24
    1f7e:	0e c0       	rjmp	.+28     	; 0x1f9c <SPI_Init+0x64>
		}
		else if(SLAVE_CONFIG == spi_obj->MasterSlaveSelect)
    1f80:	ea 81       	ldd	r30, Y+2	; 0x02
    1f82:	fb 81       	ldd	r31, Y+3	; 0x03
    1f84:	82 81       	ldd	r24, Z+2	; 0x02
    1f86:	81 30       	cpi	r24, 0x01	; 1
    1f88:	49 f4       	brne	.+18     	; 0x1f9c <SPI_Init+0x64>
		{
			DIO_voidSetPinDirection(PORTB_INDEX, PIN6_INDEX, GPIO_DIRECTION_OUTPUT);
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	66 e0       	ldi	r22, 0x06	; 6
    1f8e:	41 e0       	ldi	r20, 0x01	; 1
    1f90:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_voidSetPinDirection>
			SPI_MAP->SPCR_CFG = (0x01 <<6);
    1f94:	ed e2       	ldi	r30, 0x2D	; 45
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 e4       	ldi	r24, 0x40	; 64
    1f9a:	80 83       	st	Z, r24
		}
	}
	return ret_status;
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	cf 91       	pop	r28
    1fa6:	df 91       	pop	r29
    1fa8:	08 95       	ret

00001faa <SPI_Transfere>:
Error_Status_t SPI_Transfere(u8 Copy_u8Ch, u8 *pch)
{
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	00 d0       	rcall	.+0      	; 0x1fb0 <SPI_Transfere+0x6>
    1fb0:	00 d0       	rcall	.+0      	; 0x1fb2 <SPI_Transfere+0x8>
    1fb2:	cd b7       	in	r28, 0x3d	; 61
    1fb4:	de b7       	in	r29, 0x3e	; 62
    1fb6:	8a 83       	std	Y+2, r24	; 0x02
    1fb8:	7c 83       	std	Y+4, r23	; 0x04
    1fba:	6b 83       	std	Y+3, r22	; 0x03
	Error_Status_t ret_status = NO_ERROR;
    1fbc:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == pch)
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc2:	00 97       	sbiw	r24, 0x00	; 0
    1fc4:	19 f4       	brne	.+6      	; 0x1fcc <SPI_Transfere+0x22>
	{
		ret_status = NULL_POINTER;
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	89 83       	std	Y+1, r24	; 0x01
    1fca:	0f c0       	rjmp	.+30     	; 0x1fea <SPI_Transfere+0x40>
	}
	else
	{
		SPI_MAP->SPDR_CFG = Copy_u8Ch;
    1fcc:	ed e2       	ldi	r30, 0x2D	; 45
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd2:	82 83       	std	Z+2, r24	; 0x02
		while(!(SPI_MAP->SPSR_CFG & (0x01<<7)));
    1fd4:	ed e2       	ldi	r30, 0x2D	; 45
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	81 81       	ldd	r24, Z+1	; 0x01
    1fda:	88 23       	and	r24, r24
    1fdc:	dc f7       	brge	.-10     	; 0x1fd4 <SPI_Transfere+0x2a>
		*pch = SPI_MAP->SPDR_CFG;
    1fde:	ed e2       	ldi	r30, 0x2D	; 45
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	82 81       	ldd	r24, Z+2	; 0x02
    1fe4:	eb 81       	ldd	r30, Y+3	; 0x03
    1fe6:	fc 81       	ldd	r31, Y+4	; 0x04
    1fe8:	80 83       	st	Z, r24
	}
	return ret_status;
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	cf 91       	pop	r28
    1ff6:	df 91       	pop	r29
    1ff8:	08 95       	ret

00001ffa <SPI_AsynchCallBack>:

Error_Status_t SPI_AsynchCallBack(void (*spi_callback)(void), u8 ch)
{
    1ffa:	df 93       	push	r29
    1ffc:	cf 93       	push	r28
    1ffe:	00 d0       	rcall	.+0      	; 0x2000 <SPI_AsynchCallBack+0x6>
    2000:	00 d0       	rcall	.+0      	; 0x2002 <SPI_AsynchCallBack+0x8>
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	9b 83       	std	Y+3, r25	; 0x03
    2008:	8a 83       	std	Y+2, r24	; 0x02
    200a:	6c 83       	std	Y+4, r22	; 0x04
	Error_Status_t ret_status = NO_ERROR;
    200c:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == spi_callback)
    200e:	8a 81       	ldd	r24, Y+2	; 0x02
    2010:	9b 81       	ldd	r25, Y+3	; 0x03
    2012:	00 97       	sbiw	r24, 0x00	; 0
    2014:	19 f4       	brne	.+6      	; 0x201c <SPI_AsynchCallBack+0x22>
	{
		ret_status = NULL_POINTER;
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	89 83       	std	Y+1, r24	; 0x01
    201a:	16 c0       	rjmp	.+44     	; 0x2048 <SPI_AsynchCallBack+0x4e>
	}
	else
	{
		SPI_MAP->SPCR_CFG |= (0x01<<7);
    201c:	ad e2       	ldi	r26, 0x2D	; 45
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	ed e2       	ldi	r30, 0x2D	; 45
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	80 68       	ori	r24, 0x80	; 128
    2028:	8c 93       	st	X, r24
		spi_callbackfun = spi_callback;
    202a:	8a 81       	ldd	r24, Y+2	; 0x02
    202c:	9b 81       	ldd	r25, Y+3	; 0x03
    202e:	90 93 02 01 	sts	0x0102, r25
    2032:	80 93 01 01 	sts	0x0101, r24
		SPI_MAP->SPDR_CFG = ch;
    2036:	ed e2       	ldi	r30, 0x2D	; 45
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	8c 81       	ldd	r24, Y+4	; 0x04
    203c:	82 83       	std	Z+2, r24	; 0x02
		while(!(SPI_MAP->SPSR_CFG & (0x01<<7)));
    203e:	ed e2       	ldi	r30, 0x2D	; 45
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	81 81       	ldd	r24, Z+1	; 0x01
    2044:	88 23       	and	r24, r24
    2046:	dc f7       	brge	.-10     	; 0x203e <SPI_AsynchCallBack+0x44>
	}
	return ret_status;
    2048:	89 81       	ldd	r24, Y+1	; 0x01
}
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	cf 91       	pop	r28
    2054:	df 91       	pop	r29
    2056:	08 95       	ret

00002058 <SPI_Send_String>:

Error_Status_t SPI_Send_String(u8 *Str)
{
    2058:	df 93       	push	r29
    205a:	cf 93       	push	r28
    205c:	00 d0       	rcall	.+0      	; 0x205e <SPI_Send_String+0x6>
    205e:	00 d0       	rcall	.+0      	; 0x2060 <SPI_Send_String+0x8>
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	9c 83       	std	Y+4, r25	; 0x04
    2066:	8b 83       	std	Y+3, r24	; 0x03
	Error_Status_t ret_status = NO_ERROR;
    2068:	19 82       	std	Y+1, r1	; 0x01
	u8 dummy_var;
	if(NULL == Str)
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	9c 81       	ldd	r25, Y+4	; 0x04
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	91 f4       	brne	.+36     	; 0x2096 <SPI_Send_String+0x3e>
	{
		ret_status = NULL_POINTER;
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	89 83       	std	Y+1, r24	; 0x01
    2076:	14 c0       	rjmp	.+40     	; 0x20a0 <SPI_Send_String+0x48>
	}
	else
	{
		while(*Str)
		{
			ret_status = SPI_Transfere(*Str, &dummy_var);
    2078:	eb 81       	ldd	r30, Y+3	; 0x03
    207a:	fc 81       	ldd	r31, Y+4	; 0x04
    207c:	80 81       	ld	r24, Z
    207e:	9e 01       	movw	r18, r28
    2080:	2e 5f       	subi	r18, 0xFE	; 254
    2082:	3f 4f       	sbci	r19, 0xFF	; 255
    2084:	b9 01       	movw	r22, r18
    2086:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <SPI_Transfere>
    208a:	89 83       	std	Y+1, r24	; 0x01
			Str++;
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	9c 81       	ldd	r25, Y+4	; 0x04
    2090:	01 96       	adiw	r24, 0x01	; 1
    2092:	9c 83       	std	Y+4, r25	; 0x04
    2094:	8b 83       	std	Y+3, r24	; 0x03
	{
		ret_status = NULL_POINTER;
	}
	else
	{
		while(*Str)
    2096:	eb 81       	ldd	r30, Y+3	; 0x03
    2098:	fc 81       	ldd	r31, Y+4	; 0x04
    209a:	80 81       	ld	r24, Z
    209c:	88 23       	and	r24, r24
    209e:	61 f7       	brne	.-40     	; 0x2078 <SPI_Send_String+0x20>
		{
			ret_status = SPI_Transfere(*Str, &dummy_var);
			Str++;
		}
	}
	return ret_status;
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	0f 90       	pop	r0
    20aa:	cf 91       	pop	r28
    20ac:	df 91       	pop	r29
    20ae:	08 95       	ret

000020b0 <__vector_12>:


// Define the ISR function with attribute
void SPI_VECTOR(void) __attribute__((signal));
void SPI_VECTOR(void)
{
    20b0:	1f 92       	push	r1
    20b2:	0f 92       	push	r0
    20b4:	0f b6       	in	r0, 0x3f	; 63
    20b6:	0f 92       	push	r0
    20b8:	11 24       	eor	r1, r1
    20ba:	2f 93       	push	r18
    20bc:	3f 93       	push	r19
    20be:	4f 93       	push	r20
    20c0:	5f 93       	push	r21
    20c2:	6f 93       	push	r22
    20c4:	7f 93       	push	r23
    20c6:	8f 93       	push	r24
    20c8:	9f 93       	push	r25
    20ca:	af 93       	push	r26
    20cc:	bf 93       	push	r27
    20ce:	ef 93       	push	r30
    20d0:	ff 93       	push	r31
    20d2:	df 93       	push	r29
    20d4:	cf 93       	push	r28
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
	// Clear flag

	// execute ISR if it existed
	dum = SPI_MAP->SPDR_CFG;
    20da:	ed e2       	ldi	r30, 0x2D	; 45
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	82 81       	ldd	r24, Z+2	; 0x02
    20e0:	80 93 00 01 	sts	0x0100, r24
//	CLEAR_BIT(SPI_MAP->SPCR_CFG, 7);

	if(spi_callbackfun)
    20e4:	80 91 01 01 	lds	r24, 0x0101
    20e8:	90 91 02 01 	lds	r25, 0x0102
    20ec:	00 97       	sbiw	r24, 0x00	; 0
    20ee:	29 f0       	breq	.+10     	; 0x20fa <__vector_12+0x4a>
	{
		spi_callbackfun();
    20f0:	e0 91 01 01 	lds	r30, 0x0101
    20f4:	f0 91 02 01 	lds	r31, 0x0102
    20f8:	09 95       	icall
	}
}
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	ff 91       	pop	r31
    2100:	ef 91       	pop	r30
    2102:	bf 91       	pop	r27
    2104:	af 91       	pop	r26
    2106:	9f 91       	pop	r25
    2108:	8f 91       	pop	r24
    210a:	7f 91       	pop	r23
    210c:	6f 91       	pop	r22
    210e:	5f 91       	pop	r21
    2110:	4f 91       	pop	r20
    2112:	3f 91       	pop	r19
    2114:	2f 91       	pop	r18
    2116:	0f 90       	pop	r0
    2118:	0f be       	out	0x3f, r0	; 63
    211a:	0f 90       	pop	r0
    211c:	1f 90       	pop	r1
    211e:	18 95       	reti

00002120 <I2C_Init>:
 */

#include "I2C.h"

Error_Status_t I2C_Init(const i2c_t *i2c_obj)
{
    2120:	df 93       	push	r29
    2122:	cf 93       	push	r28
    2124:	00 d0       	rcall	.+0      	; 0x2126 <I2C_Init+0x6>
    2126:	00 d0       	rcall	.+0      	; 0x2128 <I2C_Init+0x8>
    2128:	0f 92       	push	r0
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
    212e:	9b 83       	std	Y+3, r25	; 0x03
    2130:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    2132:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == i2c_obj)
    2134:	8a 81       	ldd	r24, Y+2	; 0x02
    2136:	9b 81       	ldd	r25, Y+3	; 0x03
    2138:	00 97       	sbiw	r24, 0x00	; 0
    213a:	19 f4       	brne	.+6      	; 0x2142 <I2C_Init+0x22>
	{
		ret_status = NULL_POINTER;
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	89 83       	std	Y+1, r24	; 0x01
    2140:	2f c0       	rjmp	.+94     	; 0x21a0 <I2C_Init+0x80>
	}
	else
	{
		// to set prescaler to be one
		I2C_CONTROL->TWSR_REG &= ~(1 << 0);
    2142:	a0 e2       	ldi	r26, 0x20	; 32
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	e0 e2       	ldi	r30, 0x20	; 32
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	81 81       	ldd	r24, Z+1	; 0x01
    214c:	8e 7f       	andi	r24, 0xFE	; 254
    214e:	11 96       	adiw	r26, 0x01	; 1
    2150:	8c 93       	st	X, r24
		I2C_CONTROL->TWSR_REG &= ~(1 << 1);
    2152:	a0 e2       	ldi	r26, 0x20	; 32
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	e0 e2       	ldi	r30, 0x20	; 32
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	81 81       	ldd	r24, Z+1	; 0x01
    215c:	8d 7f       	andi	r24, 0xFD	; 253
    215e:	11 96       	adiw	r26, 0x01	; 1
    2160:	8c 93       	st	X, r24
    2162:	11 97       	sbiw	r26, 0x01	; 1

		// to set bit rate register
		switch (i2c_obj->frequency)
    2164:	ea 81       	ldd	r30, Y+2	; 0x02
    2166:	fb 81       	ldd	r31, Y+3	; 0x03
    2168:	81 81       	ldd	r24, Z+1	; 0x01
    216a:	28 2f       	mov	r18, r24
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	3d 83       	std	Y+5, r19	; 0x05
    2170:	2c 83       	std	Y+4, r18	; 0x04
    2172:	8c 81       	ldd	r24, Y+4	; 0x04
    2174:	9d 81       	ldd	r25, Y+5	; 0x05
    2176:	00 97       	sbiw	r24, 0x00	; 0
    2178:	31 f0       	breq	.+12     	; 0x2186 <I2C_Init+0x66>
    217a:	2c 81       	ldd	r18, Y+4	; 0x04
    217c:	3d 81       	ldd	r19, Y+5	; 0x05
    217e:	21 30       	cpi	r18, 0x01	; 1
    2180:	31 05       	cpc	r19, r1
    2182:	31 f0       	breq	.+12     	; 0x2190 <I2C_Init+0x70>
    2184:	09 c0       	rjmp	.+18     	; 0x2198 <I2C_Init+0x78>
		{
		case I2C_FREQ_100HZ:
			I2C_CONTROL->TWBR_REG = 72;
    2186:	e0 e2       	ldi	r30, 0x20	; 32
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	88 e4       	ldi	r24, 0x48	; 72
    218c:	80 83       	st	Z, r24
    218e:	04 c0       	rjmp	.+8      	; 0x2198 <I2C_Init+0x78>
			break;
		case I2C_FERQ_400HZ:
			I2C_CONTROL->TWBR_REG = 12;
    2190:	e0 e2       	ldi	r30, 0x20	; 32
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	8c e0       	ldi	r24, 0x0C	; 12
    2196:	80 83       	st	Z, r24

			break;
		}

		// Enable TWI
		I2C_CONTROL->TWCR_REG = (1 << 0) | (1 << 6);
    2198:	e0 e2       	ldi	r30, 0x20	; 32
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	81 e4       	ldi	r24, 0x41	; 65
    219e:	86 ab       	std	Z+54, r24	; 0x36
	}
	return ret_status;
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	0f 90       	pop	r0
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	08 95       	ret

000021b2 <I2C_SendByte>:



Error_Status_t I2C_SendByte(u8 Copy_u8data)
{
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	00 d0       	rcall	.+0      	; 0x21b8 <I2C_SendByte+0x6>
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NULL_POINTER;
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	89 83       	std	Y+1, r24	; 0x01
	I2C_CONTROL->TWDR_REG = Copy_u8data;
    21c2:	e0 e2       	ldi	r30, 0x20	; 32
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	8a 81       	ldd	r24, Y+2	; 0x02
    21c8:	83 83       	std	Z+3, r24	; 0x03
	I2C_CONTROL->TWCR_REG = (1 << 7) | (1 << 2);
    21ca:	e0 e2       	ldi	r30, 0x20	; 32
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	84 e8       	ldi	r24, 0x84	; 132
    21d0:	86 ab       	std	Z+54, r24	; 0x36
	while(!(I2C_CONTROL->TWCR_REG & (1 << 7)));
    21d2:	e0 e2       	ldi	r30, 0x20	; 32
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	86 a9       	ldd	r24, Z+54	; 0x36
    21d8:	88 23       	and	r24, r24
    21da:	dc f7       	brge	.-10     	; 0x21d2 <I2C_SendByte+0x20>
	return ret_status;
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    21de:	0f 90       	pop	r0
    21e0:	0f 90       	pop	r0
    21e2:	cf 91       	pop	r28
    21e4:	df 91       	pop	r29
    21e6:	08 95       	ret

000021e8 <I2C_SendStart>:



Error_Status_t I2C_SendStart(void)
{
    21e8:	df 93       	push	r29
    21ea:	cf 93       	push	r28
    21ec:	0f 92       	push	r0
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NULL_POINTER;
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	89 83       	std	Y+1, r24	; 0x01
	I2C_CONTROL->TWCR_REG = (1 << 5) | (1 << 7) | (1 << 2);
    21f6:	e0 e2       	ldi	r30, 0x20	; 32
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	84 ea       	ldi	r24, 0xA4	; 164
    21fc:	86 ab       	std	Z+54, r24	; 0x36
	while(!(I2C_CONTROL->TWCR_REG & (1 << 7)));
    21fe:	e0 e2       	ldi	r30, 0x20	; 32
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	86 a9       	ldd	r24, Z+54	; 0x36
    2204:	88 23       	and	r24, r24
    2206:	dc f7       	brge	.-10     	; 0x21fe <I2C_SendStart+0x16>
	return ret_status;
    2208:	89 81       	ldd	r24, Y+1	; 0x01
}
    220a:	0f 90       	pop	r0
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <I2C_SendStop>:



Error_Status_t I2C_SendStop(void)
{
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	0f 92       	push	r0
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NULL_POINTER;
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	89 83       	std	Y+1, r24	; 0x01
	I2C_CONTROL->TWCR_REG = (1 << 4) | (1 << 7) | (1 << 2);
    2220:	e0 e2       	ldi	r30, 0x20	; 32
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	84 e9       	ldi	r24, 0x94	; 148
    2226:	86 ab       	std	Z+54, r24	; 0x36
	return ret_status;
    2228:	89 81       	ldd	r24, Y+1	; 0x01
}
    222a:	0f 90       	pop	r0
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	08 95       	ret

00002232 <I2C_ReceiveByte_ACK>:


Error_Status_t I2C_ReceiveByte_ACK(u8 *ptr)
{
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	00 d0       	rcall	.+0      	; 0x2238 <I2C_ReceiveByte_ACK+0x6>
    2238:	0f 92       	push	r0
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	9b 83       	std	Y+3, r25	; 0x03
    2240:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NULL_POINTER;
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == ptr)
    2246:	8a 81       	ldd	r24, Y+2	; 0x02
    2248:	9b 81       	ldd	r25, Y+3	; 0x03
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	19 f4       	brne	.+6      	; 0x2254 <I2C_ReceiveByte_ACK+0x22>
	{
		ret_status = NULL_POINTER;
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	89 83       	std	Y+1, r24	; 0x01
    2252:	0f c0       	rjmp	.+30     	; 0x2272 <I2C_ReceiveByte_ACK+0x40>
	}
	else
	{
		I2C_CONTROL->TWCR_REG = (1 << 7) | (1 << 6) | (1 << 2);
    2254:	e0 e2       	ldi	r30, 0x20	; 32
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	84 ec       	ldi	r24, 0xC4	; 196
    225a:	86 ab       	std	Z+54, r24	; 0x36
		while(!(I2C_CONTROL->TWCR_REG & (1 << 7)));
    225c:	e0 e2       	ldi	r30, 0x20	; 32
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	86 a9       	ldd	r24, Z+54	; 0x36
    2262:	88 23       	and	r24, r24
    2264:	dc f7       	brge	.-10     	; 0x225c <I2C_ReceiveByte_ACK+0x2a>
		*ptr = I2C_CONTROL->TWDR_REG;
    2266:	e0 e2       	ldi	r30, 0x20	; 32
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	83 81       	ldd	r24, Z+3	; 0x03
    226c:	ea 81       	ldd	r30, Y+2	; 0x02
    226e:	fb 81       	ldd	r31, Y+3	; 0x03
    2270:	80 83       	st	Z, r24
	}
	return ret_status;
    2272:	89 81       	ldd	r24, Y+1	; 0x01
}
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	0f 90       	pop	r0
    227a:	cf 91       	pop	r28
    227c:	df 91       	pop	r29
    227e:	08 95       	ret

00002280 <I2C_ReceiveByte_NoACK>:


Error_Status_t I2C_ReceiveByte_NoACK(u8 *ptr)
{
    2280:	df 93       	push	r29
    2282:	cf 93       	push	r28
    2284:	00 d0       	rcall	.+0      	; 0x2286 <I2C_ReceiveByte_NoACK+0x6>
    2286:	0f 92       	push	r0
    2288:	cd b7       	in	r28, 0x3d	; 61
    228a:	de b7       	in	r29, 0x3e	; 62
    228c:	9b 83       	std	Y+3, r25	; 0x03
    228e:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    2290:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == ptr)
    2292:	8a 81       	ldd	r24, Y+2	; 0x02
    2294:	9b 81       	ldd	r25, Y+3	; 0x03
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	19 f4       	brne	.+6      	; 0x22a0 <I2C_ReceiveByte_NoACK+0x20>
	{
		ret_status = NULL_POINTER;
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	89 83       	std	Y+1, r24	; 0x01
    229e:	0f c0       	rjmp	.+30     	; 0x22be <I2C_ReceiveByte_NoACK+0x3e>
	}
	else
	{
		I2C_CONTROL->TWCR_REG = (1 << 7) | (1 << 2);
    22a0:	e0 e2       	ldi	r30, 0x20	; 32
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	84 e8       	ldi	r24, 0x84	; 132
    22a6:	86 ab       	std	Z+54, r24	; 0x36
		while(!(I2C_CONTROL->TWCR_REG & (1 << 7)));
    22a8:	e0 e2       	ldi	r30, 0x20	; 32
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	86 a9       	ldd	r24, Z+54	; 0x36
    22ae:	88 23       	and	r24, r24
    22b0:	dc f7       	brge	.-10     	; 0x22a8 <I2C_ReceiveByte_NoACK+0x28>
		*ptr = I2C_CONTROL->TWDR_REG;
    22b2:	e0 e2       	ldi	r30, 0x20	; 32
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	83 81       	ldd	r24, Z+3	; 0x03
    22b8:	ea 81       	ldd	r30, Y+2	; 0x02
    22ba:	fb 81       	ldd	r31, Y+3	; 0x03
    22bc:	80 83       	st	Z, r24
	}
	return ret_status;
    22be:	89 81       	ldd	r24, Y+1	; 0x01
}
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	cf 91       	pop	r28
    22c8:	df 91       	pop	r29
    22ca:	08 95       	ret

000022cc <I2C_GetStatus>:
Error_Status_t I2C_GetStatus(u8 *status)
{
    22cc:	df 93       	push	r29
    22ce:	cf 93       	push	r28
    22d0:	00 d0       	rcall	.+0      	; 0x22d2 <I2C_GetStatus+0x6>
    22d2:	0f 92       	push	r0
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    22d8:	9b 83       	std	Y+3, r25	; 0x03
    22da:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    22dc:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == status)
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	9b 81       	ldd	r25, Y+3	; 0x03
    22e2:	00 97       	sbiw	r24, 0x00	; 0
    22e4:	19 f4       	brne	.+6      	; 0x22ec <I2C_GetStatus+0x20>
	{
		ret_status = NULL_POINTER;
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	89 83       	std	Y+1, r24	; 0x01
    22ea:	07 c0       	rjmp	.+14     	; 0x22fa <I2C_GetStatus+0x2e>
	}
	else
	{
		*status = (I2C_CONTROL->TWSR_REG & 0xF8);
    22ec:	e0 e2       	ldi	r30, 0x20	; 32
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	81 81       	ldd	r24, Z+1	; 0x01
    22f2:	88 7f       	andi	r24, 0xF8	; 248
    22f4:	ea 81       	ldd	r30, Y+2	; 0x02
    22f6:	fb 81       	ldd	r31, Y+3	; 0x03
    22f8:	80 83       	st	Z, r24
	}
	return ret_status;
    22fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	0f 90       	pop	r0
    2302:	cf 91       	pop	r28
    2304:	df 91       	pop	r29
    2306:	08 95       	ret

00002308 <DIO_voidSetPinDirection>:

volatile DIO_t *Ports_index[NUM_PORTS] = {GPIO_PINS_A, GPIO_PINS_B, GPIO_PINS_C, GPIO_PINS_D};


void DIO_voidSetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId,  u8 Copy_u8Direction)
{
    2308:	df 93       	push	r29
    230a:	cf 93       	push	r28
    230c:	00 d0       	rcall	.+0      	; 0x230e <DIO_voidSetPinDirection+0x6>
    230e:	00 d0       	rcall	.+0      	; 0x2310 <DIO_voidSetPinDirection+0x8>
    2310:	0f 92       	push	r0
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
    2316:	89 83       	std	Y+1, r24	; 0x01
    2318:	6a 83       	std	Y+2, r22	; 0x02
    231a:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_u8PortId <= NUM_PORTS-1) && Copy_u8PinId <= NUM_PINS-1)
    231c:	89 81       	ldd	r24, Y+1	; 0x01
    231e:	84 30       	cpi	r24, 0x04	; 4
    2320:	08 f0       	brcs	.+2      	; 0x2324 <DIO_voidSetPinDirection+0x1c>
    2322:	61 c0       	rjmp	.+194    	; 0x23e6 <DIO_voidSetPinDirection+0xde>
    2324:	8a 81       	ldd	r24, Y+2	; 0x02
    2326:	88 30       	cpi	r24, 0x08	; 8
    2328:	08 f0       	brcs	.+2      	; 0x232c <DIO_voidSetPinDirection+0x24>
    232a:	5d c0       	rjmp	.+186    	; 0x23e6 <DIO_voidSetPinDirection+0xde>
	{
		switch(Copy_u8Direction){
    232c:	8b 81       	ldd	r24, Y+3	; 0x03
    232e:	28 2f       	mov	r18, r24
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	3d 83       	std	Y+5, r19	; 0x05
    2334:	2c 83       	std	Y+4, r18	; 0x04
    2336:	8c 81       	ldd	r24, Y+4	; 0x04
    2338:	9d 81       	ldd	r25, Y+5	; 0x05
    233a:	00 97       	sbiw	r24, 0x00	; 0
    233c:	69 f1       	breq	.+90     	; 0x2398 <DIO_voidSetPinDirection+0x90>
    233e:	2c 81       	ldd	r18, Y+4	; 0x04
    2340:	3d 81       	ldd	r19, Y+5	; 0x05
    2342:	21 30       	cpi	r18, 0x01	; 1
    2344:	31 05       	cpc	r19, r1
    2346:	09 f0       	breq	.+2      	; 0x234a <DIO_voidSetPinDirection+0x42>
    2348:	4e c0       	rjmp	.+156    	; 0x23e6 <DIO_voidSetPinDirection+0xde>
			case(GPIO_DIRECTION_OUTPUT):
				SET_BIT(Ports_index[Copy_u8PortId]->DDRx, Copy_u8PinId);
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	88 2f       	mov	r24, r24
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	88 0f       	add	r24, r24
    2352:	99 1f       	adc	r25, r25
    2354:	fc 01       	movw	r30, r24
    2356:	e1 56       	subi	r30, 0x61	; 97
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	a0 81       	ld	r26, Z
    235c:	b1 81       	ldd	r27, Z+1	; 0x01
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	88 2f       	mov	r24, r24
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	88 0f       	add	r24, r24
    2366:	99 1f       	adc	r25, r25
    2368:	fc 01       	movw	r30, r24
    236a:	e1 56       	subi	r30, 0x61	; 97
    236c:	ff 4f       	sbci	r31, 0xFF	; 255
    236e:	01 90       	ld	r0, Z+
    2370:	f0 81       	ld	r31, Z
    2372:	e0 2d       	mov	r30, r0
    2374:	81 81       	ldd	r24, Z+1	; 0x01
    2376:	48 2f       	mov	r20, r24
    2378:	8a 81       	ldd	r24, Y+2	; 0x02
    237a:	28 2f       	mov	r18, r24
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	02 2e       	mov	r0, r18
    2384:	02 c0       	rjmp	.+4      	; 0x238a <DIO_voidSetPinDirection+0x82>
    2386:	88 0f       	add	r24, r24
    2388:	99 1f       	adc	r25, r25
    238a:	0a 94       	dec	r0
    238c:	e2 f7       	brpl	.-8      	; 0x2386 <DIO_voidSetPinDirection+0x7e>
    238e:	84 2b       	or	r24, r20
    2390:	11 96       	adiw	r26, 0x01	; 1
    2392:	8c 93       	st	X, r24
    2394:	11 97       	sbiw	r26, 0x01	; 1
    2396:	27 c0       	rjmp	.+78     	; 0x23e6 <DIO_voidSetPinDirection+0xde>
			break;
			case(GPIO_DIRECTION_INPUT):
				CLEAR_BIT(Ports_index[Copy_u8PortId]->DDRx, Copy_u8PinId);
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	88 2f       	mov	r24, r24
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	88 0f       	add	r24, r24
    23a0:	99 1f       	adc	r25, r25
    23a2:	fc 01       	movw	r30, r24
    23a4:	e1 56       	subi	r30, 0x61	; 97
    23a6:	ff 4f       	sbci	r31, 0xFF	; 255
    23a8:	a0 81       	ld	r26, Z
    23aa:	b1 81       	ldd	r27, Z+1	; 0x01
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
    23ae:	88 2f       	mov	r24, r24
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	88 0f       	add	r24, r24
    23b4:	99 1f       	adc	r25, r25
    23b6:	fc 01       	movw	r30, r24
    23b8:	e1 56       	subi	r30, 0x61	; 97
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	01 90       	ld	r0, Z+
    23be:	f0 81       	ld	r31, Z
    23c0:	e0 2d       	mov	r30, r0
    23c2:	81 81       	ldd	r24, Z+1	; 0x01
    23c4:	48 2f       	mov	r20, r24
    23c6:	8a 81       	ldd	r24, Y+2	; 0x02
    23c8:	28 2f       	mov	r18, r24
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	02 2e       	mov	r0, r18
    23d2:	02 c0       	rjmp	.+4      	; 0x23d8 <DIO_voidSetPinDirection+0xd0>
    23d4:	88 0f       	add	r24, r24
    23d6:	99 1f       	adc	r25, r25
    23d8:	0a 94       	dec	r0
    23da:	e2 f7       	brpl	.-8      	; 0x23d4 <DIO_voidSetPinDirection+0xcc>
    23dc:	80 95       	com	r24
    23de:	84 23       	and	r24, r20
    23e0:	11 96       	adiw	r26, 0x01	; 1
    23e2:	8c 93       	st	X, r24
    23e4:	11 97       	sbiw	r26, 0x01	; 1
			break;
		}
	}
	else{/* Nothing */}
}
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	0f 90       	pop	r0
    23f0:	cf 91       	pop	r28
    23f2:	df 91       	pop	r29
    23f4:	08 95       	ret

000023f6 <DIO_voidSetPinValue>:


void DIO_voidSetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8Value)
{
    23f6:	df 93       	push	r29
    23f8:	cf 93       	push	r28
    23fa:	00 d0       	rcall	.+0      	; 0x23fc <DIO_voidSetPinValue+0x6>
    23fc:	00 d0       	rcall	.+0      	; 0x23fe <DIO_voidSetPinValue+0x8>
    23fe:	0f 92       	push	r0
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
    2404:	89 83       	std	Y+1, r24	; 0x01
    2406:	6a 83       	std	Y+2, r22	; 0x02
    2408:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_u8PortId <= NUM_PORTS-1) && (Copy_u8PinId <= NUM_PINS-1))
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	84 30       	cpi	r24, 0x04	; 4
    240e:	08 f0       	brcs	.+2      	; 0x2412 <DIO_voidSetPinValue+0x1c>
    2410:	61 c0       	rjmp	.+194    	; 0x24d4 <DIO_voidSetPinValue+0xde>
    2412:	8a 81       	ldd	r24, Y+2	; 0x02
    2414:	88 30       	cpi	r24, 0x08	; 8
    2416:	08 f0       	brcs	.+2      	; 0x241a <DIO_voidSetPinValue+0x24>
    2418:	5d c0       	rjmp	.+186    	; 0x24d4 <DIO_voidSetPinValue+0xde>
	{
		switch(Copy_u8Value){
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	28 2f       	mov	r18, r24
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	3d 83       	std	Y+5, r19	; 0x05
    2422:	2c 83       	std	Y+4, r18	; 0x04
    2424:	8c 81       	ldd	r24, Y+4	; 0x04
    2426:	9d 81       	ldd	r25, Y+5	; 0x05
    2428:	00 97       	sbiw	r24, 0x00	; 0
    242a:	69 f1       	breq	.+90     	; 0x2486 <DIO_voidSetPinValue+0x90>
    242c:	2c 81       	ldd	r18, Y+4	; 0x04
    242e:	3d 81       	ldd	r19, Y+5	; 0x05
    2430:	21 30       	cpi	r18, 0x01	; 1
    2432:	31 05       	cpc	r19, r1
    2434:	09 f0       	breq	.+2      	; 0x2438 <DIO_voidSetPinValue+0x42>
    2436:	4e c0       	rjmp	.+156    	; 0x24d4 <DIO_voidSetPinValue+0xde>
		case(GPIO_HIGH):
		SET_BIT(Ports_index[Copy_u8PortId]->PORTx, Copy_u8PinId);
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	88 2f       	mov	r24, r24
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	88 0f       	add	r24, r24
    2440:	99 1f       	adc	r25, r25
    2442:	fc 01       	movw	r30, r24
    2444:	e1 56       	subi	r30, 0x61	; 97
    2446:	ff 4f       	sbci	r31, 0xFF	; 255
    2448:	a0 81       	ld	r26, Z
    244a:	b1 81       	ldd	r27, Z+1	; 0x01
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	88 2f       	mov	r24, r24
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	88 0f       	add	r24, r24
    2454:	99 1f       	adc	r25, r25
    2456:	fc 01       	movw	r30, r24
    2458:	e1 56       	subi	r30, 0x61	; 97
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	01 90       	ld	r0, Z+
    245e:	f0 81       	ld	r31, Z
    2460:	e0 2d       	mov	r30, r0
    2462:	82 81       	ldd	r24, Z+2	; 0x02
    2464:	48 2f       	mov	r20, r24
    2466:	8a 81       	ldd	r24, Y+2	; 0x02
    2468:	28 2f       	mov	r18, r24
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	02 2e       	mov	r0, r18
    2472:	02 c0       	rjmp	.+4      	; 0x2478 <DIO_voidSetPinValue+0x82>
    2474:	88 0f       	add	r24, r24
    2476:	99 1f       	adc	r25, r25
    2478:	0a 94       	dec	r0
    247a:	e2 f7       	brpl	.-8      	; 0x2474 <DIO_voidSetPinValue+0x7e>
    247c:	84 2b       	or	r24, r20
    247e:	12 96       	adiw	r26, 0x02	; 2
    2480:	8c 93       	st	X, r24
    2482:	12 97       	sbiw	r26, 0x02	; 2
    2484:	27 c0       	rjmp	.+78     	; 0x24d4 <DIO_voidSetPinValue+0xde>
		break;
		case(GPIO_LOW):
		CLEAR_BIT(Ports_index[Copy_u8PortId]->PORTx, Copy_u8PinId);
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	88 2f       	mov	r24, r24
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	88 0f       	add	r24, r24
    248e:	99 1f       	adc	r25, r25
    2490:	fc 01       	movw	r30, r24
    2492:	e1 56       	subi	r30, 0x61	; 97
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	a0 81       	ld	r26, Z
    2498:	b1 81       	ldd	r27, Z+1	; 0x01
    249a:	89 81       	ldd	r24, Y+1	; 0x01
    249c:	88 2f       	mov	r24, r24
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	88 0f       	add	r24, r24
    24a2:	99 1f       	adc	r25, r25
    24a4:	fc 01       	movw	r30, r24
    24a6:	e1 56       	subi	r30, 0x61	; 97
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	01 90       	ld	r0, Z+
    24ac:	f0 81       	ld	r31, Z
    24ae:	e0 2d       	mov	r30, r0
    24b0:	82 81       	ldd	r24, Z+2	; 0x02
    24b2:	48 2f       	mov	r20, r24
    24b4:	8a 81       	ldd	r24, Y+2	; 0x02
    24b6:	28 2f       	mov	r18, r24
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	02 2e       	mov	r0, r18
    24c0:	02 c0       	rjmp	.+4      	; 0x24c6 <DIO_voidSetPinValue+0xd0>
    24c2:	88 0f       	add	r24, r24
    24c4:	99 1f       	adc	r25, r25
    24c6:	0a 94       	dec	r0
    24c8:	e2 f7       	brpl	.-8      	; 0x24c2 <DIO_voidSetPinValue+0xcc>
    24ca:	80 95       	com	r24
    24cc:	84 23       	and	r24, r20
    24ce:	12 96       	adiw	r26, 0x02	; 2
    24d0:	8c 93       	st	X, r24
    24d2:	12 97       	sbiw	r26, 0x02	; 2
		break;
		}
	}
	else{/* Nothing */}
}
    24d4:	0f 90       	pop	r0
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	0f 90       	pop	r0
    24de:	cf 91       	pop	r28
    24e0:	df 91       	pop	r29
    24e2:	08 95       	ret

000024e4 <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId)
{
    24e4:	df 93       	push	r29
    24e6:	cf 93       	push	r28
    24e8:	00 d0       	rcall	.+0      	; 0x24ea <DIO_u8GetPinValue+0x6>
    24ea:	0f 92       	push	r0
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
    24f0:	8a 83       	std	Y+2, r24	; 0x02
    24f2:	6b 83       	std	Y+3, r22	; 0x03
	u8 ret_val = 0;
    24f4:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8PortId <= NUM_PORTS-1) && (Copy_u8PinId <= NUM_PINS-1)){
    24f6:	8a 81       	ldd	r24, Y+2	; 0x02
    24f8:	84 30       	cpi	r24, 0x04	; 4
    24fa:	e8 f4       	brcc	.+58     	; 0x2536 <DIO_u8GetPinValue+0x52>
    24fc:	8b 81       	ldd	r24, Y+3	; 0x03
    24fe:	88 30       	cpi	r24, 0x08	; 8
    2500:	d0 f4       	brcc	.+52     	; 0x2536 <DIO_u8GetPinValue+0x52>
		ret_val = READ_BIT(Ports_index[Copy_u8PortId]->PINx, Copy_u8PinId);
    2502:	8a 81       	ldd	r24, Y+2	; 0x02
    2504:	88 2f       	mov	r24, r24
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	88 0f       	add	r24, r24
    250a:	99 1f       	adc	r25, r25
    250c:	fc 01       	movw	r30, r24
    250e:	e1 56       	subi	r30, 0x61	; 97
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	01 90       	ld	r0, Z+
    2514:	f0 81       	ld	r31, Z
    2516:	e0 2d       	mov	r30, r0
    2518:	80 81       	ld	r24, Z
    251a:	28 2f       	mov	r18, r24
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	8b 81       	ldd	r24, Y+3	; 0x03
    2520:	88 2f       	mov	r24, r24
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	a9 01       	movw	r20, r18
    2526:	02 c0       	rjmp	.+4      	; 0x252c <DIO_u8GetPinValue+0x48>
    2528:	55 95       	asr	r21
    252a:	47 95       	ror	r20
    252c:	8a 95       	dec	r24
    252e:	e2 f7       	brpl	.-8      	; 0x2528 <DIO_u8GetPinValue+0x44>
    2530:	ca 01       	movw	r24, r20
    2532:	81 70       	andi	r24, 0x01	; 1
    2534:	89 83       	std	Y+1, r24	; 0x01
	}else{/* Nothing */}
	return ret_val;
    2536:	89 81       	ldd	r24, Y+1	; 0x01
}
    2538:	0f 90       	pop	r0
    253a:	0f 90       	pop	r0
    253c:	0f 90       	pop	r0
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	08 95       	ret

00002544 <DIO_voidSetPortDirection>:


void DIO_voidSetPortDirection(u8 Copy_u8PortId,  u8 Copy_u8Direction)
{
    2544:	df 93       	push	r29
    2546:	cf 93       	push	r28
    2548:	00 d0       	rcall	.+0      	; 0x254a <DIO_voidSetPortDirection+0x6>
    254a:	cd b7       	in	r28, 0x3d	; 61
    254c:	de b7       	in	r29, 0x3e	; 62
    254e:	89 83       	std	Y+1, r24	; 0x01
    2550:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortId <= NUM_PORTS-1){
    2552:	89 81       	ldd	r24, Y+1	; 0x01
    2554:	84 30       	cpi	r24, 0x04	; 4
    2556:	68 f4       	brcc	.+26     	; 0x2572 <DIO_voidSetPortDirection+0x2e>
		Ports_index[Copy_u8PortId]->DDRx = Copy_u8Direction;
    2558:	89 81       	ldd	r24, Y+1	; 0x01
    255a:	88 2f       	mov	r24, r24
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	88 0f       	add	r24, r24
    2560:	99 1f       	adc	r25, r25
    2562:	fc 01       	movw	r30, r24
    2564:	e1 56       	subi	r30, 0x61	; 97
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	01 90       	ld	r0, Z+
    256a:	f0 81       	ld	r31, Z
    256c:	e0 2d       	mov	r30, r0
    256e:	8a 81       	ldd	r24, Y+2	; 0x02
    2570:	81 83       	std	Z+1, r24	; 0x01
	}
	else{/* Nothing */}
}
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <DIO_voidSetPortValues>:


void DIO_voidSetPortValues(u8 Copy_u8PortId, u8 Copy_u8Value)
{
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	00 d0       	rcall	.+0      	; 0x2582 <DIO_voidSetPortValues+0x6>
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
    2586:	89 83       	std	Y+1, r24	; 0x01
    2588:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortId <= NUM_PORTS-1){
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	84 30       	cpi	r24, 0x04	; 4
    258e:	68 f4       	brcc	.+26     	; 0x25aa <DIO_voidSetPortValues+0x2e>
    Ports_index[Copy_u8PortId]->PORTx = Copy_u8Value;
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	88 2f       	mov	r24, r24
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	88 0f       	add	r24, r24
    2598:	99 1f       	adc	r25, r25
    259a:	fc 01       	movw	r30, r24
    259c:	e1 56       	subi	r30, 0x61	; 97
    259e:	ff 4f       	sbci	r31, 0xFF	; 255
    25a0:	01 90       	ld	r0, Z+
    25a2:	f0 81       	ld	r31, Z
    25a4:	e0 2d       	mov	r30, r0
    25a6:	8a 81       	ldd	r24, Y+2	; 0x02
    25a8:	82 83       	std	Z+2, r24	; 0x02
	}
	else{/* Nothing */}
}
    25aa:	0f 90       	pop	r0
    25ac:	0f 90       	pop	r0
    25ae:	cf 91       	pop	r28
    25b0:	df 91       	pop	r29
    25b2:	08 95       	ret

000025b4 <DIO_u8GetPortValues>:


u8 DIO_u8GetPortValues(u8 Copy_u8PortId)
{
    25b4:	df 93       	push	r29
    25b6:	cf 93       	push	r28
    25b8:	00 d0       	rcall	.+0      	; 0x25ba <DIO_u8GetPortValues+0x6>
    25ba:	cd b7       	in	r28, 0x3d	; 61
    25bc:	de b7       	in	r29, 0x3e	; 62
    25be:	8a 83       	std	Y+2, r24	; 0x02
	u8 ret_val = 0;
    25c0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortId <= NUM_PORTS-1){
    25c2:	8a 81       	ldd	r24, Y+2	; 0x02
    25c4:	84 30       	cpi	r24, 0x04	; 4
    25c6:	68 f4       	brcc	.+26     	; 0x25e2 <DIO_u8GetPortValues+0x2e>
		ret_val = (Ports_index[Copy_u8PortId]->PINx);
    25c8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ca:	88 2f       	mov	r24, r24
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	88 0f       	add	r24, r24
    25d0:	99 1f       	adc	r25, r25
    25d2:	fc 01       	movw	r30, r24
    25d4:	e1 56       	subi	r30, 0x61	; 97
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	01 90       	ld	r0, Z+
    25da:	f0 81       	ld	r31, Z
    25dc:	e0 2d       	mov	r30, r0
    25de:	80 81       	ld	r24, Z
    25e0:	89 83       	std	Y+1, r24	; 0x01
	}else{/* Nothing */}
	return ret_val;
    25e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    25e4:	0f 90       	pop	r0
    25e6:	0f 90       	pop	r0
    25e8:	cf 91       	pop	r28
    25ea:	df 91       	pop	r29
    25ec:	08 95       	ret

000025ee <ADC_voidInit>:
 */

#include "ADC.h"

void ADC_voidInit(const ADC_cfg_t *ADC_obj)
{
    25ee:	df 93       	push	r29
    25f0:	cf 93       	push	r28
    25f2:	00 d0       	rcall	.+0      	; 0x25f4 <ADC_voidInit+0x6>
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	9a 83       	std	Y+2, r25	; 0x02
    25fa:	89 83       	std	Y+1, r24	; 0x01
	if(NULL != ADC_obj)
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2600:	00 97       	sbiw	r24, 0x00	; 0
    2602:	09 f4       	brne	.+2      	; 0x2606 <ADC_voidInit+0x18>
    2604:	5f c0       	rjmp	.+190    	; 0x26c4 <ADC_voidInit+0xd6>
	{
		/* Disable ADC */
		ADC_DISABLE_CFG();
    2606:	e4 e2       	ldi	r30, 0x24	; 36
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	82 81       	ldd	r24, Z+2	; 0x02
    260c:	8f 77       	andi	r24, 0x7F	; 127
    260e:	82 83       	std	Z+2, r24	; 0x02

		/* Make ADC port as input */
		//DIO_voidSetPortDirection(PORTA_INDEX, 0x00);
		ADC_SELECT_VOLTAGE_REF_CFG(ADC_obj->voltage_reference_select);
    2610:	a4 e2       	ldi	r26, 0x24	; 36
    2612:	b0 e0       	ldi	r27, 0x00	; 0
    2614:	e9 81       	ldd	r30, Y+1	; 0x01
    2616:	fa 81       	ldd	r31, Y+2	; 0x02
    2618:	80 81       	ld	r24, Z
    261a:	86 95       	lsr	r24
    261c:	86 95       	lsr	r24
    261e:	86 95       	lsr	r24
    2620:	83 70       	andi	r24, 0x03	; 3
    2622:	98 2f       	mov	r25, r24
    2624:	92 95       	swap	r25
    2626:	99 0f       	add	r25, r25
    2628:	99 0f       	add	r25, r25
    262a:	90 7c       	andi	r25, 0xC0	; 192
    262c:	13 96       	adiw	r26, 0x03	; 3
    262e:	8c 91       	ld	r24, X
    2630:	13 97       	sbiw	r26, 0x03	; 3
    2632:	8f 73       	andi	r24, 0x3F	; 63
    2634:	89 2b       	or	r24, r25
    2636:	13 96       	adiw	r26, 0x03	; 3
    2638:	8c 93       	st	X, r24
		ADC_SELECT_PRESCALER(ADC_obj->prescaler_select);
    263a:	a4 e2       	ldi	r26, 0x24	; 36
    263c:	b0 e0       	ldi	r27, 0x00	; 0
    263e:	e9 81       	ldd	r30, Y+1	; 0x01
    2640:	fa 81       	ldd	r31, Y+2	; 0x02
    2642:	80 81       	ld	r24, Z
    2644:	82 95       	swap	r24
    2646:	86 95       	lsr	r24
    2648:	86 95       	lsr	r24
    264a:	83 70       	andi	r24, 0x03	; 3
    264c:	81 70       	andi	r24, 0x01	; 1
    264e:	87 70       	andi	r24, 0x07	; 7
    2650:	98 2f       	mov	r25, r24
    2652:	97 70       	andi	r25, 0x07	; 7
    2654:	12 96       	adiw	r26, 0x02	; 2
    2656:	8c 91       	ld	r24, X
    2658:	12 97       	sbiw	r26, 0x02	; 2
    265a:	88 7f       	andi	r24, 0xF8	; 248
    265c:	89 2b       	or	r24, r25
    265e:	12 96       	adiw	r26, 0x02	; 2
    2660:	8c 93       	st	X, r24
		ADC_AUTO_TRIGGER_ENABLE_CONFIG();
    2662:	e4 e2       	ldi	r30, 0x24	; 36
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	82 81       	ldd	r24, Z+2	; 0x02
    2668:	80 62       	ori	r24, 0x20	; 32
    266a:	82 83       	std	Z+2, r24	; 0x02
		ADC_SELECT_TRIGGER_SOURCE_EVENT(ADC_obj->select_trigger_source);
    266c:	a4 e2       	ldi	r26, 0x24	; 36
    266e:	b0 e0       	ldi	r27, 0x00	; 0
    2670:	e9 81       	ldd	r30, Y+1	; 0x01
    2672:	fa 81       	ldd	r31, Y+2	; 0x02
    2674:	80 81       	ld	r24, Z
    2676:	87 70       	andi	r24, 0x07	; 7
    2678:	98 2f       	mov	r25, r24
    267a:	92 95       	swap	r25
    267c:	99 0f       	add	r25, r25
    267e:	90 7e       	andi	r25, 0xE0	; 224
    2680:	9c 96       	adiw	r26, 0x2c	; 44
    2682:	8c 91       	ld	r24, X
    2684:	9c 97       	sbiw	r26, 0x2c	; 44
    2686:	8f 71       	andi	r24, 0x1F	; 31
    2688:	89 2b       	or	r24, r25
    268a:	9c 96       	adiw	r26, 0x2c	; 44
    268c:	8c 93       	st	X, r24
		ADC_SELECT_ADJUSTTFICATION(ADC_obj->adjustification_select);
    268e:	a4 e2       	ldi	r26, 0x24	; 36
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	e9 81       	ldd	r30, Y+1	; 0x01
    2694:	fa 81       	ldd	r31, Y+2	; 0x02
    2696:	80 81       	ld	r24, Z
    2698:	82 95       	swap	r24
    269a:	86 95       	lsr	r24
    269c:	87 70       	andi	r24, 0x07	; 7
    269e:	81 70       	andi	r24, 0x01	; 1
    26a0:	81 70       	andi	r24, 0x01	; 1
    26a2:	98 2f       	mov	r25, r24
    26a4:	92 95       	swap	r25
    26a6:	99 0f       	add	r25, r25
    26a8:	90 7e       	andi	r25, 0xE0	; 224
    26aa:	13 96       	adiw	r26, 0x03	; 3
    26ac:	8c 91       	ld	r24, X
    26ae:	13 97       	sbiw	r26, 0x03	; 3
    26b0:	8f 7d       	andi	r24, 0xDF	; 223
    26b2:	89 2b       	or	r24, r25
    26b4:	13 96       	adiw	r26, 0x03	; 3
    26b6:	8c 93       	st	X, r24
    26b8:	13 97       	sbiw	r26, 0x03	; 3

		/* Enable ADC */
		ADC_ENABLE_CFG();
    26ba:	e4 e2       	ldi	r30, 0x24	; 36
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	82 81       	ldd	r24, Z+2	; 0x02
    26c0:	80 68       	ori	r24, 0x80	; 128
    26c2:	82 83       	std	Z+2, r24	; 0x02
	}
	else{/* Nothing */}
}
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	cf 91       	pop	r28
    26ca:	df 91       	pop	r29
    26cc:	08 95       	ret

000026ce <ADC_getDigitalValueSynchNonBlocking>:

void ADC_getDigitalValueSynchNonBlocking(const ADC_cfg_t *ADC_obj, u8 Copy_u8Channel, u16 *result)
{
    26ce:	df 93       	push	r29
    26d0:	cf 93       	push	r28
    26d2:	00 d0       	rcall	.+0      	; 0x26d4 <ADC_getDigitalValueSynchNonBlocking+0x6>
    26d4:	00 d0       	rcall	.+0      	; 0x26d6 <ADC_getDigitalValueSynchNonBlocking+0x8>
    26d6:	0f 92       	push	r0
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
    26dc:	9a 83       	std	Y+2, r25	; 0x02
    26de:	89 83       	std	Y+1, r24	; 0x01
    26e0:	6b 83       	std	Y+3, r22	; 0x03
    26e2:	5d 83       	std	Y+5, r21	; 0x05
    26e4:	4c 83       	std	Y+4, r20	; 0x04
	// select the channel
	ADC_SELECT_CHANNEL_CFG(Copy_u8Channel);
    26e6:	e4 e2       	ldi	r30, 0x24	; 36
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	8b 81       	ldd	r24, Y+3	; 0x03
    26ec:	8f 71       	andi	r24, 0x1F	; 31
    26ee:	98 2f       	mov	r25, r24
    26f0:	9f 71       	andi	r25, 0x1F	; 31
    26f2:	83 81       	ldd	r24, Z+3	; 0x03
    26f4:	80 7e       	andi	r24, 0xE0	; 224
    26f6:	89 2b       	or	r24, r25
    26f8:	83 83       	std	Z+3, r24	; 0x03

	// start conversion
	ADC_START_CONVERSION_CFG();
    26fa:	e4 e2       	ldi	r30, 0x24	; 36
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	82 81       	ldd	r24, Z+2	; 0x02
    2700:	80 64       	ori	r24, 0x40	; 64
    2702:	82 83       	std	Z+2, r24	; 0x02

	// Wait for conversion to complete (polling)
	while (ADC_CONTROL->ADCSRA_REG.ADSC_BIT);
    2704:	e4 e2       	ldi	r30, 0x24	; 36
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	82 81       	ldd	r24, Z+2	; 0x02
    270a:	80 74       	andi	r24, 0x40	; 64
    270c:	88 23       	and	r24, r24
    270e:	d1 f7       	brne	.-12     	; 0x2704 <ADC_getDigitalValueSynchNonBlocking+0x36>

	if(ADC_obj->adjustification_select == ADC_RIGHT_JUSTIFY)
    2710:	e9 81       	ldd	r30, Y+1	; 0x01
    2712:	fa 81       	ldd	r31, Y+2	; 0x02
    2714:	80 81       	ld	r24, Z
    2716:	80 72       	andi	r24, 0x20	; 32
    2718:	88 23       	and	r24, r24
    271a:	99 f4       	brne	.+38     	; 0x2742 <ADC_getDigitalValueSynchNonBlocking+0x74>
	{
		*result = (u16)((ADC_CONTROL->ADCH_REG << 8) + ADC_CONTROL->ADCL_REG);
    271c:	e4 e2       	ldi	r30, 0x24	; 36
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	81 81       	ldd	r24, Z+1	; 0x01
    2722:	88 2f       	mov	r24, r24
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	38 2f       	mov	r19, r24
    2728:	22 27       	eor	r18, r18
    272a:	e4 e2       	ldi	r30, 0x24	; 36
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	80 81       	ld	r24, Z
    2730:	88 2f       	mov	r24, r24
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	82 0f       	add	r24, r18
    2736:	93 1f       	adc	r25, r19
    2738:	ec 81       	ldd	r30, Y+4	; 0x04
    273a:	fd 81       	ldd	r31, Y+5	; 0x05
    273c:	91 83       	std	Z+1, r25	; 0x01
    273e:	80 83       	st	Z, r24
    2740:	21 c0       	rjmp	.+66     	; 0x2784 <ADC_getDigitalValueSynchNonBlocking+0xb6>
	}
	else if(ADC_obj->adjustification_select == ADC_LEFT_JUSTIFY)
    2742:	e9 81       	ldd	r30, Y+1	; 0x01
    2744:	fa 81       	ldd	r31, Y+2	; 0x02
    2746:	80 81       	ld	r24, Z
    2748:	80 72       	andi	r24, 0x20	; 32
    274a:	88 23       	and	r24, r24
    274c:	d9 f0       	breq	.+54     	; 0x2784 <ADC_getDigitalValueSynchNonBlocking+0xb6>
	{
		*result = (u16)((ADC_CONTROL->ADCH_REG << 8) + ADC_CONTROL->ADCL_REG) >> 6;
    274e:	e4 e2       	ldi	r30, 0x24	; 36
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	81 81       	ldd	r24, Z+1	; 0x01
    2754:	88 2f       	mov	r24, r24
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	38 2f       	mov	r19, r24
    275a:	22 27       	eor	r18, r18
    275c:	e4 e2       	ldi	r30, 0x24	; 36
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	80 81       	ld	r24, Z
    2762:	88 2f       	mov	r24, r24
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	82 0f       	add	r24, r18
    2768:	93 1f       	adc	r25, r19
    276a:	00 24       	eor	r0, r0
    276c:	88 0f       	add	r24, r24
    276e:	99 1f       	adc	r25, r25
    2770:	00 1c       	adc	r0, r0
    2772:	88 0f       	add	r24, r24
    2774:	99 1f       	adc	r25, r25
    2776:	00 1c       	adc	r0, r0
    2778:	89 2f       	mov	r24, r25
    277a:	90 2d       	mov	r25, r0
    277c:	ec 81       	ldd	r30, Y+4	; 0x04
    277e:	fd 81       	ldd	r31, Y+5	; 0x05
    2780:	91 83       	std	Z+1, r25	; 0x01
    2782:	80 83       	st	Z, r24
	}
	else{/* Nothing */}
}
    2784:	0f 90       	pop	r0
    2786:	0f 90       	pop	r0
    2788:	0f 90       	pop	r0
    278a:	0f 90       	pop	r0
    278c:	0f 90       	pop	r0
    278e:	cf 91       	pop	r28
    2790:	df 91       	pop	r29
    2792:	08 95       	ret

00002794 <H_LCD_void_Init>:
#include "char_lcd.h"

u8 countDigits(s32 number);

void H_LCD_void_Init(void)
{
    2794:	df 93       	push	r29
    2796:	cf 93       	push	r28
    2798:	cd b7       	in	r28, 0x3d	; 61
    279a:	de b7       	in	r29, 0x3e	; 62
    279c:	aa 97       	sbiw	r28, 0x2a	; 42
    279e:	0f b6       	in	r0, 0x3f	; 63
    27a0:	f8 94       	cli
    27a2:	de bf       	out	0x3e, r29	; 62
    27a4:	0f be       	out	0x3f, r0	; 63
    27a6:	cd bf       	out	0x3d, r28	; 61
#if LCD_MODE_SELECT == LCD_4_BIT_MODE_SELECT

	// configure enale and rs and data pins
	DIO_voidSetPinDirection(LCD_4BIT_RS_PIN_PORT, LCD_4BIT_RS_PIN, GPIO_DIRECTION_OUTPUT);
    27a8:	80 e0       	ldi	r24, 0x00	; 0
    27aa:	63 e0       	ldi	r22, 0x03	; 3
    27ac:	41 e0       	ldi	r20, 0x01	; 1
    27ae:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_DIRECTION_OUTPUT);
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	62 e0       	ldi	r22, 0x02	; 2
    27b6:	41 e0       	ldi	r20, 0x01	; 1
    27b8:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_4BIT_D7_PIN_PORT, LCD_4_BIT_D7_PIN, GPIO_DIRECTION_OUTPUT);
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	60 e0       	ldi	r22, 0x00	; 0
    27c0:	41 e0       	ldi	r20, 0x01	; 1
    27c2:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_4BIT_D6_PIN_PORT, LCD_4_BIT_D6_PIN, GPIO_DIRECTION_OUTPUT);
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	61 e0       	ldi	r22, 0x01	; 1
    27ca:	41 e0       	ldi	r20, 0x01	; 1
    27cc:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_4BIT_D5_PIN_PORT, LCD_4_BIT_D5_PIN, GPIO_DIRECTION_OUTPUT);
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	62 e0       	ldi	r22, 0x02	; 2
    27d4:	41 e0       	ldi	r20, 0x01	; 1
    27d6:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_4BIT_D4_PIN_PORT, LCD_4_BIT_D4_PIN, GPIO_DIRECTION_OUTPUT);
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	64 e0       	ldi	r22, 0x04	; 4
    27de:	41 e0       	ldi	r20, 0x01	; 1
    27e0:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_voidSetPinDirection>
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	a0 ea       	ldi	r26, 0xA0	; 160
    27ea:	b1 e4       	ldi	r27, 0x41	; 65
    27ec:	8f a3       	std	Y+39, r24	; 0x27
    27ee:	98 a7       	std	Y+40, r25	; 0x28
    27f0:	a9 a7       	std	Y+41, r26	; 0x29
    27f2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f4:	6f a1       	ldd	r22, Y+39	; 0x27
    27f6:	78 a5       	ldd	r23, Y+40	; 0x28
    27f8:	89 a5       	ldd	r24, Y+41	; 0x29
    27fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	4a e7       	ldi	r20, 0x7A	; 122
    2802:	55 e4       	ldi	r21, 0x45	; 69
    2804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	8b a3       	std	Y+35, r24	; 0x23
    280e:	9c a3       	std	Y+36, r25	; 0x24
    2810:	ad a3       	std	Y+37, r26	; 0x25
    2812:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2814:	6b a1       	ldd	r22, Y+35	; 0x23
    2816:	7c a1       	ldd	r23, Y+36	; 0x24
    2818:	8d a1       	ldd	r24, Y+37	; 0x25
    281a:	9e a1       	ldd	r25, Y+38	; 0x26
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	40 e8       	ldi	r20, 0x80	; 128
    2822:	5f e3       	ldi	r21, 0x3F	; 63
    2824:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2828:	88 23       	and	r24, r24
    282a:	2c f4       	brge	.+10     	; 0x2836 <H_LCD_void_Init+0xa2>
		__ticks = 1;
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	9a a3       	std	Y+34, r25	; 0x22
    2832:	89 a3       	std	Y+33, r24	; 0x21
    2834:	3f c0       	rjmp	.+126    	; 0x28b4 <H_LCD_void_Init+0x120>
	else if (__tmp > 65535)
    2836:	6b a1       	ldd	r22, Y+35	; 0x23
    2838:	7c a1       	ldd	r23, Y+36	; 0x24
    283a:	8d a1       	ldd	r24, Y+37	; 0x25
    283c:	9e a1       	ldd	r25, Y+38	; 0x26
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	3f ef       	ldi	r19, 0xFF	; 255
    2842:	4f e7       	ldi	r20, 0x7F	; 127
    2844:	57 e4       	ldi	r21, 0x47	; 71
    2846:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    284a:	18 16       	cp	r1, r24
    284c:	4c f5       	brge	.+82     	; 0x28a0 <H_LCD_void_Init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284e:	6f a1       	ldd	r22, Y+39	; 0x27
    2850:	78 a5       	ldd	r23, Y+40	; 0x28
    2852:	89 a5       	ldd	r24, Y+41	; 0x29
    2854:	9a a5       	ldd	r25, Y+42	; 0x2a
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	40 e2       	ldi	r20, 0x20	; 32
    285c:	51 e4       	ldi	r21, 0x41	; 65
    285e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	bc 01       	movw	r22, r24
    2868:	cd 01       	movw	r24, r26
    286a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	9a a3       	std	Y+34, r25	; 0x22
    2874:	89 a3       	std	Y+33, r24	; 0x21
    2876:	0f c0       	rjmp	.+30     	; 0x2896 <H_LCD_void_Init+0x102>
    2878:	80 e9       	ldi	r24, 0x90	; 144
    287a:	91 e0       	ldi	r25, 0x01	; 1
    287c:	98 a3       	std	Y+32, r25	; 0x20
    287e:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2880:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2882:	98 a1       	ldd	r25, Y+32	; 0x20
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	f1 f7       	brne	.-4      	; 0x2884 <H_LCD_void_Init+0xf0>
    2888:	98 a3       	std	Y+32, r25	; 0x20
    288a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    288c:	89 a1       	ldd	r24, Y+33	; 0x21
    288e:	9a a1       	ldd	r25, Y+34	; 0x22
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	9a a3       	std	Y+34, r25	; 0x22
    2894:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2896:	89 a1       	ldd	r24, Y+33	; 0x21
    2898:	9a a1       	ldd	r25, Y+34	; 0x22
    289a:	00 97       	sbiw	r24, 0x00	; 0
    289c:	69 f7       	brne	.-38     	; 0x2878 <H_LCD_void_Init+0xe4>
    289e:	14 c0       	rjmp	.+40     	; 0x28c8 <H_LCD_void_Init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a0:	6b a1       	ldd	r22, Y+35	; 0x23
    28a2:	7c a1       	ldd	r23, Y+36	; 0x24
    28a4:	8d a1       	ldd	r24, Y+37	; 0x25
    28a6:	9e a1       	ldd	r25, Y+38	; 0x26
    28a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	9a a3       	std	Y+34, r25	; 0x22
    28b2:	89 a3       	std	Y+33, r24	; 0x21
    28b4:	89 a1       	ldd	r24, Y+33	; 0x21
    28b6:	9a a1       	ldd	r25, Y+34	; 0x22
    28b8:	9e 8f       	std	Y+30, r25	; 0x1e
    28ba:	8d 8f       	std	Y+29, r24	; 0x1d
    28bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	f1 f7       	brne	.-4      	; 0x28c0 <H_LCD_void_Init+0x12c>
    28c4:	9e 8f       	std	Y+30, r25	; 0x1e
    28c6:	8d 8f       	std	Y+29, r24	; 0x1d

	// delay before any start
	_delay_ms(20);
	H_LCD_void_SendCommand(LCD_8BIT_MODE_2_LINE);
    28c8:	88 e3       	ldi	r24, 0x38	; 56
    28ca:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <H_LCD_void_SendCommand>
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	a0 ea       	ldi	r26, 0xA0	; 160
    28d4:	b0 e4       	ldi	r27, 0x40	; 64
    28d6:	89 8f       	std	Y+25, r24	; 0x19
    28d8:	9a 8f       	std	Y+26, r25	; 0x1a
    28da:	ab 8f       	std	Y+27, r26	; 0x1b
    28dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28de:	69 8d       	ldd	r22, Y+25	; 0x19
    28e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	4a e7       	ldi	r20, 0x7A	; 122
    28ec:	55 e4       	ldi	r21, 0x45	; 69
    28ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	8d 8b       	std	Y+21, r24	; 0x15
    28f8:	9e 8b       	std	Y+22, r25	; 0x16
    28fa:	af 8b       	std	Y+23, r26	; 0x17
    28fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2900:	7e 89       	ldd	r23, Y+22	; 0x16
    2902:	8f 89       	ldd	r24, Y+23	; 0x17
    2904:	98 8d       	ldd	r25, Y+24	; 0x18
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	40 e8       	ldi	r20, 0x80	; 128
    290c:	5f e3       	ldi	r21, 0x3F	; 63
    290e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2912:	88 23       	and	r24, r24
    2914:	2c f4       	brge	.+10     	; 0x2920 <H_LCD_void_Init+0x18c>
		__ticks = 1;
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	9c 8b       	std	Y+20, r25	; 0x14
    291c:	8b 8b       	std	Y+19, r24	; 0x13
    291e:	3f c0       	rjmp	.+126    	; 0x299e <H_LCD_void_Init+0x20a>
	else if (__tmp > 65535)
    2920:	6d 89       	ldd	r22, Y+21	; 0x15
    2922:	7e 89       	ldd	r23, Y+22	; 0x16
    2924:	8f 89       	ldd	r24, Y+23	; 0x17
    2926:	98 8d       	ldd	r25, Y+24	; 0x18
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	3f ef       	ldi	r19, 0xFF	; 255
    292c:	4f e7       	ldi	r20, 0x7F	; 127
    292e:	57 e4       	ldi	r21, 0x47	; 71
    2930:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2934:	18 16       	cp	r1, r24
    2936:	4c f5       	brge	.+82     	; 0x298a <H_LCD_void_Init+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2938:	69 8d       	ldd	r22, Y+25	; 0x19
    293a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    293c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    293e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	40 e2       	ldi	r20, 0x20	; 32
    2946:	51 e4       	ldi	r21, 0x41	; 65
    2948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	bc 01       	movw	r22, r24
    2952:	cd 01       	movw	r24, r26
    2954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	9c 8b       	std	Y+20, r25	; 0x14
    295e:	8b 8b       	std	Y+19, r24	; 0x13
    2960:	0f c0       	rjmp	.+30     	; 0x2980 <H_LCD_void_Init+0x1ec>
    2962:	80 e9       	ldi	r24, 0x90	; 144
    2964:	91 e0       	ldi	r25, 0x01	; 1
    2966:	9a 8b       	std	Y+18, r25	; 0x12
    2968:	89 8b       	std	Y+17, r24	; 0x11
    296a:	89 89       	ldd	r24, Y+17	; 0x11
    296c:	9a 89       	ldd	r25, Y+18	; 0x12
    296e:	01 97       	sbiw	r24, 0x01	; 1
    2970:	f1 f7       	brne	.-4      	; 0x296e <H_LCD_void_Init+0x1da>
    2972:	9a 8b       	std	Y+18, r25	; 0x12
    2974:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2976:	8b 89       	ldd	r24, Y+19	; 0x13
    2978:	9c 89       	ldd	r25, Y+20	; 0x14
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	9c 8b       	std	Y+20, r25	; 0x14
    297e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2980:	8b 89       	ldd	r24, Y+19	; 0x13
    2982:	9c 89       	ldd	r25, Y+20	; 0x14
    2984:	00 97       	sbiw	r24, 0x00	; 0
    2986:	69 f7       	brne	.-38     	; 0x2962 <H_LCD_void_Init+0x1ce>
    2988:	14 c0       	rjmp	.+40     	; 0x29b2 <H_LCD_void_Init+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    298a:	6d 89       	ldd	r22, Y+21	; 0x15
    298c:	7e 89       	ldd	r23, Y+22	; 0x16
    298e:	8f 89       	ldd	r24, Y+23	; 0x17
    2990:	98 8d       	ldd	r25, Y+24	; 0x18
    2992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	9c 8b       	std	Y+20, r25	; 0x14
    299c:	8b 8b       	std	Y+19, r24	; 0x13
    299e:	8b 89       	ldd	r24, Y+19	; 0x13
    29a0:	9c 89       	ldd	r25, Y+20	; 0x14
    29a2:	98 8b       	std	Y+16, r25	; 0x10
    29a4:	8f 87       	std	Y+15, r24	; 0x0f
    29a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    29a8:	98 89       	ldd	r25, Y+16	; 0x10
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	f1 f7       	brne	.-4      	; 0x29aa <H_LCD_void_Init+0x216>
    29ae:	98 8b       	std	Y+16, r25	; 0x10
    29b0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	H_LCD_void_SendCommand(LCD_8BIT_MODE_2_LINE);
    29b2:	88 e3       	ldi	r24, 0x38	; 56
    29b4:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <H_LCD_void_SendCommand>
    29b8:	80 e0       	ldi	r24, 0x00	; 0
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	a6 e1       	ldi	r26, 0x16	; 22
    29be:	b3 e4       	ldi	r27, 0x43	; 67
    29c0:	8b 87       	std	Y+11, r24	; 0x0b
    29c2:	9c 87       	std	Y+12, r25	; 0x0c
    29c4:	ad 87       	std	Y+13, r26	; 0x0d
    29c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    29cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	4a e7       	ldi	r20, 0x7A	; 122
    29d6:	55 e4       	ldi	r21, 0x45	; 69
    29d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	8f 83       	std	Y+7, r24	; 0x07
    29e2:	98 87       	std	Y+8, r25	; 0x08
    29e4:	a9 87       	std	Y+9, r26	; 0x09
    29e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29e8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ea:	78 85       	ldd	r23, Y+8	; 0x08
    29ec:	89 85       	ldd	r24, Y+9	; 0x09
    29ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	40 e8       	ldi	r20, 0x80	; 128
    29f6:	5f e3       	ldi	r21, 0x3F	; 63
    29f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29fc:	88 23       	and	r24, r24
    29fe:	2c f4       	brge	.+10     	; 0x2a0a <H_LCD_void_Init+0x276>
		__ticks = 1;
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	9e 83       	std	Y+6, r25	; 0x06
    2a06:	8d 83       	std	Y+5, r24	; 0x05
    2a08:	3f c0       	rjmp	.+126    	; 0x2a88 <H_LCD_void_Init+0x2f4>
	else if (__tmp > 65535)
    2a0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a0c:	78 85       	ldd	r23, Y+8	; 0x08
    2a0e:	89 85       	ldd	r24, Y+9	; 0x09
    2a10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	3f ef       	ldi	r19, 0xFF	; 255
    2a16:	4f e7       	ldi	r20, 0x7F	; 127
    2a18:	57 e4       	ldi	r21, 0x47	; 71
    2a1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a1e:	18 16       	cp	r1, r24
    2a20:	4c f5       	brge	.+82     	; 0x2a74 <H_LCD_void_Init+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a22:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a24:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a26:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a28:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	40 e2       	ldi	r20, 0x20	; 32
    2a30:	51 e4       	ldi	r21, 0x41	; 65
    2a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	bc 01       	movw	r22, r24
    2a3c:	cd 01       	movw	r24, r26
    2a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a42:	dc 01       	movw	r26, r24
    2a44:	cb 01       	movw	r24, r22
    2a46:	9e 83       	std	Y+6, r25	; 0x06
    2a48:	8d 83       	std	Y+5, r24	; 0x05
    2a4a:	0f c0       	rjmp	.+30     	; 0x2a6a <H_LCD_void_Init+0x2d6>
    2a4c:	80 e9       	ldi	r24, 0x90	; 144
    2a4e:	91 e0       	ldi	r25, 0x01	; 1
    2a50:	9c 83       	std	Y+4, r25	; 0x04
    2a52:	8b 83       	std	Y+3, r24	; 0x03
    2a54:	8b 81       	ldd	r24, Y+3	; 0x03
    2a56:	9c 81       	ldd	r25, Y+4	; 0x04
    2a58:	01 97       	sbiw	r24, 0x01	; 1
    2a5a:	f1 f7       	brne	.-4      	; 0x2a58 <H_LCD_void_Init+0x2c4>
    2a5c:	9c 83       	std	Y+4, r25	; 0x04
    2a5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a60:	8d 81       	ldd	r24, Y+5	; 0x05
    2a62:	9e 81       	ldd	r25, Y+6	; 0x06
    2a64:	01 97       	sbiw	r24, 0x01	; 1
    2a66:	9e 83       	std	Y+6, r25	; 0x06
    2a68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6e:	00 97       	sbiw	r24, 0x00	; 0
    2a70:	69 f7       	brne	.-38     	; 0x2a4c <H_LCD_void_Init+0x2b8>
    2a72:	14 c0       	rjmp	.+40     	; 0x2a9c <H_LCD_void_Init+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a74:	6f 81       	ldd	r22, Y+7	; 0x07
    2a76:	78 85       	ldd	r23, Y+8	; 0x08
    2a78:	89 85       	ldd	r24, Y+9	; 0x09
    2a7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a80:	dc 01       	movw	r26, r24
    2a82:	cb 01       	movw	r24, r22
    2a84:	9e 83       	std	Y+6, r25	; 0x06
    2a86:	8d 83       	std	Y+5, r24	; 0x05
    2a88:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a8c:	9a 83       	std	Y+2, r25	; 0x02
    2a8e:	89 83       	std	Y+1, r24	; 0x01
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
    2a92:	9a 81       	ldd	r25, Y+2	; 0x02
    2a94:	01 97       	sbiw	r24, 0x01	; 1
    2a96:	f1 f7       	brne	.-4      	; 0x2a94 <H_LCD_void_Init+0x300>
    2a98:	9a 83       	std	Y+2, r25	; 0x02
    2a9a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(150);
	H_LCD_void_SendCommand(LCD_8BIT_MODE_2_LINE);
    2a9c:	88 e3       	ldi	r24, 0x38	; 56
    2a9e:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_CLEAR);
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_RETURN_HOME);
    2aa8:	82 e0       	ldi	r24, 0x02	; 2
    2aaa:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_ENTRY_MODE);
    2aae:	86 e0       	ldi	r24, 0x06	; 6
    2ab0:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_CURSOR_OFF_DISPLAY_ON);
    2ab4:	8c e0       	ldi	r24, 0x0C	; 12
    2ab6:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_4BIT_MODE_2_LINE);
    2aba:	88 e2       	ldi	r24, 0x28	; 40
    2abc:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_DDRAM_START); // start column
    2ac0:	80 e8       	ldi	r24, 0x80	; 128
    2ac2:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <H_LCD_void_SendCommand>

#elif LCD_MODE_SELECT == LCD_8_BIT_MODE_SELECT


#endif
}
    2ac6:	aa 96       	adiw	r28, 0x2a	; 42
    2ac8:	0f b6       	in	r0, 0x3f	; 63
    2aca:	f8 94       	cli
    2acc:	de bf       	out	0x3e, r29	; 62
    2ace:	0f be       	out	0x3f, r0	; 63
    2ad0:	cd bf       	out	0x3d, r28	; 61
    2ad2:	cf 91       	pop	r28
    2ad4:	df 91       	pop	r29
    2ad6:	08 95       	ret

00002ad8 <H_LCD_void_SendCommand>:



void H_LCD_void_SendCommand(u8 Copy_u8Command)
{
    2ad8:	df 93       	push	r29
    2ada:	cf 93       	push	r28
    2adc:	cd b7       	in	r28, 0x3d	; 61
    2ade:	de b7       	in	r29, 0x3e	; 62
    2ae0:	6d 97       	sbiw	r28, 0x1d	; 29
    2ae2:	0f b6       	in	r0, 0x3f	; 63
    2ae4:	f8 94       	cli
    2ae6:	de bf       	out	0x3e, r29	; 62
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	cd bf       	out	0x3d, r28	; 61
    2aec:	8d 8f       	std	Y+29, r24	; 0x1d
#if LCD_MODE_SELECT == LCD_4_BIT_MODE_SELECT
	// write logic low to rs pin
	DIO_voidSetPinValue(LCD_4BIT_RS_PIN_PORT, LCD_4BIT_RS_PIN, GPIO_LOW);
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	63 e0       	ldi	r22, 0x03	; 3
    2af2:	40 e0       	ldi	r20, 0x00	; 0
    2af4:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>

	// Sending most significant nibble of command through data pins
	DIO_voidSetPinValue(LCD_4BIT_D7_PIN_PORT, LCD_4_BIT_D7_PIN, (Copy_u8Command >> 4)&(u8)1);
    2af8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2afa:	82 95       	swap	r24
    2afc:	8f 70       	andi	r24, 0x0F	; 15
    2afe:	98 2f       	mov	r25, r24
    2b00:	91 70       	andi	r25, 0x01	; 1
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	60 e0       	ldi	r22, 0x00	; 0
    2b06:	49 2f       	mov	r20, r25
    2b08:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D6_PIN_PORT, LCD_4_BIT_D6_PIN, (Copy_u8Command >> 5)&(u8)1);
    2b0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b0e:	82 95       	swap	r24
    2b10:	86 95       	lsr	r24
    2b12:	87 70       	andi	r24, 0x07	; 7
    2b14:	98 2f       	mov	r25, r24
    2b16:	91 70       	andi	r25, 0x01	; 1
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	61 e0       	ldi	r22, 0x01	; 1
    2b1c:	49 2f       	mov	r20, r25
    2b1e:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D5_PIN_PORT, LCD_4_BIT_D5_PIN, (Copy_u8Command >> 6)&(u8)1);
    2b22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b24:	82 95       	swap	r24
    2b26:	86 95       	lsr	r24
    2b28:	86 95       	lsr	r24
    2b2a:	83 70       	andi	r24, 0x03	; 3
    2b2c:	98 2f       	mov	r25, r24
    2b2e:	91 70       	andi	r25, 0x01	; 1
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	62 e0       	ldi	r22, 0x02	; 2
    2b34:	49 2f       	mov	r20, r25
    2b36:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D4_PIN_PORT, LCD_4_BIT_D4_PIN, (Copy_u8Command >> 7)&(u8)1);
    2b3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b3c:	98 2f       	mov	r25, r24
    2b3e:	99 1f       	adc	r25, r25
    2b40:	99 27       	eor	r25, r25
    2b42:	99 1f       	adc	r25, r25
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	64 e0       	ldi	r22, 0x04	; 4
    2b48:	49 2f       	mov	r20, r25
    2b4a:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>

	// send enable signal
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_HIGH);
    2b4e:	80 e0       	ldi	r24, 0x00	; 0
    2b50:	62 e0       	ldi	r22, 0x02	; 2
    2b52:	41 e0       	ldi	r20, 0x01	; 1
    2b54:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	a0 ea       	ldi	r26, 0xA0	; 160
    2b5e:	b0 e4       	ldi	r27, 0x40	; 64
    2b60:	89 8f       	std	Y+25, r24	; 0x19
    2b62:	9a 8f       	std	Y+26, r25	; 0x1a
    2b64:	ab 8f       	std	Y+27, r26	; 0x1b
    2b66:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b68:	69 8d       	ldd	r22, Y+25	; 0x19
    2b6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	4a e7       	ldi	r20, 0x7A	; 122
    2b76:	55 e4       	ldi	r21, 0x45	; 69
    2b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	8d 8b       	std	Y+21, r24	; 0x15
    2b82:	9e 8b       	std	Y+22, r25	; 0x16
    2b84:	af 8b       	std	Y+23, r26	; 0x17
    2b86:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b88:	6d 89       	ldd	r22, Y+21	; 0x15
    2b8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	40 e8       	ldi	r20, 0x80	; 128
    2b96:	5f e3       	ldi	r21, 0x3F	; 63
    2b98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b9c:	88 23       	and	r24, r24
    2b9e:	2c f4       	brge	.+10     	; 0x2baa <H_LCD_void_SendCommand+0xd2>
		__ticks = 1;
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	9c 8b       	std	Y+20, r25	; 0x14
    2ba6:	8b 8b       	std	Y+19, r24	; 0x13
    2ba8:	3f c0       	rjmp	.+126    	; 0x2c28 <H_LCD_void_SendCommand+0x150>
	else if (__tmp > 65535)
    2baa:	6d 89       	ldd	r22, Y+21	; 0x15
    2bac:	7e 89       	ldd	r23, Y+22	; 0x16
    2bae:	8f 89       	ldd	r24, Y+23	; 0x17
    2bb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	3f ef       	ldi	r19, 0xFF	; 255
    2bb6:	4f e7       	ldi	r20, 0x7F	; 127
    2bb8:	57 e4       	ldi	r21, 0x47	; 71
    2bba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bbe:	18 16       	cp	r1, r24
    2bc0:	4c f5       	brge	.+82     	; 0x2c14 <H_LCD_void_SendCommand+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc2:	69 8d       	ldd	r22, Y+25	; 0x19
    2bc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	40 e2       	ldi	r20, 0x20	; 32
    2bd0:	51 e4       	ldi	r21, 0x41	; 65
    2bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	bc 01       	movw	r22, r24
    2bdc:	cd 01       	movw	r24, r26
    2bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be2:	dc 01       	movw	r26, r24
    2be4:	cb 01       	movw	r24, r22
    2be6:	9c 8b       	std	Y+20, r25	; 0x14
    2be8:	8b 8b       	std	Y+19, r24	; 0x13
    2bea:	0f c0       	rjmp	.+30     	; 0x2c0a <H_LCD_void_SendCommand+0x132>
    2bec:	80 e9       	ldi	r24, 0x90	; 144
    2bee:	91 e0       	ldi	r25, 0x01	; 1
    2bf0:	9a 8b       	std	Y+18, r25	; 0x12
    2bf2:	89 8b       	std	Y+17, r24	; 0x11
    2bf4:	89 89       	ldd	r24, Y+17	; 0x11
    2bf6:	9a 89       	ldd	r25, Y+18	; 0x12
    2bf8:	01 97       	sbiw	r24, 0x01	; 1
    2bfa:	f1 f7       	brne	.-4      	; 0x2bf8 <H_LCD_void_SendCommand+0x120>
    2bfc:	9a 8b       	std	Y+18, r25	; 0x12
    2bfe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c00:	8b 89       	ldd	r24, Y+19	; 0x13
    2c02:	9c 89       	ldd	r25, Y+20	; 0x14
    2c04:	01 97       	sbiw	r24, 0x01	; 1
    2c06:	9c 8b       	std	Y+20, r25	; 0x14
    2c08:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c0e:	00 97       	sbiw	r24, 0x00	; 0
    2c10:	69 f7       	brne	.-38     	; 0x2bec <H_LCD_void_SendCommand+0x114>
    2c12:	14 c0       	rjmp	.+40     	; 0x2c3c <H_LCD_void_SendCommand+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c14:	6d 89       	ldd	r22, Y+21	; 0x15
    2c16:	7e 89       	ldd	r23, Y+22	; 0x16
    2c18:	8f 89       	ldd	r24, Y+23	; 0x17
    2c1a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	9c 8b       	std	Y+20, r25	; 0x14
    2c26:	8b 8b       	std	Y+19, r24	; 0x13
    2c28:	8b 89       	ldd	r24, Y+19	; 0x13
    2c2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c2c:	98 8b       	std	Y+16, r25	; 0x10
    2c2e:	8f 87       	std	Y+15, r24	; 0x0f
    2c30:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c32:	98 89       	ldd	r25, Y+16	; 0x10
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	f1 f7       	brne	.-4      	; 0x2c34 <H_LCD_void_SendCommand+0x15c>
    2c38:	98 8b       	std	Y+16, r25	; 0x10
    2c3a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_LOW);
    2c3c:	80 e0       	ldi	r24, 0x00	; 0
    2c3e:	62 e0       	ldi	r22, 0x02	; 2
    2c40:	40 e0       	ldi	r20, 0x00	; 0
    2c42:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>

	// Sending least significant nibble of command through data pins
	DIO_voidSetPinValue(LCD_4BIT_D7_PIN_PORT, LCD_4_BIT_D7_PIN, ((Copy_u8Command) >> 0)&(u8)1);
    2c46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c48:	98 2f       	mov	r25, r24
    2c4a:	91 70       	andi	r25, 0x01	; 1
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
    2c4e:	60 e0       	ldi	r22, 0x00	; 0
    2c50:	49 2f       	mov	r20, r25
    2c52:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D6_PIN_PORT, LCD_4_BIT_D6_PIN, ((Copy_u8Command) >> 1)&(u8)1);
    2c56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c58:	86 95       	lsr	r24
    2c5a:	98 2f       	mov	r25, r24
    2c5c:	91 70       	andi	r25, 0x01	; 1
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	61 e0       	ldi	r22, 0x01	; 1
    2c62:	49 2f       	mov	r20, r25
    2c64:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D5_PIN_PORT, LCD_4_BIT_D5_PIN, ((Copy_u8Command) >> 2)&(u8)1);
    2c68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c6a:	86 95       	lsr	r24
    2c6c:	86 95       	lsr	r24
    2c6e:	98 2f       	mov	r25, r24
    2c70:	91 70       	andi	r25, 0x01	; 1
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	62 e0       	ldi	r22, 0x02	; 2
    2c76:	49 2f       	mov	r20, r25
    2c78:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D4_PIN_PORT, LCD_4_BIT_D4_PIN, ((Copy_u8Command) >> 3)&(u8)1);
    2c7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c7e:	86 95       	lsr	r24
    2c80:	86 95       	lsr	r24
    2c82:	86 95       	lsr	r24
    2c84:	98 2f       	mov	r25, r24
    2c86:	91 70       	andi	r25, 0x01	; 1
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	64 e0       	ldi	r22, 0x04	; 4
    2c8c:	49 2f       	mov	r20, r25
    2c8e:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>

	// send enable signal
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_HIGH);
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	62 e0       	ldi	r22, 0x02	; 2
    2c96:	41 e0       	ldi	r20, 0x01	; 1
    2c98:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>
    2c9c:	80 e0       	ldi	r24, 0x00	; 0
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	a0 ea       	ldi	r26, 0xA0	; 160
    2ca2:	b0 e4       	ldi	r27, 0x40	; 64
    2ca4:	8b 87       	std	Y+11, r24	; 0x0b
    2ca6:	9c 87       	std	Y+12, r25	; 0x0c
    2ca8:	ad 87       	std	Y+13, r26	; 0x0d
    2caa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cae:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	4a e7       	ldi	r20, 0x7A	; 122
    2cba:	55 e4       	ldi	r21, 0x45	; 69
    2cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	8f 83       	std	Y+7, r24	; 0x07
    2cc6:	98 87       	std	Y+8, r25	; 0x08
    2cc8:	a9 87       	std	Y+9, r26	; 0x09
    2cca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    2cce:	78 85       	ldd	r23, Y+8	; 0x08
    2cd0:	89 85       	ldd	r24, Y+9	; 0x09
    2cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	40 e8       	ldi	r20, 0x80	; 128
    2cda:	5f e3       	ldi	r21, 0x3F	; 63
    2cdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ce0:	88 23       	and	r24, r24
    2ce2:	2c f4       	brge	.+10     	; 0x2cee <H_LCD_void_SendCommand+0x216>
		__ticks = 1;
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	9e 83       	std	Y+6, r25	; 0x06
    2cea:	8d 83       	std	Y+5, r24	; 0x05
    2cec:	3f c0       	rjmp	.+126    	; 0x2d6c <H_LCD_void_SendCommand+0x294>
	else if (__tmp > 65535)
    2cee:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf0:	78 85       	ldd	r23, Y+8	; 0x08
    2cf2:	89 85       	ldd	r24, Y+9	; 0x09
    2cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	3f ef       	ldi	r19, 0xFF	; 255
    2cfa:	4f e7       	ldi	r20, 0x7F	; 127
    2cfc:	57 e4       	ldi	r21, 0x47	; 71
    2cfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d02:	18 16       	cp	r1, r24
    2d04:	4c f5       	brge	.+82     	; 0x2d58 <H_LCD_void_SendCommand+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d06:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d08:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	40 e2       	ldi	r20, 0x20	; 32
    2d14:	51 e4       	ldi	r21, 0x41	; 65
    2d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	bc 01       	movw	r22, r24
    2d20:	cd 01       	movw	r24, r26
    2d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	9e 83       	std	Y+6, r25	; 0x06
    2d2c:	8d 83       	std	Y+5, r24	; 0x05
    2d2e:	0f c0       	rjmp	.+30     	; 0x2d4e <H_LCD_void_SendCommand+0x276>
    2d30:	80 e9       	ldi	r24, 0x90	; 144
    2d32:	91 e0       	ldi	r25, 0x01	; 1
    2d34:	9c 83       	std	Y+4, r25	; 0x04
    2d36:	8b 83       	std	Y+3, r24	; 0x03
    2d38:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d3c:	01 97       	sbiw	r24, 0x01	; 1
    2d3e:	f1 f7       	brne	.-4      	; 0x2d3c <H_LCD_void_SendCommand+0x264>
    2d40:	9c 83       	std	Y+4, r25	; 0x04
    2d42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d44:	8d 81       	ldd	r24, Y+5	; 0x05
    2d46:	9e 81       	ldd	r25, Y+6	; 0x06
    2d48:	01 97       	sbiw	r24, 0x01	; 1
    2d4a:	9e 83       	std	Y+6, r25	; 0x06
    2d4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d50:	9e 81       	ldd	r25, Y+6	; 0x06
    2d52:	00 97       	sbiw	r24, 0x00	; 0
    2d54:	69 f7       	brne	.-38     	; 0x2d30 <H_LCD_void_SendCommand+0x258>
    2d56:	14 c0       	rjmp	.+40     	; 0x2d80 <H_LCD_void_SendCommand+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d58:	6f 81       	ldd	r22, Y+7	; 0x07
    2d5a:	78 85       	ldd	r23, Y+8	; 0x08
    2d5c:	89 85       	ldd	r24, Y+9	; 0x09
    2d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	9e 83       	std	Y+6, r25	; 0x06
    2d6a:	8d 83       	std	Y+5, r24	; 0x05
    2d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d70:	9a 83       	std	Y+2, r25	; 0x02
    2d72:	89 83       	std	Y+1, r24	; 0x01
    2d74:	89 81       	ldd	r24, Y+1	; 0x01
    2d76:	9a 81       	ldd	r25, Y+2	; 0x02
    2d78:	01 97       	sbiw	r24, 0x01	; 1
    2d7a:	f1 f7       	brne	.-4      	; 0x2d78 <H_LCD_void_SendCommand+0x2a0>
    2d7c:	9a 83       	std	Y+2, r25	; 0x02
    2d7e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_LOW);
    2d80:	80 e0       	ldi	r24, 0x00	; 0
    2d82:	62 e0       	ldi	r22, 0x02	; 2
    2d84:	40 e0       	ldi	r20, 0x00	; 0
    2d86:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>
#elif LCD_MODE_SELECT == LCD_8_BIT_MODE_SELECT


#endif

}
    2d8a:	6d 96       	adiw	r28, 0x1d	; 29
    2d8c:	0f b6       	in	r0, 0x3f	; 63
    2d8e:	f8 94       	cli
    2d90:	de bf       	out	0x3e, r29	; 62
    2d92:	0f be       	out	0x3f, r0	; 63
    2d94:	cd bf       	out	0x3d, r28	; 61
    2d96:	cf 91       	pop	r28
    2d98:	df 91       	pop	r29
    2d9a:	08 95       	ret

00002d9c <H_LCD_void_SendData>:
void H_LCD_void_SendData(u8 Copy_u8Data)
{
    2d9c:	df 93       	push	r29
    2d9e:	cf 93       	push	r28
    2da0:	cd b7       	in	r28, 0x3d	; 61
    2da2:	de b7       	in	r29, 0x3e	; 62
    2da4:	6d 97       	sbiw	r28, 0x1d	; 29
    2da6:	0f b6       	in	r0, 0x3f	; 63
    2da8:	f8 94       	cli
    2daa:	de bf       	out	0x3e, r29	; 62
    2dac:	0f be       	out	0x3f, r0	; 63
    2dae:	cd bf       	out	0x3d, r28	; 61
    2db0:	8d 8f       	std	Y+29, r24	; 0x1d
#if LCD_MODE_SELECT == LCD_4_BIT_MODE_SELECT
	// write logic high to rs pin
	DIO_voidSetPinValue(LCD_4BIT_RS_PIN_PORT, LCD_4BIT_RS_PIN, GPIO_HIGH);
    2db2:	80 e0       	ldi	r24, 0x00	; 0
    2db4:	63 e0       	ldi	r22, 0x03	; 3
    2db6:	41 e0       	ldi	r20, 0x01	; 1
    2db8:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>

	// Sending most significant nibble of command through data pins
	DIO_voidSetPinValue(LCD_4BIT_D7_PIN_PORT, LCD_4_BIT_D7_PIN, (Copy_u8Data >> 4)&(u8)1);
    2dbc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dbe:	82 95       	swap	r24
    2dc0:	8f 70       	andi	r24, 0x0F	; 15
    2dc2:	98 2f       	mov	r25, r24
    2dc4:	91 70       	andi	r25, 0x01	; 1
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	60 e0       	ldi	r22, 0x00	; 0
    2dca:	49 2f       	mov	r20, r25
    2dcc:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D6_PIN_PORT, LCD_4_BIT_D6_PIN, (Copy_u8Data >> 5)&(u8)1);
    2dd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dd2:	82 95       	swap	r24
    2dd4:	86 95       	lsr	r24
    2dd6:	87 70       	andi	r24, 0x07	; 7
    2dd8:	98 2f       	mov	r25, r24
    2dda:	91 70       	andi	r25, 0x01	; 1
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	61 e0       	ldi	r22, 0x01	; 1
    2de0:	49 2f       	mov	r20, r25
    2de2:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D5_PIN_PORT, LCD_4_BIT_D5_PIN, (Copy_u8Data >> 6)&(u8)1);
    2de6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2de8:	82 95       	swap	r24
    2dea:	86 95       	lsr	r24
    2dec:	86 95       	lsr	r24
    2dee:	83 70       	andi	r24, 0x03	; 3
    2df0:	98 2f       	mov	r25, r24
    2df2:	91 70       	andi	r25, 0x01	; 1
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	62 e0       	ldi	r22, 0x02	; 2
    2df8:	49 2f       	mov	r20, r25
    2dfa:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D4_PIN_PORT, LCD_4_BIT_D4_PIN, (Copy_u8Data >> 7)&(u8)1);
    2dfe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e00:	98 2f       	mov	r25, r24
    2e02:	99 1f       	adc	r25, r25
    2e04:	99 27       	eor	r25, r25
    2e06:	99 1f       	adc	r25, r25
    2e08:	81 e0       	ldi	r24, 0x01	; 1
    2e0a:	64 e0       	ldi	r22, 0x04	; 4
    2e0c:	49 2f       	mov	r20, r25
    2e0e:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>

	// send enable signal
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_HIGH);
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	62 e0       	ldi	r22, 0x02	; 2
    2e16:	41 e0       	ldi	r20, 0x01	; 1
    2e18:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	a0 ea       	ldi	r26, 0xA0	; 160
    2e22:	b0 e4       	ldi	r27, 0x40	; 64
    2e24:	89 8f       	std	Y+25, r24	; 0x19
    2e26:	9a 8f       	std	Y+26, r25	; 0x1a
    2e28:	ab 8f       	std	Y+27, r26	; 0x1b
    2e2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e2c:	69 8d       	ldd	r22, Y+25	; 0x19
    2e2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	4a e7       	ldi	r20, 0x7A	; 122
    2e3a:	55 e4       	ldi	r21, 0x45	; 69
    2e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	8d 8b       	std	Y+21, r24	; 0x15
    2e46:	9e 8b       	std	Y+22, r25	; 0x16
    2e48:	af 8b       	std	Y+23, r26	; 0x17
    2e4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e4c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e4e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e50:	8f 89       	ldd	r24, Y+23	; 0x17
    2e52:	98 8d       	ldd	r25, Y+24	; 0x18
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	40 e8       	ldi	r20, 0x80	; 128
    2e5a:	5f e3       	ldi	r21, 0x3F	; 63
    2e5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e60:	88 23       	and	r24, r24
    2e62:	2c f4       	brge	.+10     	; 0x2e6e <H_LCD_void_SendData+0xd2>
		__ticks = 1;
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	9c 8b       	std	Y+20, r25	; 0x14
    2e6a:	8b 8b       	std	Y+19, r24	; 0x13
    2e6c:	3f c0       	rjmp	.+126    	; 0x2eec <H_LCD_void_SendData+0x150>
	else if (__tmp > 65535)
    2e6e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e70:	7e 89       	ldd	r23, Y+22	; 0x16
    2e72:	8f 89       	ldd	r24, Y+23	; 0x17
    2e74:	98 8d       	ldd	r25, Y+24	; 0x18
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	3f ef       	ldi	r19, 0xFF	; 255
    2e7a:	4f e7       	ldi	r20, 0x7F	; 127
    2e7c:	57 e4       	ldi	r21, 0x47	; 71
    2e7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e82:	18 16       	cp	r1, r24
    2e84:	4c f5       	brge	.+82     	; 0x2ed8 <H_LCD_void_SendData+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e86:	69 8d       	ldd	r22, Y+25	; 0x19
    2e88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	40 e2       	ldi	r20, 0x20	; 32
    2e94:	51 e4       	ldi	r21, 0x41	; 65
    2e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	bc 01       	movw	r22, r24
    2ea0:	cd 01       	movw	r24, r26
    2ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	9c 8b       	std	Y+20, r25	; 0x14
    2eac:	8b 8b       	std	Y+19, r24	; 0x13
    2eae:	0f c0       	rjmp	.+30     	; 0x2ece <H_LCD_void_SendData+0x132>
    2eb0:	80 e9       	ldi	r24, 0x90	; 144
    2eb2:	91 e0       	ldi	r25, 0x01	; 1
    2eb4:	9a 8b       	std	Y+18, r25	; 0x12
    2eb6:	89 8b       	std	Y+17, r24	; 0x11
    2eb8:	89 89       	ldd	r24, Y+17	; 0x11
    2eba:	9a 89       	ldd	r25, Y+18	; 0x12
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	f1 f7       	brne	.-4      	; 0x2ebc <H_LCD_void_SendData+0x120>
    2ec0:	9a 8b       	std	Y+18, r25	; 0x12
    2ec2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ec6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	9c 8b       	std	Y+20, r25	; 0x14
    2ecc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ece:	8b 89       	ldd	r24, Y+19	; 0x13
    2ed0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ed2:	00 97       	sbiw	r24, 0x00	; 0
    2ed4:	69 f7       	brne	.-38     	; 0x2eb0 <H_LCD_void_SendData+0x114>
    2ed6:	14 c0       	rjmp	.+40     	; 0x2f00 <H_LCD_void_SendData+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed8:	6d 89       	ldd	r22, Y+21	; 0x15
    2eda:	7e 89       	ldd	r23, Y+22	; 0x16
    2edc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ede:	98 8d       	ldd	r25, Y+24	; 0x18
    2ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	9c 8b       	std	Y+20, r25	; 0x14
    2eea:	8b 8b       	std	Y+19, r24	; 0x13
    2eec:	8b 89       	ldd	r24, Y+19	; 0x13
    2eee:	9c 89       	ldd	r25, Y+20	; 0x14
    2ef0:	98 8b       	std	Y+16, r25	; 0x10
    2ef2:	8f 87       	std	Y+15, r24	; 0x0f
    2ef4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ef6:	98 89       	ldd	r25, Y+16	; 0x10
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	f1 f7       	brne	.-4      	; 0x2ef8 <H_LCD_void_SendData+0x15c>
    2efc:	98 8b       	std	Y+16, r25	; 0x10
    2efe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_LOW);
    2f00:	80 e0       	ldi	r24, 0x00	; 0
    2f02:	62 e0       	ldi	r22, 0x02	; 2
    2f04:	40 e0       	ldi	r20, 0x00	; 0
    2f06:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>

	// Sending least significant nibble of command through data pins
	DIO_voidSetPinValue(LCD_4BIT_D7_PIN_PORT, LCD_4_BIT_D7_PIN, ((Copy_u8Data) >> 0)&(u8)1);
    2f0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f0c:	98 2f       	mov	r25, r24
    2f0e:	91 70       	andi	r25, 0x01	; 1
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	60 e0       	ldi	r22, 0x00	; 0
    2f14:	49 2f       	mov	r20, r25
    2f16:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D6_PIN_PORT, LCD_4_BIT_D6_PIN, ((Copy_u8Data) >> 1)&(u8)1);
    2f1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f1c:	86 95       	lsr	r24
    2f1e:	98 2f       	mov	r25, r24
    2f20:	91 70       	andi	r25, 0x01	; 1
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	61 e0       	ldi	r22, 0x01	; 1
    2f26:	49 2f       	mov	r20, r25
    2f28:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D5_PIN_PORT, LCD_4_BIT_D5_PIN, ((Copy_u8Data) >> 2)&(u8)1);
    2f2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f2e:	86 95       	lsr	r24
    2f30:	86 95       	lsr	r24
    2f32:	98 2f       	mov	r25, r24
    2f34:	91 70       	andi	r25, 0x01	; 1
    2f36:	81 e0       	ldi	r24, 0x01	; 1
    2f38:	62 e0       	ldi	r22, 0x02	; 2
    2f3a:	49 2f       	mov	r20, r25
    2f3c:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D4_PIN_PORT, LCD_4_BIT_D4_PIN, ((Copy_u8Data) >> 3)&(u8)1);
    2f40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f42:	86 95       	lsr	r24
    2f44:	86 95       	lsr	r24
    2f46:	86 95       	lsr	r24
    2f48:	98 2f       	mov	r25, r24
    2f4a:	91 70       	andi	r25, 0x01	; 1
    2f4c:	81 e0       	ldi	r24, 0x01	; 1
    2f4e:	64 e0       	ldi	r22, 0x04	; 4
    2f50:	49 2f       	mov	r20, r25
    2f52:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>

	// send enable signal
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_HIGH);
    2f56:	80 e0       	ldi	r24, 0x00	; 0
    2f58:	62 e0       	ldi	r22, 0x02	; 2
    2f5a:	41 e0       	ldi	r20, 0x01	; 1
    2f5c:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>
    2f60:	80 e0       	ldi	r24, 0x00	; 0
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	a0 ea       	ldi	r26, 0xA0	; 160
    2f66:	b0 e4       	ldi	r27, 0x40	; 64
    2f68:	8b 87       	std	Y+11, r24	; 0x0b
    2f6a:	9c 87       	std	Y+12, r25	; 0x0c
    2f6c:	ad 87       	std	Y+13, r26	; 0x0d
    2f6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	4a e7       	ldi	r20, 0x7A	; 122
    2f7e:	55 e4       	ldi	r21, 0x45	; 69
    2f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	8f 83       	std	Y+7, r24	; 0x07
    2f8a:	98 87       	std	Y+8, r25	; 0x08
    2f8c:	a9 87       	std	Y+9, r26	; 0x09
    2f8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f90:	6f 81       	ldd	r22, Y+7	; 0x07
    2f92:	78 85       	ldd	r23, Y+8	; 0x08
    2f94:	89 85       	ldd	r24, Y+9	; 0x09
    2f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	40 e8       	ldi	r20, 0x80	; 128
    2f9e:	5f e3       	ldi	r21, 0x3F	; 63
    2fa0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fa4:	88 23       	and	r24, r24
    2fa6:	2c f4       	brge	.+10     	; 0x2fb2 <H_LCD_void_SendData+0x216>
		__ticks = 1;
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	9e 83       	std	Y+6, r25	; 0x06
    2fae:	8d 83       	std	Y+5, r24	; 0x05
    2fb0:	3f c0       	rjmp	.+126    	; 0x3030 <H_LCD_void_SendData+0x294>
	else if (__tmp > 65535)
    2fb2:	6f 81       	ldd	r22, Y+7	; 0x07
    2fb4:	78 85       	ldd	r23, Y+8	; 0x08
    2fb6:	89 85       	ldd	r24, Y+9	; 0x09
    2fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	3f ef       	ldi	r19, 0xFF	; 255
    2fbe:	4f e7       	ldi	r20, 0x7F	; 127
    2fc0:	57 e4       	ldi	r21, 0x47	; 71
    2fc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fc6:	18 16       	cp	r1, r24
    2fc8:	4c f5       	brge	.+82     	; 0x301c <H_LCD_void_SendData+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	40 e2       	ldi	r20, 0x20	; 32
    2fd8:	51 e4       	ldi	r21, 0x41	; 65
    2fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	bc 01       	movw	r22, r24
    2fe4:	cd 01       	movw	r24, r26
    2fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	9e 83       	std	Y+6, r25	; 0x06
    2ff0:	8d 83       	std	Y+5, r24	; 0x05
    2ff2:	0f c0       	rjmp	.+30     	; 0x3012 <H_LCD_void_SendData+0x276>
    2ff4:	80 e9       	ldi	r24, 0x90	; 144
    2ff6:	91 e0       	ldi	r25, 0x01	; 1
    2ff8:	9c 83       	std	Y+4, r25	; 0x04
    2ffa:	8b 83       	std	Y+3, r24	; 0x03
    2ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	f1 f7       	brne	.-4      	; 0x3000 <H_LCD_void_SendData+0x264>
    3004:	9c 83       	std	Y+4, r25	; 0x04
    3006:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3008:	8d 81       	ldd	r24, Y+5	; 0x05
    300a:	9e 81       	ldd	r25, Y+6	; 0x06
    300c:	01 97       	sbiw	r24, 0x01	; 1
    300e:	9e 83       	std	Y+6, r25	; 0x06
    3010:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3012:	8d 81       	ldd	r24, Y+5	; 0x05
    3014:	9e 81       	ldd	r25, Y+6	; 0x06
    3016:	00 97       	sbiw	r24, 0x00	; 0
    3018:	69 f7       	brne	.-38     	; 0x2ff4 <H_LCD_void_SendData+0x258>
    301a:	14 c0       	rjmp	.+40     	; 0x3044 <H_LCD_void_SendData+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    301c:	6f 81       	ldd	r22, Y+7	; 0x07
    301e:	78 85       	ldd	r23, Y+8	; 0x08
    3020:	89 85       	ldd	r24, Y+9	; 0x09
    3022:	9a 85       	ldd	r25, Y+10	; 0x0a
    3024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	9e 83       	std	Y+6, r25	; 0x06
    302e:	8d 83       	std	Y+5, r24	; 0x05
    3030:	8d 81       	ldd	r24, Y+5	; 0x05
    3032:	9e 81       	ldd	r25, Y+6	; 0x06
    3034:	9a 83       	std	Y+2, r25	; 0x02
    3036:	89 83       	std	Y+1, r24	; 0x01
    3038:	89 81       	ldd	r24, Y+1	; 0x01
    303a:	9a 81       	ldd	r25, Y+2	; 0x02
    303c:	01 97       	sbiw	r24, 0x01	; 1
    303e:	f1 f7       	brne	.-4      	; 0x303c <H_LCD_void_SendData+0x2a0>
    3040:	9a 83       	std	Y+2, r25	; 0x02
    3042:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_LOW);
    3044:	80 e0       	ldi	r24, 0x00	; 0
    3046:	62 e0       	ldi	r22, 0x02	; 2
    3048:	40 e0       	ldi	r20, 0x00	; 0
    304a:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>

#elif LCD_MODE_SELECT == LCD_8_BIT_MODE_SELECT  // 8bits configurations


#endif
}
    304e:	6d 96       	adiw	r28, 0x1d	; 29
    3050:	0f b6       	in	r0, 0x3f	; 63
    3052:	f8 94       	cli
    3054:	de bf       	out	0x3e, r29	; 62
    3056:	0f be       	out	0x3f, r0	; 63
    3058:	cd bf       	out	0x3d, r28	; 61
    305a:	cf 91       	pop	r28
    305c:	df 91       	pop	r29
    305e:	08 95       	ret

00003060 <H_LCD_void_SendString>:
void H_LCD_void_SendString(u8 *Copy_u8Str)
{
    3060:	df 93       	push	r29
    3062:	cf 93       	push	r28
    3064:	00 d0       	rcall	.+0      	; 0x3066 <H_LCD_void_SendString+0x6>
    3066:	cd b7       	in	r28, 0x3d	; 61
    3068:	de b7       	in	r29, 0x3e	; 62
    306a:	9a 83       	std	Y+2, r25	; 0x02
    306c:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Copy_u8Str)
    306e:	89 81       	ldd	r24, Y+1	; 0x01
    3070:	9a 81       	ldd	r25, Y+2	; 0x02
    3072:	00 97       	sbiw	r24, 0x00	; 0
    3074:	89 f0       	breq	.+34     	; 0x3098 <H_LCD_void_SendString+0x38>
    3076:	0b c0       	rjmp	.+22     	; 0x308e <H_LCD_void_SendString+0x2e>
	}
	else
	{
		while(*Copy_u8Str)
		{
			H_LCD_void_SendData(*Copy_u8Str++);
    3078:	e9 81       	ldd	r30, Y+1	; 0x01
    307a:	fa 81       	ldd	r31, Y+2	; 0x02
    307c:	20 81       	ld	r18, Z
    307e:	89 81       	ldd	r24, Y+1	; 0x01
    3080:	9a 81       	ldd	r25, Y+2	; 0x02
    3082:	01 96       	adiw	r24, 0x01	; 1
    3084:	9a 83       	std	Y+2, r25	; 0x02
    3086:	89 83       	std	Y+1, r24	; 0x01
    3088:	82 2f       	mov	r24, r18
    308a:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <H_LCD_void_SendData>
	{
		/* Nothing */
	}
	else
	{
		while(*Copy_u8Str)
    308e:	e9 81       	ldd	r30, Y+1	; 0x01
    3090:	fa 81       	ldd	r31, Y+2	; 0x02
    3092:	80 81       	ld	r24, Z
    3094:	88 23       	and	r24, r24
    3096:	81 f7       	brne	.-32     	; 0x3078 <H_LCD_void_SendString+0x18>
		{
			H_LCD_void_SendData(*Copy_u8Str++);
		}
	}
}
    3098:	0f 90       	pop	r0
    309a:	0f 90       	pop	r0
    309c:	cf 91       	pop	r28
    309e:	df 91       	pop	r29
    30a0:	08 95       	ret

000030a2 <H_LCD_void_gotoXY>:
void H_LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    30a2:	df 93       	push	r29
    30a4:	cf 93       	push	r28
    30a6:	00 d0       	rcall	.+0      	; 0x30a8 <H_LCD_void_gotoXY+0x6>
    30a8:	00 d0       	rcall	.+0      	; 0x30aa <H_LCD_void_gotoXY+0x8>
    30aa:	cd b7       	in	r28, 0x3d	; 61
    30ac:	de b7       	in	r29, 0x3e	; 62
    30ae:	89 83       	std	Y+1, r24	; 0x01
    30b0:	6a 83       	std	Y+2, r22	; 0x02
	copy_u8Col--;
    30b2:	8a 81       	ldd	r24, Y+2	; 0x02
    30b4:	81 50       	subi	r24, 0x01	; 1
    30b6:	8a 83       	std	Y+2, r24	; 0x02
	switch(copy_u8Row){
    30b8:	89 81       	ldd	r24, Y+1	; 0x01
    30ba:	28 2f       	mov	r18, r24
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	3c 83       	std	Y+4, r19	; 0x04
    30c0:	2b 83       	std	Y+3, r18	; 0x03
    30c2:	8b 81       	ldd	r24, Y+3	; 0x03
    30c4:	9c 81       	ldd	r25, Y+4	; 0x04
    30c6:	82 30       	cpi	r24, 0x02	; 2
    30c8:	91 05       	cpc	r25, r1
    30ca:	d9 f0       	breq	.+54     	; 0x3102 <H_LCD_void_gotoXY+0x60>
    30cc:	2b 81       	ldd	r18, Y+3	; 0x03
    30ce:	3c 81       	ldd	r19, Y+4	; 0x04
    30d0:	23 30       	cpi	r18, 0x03	; 3
    30d2:	31 05       	cpc	r19, r1
    30d4:	34 f4       	brge	.+12     	; 0x30e2 <H_LCD_void_gotoXY+0x40>
    30d6:	8b 81       	ldd	r24, Y+3	; 0x03
    30d8:	9c 81       	ldd	r25, Y+4	; 0x04
    30da:	81 30       	cpi	r24, 0x01	; 1
    30dc:	91 05       	cpc	r25, r1
    30de:	61 f0       	breq	.+24     	; 0x30f8 <H_LCD_void_gotoXY+0x56>
    30e0:	1e c0       	rjmp	.+60     	; 0x311e <H_LCD_void_gotoXY+0x7c>
    30e2:	2b 81       	ldd	r18, Y+3	; 0x03
    30e4:	3c 81       	ldd	r19, Y+4	; 0x04
    30e6:	23 30       	cpi	r18, 0x03	; 3
    30e8:	31 05       	cpc	r19, r1
    30ea:	81 f0       	breq	.+32     	; 0x310c <H_LCD_void_gotoXY+0x6a>
    30ec:	8b 81       	ldd	r24, Y+3	; 0x03
    30ee:	9c 81       	ldd	r25, Y+4	; 0x04
    30f0:	84 30       	cpi	r24, 0x04	; 4
    30f2:	91 05       	cpc	r25, r1
    30f4:	81 f0       	breq	.+32     	; 0x3116 <H_LCD_void_gotoXY+0x74>
    30f6:	13 c0       	rjmp	.+38     	; 0x311e <H_LCD_void_gotoXY+0x7c>
	case ROW1:
		H_LCD_void_SendCommand(0x80 + copy_u8Col);
    30f8:	8a 81       	ldd	r24, Y+2	; 0x02
    30fa:	80 58       	subi	r24, 0x80	; 128
    30fc:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <H_LCD_void_SendCommand>
    3100:	0e c0       	rjmp	.+28     	; 0x311e <H_LCD_void_gotoXY+0x7c>
		break;
	case ROW2:
		H_LCD_void_SendCommand(0xc0 + copy_u8Col);
    3102:	8a 81       	ldd	r24, Y+2	; 0x02
    3104:	80 54       	subi	r24, 0x40	; 64
    3106:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <H_LCD_void_SendCommand>
    310a:	09 c0       	rjmp	.+18     	; 0x311e <H_LCD_void_gotoXY+0x7c>
		break;
	case ROW3:
		H_LCD_void_SendCommand(0x94 + copy_u8Col);
    310c:	8a 81       	ldd	r24, Y+2	; 0x02
    310e:	8c 56       	subi	r24, 0x6C	; 108
    3110:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <H_LCD_void_SendCommand>
    3114:	04 c0       	rjmp	.+8      	; 0x311e <H_LCD_void_gotoXY+0x7c>
		break;
	case ROW4:
		H_LCD_void_SendCommand(0xd4 + copy_u8Col);
    3116:	8a 81       	ldd	r24, Y+2	; 0x02
    3118:	8c 52       	subi	r24, 0x2C	; 44
    311a:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <H_LCD_void_SendCommand>
		break;
	default:

		break;
	}
}
    311e:	0f 90       	pop	r0
    3120:	0f 90       	pop	r0
    3122:	0f 90       	pop	r0
    3124:	0f 90       	pop	r0
    3126:	cf 91       	pop	r28
    3128:	df 91       	pop	r29
    312a:	08 95       	ret

0000312c <H_LCD_void_sendIntNum>:



void H_LCD_void_sendIntNum(u32 copy_s32Num)
{
    312c:	df 93       	push	r29
    312e:	cf 93       	push	r28
    3130:	cd b7       	in	r28, 0x3d	; 61
    3132:	de b7       	in	r29, 0x3e	; 62
    3134:	2f 97       	sbiw	r28, 0x0f	; 15
    3136:	0f b6       	in	r0, 0x3f	; 63
    3138:	f8 94       	cli
    313a:	de bf       	out	0x3e, r29	; 62
    313c:	0f be       	out	0x3f, r0	; 63
    313e:	cd bf       	out	0x3d, r28	; 61
    3140:	6c 87       	std	Y+12, r22	; 0x0c
    3142:	7d 87       	std	Y+13, r23	; 0x0d
    3144:	8e 87       	std	Y+14, r24	; 0x0e
    3146:	9f 87       	std	Y+15, r25	; 0x0f
//	temp_str[num_of_digits] = '\0';
//	sprintf((u8 *)temp_str, "%i", copy_s32Num);
//	H_LCD_void_SendString(temp_str);

	char buffer[11];  // A 32-bit number, maximum 10 digits
	itoa(copy_s32Num, buffer, 10);  // Convert the number to a string
    3148:	8c 85       	ldd	r24, Y+12	; 0x0c
    314a:	9d 85       	ldd	r25, Y+13	; 0x0d
    314c:	9e 01       	movw	r18, r28
    314e:	2f 5f       	subi	r18, 0xFF	; 255
    3150:	3f 4f       	sbci	r19, 0xFF	; 255
    3152:	b9 01       	movw	r22, r18
    3154:	4a e0       	ldi	r20, 0x0A	; 10
    3156:	50 e0       	ldi	r21, 0x00	; 0
    3158:	0e 94 9b 21 	call	0x4336	; 0x4336 <itoa>
	H_LCD_void_SendString(buffer);
    315c:	ce 01       	movw	r24, r28
    315e:	01 96       	adiw	r24, 0x01	; 1
    3160:	0e 94 30 18 	call	0x3060	; 0x3060 <H_LCD_void_SendString>
}
    3164:	2f 96       	adiw	r28, 0x0f	; 15
    3166:	0f b6       	in	r0, 0x3f	; 63
    3168:	f8 94       	cli
    316a:	de bf       	out	0x3e, r29	; 62
    316c:	0f be       	out	0x3f, r0	; 63
    316e:	cd bf       	out	0x3d, r28	; 61
    3170:	cf 91       	pop	r28
    3172:	df 91       	pop	r29
    3174:	08 95       	ret

00003176 <H_LCD_void_Clear_Display>:



void H_LCD_void_Clear_Display(void)
{
    3176:	df 93       	push	r29
    3178:	cf 93       	push	r28
    317a:	cd b7       	in	r28, 0x3d	; 61
    317c:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_SendCommand(LCD_CLEAR);
    317e:	81 e0       	ldi	r24, 0x01	; 1
    3180:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <H_LCD_void_SendCommand>
}
    3184:	cf 91       	pop	r28
    3186:	df 91       	pop	r29
    3188:	08 95       	ret

0000318a <H_LCD_void_creatCustomChar>:



void H_LCD_void_creatCustomChar(const u8 * ArrPattern,u8 copy_u8charCode)
{
    318a:	df 93       	push	r29
    318c:	cf 93       	push	r28
    318e:	00 d0       	rcall	.+0      	; 0x3190 <H_LCD_void_creatCustomChar+0x6>
    3190:	00 d0       	rcall	.+0      	; 0x3192 <H_LCD_void_creatCustomChar+0x8>
    3192:	cd b7       	in	r28, 0x3d	; 61
    3194:	de b7       	in	r29, 0x3e	; 62
    3196:	9b 83       	std	Y+3, r25	; 0x03
    3198:	8a 83       	std	Y+2, r24	; 0x02
    319a:	6c 83       	std	Y+4, r22	; 0x04
	u8 lcd_counter = 0;
    319c:	19 82       	std	Y+1, r1	; 0x01
	if(NULL != ArrPattern)
    319e:	8a 81       	ldd	r24, Y+2	; 0x02
    31a0:	9b 81       	ldd	r25, Y+3	; 0x03
    31a2:	00 97       	sbiw	r24, 0x00	; 0
    31a4:	b1 f0       	breq	.+44     	; 0x31d2 <H_LCD_void_creatCustomChar+0x48>
	{
		H_LCD_void_SendCommand(LCD_CGRAM_START);
    31a6:	80 e4       	ldi	r24, 0x40	; 64
    31a8:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <H_LCD_void_SendCommand>
		for(lcd_counter = 0; lcd_counter <= 7; ++lcd_counter)
    31ac:	19 82       	std	Y+1, r1	; 0x01
    31ae:	0e c0       	rjmp	.+28     	; 0x31cc <H_LCD_void_creatCustomChar+0x42>
		{
			H_LCD_void_SendData(ArrPattern[lcd_counter]);
    31b0:	89 81       	ldd	r24, Y+1	; 0x01
    31b2:	28 2f       	mov	r18, r24
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	8a 81       	ldd	r24, Y+2	; 0x02
    31b8:	9b 81       	ldd	r25, Y+3	; 0x03
    31ba:	fc 01       	movw	r30, r24
    31bc:	e2 0f       	add	r30, r18
    31be:	f3 1f       	adc	r31, r19
    31c0:	80 81       	ld	r24, Z
    31c2:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <H_LCD_void_SendData>
{
	u8 lcd_counter = 0;
	if(NULL != ArrPattern)
	{
		H_LCD_void_SendCommand(LCD_CGRAM_START);
		for(lcd_counter = 0; lcd_counter <= 7; ++lcd_counter)
    31c6:	89 81       	ldd	r24, Y+1	; 0x01
    31c8:	8f 5f       	subi	r24, 0xFF	; 255
    31ca:	89 83       	std	Y+1, r24	; 0x01
    31cc:	89 81       	ldd	r24, Y+1	; 0x01
    31ce:	88 30       	cpi	r24, 0x08	; 8
    31d0:	78 f3       	brcs	.-34     	; 0x31b0 <H_LCD_void_creatCustomChar+0x26>
		{
			H_LCD_void_SendData(ArrPattern[lcd_counter]);
		}
	}
	else{/* Nothing */}
}
    31d2:	0f 90       	pop	r0
    31d4:	0f 90       	pop	r0
    31d6:	0f 90       	pop	r0
    31d8:	0f 90       	pop	r0
    31da:	cf 91       	pop	r28
    31dc:	df 91       	pop	r29
    31de:	08 95       	ret

000031e0 <H_LCD_void_displayCustomChar>:

void H_LCD_void_displayCustomChar(u8 copy_u8charCode)
{
    31e0:	df 93       	push	r29
    31e2:	cf 93       	push	r28
    31e4:	0f 92       	push	r0
    31e6:	cd b7       	in	r28, 0x3d	; 61
    31e8:	de b7       	in	r29, 0x3e	; 62
    31ea:	89 83       	std	Y+1, r24	; 0x01
	H_LCD_void_SendData(copy_u8charCode);
    31ec:	89 81       	ldd	r24, Y+1	; 0x01
    31ee:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <H_LCD_void_SendData>
}
    31f2:	0f 90       	pop	r0
    31f4:	cf 91       	pop	r28
    31f6:	df 91       	pop	r29
    31f8:	08 95       	ret

000031fa <SevenSeG_voidinit>:
 *      Author: Mohamed Aly
 */
#include "seven_segment.h"

void SevenSeG_voidinit(void)
{
    31fa:	df 93       	push	r29
    31fc:	cf 93       	push	r28
    31fe:	cd b7       	in	r28, 0x3d	; 61
    3200:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(SEGMENT_PIN0_PORT, SEGMENT_PIN0, GPIO_DIRECTION_OUTPUT);
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	60 e0       	ldi	r22, 0x00	; 0
    3206:	41 e0       	ldi	r20, 0x01	; 1
    3208:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(SEGMENT_PIN1_PORT, SEGMENT_PIN1, GPIO_DIRECTION_OUTPUT);
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	61 e0       	ldi	r22, 0x01	; 1
    3210:	41 e0       	ldi	r20, 0x01	; 1
    3212:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(SEGMENT_PIN2_PORT, SEGMENT_PIN2, GPIO_DIRECTION_OUTPUT);
    3216:	81 e0       	ldi	r24, 0x01	; 1
    3218:	62 e0       	ldi	r22, 0x02	; 2
    321a:	41 e0       	ldi	r20, 0x01	; 1
    321c:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(SEGMENT_PIN3_PORT, SEGMENT_PIN3, GPIO_DIRECTION_OUTPUT);
    3220:	81 e0       	ldi	r24, 0x01	; 1
    3222:	64 e0       	ldi	r22, 0x04	; 4
    3224:	41 e0       	ldi	r20, 0x01	; 1
    3226:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_voidSetPinDirection>
}
    322a:	cf 91       	pop	r28
    322c:	df 91       	pop	r29
    322e:	08 95       	ret

00003230 <SevenSeG_voidWriteNum>:

void SevenSeG_voidWriteNum(u8 Copy_u8Number)
{
    3230:	df 93       	push	r29
    3232:	cf 93       	push	r28
    3234:	0f 92       	push	r0
    3236:	cd b7       	in	r28, 0x3d	; 61
    3238:	de b7       	in	r29, 0x3e	; 62
    323a:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPinValue(SEGMENT_PIN0_PORT, SEGMENT_PIN0, ((Copy_u8Number >> 0) & 0x01));
    323c:	89 81       	ldd	r24, Y+1	; 0x01
    323e:	98 2f       	mov	r25, r24
    3240:	91 70       	andi	r25, 0x01	; 1
    3242:	81 e0       	ldi	r24, 0x01	; 1
    3244:	60 e0       	ldi	r22, 0x00	; 0
    3246:	49 2f       	mov	r20, r25
    3248:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(SEGMENT_PIN1_PORT, SEGMENT_PIN1, ((Copy_u8Number >> 1) & 0x01));
    324c:	89 81       	ldd	r24, Y+1	; 0x01
    324e:	86 95       	lsr	r24
    3250:	98 2f       	mov	r25, r24
    3252:	91 70       	andi	r25, 0x01	; 1
    3254:	81 e0       	ldi	r24, 0x01	; 1
    3256:	61 e0       	ldi	r22, 0x01	; 1
    3258:	49 2f       	mov	r20, r25
    325a:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(SEGMENT_PIN2_PORT, SEGMENT_PIN2, ((Copy_u8Number >> 2) & 0x01));
    325e:	89 81       	ldd	r24, Y+1	; 0x01
    3260:	86 95       	lsr	r24
    3262:	86 95       	lsr	r24
    3264:	98 2f       	mov	r25, r24
    3266:	91 70       	andi	r25, 0x01	; 1
    3268:	81 e0       	ldi	r24, 0x01	; 1
    326a:	62 e0       	ldi	r22, 0x02	; 2
    326c:	49 2f       	mov	r20, r25
    326e:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(SEGMENT_PIN3_PORT, SEGMENT_PIN3, ((Copy_u8Number >> 3) & 0x01));
    3272:	89 81       	ldd	r24, Y+1	; 0x01
    3274:	86 95       	lsr	r24
    3276:	86 95       	lsr	r24
    3278:	86 95       	lsr	r24
    327a:	98 2f       	mov	r25, r24
    327c:	91 70       	andi	r25, 0x01	; 1
    327e:	81 e0       	ldi	r24, 0x01	; 1
    3280:	64 e0       	ldi	r22, 0x04	; 4
    3282:	49 2f       	mov	r20, r25
    3284:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>
}
    3288:	0f 90       	pop	r0
    328a:	cf 91       	pop	r28
    328c:	df 91       	pop	r29
    328e:	08 95       	ret

00003290 <RTC_Init>:
static u8 decimal_to_BCD(u8 decimal);
static u8 BCD_to_decimal(u8 bcd);


void RTC_Init(u8 req_speed)
{
    3290:	df 93       	push	r29
    3292:	cf 93       	push	r28
    3294:	00 d0       	rcall	.+0      	; 0x3296 <RTC_Init+0x6>
    3296:	00 d0       	rcall	.+0      	; 0x3298 <RTC_Init+0x8>
    3298:	0f 92       	push	r0
    329a:	cd b7       	in	r28, 0x3d	; 61
    329c:	de b7       	in	r29, 0x3e	; 62
    329e:	8d 83       	std	Y+5, r24	; 0x05
	Error_Status_t ret_status = NO_ERROR;
    32a0:	19 82       	std	Y+1, r1	; 0x01
	i2c_t init_i2c = {.master_or_slave = I2C_MASTER_MODE,
			.frequency = req_speed,
			.prescaler = 0};
    32a2:	1a 82       	std	Y+2, r1	; 0x02
    32a4:	8d 81       	ldd	r24, Y+5	; 0x05
    32a6:	8b 83       	std	Y+3, r24	; 0x03
    32a8:	1c 82       	std	Y+4, r1	; 0x04
	ret_status = I2C_Init(&init_i2c);
    32aa:	ce 01       	movw	r24, r28
    32ac:	02 96       	adiw	r24, 0x02	; 2
    32ae:	0e 94 90 10 	call	0x2120	; 0x2120 <I2C_Init>
    32b2:	89 83       	std	Y+1, r24	; 0x01
}
    32b4:	0f 90       	pop	r0
    32b6:	0f 90       	pop	r0
    32b8:	0f 90       	pop	r0
    32ba:	0f 90       	pop	r0
    32bc:	0f 90       	pop	r0
    32be:	cf 91       	pop	r28
    32c0:	df 91       	pop	r29
    32c2:	08 95       	ret

000032c4 <RTC_SetTime>:


void RTC_SetTime(const RTC_TIME_T *init_time)
{
    32c4:	df 93       	push	r29
    32c6:	cf 93       	push	r28
    32c8:	00 d0       	rcall	.+0      	; 0x32ca <RTC_SetTime+0x6>
    32ca:	00 d0       	rcall	.+0      	; 0x32cc <RTC_SetTime+0x8>
    32cc:	00 d0       	rcall	.+0      	; 0x32ce <RTC_SetTime+0xa>
    32ce:	cd b7       	in	r28, 0x3d	; 61
    32d0:	de b7       	in	r29, 0x3e	; 62
    32d2:	9e 83       	std	Y+6, r25	; 0x06
    32d4:	8d 83       	std	Y+5, r24	; 0x05

	// send stop
	ret_status = I2C_SendStop();
#elif RTC_TIME_SYSTEM == RTC_12HR_SYSTEM

	Error_Status_t ret_status = NO_ERROR;
    32d6:	1c 82       	std	Y+4, r1	; 0x04

	// Convert hours, minutes, and seconds to BCD format
	u8 sec_bcd = decimal_to_BCD(init_time->sec);
    32d8:	ed 81       	ldd	r30, Y+5	; 0x05
    32da:	fe 81       	ldd	r31, Y+6	; 0x06
    32dc:	82 81       	ldd	r24, Z+2	; 0x02
    32de:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <decimal_to_BCD>
    32e2:	8b 83       	std	Y+3, r24	; 0x03
	u8 min_bcd = decimal_to_BCD(init_time->min);
    32e4:	ed 81       	ldd	r30, Y+5	; 0x05
    32e6:	fe 81       	ldd	r31, Y+6	; 0x06
    32e8:	81 81       	ldd	r24, Z+1	; 0x01
    32ea:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <decimal_to_BCD>
    32ee:	8a 83       	std	Y+2, r24	; 0x02
	u8 hour_bcd;

	if((init_time->ampm == PM) && (init_time->hour < 12))
    32f0:	ed 81       	ldd	r30, Y+5	; 0x05
    32f2:	fe 81       	ldd	r31, Y+6	; 0x06
    32f4:	83 81       	ldd	r24, Z+3	; 0x03
    32f6:	81 30       	cpi	r24, 0x01	; 1
    32f8:	69 f4       	brne	.+26     	; 0x3314 <RTC_SetTime+0x50>
    32fa:	ed 81       	ldd	r30, Y+5	; 0x05
    32fc:	fe 81       	ldd	r31, Y+6	; 0x06
    32fe:	80 81       	ld	r24, Z
    3300:	8c 30       	cpi	r24, 0x0C	; 12
    3302:	40 f4       	brcc	.+16     	; 0x3314 <RTC_SetTime+0x50>
	{
		hour_bcd = decimal_to_BCD((init_time->hour + 12));
    3304:	ed 81       	ldd	r30, Y+5	; 0x05
    3306:	fe 81       	ldd	r31, Y+6	; 0x06
    3308:	80 81       	ld	r24, Z
    330a:	84 5f       	subi	r24, 0xF4	; 244
    330c:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <decimal_to_BCD>
    3310:	89 83       	std	Y+1, r24	; 0x01
    3312:	06 c0       	rjmp	.+12     	; 0x3320 <RTC_SetTime+0x5c>
	}
	else
	{
		hour_bcd = decimal_to_BCD(init_time->hour);
    3314:	ed 81       	ldd	r30, Y+5	; 0x05
    3316:	fe 81       	ldd	r31, Y+6	; 0x06
    3318:	80 81       	ld	r24, Z
    331a:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <decimal_to_BCD>
    331e:	89 83       	std	Y+1, r24	; 0x01
	}


	// Send start
	ret_status = I2C_SendStart();
    3320:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <I2C_SendStart>
    3324:	8c 83       	std	Y+4, r24	; 0x04

	// send address
	ret_status = I2C_SendByte(DS1307_ADDRESS_WRITE);
    3326:	80 ed       	ldi	r24, 0xD0	; 208
    3328:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>
    332c:	8c 83       	std	Y+4, r24	; 0x04

	// Send address that wanted to access
	ret_status = I2C_SendByte(0x00);
    332e:	80 e0       	ldi	r24, 0x00	; 0
    3330:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>
    3334:	8c 83       	std	Y+4, r24	; 0x04

	// send second
	ret_status = I2C_SendByte(sec_bcd);
    3336:	8b 81       	ldd	r24, Y+3	; 0x03
    3338:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>
    333c:	8c 83       	std	Y+4, r24	; 0x04

	// send min
	ret_status = I2C_SendByte(min_bcd);
    333e:	8a 81       	ldd	r24, Y+2	; 0x02
    3340:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>
    3344:	8c 83       	std	Y+4, r24	; 0x04

	// send hour
	ret_status = I2C_SendByte(hour_bcd);
    3346:	89 81       	ldd	r24, Y+1	; 0x01
    3348:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>
    334c:	8c 83       	std	Y+4, r24	; 0x04

	// send stop
	ret_status = I2C_SendStop();
    334e:	0e 94 09 11 	call	0x2212	; 0x2212 <I2C_SendStop>
    3352:	8c 83       	std	Y+4, r24	; 0x04

#endif
}
    3354:	26 96       	adiw	r28, 0x06	; 6
    3356:	0f b6       	in	r0, 0x3f	; 63
    3358:	f8 94       	cli
    335a:	de bf       	out	0x3e, r29	; 62
    335c:	0f be       	out	0x3f, r0	; 63
    335e:	cd bf       	out	0x3d, r28	; 61
    3360:	cf 91       	pop	r28
    3362:	df 91       	pop	r29
    3364:	08 95       	ret

00003366 <RTC_SetTime_12h>:

void RTC_SetTime_12h(const RTC_TIME_T *init_time)
{
    3366:	df 93       	push	r29
    3368:	cf 93       	push	r28
    336a:	00 d0       	rcall	.+0      	; 0x336c <RTC_SetTime_12h+0x6>
    336c:	00 d0       	rcall	.+0      	; 0x336e <RTC_SetTime_12h+0x8>
    336e:	00 d0       	rcall	.+0      	; 0x3370 <RTC_SetTime_12h+0xa>
    3370:	cd b7       	in	r28, 0x3d	; 61
    3372:	de b7       	in	r29, 0x3e	; 62
    3374:	9e 83       	std	Y+6, r25	; 0x06
    3376:	8d 83       	std	Y+5, r24	; 0x05
	Error_Status_t ret_status = NO_ERROR;
    3378:	1c 82       	std	Y+4, r1	; 0x04

	// Convert hours, minutes, and seconds to BCD format
	u8 sec_bcd = decimal_to_BCD(init_time->sec);
    337a:	ed 81       	ldd	r30, Y+5	; 0x05
    337c:	fe 81       	ldd	r31, Y+6	; 0x06
    337e:	82 81       	ldd	r24, Z+2	; 0x02
    3380:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <decimal_to_BCD>
    3384:	8b 83       	std	Y+3, r24	; 0x03
	u8 min_bcd = decimal_to_BCD(init_time->min);
    3386:	ed 81       	ldd	r30, Y+5	; 0x05
    3388:	fe 81       	ldd	r31, Y+6	; 0x06
    338a:	81 81       	ldd	r24, Z+1	; 0x01
    338c:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <decimal_to_BCD>
    3390:	8a 83       	std	Y+2, r24	; 0x02
	u8 hour_bcd;

	if((init_time->ampm == PM) && (init_time->hour < 12))
    3392:	ed 81       	ldd	r30, Y+5	; 0x05
    3394:	fe 81       	ldd	r31, Y+6	; 0x06
    3396:	83 81       	ldd	r24, Z+3	; 0x03
    3398:	81 30       	cpi	r24, 0x01	; 1
    339a:	69 f4       	brne	.+26     	; 0x33b6 <RTC_SetTime_12h+0x50>
    339c:	ed 81       	ldd	r30, Y+5	; 0x05
    339e:	fe 81       	ldd	r31, Y+6	; 0x06
    33a0:	80 81       	ld	r24, Z
    33a2:	8c 30       	cpi	r24, 0x0C	; 12
    33a4:	40 f4       	brcc	.+16     	; 0x33b6 <RTC_SetTime_12h+0x50>
	{
		hour_bcd = decimal_to_BCD((init_time->hour + 12));
    33a6:	ed 81       	ldd	r30, Y+5	; 0x05
    33a8:	fe 81       	ldd	r31, Y+6	; 0x06
    33aa:	80 81       	ld	r24, Z
    33ac:	84 5f       	subi	r24, 0xF4	; 244
    33ae:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <decimal_to_BCD>
    33b2:	89 83       	std	Y+1, r24	; 0x01
    33b4:	06 c0       	rjmp	.+12     	; 0x33c2 <RTC_SetTime_12h+0x5c>
	}
	else
	{
		hour_bcd = decimal_to_BCD(init_time->hour);
    33b6:	ed 81       	ldd	r30, Y+5	; 0x05
    33b8:	fe 81       	ldd	r31, Y+6	; 0x06
    33ba:	80 81       	ld	r24, Z
    33bc:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <decimal_to_BCD>
    33c0:	89 83       	std	Y+1, r24	; 0x01
	}


	// Send start
	ret_status = I2C_SendStart();
    33c2:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <I2C_SendStart>
    33c6:	8c 83       	std	Y+4, r24	; 0x04

	// send address
	ret_status = I2C_SendByte(DS1307_ADDRESS_WRITE);
    33c8:	80 ed       	ldi	r24, 0xD0	; 208
    33ca:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>
    33ce:	8c 83       	std	Y+4, r24	; 0x04

	// Send address that wanted to access
	ret_status = I2C_SendByte(0x00);
    33d0:	80 e0       	ldi	r24, 0x00	; 0
    33d2:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>
    33d6:	8c 83       	std	Y+4, r24	; 0x04

	// send second
	ret_status = I2C_SendByte(sec_bcd);
    33d8:	8b 81       	ldd	r24, Y+3	; 0x03
    33da:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>
    33de:	8c 83       	std	Y+4, r24	; 0x04

	// send min
	ret_status = I2C_SendByte(min_bcd);
    33e0:	8a 81       	ldd	r24, Y+2	; 0x02
    33e2:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>
    33e6:	8c 83       	std	Y+4, r24	; 0x04

	// send hour
	ret_status = I2C_SendByte(hour_bcd);
    33e8:	89 81       	ldd	r24, Y+1	; 0x01
    33ea:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>
    33ee:	8c 83       	std	Y+4, r24	; 0x04

	// send stop
	ret_status = I2C_SendStop();
    33f0:	0e 94 09 11 	call	0x2212	; 0x2212 <I2C_SendStop>
    33f4:	8c 83       	std	Y+4, r24	; 0x04
}
    33f6:	26 96       	adiw	r28, 0x06	; 6
    33f8:	0f b6       	in	r0, 0x3f	; 63
    33fa:	f8 94       	cli
    33fc:	de bf       	out	0x3e, r29	; 62
    33fe:	0f be       	out	0x3f, r0	; 63
    3400:	cd bf       	out	0x3d, r28	; 61
    3402:	cf 91       	pop	r28
    3404:	df 91       	pop	r29
    3406:	08 95       	ret

00003408 <RTC_GetTime>:



void RTC_GetTime(RTC_TIME_T *time)
{
    3408:	df 93       	push	r29
    340a:	cf 93       	push	r28
    340c:	00 d0       	rcall	.+0      	; 0x340e <RTC_GetTime+0x6>
    340e:	00 d0       	rcall	.+0      	; 0x3410 <RTC_GetTime+0x8>
    3410:	cd b7       	in	r28, 0x3d	; 61
    3412:	de b7       	in	r29, 0x3e	; 62
    3414:	9b 83       	std	Y+3, r25	; 0x03
    3416:	8a 83       	std	Y+2, r24	; 0x02
	time->min = BCD_to_decimal(time->min);
	time->hour = BCD_to_decimal(time->hour);

#elif RTC_TIME_SYSTEM == RTC_12HR_SYSTEM

	Error_Status_t ret_status = NO_ERROR;
    3418:	19 82       	std	Y+1, r1	; 0x01
	// Send start
	ret_status = I2C_SendStart();
    341a:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <I2C_SendStart>
    341e:	89 83       	std	Y+1, r24	; 0x01
	// send address
	ret_status = I2C_SendByte(DS1307_ADDRESS_WRITE);
    3420:	80 ed       	ldi	r24, 0xD0	; 208
    3422:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>
    3426:	89 83       	std	Y+1, r24	; 0x01
	// Send address that wanted to access
	ret_status = I2C_SendByte(0x00);
    3428:	80 e0       	ldi	r24, 0x00	; 0
    342a:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>
    342e:	89 83       	std	Y+1, r24	; 0x01
	// Send start
	ret_status = I2C_SendStart();
    3430:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <I2C_SendStart>
    3434:	89 83       	std	Y+1, r24	; 0x01
	// send address
	ret_status = I2C_SendByte(DS1307_ADDRESS_READ);
    3436:	81 ed       	ldi	r24, 0xD1	; 209
    3438:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>
    343c:	89 83       	std	Y+1, r24	; 0x01

	// receive time
	ret_status = I2C_ReceiveByte_ACK(&(time->sec));
    343e:	8a 81       	ldd	r24, Y+2	; 0x02
    3440:	9b 81       	ldd	r25, Y+3	; 0x03
    3442:	02 96       	adiw	r24, 0x02	; 2
    3444:	0e 94 19 11 	call	0x2232	; 0x2232 <I2C_ReceiveByte_ACK>
    3448:	89 83       	std	Y+1, r24	; 0x01
	ret_status = I2C_ReceiveByte_ACK(&(time->min));
    344a:	8a 81       	ldd	r24, Y+2	; 0x02
    344c:	9b 81       	ldd	r25, Y+3	; 0x03
    344e:	01 96       	adiw	r24, 0x01	; 1
    3450:	0e 94 19 11 	call	0x2232	; 0x2232 <I2C_ReceiveByte_ACK>
    3454:	89 83       	std	Y+1, r24	; 0x01
	ret_status = I2C_ReceiveByte_NoACK(&(time->hour));
    3456:	8a 81       	ldd	r24, Y+2	; 0x02
    3458:	9b 81       	ldd	r25, Y+3	; 0x03
    345a:	0e 94 40 11 	call	0x2280	; 0x2280 <I2C_ReceiveByte_NoACK>
    345e:	89 83       	std	Y+1, r24	; 0x01

	// Determine AM/PM based on hours
	time->ampm = (time->hour >= 12) ? PM : AM;
    3460:	ea 81       	ldd	r30, Y+2	; 0x02
    3462:	fb 81       	ldd	r31, Y+3	; 0x03
    3464:	80 81       	ld	r24, Z
    3466:	1c 82       	std	Y+4, r1	; 0x04
    3468:	8c 30       	cpi	r24, 0x0C	; 12
    346a:	10 f0       	brcs	.+4      	; 0x3470 <RTC_GetTime+0x68>
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	8c 83       	std	Y+4, r24	; 0x04
    3470:	ea 81       	ldd	r30, Y+2	; 0x02
    3472:	fb 81       	ldd	r31, Y+3	; 0x03
    3474:	8c 81       	ldd	r24, Y+4	; 0x04
    3476:	83 83       	std	Z+3, r24	; 0x03

	// send stop
	ret_status = I2C_SendStop();
    3478:	0e 94 09 11 	call	0x2212	; 0x2212 <I2C_SendStop>
    347c:	89 83       	std	Y+1, r24	; 0x01

	time->sec = BCD_to_decimal(time->sec);
    347e:	ea 81       	ldd	r30, Y+2	; 0x02
    3480:	fb 81       	ldd	r31, Y+3	; 0x03
    3482:	82 81       	ldd	r24, Z+2	; 0x02
    3484:	0e 94 94 1b 	call	0x3728	; 0x3728 <BCD_to_decimal>
    3488:	ea 81       	ldd	r30, Y+2	; 0x02
    348a:	fb 81       	ldd	r31, Y+3	; 0x03
    348c:	82 83       	std	Z+2, r24	; 0x02
	time->min = BCD_to_decimal(time->min);
    348e:	ea 81       	ldd	r30, Y+2	; 0x02
    3490:	fb 81       	ldd	r31, Y+3	; 0x03
    3492:	81 81       	ldd	r24, Z+1	; 0x01
    3494:	0e 94 94 1b 	call	0x3728	; 0x3728 <BCD_to_decimal>
    3498:	ea 81       	ldd	r30, Y+2	; 0x02
    349a:	fb 81       	ldd	r31, Y+3	; 0x03
    349c:	81 83       	std	Z+1, r24	; 0x01
	time->hour = BCD_to_decimal(time->hour);
    349e:	ea 81       	ldd	r30, Y+2	; 0x02
    34a0:	fb 81       	ldd	r31, Y+3	; 0x03
    34a2:	80 81       	ld	r24, Z
    34a4:	0e 94 94 1b 	call	0x3728	; 0x3728 <BCD_to_decimal>
    34a8:	ea 81       	ldd	r30, Y+2	; 0x02
    34aa:	fb 81       	ldd	r31, Y+3	; 0x03
    34ac:	80 83       	st	Z, r24

	// Adjust hours for 12-hour format
	if (time->hour > 12) {
    34ae:	ea 81       	ldd	r30, Y+2	; 0x02
    34b0:	fb 81       	ldd	r31, Y+3	; 0x03
    34b2:	80 81       	ld	r24, Z
    34b4:	8d 30       	cpi	r24, 0x0D	; 13
    34b6:	40 f0       	brcs	.+16     	; 0x34c8 <RTC_GetTime+0xc0>
		time->hour -= 12;
    34b8:	ea 81       	ldd	r30, Y+2	; 0x02
    34ba:	fb 81       	ldd	r31, Y+3	; 0x03
    34bc:	80 81       	ld	r24, Z
    34be:	8c 50       	subi	r24, 0x0C	; 12
    34c0:	ea 81       	ldd	r30, Y+2	; 0x02
    34c2:	fb 81       	ldd	r31, Y+3	; 0x03
    34c4:	80 83       	st	Z, r24
    34c6:	09 c0       	rjmp	.+18     	; 0x34da <RTC_GetTime+0xd2>
	}
	else if (time->hour == 0) {
    34c8:	ea 81       	ldd	r30, Y+2	; 0x02
    34ca:	fb 81       	ldd	r31, Y+3	; 0x03
    34cc:	80 81       	ld	r24, Z
    34ce:	88 23       	and	r24, r24
    34d0:	21 f4       	brne	.+8      	; 0x34da <RTC_GetTime+0xd2>
		time->hour= 12;
    34d2:	ea 81       	ldd	r30, Y+2	; 0x02
    34d4:	fb 81       	ldd	r31, Y+3	; 0x03
    34d6:	8c e0       	ldi	r24, 0x0C	; 12
    34d8:	80 83       	st	Z, r24
	}

#endif
}
    34da:	0f 90       	pop	r0
    34dc:	0f 90       	pop	r0
    34de:	0f 90       	pop	r0
    34e0:	0f 90       	pop	r0
    34e2:	cf 91       	pop	r28
    34e4:	df 91       	pop	r29
    34e6:	08 95       	ret

000034e8 <RTC_GetTime_12h>:


void RTC_GetTime_12h(RTC_TIME_T *time)
{
    34e8:	df 93       	push	r29
    34ea:	cf 93       	push	r28
    34ec:	00 d0       	rcall	.+0      	; 0x34ee <RTC_GetTime_12h+0x6>
    34ee:	00 d0       	rcall	.+0      	; 0x34f0 <RTC_GetTime_12h+0x8>
    34f0:	cd b7       	in	r28, 0x3d	; 61
    34f2:	de b7       	in	r29, 0x3e	; 62
    34f4:	9b 83       	std	Y+3, r25	; 0x03
    34f6:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    34f8:	19 82       	std	Y+1, r1	; 0x01
	// Send start
	ret_status = I2C_SendStart();
    34fa:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <I2C_SendStart>
    34fe:	89 83       	std	Y+1, r24	; 0x01
	// send address
	ret_status = I2C_SendByte(DS1307_ADDRESS_WRITE);
    3500:	80 ed       	ldi	r24, 0xD0	; 208
    3502:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>
    3506:	89 83       	std	Y+1, r24	; 0x01
	// Send address that wanted to access
	ret_status = I2C_SendByte(0x00);
    3508:	80 e0       	ldi	r24, 0x00	; 0
    350a:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>
    350e:	89 83       	std	Y+1, r24	; 0x01
	// Send start
	ret_status = I2C_SendStart();
    3510:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <I2C_SendStart>
    3514:	89 83       	std	Y+1, r24	; 0x01
	// send address
	ret_status = I2C_SendByte(DS1307_ADDRESS_READ);
    3516:	81 ed       	ldi	r24, 0xD1	; 209
    3518:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>
    351c:	89 83       	std	Y+1, r24	; 0x01

	// receive time
	ret_status = I2C_ReceiveByte_ACK(&(time->sec));
    351e:	8a 81       	ldd	r24, Y+2	; 0x02
    3520:	9b 81       	ldd	r25, Y+3	; 0x03
    3522:	02 96       	adiw	r24, 0x02	; 2
    3524:	0e 94 19 11 	call	0x2232	; 0x2232 <I2C_ReceiveByte_ACK>
    3528:	89 83       	std	Y+1, r24	; 0x01
	ret_status = I2C_ReceiveByte_ACK(&(time->min));
    352a:	8a 81       	ldd	r24, Y+2	; 0x02
    352c:	9b 81       	ldd	r25, Y+3	; 0x03
    352e:	01 96       	adiw	r24, 0x01	; 1
    3530:	0e 94 19 11 	call	0x2232	; 0x2232 <I2C_ReceiveByte_ACK>
    3534:	89 83       	std	Y+1, r24	; 0x01
	ret_status = I2C_ReceiveByte_NoACK(&(time->hour));
    3536:	8a 81       	ldd	r24, Y+2	; 0x02
    3538:	9b 81       	ldd	r25, Y+3	; 0x03
    353a:	0e 94 40 11 	call	0x2280	; 0x2280 <I2C_ReceiveByte_NoACK>
    353e:	89 83       	std	Y+1, r24	; 0x01

	// Determine AM/PM based on hours
	time->ampm = (time->hour >= 12) ? PM : AM;
    3540:	ea 81       	ldd	r30, Y+2	; 0x02
    3542:	fb 81       	ldd	r31, Y+3	; 0x03
    3544:	80 81       	ld	r24, Z
    3546:	1c 82       	std	Y+4, r1	; 0x04
    3548:	8c 30       	cpi	r24, 0x0C	; 12
    354a:	10 f0       	brcs	.+4      	; 0x3550 <RTC_GetTime_12h+0x68>
    354c:	81 e0       	ldi	r24, 0x01	; 1
    354e:	8c 83       	std	Y+4, r24	; 0x04
    3550:	ea 81       	ldd	r30, Y+2	; 0x02
    3552:	fb 81       	ldd	r31, Y+3	; 0x03
    3554:	8c 81       	ldd	r24, Y+4	; 0x04
    3556:	83 83       	std	Z+3, r24	; 0x03

	// send stop
	ret_status = I2C_SendStop();
    3558:	0e 94 09 11 	call	0x2212	; 0x2212 <I2C_SendStop>
    355c:	89 83       	std	Y+1, r24	; 0x01

	time->sec = BCD_to_decimal(time->sec);
    355e:	ea 81       	ldd	r30, Y+2	; 0x02
    3560:	fb 81       	ldd	r31, Y+3	; 0x03
    3562:	82 81       	ldd	r24, Z+2	; 0x02
    3564:	0e 94 94 1b 	call	0x3728	; 0x3728 <BCD_to_decimal>
    3568:	ea 81       	ldd	r30, Y+2	; 0x02
    356a:	fb 81       	ldd	r31, Y+3	; 0x03
    356c:	82 83       	std	Z+2, r24	; 0x02
	time->min = BCD_to_decimal(time->min);
    356e:	ea 81       	ldd	r30, Y+2	; 0x02
    3570:	fb 81       	ldd	r31, Y+3	; 0x03
    3572:	81 81       	ldd	r24, Z+1	; 0x01
    3574:	0e 94 94 1b 	call	0x3728	; 0x3728 <BCD_to_decimal>
    3578:	ea 81       	ldd	r30, Y+2	; 0x02
    357a:	fb 81       	ldd	r31, Y+3	; 0x03
    357c:	81 83       	std	Z+1, r24	; 0x01
	time->hour = BCD_to_decimal(time->hour);
    357e:	ea 81       	ldd	r30, Y+2	; 0x02
    3580:	fb 81       	ldd	r31, Y+3	; 0x03
    3582:	80 81       	ld	r24, Z
    3584:	0e 94 94 1b 	call	0x3728	; 0x3728 <BCD_to_decimal>
    3588:	ea 81       	ldd	r30, Y+2	; 0x02
    358a:	fb 81       	ldd	r31, Y+3	; 0x03
    358c:	80 83       	st	Z, r24

	// Adjust hours for 12-hour format
	if (time->hour > 12) {
    358e:	ea 81       	ldd	r30, Y+2	; 0x02
    3590:	fb 81       	ldd	r31, Y+3	; 0x03
    3592:	80 81       	ld	r24, Z
    3594:	8d 30       	cpi	r24, 0x0D	; 13
    3596:	40 f0       	brcs	.+16     	; 0x35a8 <RTC_GetTime_12h+0xc0>
		time->hour -= 12;
    3598:	ea 81       	ldd	r30, Y+2	; 0x02
    359a:	fb 81       	ldd	r31, Y+3	; 0x03
    359c:	80 81       	ld	r24, Z
    359e:	8c 50       	subi	r24, 0x0C	; 12
    35a0:	ea 81       	ldd	r30, Y+2	; 0x02
    35a2:	fb 81       	ldd	r31, Y+3	; 0x03
    35a4:	80 83       	st	Z, r24
    35a6:	09 c0       	rjmp	.+18     	; 0x35ba <RTC_GetTime_12h+0xd2>
	}
	else if (time->hour == 0) {
    35a8:	ea 81       	ldd	r30, Y+2	; 0x02
    35aa:	fb 81       	ldd	r31, Y+3	; 0x03
    35ac:	80 81       	ld	r24, Z
    35ae:	88 23       	and	r24, r24
    35b0:	21 f4       	brne	.+8      	; 0x35ba <RTC_GetTime_12h+0xd2>
		time->hour= 12;
    35b2:	ea 81       	ldd	r30, Y+2	; 0x02
    35b4:	fb 81       	ldd	r31, Y+3	; 0x03
    35b6:	8c e0       	ldi	r24, 0x0C	; 12
    35b8:	80 83       	st	Z, r24
	}
}
    35ba:	0f 90       	pop	r0
    35bc:	0f 90       	pop	r0
    35be:	0f 90       	pop	r0
    35c0:	0f 90       	pop	r0
    35c2:	cf 91       	pop	r28
    35c4:	df 91       	pop	r29
    35c6:	08 95       	ret

000035c8 <RTC_SetDate>:


void RTC_SetDate(const RTC_DATE_T *init_date)
{
    35c8:	df 93       	push	r29
    35ca:	cf 93       	push	r28
    35cc:	00 d0       	rcall	.+0      	; 0x35ce <RTC_SetDate+0x6>
    35ce:	00 d0       	rcall	.+0      	; 0x35d0 <RTC_SetDate+0x8>
    35d0:	00 d0       	rcall	.+0      	; 0x35d2 <RTC_SetDate+0xa>
    35d2:	cd b7       	in	r28, 0x3d	; 61
    35d4:	de b7       	in	r29, 0x3e	; 62
    35d6:	9e 83       	std	Y+6, r25	; 0x06
    35d8:	8d 83       	std	Y+5, r24	; 0x05
	Error_Status_t ret_status = NO_ERROR;
    35da:	1c 82       	std	Y+4, r1	; 0x04
	u8 day_bcd = decimal_to_BCD(init_date->day);
    35dc:	ed 81       	ldd	r30, Y+5	; 0x05
    35de:	fe 81       	ldd	r31, Y+6	; 0x06
    35e0:	82 81       	ldd	r24, Z+2	; 0x02
    35e2:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <decimal_to_BCD>
    35e6:	8b 83       	std	Y+3, r24	; 0x03
	u8 mon_bcd = decimal_to_BCD(init_date->month);
    35e8:	ed 81       	ldd	r30, Y+5	; 0x05
    35ea:	fe 81       	ldd	r31, Y+6	; 0x06
    35ec:	81 81       	ldd	r24, Z+1	; 0x01
    35ee:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <decimal_to_BCD>
    35f2:	8a 83       	std	Y+2, r24	; 0x02
	u8 year_bcd = decimal_to_BCD(init_date->year);
    35f4:	ed 81       	ldd	r30, Y+5	; 0x05
    35f6:	fe 81       	ldd	r31, Y+6	; 0x06
    35f8:	80 81       	ld	r24, Z
    35fa:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <decimal_to_BCD>
    35fe:	89 83       	std	Y+1, r24	; 0x01

	// Send start
	ret_status = I2C_SendStart();
    3600:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <I2C_SendStart>
    3604:	8c 83       	std	Y+4, r24	; 0x04
	// send address
	ret_status = I2C_SendByte(DS1307_ADDRESS_WRITE);
    3606:	80 ed       	ldi	r24, 0xD0	; 208
    3608:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>
    360c:	8c 83       	std	Y+4, r24	; 0x04
	// Send address that wanted to access
	ret_status = I2C_SendByte(0x04);
    360e:	84 e0       	ldi	r24, 0x04	; 4
    3610:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>
    3614:	8c 83       	std	Y+4, r24	; 0x04
	// send day
	ret_status = I2C_SendByte(day_bcd);
    3616:	8b 81       	ldd	r24, Y+3	; 0x03
    3618:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>
    361c:	8c 83       	std	Y+4, r24	; 0x04

	// send month
	ret_status = I2C_SendByte(mon_bcd);
    361e:	8a 81       	ldd	r24, Y+2	; 0x02
    3620:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>
    3624:	8c 83       	std	Y+4, r24	; 0x04

	// send year
	ret_status = I2C_SendByte(year_bcd);
    3626:	89 81       	ldd	r24, Y+1	; 0x01
    3628:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>
    362c:	8c 83       	std	Y+4, r24	; 0x04

	// send stop
	ret_status = I2C_SendStop();
    362e:	0e 94 09 11 	call	0x2212	; 0x2212 <I2C_SendStop>
    3632:	8c 83       	std	Y+4, r24	; 0x04

}
    3634:	26 96       	adiw	r28, 0x06	; 6
    3636:	0f b6       	in	r0, 0x3f	; 63
    3638:	f8 94       	cli
    363a:	de bf       	out	0x3e, r29	; 62
    363c:	0f be       	out	0x3f, r0	; 63
    363e:	cd bf       	out	0x3d, r28	; 61
    3640:	cf 91       	pop	r28
    3642:	df 91       	pop	r29
    3644:	08 95       	ret

00003646 <RTC_GetDate>:


void RTC_GetDate(RTC_DATE_T *date)
{
    3646:	df 93       	push	r29
    3648:	cf 93       	push	r28
    364a:	00 d0       	rcall	.+0      	; 0x364c <RTC_GetDate+0x6>
    364c:	0f 92       	push	r0
    364e:	cd b7       	in	r28, 0x3d	; 61
    3650:	de b7       	in	r29, 0x3e	; 62
    3652:	9b 83       	std	Y+3, r25	; 0x03
    3654:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    3656:	19 82       	std	Y+1, r1	; 0x01
	// Send start
	ret_status = I2C_SendStart();
    3658:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <I2C_SendStart>
    365c:	89 83       	std	Y+1, r24	; 0x01
	// send address
	ret_status = I2C_SendByte(DS1307_ADDRESS_WRITE);
    365e:	80 ed       	ldi	r24, 0xD0	; 208
    3660:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>
    3664:	89 83       	std	Y+1, r24	; 0x01
	// Send address that wanted to access
	ret_status = I2C_SendByte(0x04);
    3666:	84 e0       	ldi	r24, 0x04	; 4
    3668:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>
    366c:	89 83       	std	Y+1, r24	; 0x01
	// Send start
	ret_status = I2C_SendStart();
    366e:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <I2C_SendStart>
    3672:	89 83       	std	Y+1, r24	; 0x01
	// send address
	ret_status = I2C_SendByte(DS1307_ADDRESS_READ);
    3674:	81 ed       	ldi	r24, 0xD1	; 209
    3676:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>
    367a:	89 83       	std	Y+1, r24	; 0x01
	// receive time
	ret_status = I2C_ReceiveByte_ACK(&(date->day));
    367c:	8a 81       	ldd	r24, Y+2	; 0x02
    367e:	9b 81       	ldd	r25, Y+3	; 0x03
    3680:	02 96       	adiw	r24, 0x02	; 2
    3682:	0e 94 19 11 	call	0x2232	; 0x2232 <I2C_ReceiveByte_ACK>
    3686:	89 83       	std	Y+1, r24	; 0x01
	ret_status = I2C_ReceiveByte_ACK(&(date->month));
    3688:	8a 81       	ldd	r24, Y+2	; 0x02
    368a:	9b 81       	ldd	r25, Y+3	; 0x03
    368c:	01 96       	adiw	r24, 0x01	; 1
    368e:	0e 94 19 11 	call	0x2232	; 0x2232 <I2C_ReceiveByte_ACK>
    3692:	89 83       	std	Y+1, r24	; 0x01
	ret_status = I2C_ReceiveByte_NoACK(&(date->year));
    3694:	8a 81       	ldd	r24, Y+2	; 0x02
    3696:	9b 81       	ldd	r25, Y+3	; 0x03
    3698:	0e 94 40 11 	call	0x2280	; 0x2280 <I2C_ReceiveByte_NoACK>
    369c:	89 83       	std	Y+1, r24	; 0x01
	// send stop
	ret_status = I2C_SendStop();
    369e:	0e 94 09 11 	call	0x2212	; 0x2212 <I2C_SendStop>
    36a2:	89 83       	std	Y+1, r24	; 0x01

	date->day = BCD_to_decimal(date->day);
    36a4:	ea 81       	ldd	r30, Y+2	; 0x02
    36a6:	fb 81       	ldd	r31, Y+3	; 0x03
    36a8:	82 81       	ldd	r24, Z+2	; 0x02
    36aa:	0e 94 94 1b 	call	0x3728	; 0x3728 <BCD_to_decimal>
    36ae:	ea 81       	ldd	r30, Y+2	; 0x02
    36b0:	fb 81       	ldd	r31, Y+3	; 0x03
    36b2:	82 83       	std	Z+2, r24	; 0x02
	date->month = BCD_to_decimal(date->month);
    36b4:	ea 81       	ldd	r30, Y+2	; 0x02
    36b6:	fb 81       	ldd	r31, Y+3	; 0x03
    36b8:	81 81       	ldd	r24, Z+1	; 0x01
    36ba:	0e 94 94 1b 	call	0x3728	; 0x3728 <BCD_to_decimal>
    36be:	ea 81       	ldd	r30, Y+2	; 0x02
    36c0:	fb 81       	ldd	r31, Y+3	; 0x03
    36c2:	81 83       	std	Z+1, r24	; 0x01
	date->year = BCD_to_decimal(date->year);
    36c4:	ea 81       	ldd	r30, Y+2	; 0x02
    36c6:	fb 81       	ldd	r31, Y+3	; 0x03
    36c8:	80 81       	ld	r24, Z
    36ca:	0e 94 94 1b 	call	0x3728	; 0x3728 <BCD_to_decimal>
    36ce:	ea 81       	ldd	r30, Y+2	; 0x02
    36d0:	fb 81       	ldd	r31, Y+3	; 0x03
    36d2:	80 83       	st	Z, r24
}
    36d4:	0f 90       	pop	r0
    36d6:	0f 90       	pop	r0
    36d8:	0f 90       	pop	r0
    36da:	cf 91       	pop	r28
    36dc:	df 91       	pop	r29
    36de:	08 95       	ret

000036e0 <decimal_to_BCD>:


/* -------------------------------------------------- Helper functions ----------------------- */
static u8 decimal_to_BCD(u8 decimal)
{
    36e0:	df 93       	push	r29
    36e2:	cf 93       	push	r28
    36e4:	00 d0       	rcall	.+0      	; 0x36e6 <decimal_to_BCD+0x6>
    36e6:	00 d0       	rcall	.+0      	; 0x36e8 <decimal_to_BCD+0x8>
    36e8:	0f 92       	push	r0
    36ea:	cd b7       	in	r28, 0x3d	; 61
    36ec:	de b7       	in	r29, 0x3e	; 62
    36ee:	8c 83       	std	Y+4, r24	; 0x04
	u8 first_digits = (u8)(decimal % 10); // Extract first digit from decimal
    36f0:	8c 81       	ldd	r24, Y+4	; 0x04
    36f2:	9a e0       	ldi	r25, 0x0A	; 10
    36f4:	69 2f       	mov	r22, r25
    36f6:	0e 94 31 21 	call	0x4262	; 0x4262 <__udivmodqi4>
    36fa:	89 2f       	mov	r24, r25
    36fc:	8b 83       	std	Y+3, r24	; 0x03
	u8 seconnd_digits = (u8)(decimal / 10); // Extract second digit from decimal
    36fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3700:	9a e0       	ldi	r25, 0x0A	; 10
    3702:	69 2f       	mov	r22, r25
    3704:	0e 94 31 21 	call	0x4262	; 0x4262 <__udivmodqi4>
    3708:	8a 83       	std	Y+2, r24	; 0x02
	u8 result_num = (seconnd_digits << 4) + first_digits;
    370a:	8a 81       	ldd	r24, Y+2	; 0x02
    370c:	98 2f       	mov	r25, r24
    370e:	92 95       	swap	r25
    3710:	90 7f       	andi	r25, 0xF0	; 240
    3712:	8b 81       	ldd	r24, Y+3	; 0x03
    3714:	89 0f       	add	r24, r25
    3716:	89 83       	std	Y+1, r24	; 0x01
}
    3718:	0f 90       	pop	r0
    371a:	0f 90       	pop	r0
    371c:	0f 90       	pop	r0
    371e:	0f 90       	pop	r0
    3720:	0f 90       	pop	r0
    3722:	cf 91       	pop	r28
    3724:	df 91       	pop	r29
    3726:	08 95       	ret

00003728 <BCD_to_decimal>:

static u8 BCD_to_decimal(u8 bcd)
{
    3728:	df 93       	push	r29
    372a:	cf 93       	push	r28
    372c:	00 d0       	rcall	.+0      	; 0x372e <BCD_to_decimal+0x6>
    372e:	00 d0       	rcall	.+0      	; 0x3730 <BCD_to_decimal+0x8>
    3730:	cd b7       	in	r28, 0x3d	; 61
    3732:	de b7       	in	r29, 0x3e	; 62
    3734:	8c 83       	std	Y+4, r24	; 0x04
	u8 first_digits = bcd & 0x0F;  // Extract the lower 4 bits
    3736:	8c 81       	ldd	r24, Y+4	; 0x04
    3738:	8f 70       	andi	r24, 0x0F	; 15
    373a:	8b 83       	std	Y+3, r24	; 0x03
	u8 second_digits = (bcd >> 4) * 10;  // Extract the higher 4 bits and multiply by 10
    373c:	8c 81       	ldd	r24, Y+4	; 0x04
    373e:	82 95       	swap	r24
    3740:	8f 70       	andi	r24, 0x0F	; 15
    3742:	88 2f       	mov	r24, r24
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	9c 01       	movw	r18, r24
    3748:	22 0f       	add	r18, r18
    374a:	33 1f       	adc	r19, r19
    374c:	c9 01       	movw	r24, r18
    374e:	88 0f       	add	r24, r24
    3750:	99 1f       	adc	r25, r25
    3752:	88 0f       	add	r24, r24
    3754:	99 1f       	adc	r25, r25
    3756:	82 0f       	add	r24, r18
    3758:	93 1f       	adc	r25, r19
    375a:	8a 83       	std	Y+2, r24	; 0x02
	u8 result_num = second_digits + first_digits;
    375c:	9a 81       	ldd	r25, Y+2	; 0x02
    375e:	8b 81       	ldd	r24, Y+3	; 0x03
    3760:	89 0f       	add	r24, r25
    3762:	89 83       	std	Y+1, r24	; 0x01
	return result_num;
    3764:	89 81       	ldd	r24, Y+1	; 0x01
}
    3766:	0f 90       	pop	r0
    3768:	0f 90       	pop	r0
    376a:	0f 90       	pop	r0
    376c:	0f 90       	pop	r0
    376e:	cf 91       	pop	r28
    3770:	df 91       	pop	r29
    3772:	08 95       	ret

00003774 <H_KEYPAD_void_Init>:
static u8 rows_ports[4] = {KEYPAD_R1_PORT, KEYPAD_R2_PORT, KEYPAD_R3_PORT, KEYPAD_R4_PORT};
static u8 cols_ports[4] = {KEYPAD_C1_PORT, KEYPAD_C2_PORT, KEYPAD_C3_PORT, KEYPAD_C4_PORT};


void H_KEYPAD_void_Init(void)
{
    3774:	df 93       	push	r29
    3776:	cf 93       	push	r28
    3778:	cd b7       	in	r28, 0x3d	; 61
    377a:	de b7       	in	r29, 0x3e	; 62
	// initialize rows to be output mode
	DIO_voidSetPinDirection(KEYPAD_R1_PORT, KEYPAD_R1_PIN, GPIO_DIRECTION_OUTPUT);
    377c:	82 e0       	ldi	r24, 0x02	; 2
    377e:	65 e0       	ldi	r22, 0x05	; 5
    3780:	41 e0       	ldi	r20, 0x01	; 1
    3782:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_R2_PORT, KEYPAD_R2_PIN, GPIO_DIRECTION_OUTPUT);
    3786:	82 e0       	ldi	r24, 0x02	; 2
    3788:	64 e0       	ldi	r22, 0x04	; 4
    378a:	41 e0       	ldi	r20, 0x01	; 1
    378c:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_R3_PORT, KEYPAD_R3_PIN, GPIO_DIRECTION_OUTPUT);
    3790:	82 e0       	ldi	r24, 0x02	; 2
    3792:	63 e0       	ldi	r22, 0x03	; 3
    3794:	41 e0       	ldi	r20, 0x01	; 1
    3796:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_R4_PORT, KEYPAD_R4_PIN, GPIO_DIRECTION_OUTPUT);
    379a:	82 e0       	ldi	r24, 0x02	; 2
    379c:	62 e0       	ldi	r22, 0x02	; 2
    379e:	41 e0       	ldi	r20, 0x01	; 1
    37a0:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_voidSetPinDirection>

	// initialize columns to be output mode
	DIO_voidSetPinDirection(KEYPAD_C1_PORT, KEYPAD_R1_PIN, GPIO_DIRECTION_INPUT);
    37a4:	83 e0       	ldi	r24, 0x03	; 3
    37a6:	65 e0       	ldi	r22, 0x05	; 5
    37a8:	40 e0       	ldi	r20, 0x00	; 0
    37aa:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_C2_PORT, KEYPAD_R2_PIN, GPIO_DIRECTION_INPUT);
    37ae:	83 e0       	ldi	r24, 0x03	; 3
    37b0:	64 e0       	ldi	r22, 0x04	; 4
    37b2:	40 e0       	ldi	r20, 0x00	; 0
    37b4:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_C3_PORT, KEYPAD_R3_PIN, GPIO_DIRECTION_INPUT);
    37b8:	83 e0       	ldi	r24, 0x03	; 3
    37ba:	63 e0       	ldi	r22, 0x03	; 3
    37bc:	40 e0       	ldi	r20, 0x00	; 0
    37be:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_C4_PORT, KEYPAD_R4_PIN, GPIO_DIRECTION_INPUT);
    37c2:	83 e0       	ldi	r24, 0x03	; 3
    37c4:	62 e0       	ldi	r22, 0x02	; 2
    37c6:	40 e0       	ldi	r20, 0x00	; 0
    37c8:	0e 94 84 11 	call	0x2308	; 0x2308 <DIO_voidSetPinDirection>
}
    37cc:	cf 91       	pop	r28
    37ce:	df 91       	pop	r29
    37d0:	08 95       	ret

000037d2 <H_KEYPAD_u8_getPressedKey>:

void H_KEYPAD_u8_getPressedKey(u8 * pPressedKey)
{
    37d2:	df 93       	push	r29
    37d4:	cf 93       	push	r28
    37d6:	cd b7       	in	r28, 0x3d	; 61
    37d8:	de b7       	in	r29, 0x3e	; 62
    37da:	64 97       	sbiw	r28, 0x14	; 20
    37dc:	0f b6       	in	r0, 0x3f	; 63
    37de:	f8 94       	cli
    37e0:	de bf       	out	0x3e, r29	; 62
    37e2:	0f be       	out	0x3f, r0	; 63
    37e4:	cd bf       	out	0x3d, r28	; 61
    37e6:	9c 8b       	std	Y+20, r25	; 0x14
    37e8:	8b 8b       	std	Y+19, r24	; 0x13
	u8 l_row_counter = 0;
    37ea:	1a 8a       	std	Y+18, r1	; 0x12
	u8 l_column_counter = 0;
    37ec:	19 8a       	std	Y+17, r1	; 0x11
	u8 l_counter = 0;
    37ee:	18 8a       	std	Y+16, r1	; 0x10
	u8 row_logic = 1;
    37f0:	81 e0       	ldi	r24, 0x01	; 1
    37f2:	8f 87       	std	Y+15, r24	; 0x0f
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
    37f4:	1a 8a       	std	Y+18, r1	; 0x12
    37f6:	d5 c0       	rjmp	.+426    	; 0x39a2 <H_KEYPAD_u8_getPressedKey+0x1d0>
	{
		// Set All pins to be low at first
		for(l_counter = 0; l_counter < KEYPAD_ROWS; l_counter++)
    37f8:	18 8a       	std	Y+16, r1	; 0x10
    37fa:	16 c0       	rjmp	.+44     	; 0x3828 <H_KEYPAD_u8_getPressedKey+0x56>
		{
			DIO_voidSetPinValue(rows_ports[l_counter], rows_pins[l_counter], GPIO_HIGH);
    37fc:	88 89       	ldd	r24, Y+16	; 0x10
    37fe:	88 2f       	mov	r24, r24
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	fc 01       	movw	r30, r24
    3804:	e1 55       	subi	r30, 0x51	; 81
    3806:	ff 4f       	sbci	r31, 0xFF	; 255
    3808:	20 81       	ld	r18, Z
    380a:	88 89       	ldd	r24, Y+16	; 0x10
    380c:	88 2f       	mov	r24, r24
    380e:	90 e0       	ldi	r25, 0x00	; 0
    3810:	fc 01       	movw	r30, r24
    3812:	e9 55       	subi	r30, 0x59	; 89
    3814:	ff 4f       	sbci	r31, 0xFF	; 255
    3816:	90 81       	ld	r25, Z
    3818:	82 2f       	mov	r24, r18
    381a:	69 2f       	mov	r22, r25
    381c:	41 e0       	ldi	r20, 0x01	; 1
    381e:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>
	u8 l_counter = 0;
	u8 row_logic = 1;
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
	{
		// Set All pins to be low at first
		for(l_counter = 0; l_counter < KEYPAD_ROWS; l_counter++)
    3822:	88 89       	ldd	r24, Y+16	; 0x10
    3824:	8f 5f       	subi	r24, 0xFF	; 255
    3826:	88 8b       	std	Y+16, r24	; 0x10
    3828:	88 89       	ldd	r24, Y+16	; 0x10
    382a:	84 30       	cpi	r24, 0x04	; 4
    382c:	38 f3       	brcs	.-50     	; 0x37fc <H_KEYPAD_u8_getPressedKey+0x2a>
		{
			DIO_voidSetPinValue(rows_ports[l_counter], rows_pins[l_counter], GPIO_HIGH);
		}

		DIO_voidSetPinValue(rows_ports[l_row_counter], rows_pins[l_row_counter], GPIO_LOW);
    382e:	8a 89       	ldd	r24, Y+18	; 0x12
    3830:	88 2f       	mov	r24, r24
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	fc 01       	movw	r30, r24
    3836:	e1 55       	subi	r30, 0x51	; 81
    3838:	ff 4f       	sbci	r31, 0xFF	; 255
    383a:	20 81       	ld	r18, Z
    383c:	8a 89       	ldd	r24, Y+18	; 0x12
    383e:	88 2f       	mov	r24, r24
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	fc 01       	movw	r30, r24
    3844:	e9 55       	subi	r30, 0x59	; 89
    3846:	ff 4f       	sbci	r31, 0xFF	; 255
    3848:	90 81       	ld	r25, Z
    384a:	82 2f       	mov	r24, r18
    384c:	69 2f       	mov	r22, r25
    384e:	40 e0       	ldi	r20, 0x00	; 0
    3850:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>
    3854:	80 e0       	ldi	r24, 0x00	; 0
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	a0 e2       	ldi	r26, 0x20	; 32
    385a:	b1 e4       	ldi	r27, 0x41	; 65
    385c:	8b 87       	std	Y+11, r24	; 0x0b
    385e:	9c 87       	std	Y+12, r25	; 0x0c
    3860:	ad 87       	std	Y+13, r26	; 0x0d
    3862:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3864:	6b 85       	ldd	r22, Y+11	; 0x0b
    3866:	7c 85       	ldd	r23, Y+12	; 0x0c
    3868:	8d 85       	ldd	r24, Y+13	; 0x0d
    386a:	9e 85       	ldd	r25, Y+14	; 0x0e
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	4a e7       	ldi	r20, 0x7A	; 122
    3872:	55 e4       	ldi	r21, 0x45	; 69
    3874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3878:	dc 01       	movw	r26, r24
    387a:	cb 01       	movw	r24, r22
    387c:	8f 83       	std	Y+7, r24	; 0x07
    387e:	98 87       	std	Y+8, r25	; 0x08
    3880:	a9 87       	std	Y+9, r26	; 0x09
    3882:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3884:	6f 81       	ldd	r22, Y+7	; 0x07
    3886:	78 85       	ldd	r23, Y+8	; 0x08
    3888:	89 85       	ldd	r24, Y+9	; 0x09
    388a:	9a 85       	ldd	r25, Y+10	; 0x0a
    388c:	20 e0       	ldi	r18, 0x00	; 0
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	40 e8       	ldi	r20, 0x80	; 128
    3892:	5f e3       	ldi	r21, 0x3F	; 63
    3894:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3898:	88 23       	and	r24, r24
    389a:	2c f4       	brge	.+10     	; 0x38a6 <H_KEYPAD_u8_getPressedKey+0xd4>
		__ticks = 1;
    389c:	81 e0       	ldi	r24, 0x01	; 1
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	9e 83       	std	Y+6, r25	; 0x06
    38a2:	8d 83       	std	Y+5, r24	; 0x05
    38a4:	3f c0       	rjmp	.+126    	; 0x3924 <H_KEYPAD_u8_getPressedKey+0x152>
	else if (__tmp > 65535)
    38a6:	6f 81       	ldd	r22, Y+7	; 0x07
    38a8:	78 85       	ldd	r23, Y+8	; 0x08
    38aa:	89 85       	ldd	r24, Y+9	; 0x09
    38ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    38ae:	20 e0       	ldi	r18, 0x00	; 0
    38b0:	3f ef       	ldi	r19, 0xFF	; 255
    38b2:	4f e7       	ldi	r20, 0x7F	; 127
    38b4:	57 e4       	ldi	r21, 0x47	; 71
    38b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38ba:	18 16       	cp	r1, r24
    38bc:	4c f5       	brge	.+82     	; 0x3910 <H_KEYPAD_u8_getPressedKey+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38be:	6b 85       	ldd	r22, Y+11	; 0x0b
    38c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    38c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    38c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    38c6:	20 e0       	ldi	r18, 0x00	; 0
    38c8:	30 e0       	ldi	r19, 0x00	; 0
    38ca:	40 e2       	ldi	r20, 0x20	; 32
    38cc:	51 e4       	ldi	r21, 0x41	; 65
    38ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d2:	dc 01       	movw	r26, r24
    38d4:	cb 01       	movw	r24, r22
    38d6:	bc 01       	movw	r22, r24
    38d8:	cd 01       	movw	r24, r26
    38da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38de:	dc 01       	movw	r26, r24
    38e0:	cb 01       	movw	r24, r22
    38e2:	9e 83       	std	Y+6, r25	; 0x06
    38e4:	8d 83       	std	Y+5, r24	; 0x05
    38e6:	0f c0       	rjmp	.+30     	; 0x3906 <H_KEYPAD_u8_getPressedKey+0x134>
    38e8:	80 e9       	ldi	r24, 0x90	; 144
    38ea:	91 e0       	ldi	r25, 0x01	; 1
    38ec:	9c 83       	std	Y+4, r25	; 0x04
    38ee:	8b 83       	std	Y+3, r24	; 0x03
    38f0:	8b 81       	ldd	r24, Y+3	; 0x03
    38f2:	9c 81       	ldd	r25, Y+4	; 0x04
    38f4:	01 97       	sbiw	r24, 0x01	; 1
    38f6:	f1 f7       	brne	.-4      	; 0x38f4 <H_KEYPAD_u8_getPressedKey+0x122>
    38f8:	9c 83       	std	Y+4, r25	; 0x04
    38fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38fc:	8d 81       	ldd	r24, Y+5	; 0x05
    38fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3900:	01 97       	sbiw	r24, 0x01	; 1
    3902:	9e 83       	std	Y+6, r25	; 0x06
    3904:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3906:	8d 81       	ldd	r24, Y+5	; 0x05
    3908:	9e 81       	ldd	r25, Y+6	; 0x06
    390a:	00 97       	sbiw	r24, 0x00	; 0
    390c:	69 f7       	brne	.-38     	; 0x38e8 <H_KEYPAD_u8_getPressedKey+0x116>
    390e:	14 c0       	rjmp	.+40     	; 0x3938 <H_KEYPAD_u8_getPressedKey+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3910:	6f 81       	ldd	r22, Y+7	; 0x07
    3912:	78 85       	ldd	r23, Y+8	; 0x08
    3914:	89 85       	ldd	r24, Y+9	; 0x09
    3916:	9a 85       	ldd	r25, Y+10	; 0x0a
    3918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    391c:	dc 01       	movw	r26, r24
    391e:	cb 01       	movw	r24, r22
    3920:	9e 83       	std	Y+6, r25	; 0x06
    3922:	8d 83       	std	Y+5, r24	; 0x05
    3924:	8d 81       	ldd	r24, Y+5	; 0x05
    3926:	9e 81       	ldd	r25, Y+6	; 0x06
    3928:	9a 83       	std	Y+2, r25	; 0x02
    392a:	89 83       	std	Y+1, r24	; 0x01
    392c:	89 81       	ldd	r24, Y+1	; 0x01
    392e:	9a 81       	ldd	r25, Y+2	; 0x02
    3930:	01 97       	sbiw	r24, 0x01	; 1
    3932:	f1 f7       	brne	.-4      	; 0x3930 <H_KEYPAD_u8_getPressedKey+0x15e>
    3934:	9a 83       	std	Y+2, r25	; 0x02
    3936:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(10);

		for(l_column_counter = 0; l_column_counter < KEYPAD_COLUMNS; l_column_counter++)
    3938:	19 8a       	std	Y+17, r1	; 0x11
    393a:	2d c0       	rjmp	.+90     	; 0x3996 <H_KEYPAD_u8_getPressedKey+0x1c4>
		{
			row_logic = DIO_u8GetPinValue(cols_ports[l_column_counter], cols_pins[l_column_counter]);
    393c:	89 89       	ldd	r24, Y+17	; 0x11
    393e:	88 2f       	mov	r24, r24
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	fc 01       	movw	r30, r24
    3944:	ed 54       	subi	r30, 0x4D	; 77
    3946:	ff 4f       	sbci	r31, 0xFF	; 255
    3948:	20 81       	ld	r18, Z
    394a:	89 89       	ldd	r24, Y+17	; 0x11
    394c:	88 2f       	mov	r24, r24
    394e:	90 e0       	ldi	r25, 0x00	; 0
    3950:	fc 01       	movw	r30, r24
    3952:	e5 55       	subi	r30, 0x55	; 85
    3954:	ff 4f       	sbci	r31, 0xFF	; 255
    3956:	90 81       	ld	r25, Z
    3958:	82 2f       	mov	r24, r18
    395a:	69 2f       	mov	r22, r25
    395c:	0e 94 72 12 	call	0x24e4	; 0x24e4 <DIO_u8GetPinValue>
    3960:	8f 87       	std	Y+15, r24	; 0x0f

			if(row_logic == GPIO_LOW)
    3962:	8f 85       	ldd	r24, Y+15	; 0x0f
    3964:	88 23       	and	r24, r24
    3966:	a1 f4       	brne	.+40     	; 0x3990 <H_KEYPAD_u8_getPressedKey+0x1be>
			{
				*pPressedKey = btn_values[l_row_counter][l_column_counter];
    3968:	8a 89       	ldd	r24, Y+18	; 0x12
    396a:	48 2f       	mov	r20, r24
    396c:	50 e0       	ldi	r21, 0x00	; 0
    396e:	89 89       	ldd	r24, Y+17	; 0x11
    3970:	28 2f       	mov	r18, r24
    3972:	30 e0       	ldi	r19, 0x00	; 0
    3974:	ca 01       	movw	r24, r20
    3976:	88 0f       	add	r24, r24
    3978:	99 1f       	adc	r25, r25
    397a:	88 0f       	add	r24, r24
    397c:	99 1f       	adc	r25, r25
    397e:	82 0f       	add	r24, r18
    3980:	93 1f       	adc	r25, r19
    3982:	fc 01       	movw	r30, r24
    3984:	e2 54       	subi	r30, 0x42	; 66
    3986:	ff 4f       	sbci	r31, 0xFF	; 255
    3988:	80 81       	ld	r24, Z
    398a:	eb 89       	ldd	r30, Y+19	; 0x13
    398c:	fc 89       	ldd	r31, Y+20	; 0x14
    398e:	80 83       	st	Z, r24

		DIO_voidSetPinValue(rows_ports[l_row_counter], rows_pins[l_row_counter], GPIO_LOW);

		_delay_ms(10);

		for(l_column_counter = 0; l_column_counter < KEYPAD_COLUMNS; l_column_counter++)
    3990:	89 89       	ldd	r24, Y+17	; 0x11
    3992:	8f 5f       	subi	r24, 0xFF	; 255
    3994:	89 8b       	std	Y+17, r24	; 0x11
    3996:	89 89       	ldd	r24, Y+17	; 0x11
    3998:	84 30       	cpi	r24, 0x04	; 4
    399a:	80 f2       	brcs	.-96     	; 0x393c <H_KEYPAD_u8_getPressedKey+0x16a>
{
	u8 l_row_counter = 0;
	u8 l_column_counter = 0;
	u8 l_counter = 0;
	u8 row_logic = 1;
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
    399c:	8a 89       	ldd	r24, Y+18	; 0x12
    399e:	8f 5f       	subi	r24, 0xFF	; 255
    39a0:	8a 8b       	std	Y+18, r24	; 0x12
    39a2:	8a 89       	ldd	r24, Y+18	; 0x12
    39a4:	84 30       	cpi	r24, 0x04	; 4
    39a6:	08 f4       	brcc	.+2      	; 0x39aa <H_KEYPAD_u8_getPressedKey+0x1d8>
    39a8:	27 cf       	rjmp	.-434    	; 0x37f8 <H_KEYPAD_u8_getPressedKey+0x26>
				*pPressedKey = btn_values[l_row_counter][l_column_counter];
			}
			else{/* Nothing */}
		}
	}
}
    39aa:	64 96       	adiw	r28, 0x14	; 20
    39ac:	0f b6       	in	r0, 0x3f	; 63
    39ae:	f8 94       	cli
    39b0:	de bf       	out	0x3e, r29	; 62
    39b2:	0f be       	out	0x3f, r0	; 63
    39b4:	cd bf       	out	0x3d, r28	; 61
    39b6:	cf 91       	pop	r28
    39b8:	df 91       	pop	r29
    39ba:	08 95       	ret

000039bc <keypad_cursor_init>:

/* -------------------------------------------------------------- Additional functions ----------------------------------------- */

// to initialize digits
void keypad_cursor_init(keypad_digit_t *digits_obj)
{
    39bc:	df 93       	push	r29
    39be:	cf 93       	push	r28
    39c0:	00 d0       	rcall	.+0      	; 0x39c2 <keypad_cursor_init+0x6>
    39c2:	0f 92       	push	r0
    39c4:	cd b7       	in	r28, 0x3d	; 61
    39c6:	de b7       	in	r29, 0x3e	; 62
    39c8:	9b 83       	std	Y+3, r25	; 0x03
    39ca:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t l_cursor = 0;
    39cc:	19 82       	std	Y+1, r1	; 0x01
	if(NULL != digits_obj)
    39ce:	8a 81       	ldd	r24, Y+2	; 0x02
    39d0:	9b 81       	ldd	r25, Y+3	; 0x03
    39d2:	00 97       	sbiw	r24, 0x00	; 0
    39d4:	f1 f0       	breq	.+60     	; 0x3a12 <keypad_cursor_init+0x56>
	{
		digits_obj->cursor = 0;
    39d6:	ea 81       	ldd	r30, Y+2	; 0x02
    39d8:	fb 81       	ldd	r31, Y+3	; 0x03
    39da:	12 86       	std	Z+10, r1	; 0x0a
		for(l_cursor = 0; l_cursor < 5; l_cursor++)
    39dc:	19 82       	std	Y+1, r1	; 0x01
    39de:	16 c0       	rjmp	.+44     	; 0x3a0c <keypad_cursor_init+0x50>
		{
			digits_obj->digits[l_cursor] = 0;
    39e0:	89 81       	ldd	r24, Y+1	; 0x01
    39e2:	28 2f       	mov	r18, r24
    39e4:	30 e0       	ldi	r19, 0x00	; 0
    39e6:	8a 81       	ldd	r24, Y+2	; 0x02
    39e8:	9b 81       	ldd	r25, Y+3	; 0x03
    39ea:	fc 01       	movw	r30, r24
    39ec:	e2 0f       	add	r30, r18
    39ee:	f3 1f       	adc	r31, r19
    39f0:	10 82       	st	Z, r1
			digits_obj->pass_digits[l_cursor] = 0;
    39f2:	89 81       	ldd	r24, Y+1	; 0x01
    39f4:	28 2f       	mov	r18, r24
    39f6:	30 e0       	ldi	r19, 0x00	; 0
    39f8:	8a 81       	ldd	r24, Y+2	; 0x02
    39fa:	9b 81       	ldd	r25, Y+3	; 0x03
    39fc:	82 0f       	add	r24, r18
    39fe:	93 1f       	adc	r25, r19
    3a00:	fc 01       	movw	r30, r24
    3a02:	35 96       	adiw	r30, 0x05	; 5
    3a04:	10 82       	st	Z, r1
{
	uint8_t l_cursor = 0;
	if(NULL != digits_obj)
	{
		digits_obj->cursor = 0;
		for(l_cursor = 0; l_cursor < 5; l_cursor++)
    3a06:	89 81       	ldd	r24, Y+1	; 0x01
    3a08:	8f 5f       	subi	r24, 0xFF	; 255
    3a0a:	89 83       	std	Y+1, r24	; 0x01
    3a0c:	89 81       	ldd	r24, Y+1	; 0x01
    3a0e:	85 30       	cpi	r24, 0x05	; 5
    3a10:	38 f3       	brcs	.-50     	; 0x39e0 <keypad_cursor_init+0x24>
		{
			digits_obj->digits[l_cursor] = 0;
			digits_obj->pass_digits[l_cursor] = 0;
		}
	}
}
    3a12:	0f 90       	pop	r0
    3a14:	0f 90       	pop	r0
    3a16:	0f 90       	pop	r0
    3a18:	cf 91       	pop	r28
    3a1a:	df 91       	pop	r29
    3a1c:	08 95       	ret

00003a1e <H_KEYPAD_u8_WriteOnDigits>:


void H_KEYPAD_u8_WriteOnDigits(keypad_digit_t *digits_obj)
{
    3a1e:	df 93       	push	r29
    3a20:	cf 93       	push	r28
    3a22:	cd b7       	in	r28, 0x3d	; 61
    3a24:	de b7       	in	r29, 0x3e	; 62
    3a26:	64 97       	sbiw	r28, 0x14	; 20
    3a28:	0f b6       	in	r0, 0x3f	; 63
    3a2a:	f8 94       	cli
    3a2c:	de bf       	out	0x3e, r29	; 62
    3a2e:	0f be       	out	0x3f, r0	; 63
    3a30:	cd bf       	out	0x3d, r28	; 61
    3a32:	9c 8b       	std	Y+20, r25	; 0x14
    3a34:	8b 8b       	std	Y+19, r24	; 0x13
	u8 l_row_counter = 0;
    3a36:	1a 8a       	std	Y+18, r1	; 0x12
	u8 l_column_counter = 0;
    3a38:	19 8a       	std	Y+17, r1	; 0x11
	u8 l_counter = 0;
    3a3a:	18 8a       	std	Y+16, r1	; 0x10
	u8 row_logic = 1;
    3a3c:	81 e0       	ldi	r24, 0x01	; 1
    3a3e:	8f 87       	std	Y+15, r24	; 0x0f
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
    3a40:	1a 8a       	std	Y+18, r1	; 0x12
    3a42:	1f c1       	rjmp	.+574    	; 0x3c82 <H_KEYPAD_u8_WriteOnDigits+0x264>
	{
		// Set All pins to be low at first
		for(l_counter = 0; l_counter < KEYPAD_ROWS; l_counter++)
    3a44:	18 8a       	std	Y+16, r1	; 0x10
    3a46:	16 c0       	rjmp	.+44     	; 0x3a74 <H_KEYPAD_u8_WriteOnDigits+0x56>
		{
			DIO_voidSetPinValue(rows_ports[l_counter], rows_pins[l_counter], GPIO_HIGH);
    3a48:	88 89       	ldd	r24, Y+16	; 0x10
    3a4a:	88 2f       	mov	r24, r24
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
    3a4e:	fc 01       	movw	r30, r24
    3a50:	e1 55       	subi	r30, 0x51	; 81
    3a52:	ff 4f       	sbci	r31, 0xFF	; 255
    3a54:	20 81       	ld	r18, Z
    3a56:	88 89       	ldd	r24, Y+16	; 0x10
    3a58:	88 2f       	mov	r24, r24
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	fc 01       	movw	r30, r24
    3a5e:	e9 55       	subi	r30, 0x59	; 89
    3a60:	ff 4f       	sbci	r31, 0xFF	; 255
    3a62:	90 81       	ld	r25, Z
    3a64:	82 2f       	mov	r24, r18
    3a66:	69 2f       	mov	r22, r25
    3a68:	41 e0       	ldi	r20, 0x01	; 1
    3a6a:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>
	u8 l_counter = 0;
	u8 row_logic = 1;
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
	{
		// Set All pins to be low at first
		for(l_counter = 0; l_counter < KEYPAD_ROWS; l_counter++)
    3a6e:	88 89       	ldd	r24, Y+16	; 0x10
    3a70:	8f 5f       	subi	r24, 0xFF	; 255
    3a72:	88 8b       	std	Y+16, r24	; 0x10
    3a74:	88 89       	ldd	r24, Y+16	; 0x10
    3a76:	84 30       	cpi	r24, 0x04	; 4
    3a78:	38 f3       	brcs	.-50     	; 0x3a48 <H_KEYPAD_u8_WriteOnDigits+0x2a>
		{
			DIO_voidSetPinValue(rows_ports[l_counter], rows_pins[l_counter], GPIO_HIGH);
		}

		DIO_voidSetPinValue(rows_ports[l_row_counter], rows_pins[l_row_counter], GPIO_LOW);
    3a7a:	8a 89       	ldd	r24, Y+18	; 0x12
    3a7c:	88 2f       	mov	r24, r24
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	fc 01       	movw	r30, r24
    3a82:	e1 55       	subi	r30, 0x51	; 81
    3a84:	ff 4f       	sbci	r31, 0xFF	; 255
    3a86:	20 81       	ld	r18, Z
    3a88:	8a 89       	ldd	r24, Y+18	; 0x12
    3a8a:	88 2f       	mov	r24, r24
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	fc 01       	movw	r30, r24
    3a90:	e9 55       	subi	r30, 0x59	; 89
    3a92:	ff 4f       	sbci	r31, 0xFF	; 255
    3a94:	90 81       	ld	r25, Z
    3a96:	82 2f       	mov	r24, r18
    3a98:	69 2f       	mov	r22, r25
    3a9a:	40 e0       	ldi	r20, 0x00	; 0
    3a9c:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <DIO_voidSetPinValue>
    3aa0:	80 e0       	ldi	r24, 0x00	; 0
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
    3aa4:	a0 ea       	ldi	r26, 0xA0	; 160
    3aa6:	b1 e4       	ldi	r27, 0x41	; 65
    3aa8:	8b 87       	std	Y+11, r24	; 0x0b
    3aaa:	9c 87       	std	Y+12, r25	; 0x0c
    3aac:	ad 87       	std	Y+13, r26	; 0x0d
    3aae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ab0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ab2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ab8:	20 e0       	ldi	r18, 0x00	; 0
    3aba:	30 e0       	ldi	r19, 0x00	; 0
    3abc:	4a e7       	ldi	r20, 0x7A	; 122
    3abe:	55 e4       	ldi	r21, 0x45	; 69
    3ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac4:	dc 01       	movw	r26, r24
    3ac6:	cb 01       	movw	r24, r22
    3ac8:	8f 83       	std	Y+7, r24	; 0x07
    3aca:	98 87       	std	Y+8, r25	; 0x08
    3acc:	a9 87       	std	Y+9, r26	; 0x09
    3ace:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ad0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ad2:	78 85       	ldd	r23, Y+8	; 0x08
    3ad4:	89 85       	ldd	r24, Y+9	; 0x09
    3ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ad8:	20 e0       	ldi	r18, 0x00	; 0
    3ada:	30 e0       	ldi	r19, 0x00	; 0
    3adc:	40 e8       	ldi	r20, 0x80	; 128
    3ade:	5f e3       	ldi	r21, 0x3F	; 63
    3ae0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ae4:	88 23       	and	r24, r24
    3ae6:	2c f4       	brge	.+10     	; 0x3af2 <H_KEYPAD_u8_WriteOnDigits+0xd4>
		__ticks = 1;
    3ae8:	81 e0       	ldi	r24, 0x01	; 1
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	9e 83       	std	Y+6, r25	; 0x06
    3aee:	8d 83       	std	Y+5, r24	; 0x05
    3af0:	3f c0       	rjmp	.+126    	; 0x3b70 <H_KEYPAD_u8_WriteOnDigits+0x152>
	else if (__tmp > 65535)
    3af2:	6f 81       	ldd	r22, Y+7	; 0x07
    3af4:	78 85       	ldd	r23, Y+8	; 0x08
    3af6:	89 85       	ldd	r24, Y+9	; 0x09
    3af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3afa:	20 e0       	ldi	r18, 0x00	; 0
    3afc:	3f ef       	ldi	r19, 0xFF	; 255
    3afe:	4f e7       	ldi	r20, 0x7F	; 127
    3b00:	57 e4       	ldi	r21, 0x47	; 71
    3b02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b06:	18 16       	cp	r1, r24
    3b08:	4c f5       	brge	.+82     	; 0x3b5c <H_KEYPAD_u8_WriteOnDigits+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b10:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b12:	20 e0       	ldi	r18, 0x00	; 0
    3b14:	30 e0       	ldi	r19, 0x00	; 0
    3b16:	40 e2       	ldi	r20, 0x20	; 32
    3b18:	51 e4       	ldi	r21, 0x41	; 65
    3b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b1e:	dc 01       	movw	r26, r24
    3b20:	cb 01       	movw	r24, r22
    3b22:	bc 01       	movw	r22, r24
    3b24:	cd 01       	movw	r24, r26
    3b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b2a:	dc 01       	movw	r26, r24
    3b2c:	cb 01       	movw	r24, r22
    3b2e:	9e 83       	std	Y+6, r25	; 0x06
    3b30:	8d 83       	std	Y+5, r24	; 0x05
    3b32:	0f c0       	rjmp	.+30     	; 0x3b52 <H_KEYPAD_u8_WriteOnDigits+0x134>
    3b34:	80 e9       	ldi	r24, 0x90	; 144
    3b36:	91 e0       	ldi	r25, 0x01	; 1
    3b38:	9c 83       	std	Y+4, r25	; 0x04
    3b3a:	8b 83       	std	Y+3, r24	; 0x03
    3b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b40:	01 97       	sbiw	r24, 0x01	; 1
    3b42:	f1 f7       	brne	.-4      	; 0x3b40 <H_KEYPAD_u8_WriteOnDigits+0x122>
    3b44:	9c 83       	std	Y+4, r25	; 0x04
    3b46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b48:	8d 81       	ldd	r24, Y+5	; 0x05
    3b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b4c:	01 97       	sbiw	r24, 0x01	; 1
    3b4e:	9e 83       	std	Y+6, r25	; 0x06
    3b50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b52:	8d 81       	ldd	r24, Y+5	; 0x05
    3b54:	9e 81       	ldd	r25, Y+6	; 0x06
    3b56:	00 97       	sbiw	r24, 0x00	; 0
    3b58:	69 f7       	brne	.-38     	; 0x3b34 <H_KEYPAD_u8_WriteOnDigits+0x116>
    3b5a:	14 c0       	rjmp	.+40     	; 0x3b84 <H_KEYPAD_u8_WriteOnDigits+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b5c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b5e:	78 85       	ldd	r23, Y+8	; 0x08
    3b60:	89 85       	ldd	r24, Y+9	; 0x09
    3b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b68:	dc 01       	movw	r26, r24
    3b6a:	cb 01       	movw	r24, r22
    3b6c:	9e 83       	std	Y+6, r25	; 0x06
    3b6e:	8d 83       	std	Y+5, r24	; 0x05
    3b70:	8d 81       	ldd	r24, Y+5	; 0x05
    3b72:	9e 81       	ldd	r25, Y+6	; 0x06
    3b74:	9a 83       	std	Y+2, r25	; 0x02
    3b76:	89 83       	std	Y+1, r24	; 0x01
    3b78:	89 81       	ldd	r24, Y+1	; 0x01
    3b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b7c:	01 97       	sbiw	r24, 0x01	; 1
    3b7e:	f1 f7       	brne	.-4      	; 0x3b7c <H_KEYPAD_u8_WriteOnDigits+0x15e>
    3b80:	9a 83       	std	Y+2, r25	; 0x02
    3b82:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(20);

		for(l_column_counter = 0; l_column_counter < KEYPAD_COLUMNS; l_column_counter++)
    3b84:	19 8a       	std	Y+17, r1	; 0x11
    3b86:	76 c0       	rjmp	.+236    	; 0x3c74 <H_KEYPAD_u8_WriteOnDigits+0x256>
		{
			row_logic = DIO_u8GetPinValue(cols_ports[l_column_counter], cols_pins[l_column_counter]);
    3b88:	89 89       	ldd	r24, Y+17	; 0x11
    3b8a:	88 2f       	mov	r24, r24
    3b8c:	90 e0       	ldi	r25, 0x00	; 0
    3b8e:	fc 01       	movw	r30, r24
    3b90:	ed 54       	subi	r30, 0x4D	; 77
    3b92:	ff 4f       	sbci	r31, 0xFF	; 255
    3b94:	20 81       	ld	r18, Z
    3b96:	89 89       	ldd	r24, Y+17	; 0x11
    3b98:	88 2f       	mov	r24, r24
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	fc 01       	movw	r30, r24
    3b9e:	e5 55       	subi	r30, 0x55	; 85
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	90 81       	ld	r25, Z
    3ba4:	82 2f       	mov	r24, r18
    3ba6:	69 2f       	mov	r22, r25
    3ba8:	0e 94 72 12 	call	0x24e4	; 0x24e4 <DIO_u8GetPinValue>
    3bac:	8f 87       	std	Y+15, r24	; 0x0f

			if(row_logic == GPIO_LOW)
    3bae:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bb0:	88 23       	and	r24, r24
    3bb2:	09 f0       	breq	.+2      	; 0x3bb6 <H_KEYPAD_u8_WriteOnDigits+0x198>
    3bb4:	5c c0       	rjmp	.+184    	; 0x3c6e <H_KEYPAD_u8_WriteOnDigits+0x250>
			{
				if(digits_obj->cursor < 4)
    3bb6:	eb 89       	ldd	r30, Y+19	; 0x13
    3bb8:	fc 89       	ldd	r31, Y+20	; 0x14
    3bba:	82 85       	ldd	r24, Z+10	; 0x0a
    3bbc:	84 30       	cpi	r24, 0x04	; 4
    3bbe:	08 f0       	brcs	.+2      	; 0x3bc2 <H_KEYPAD_u8_WriteOnDigits+0x1a4>
    3bc0:	40 c0       	rjmp	.+128    	; 0x3c42 <H_KEYPAD_u8_WriteOnDigits+0x224>
				{
					digits_obj->digits[digits_obj->cursor] = btn_values2[l_row_counter][l_column_counter];
    3bc2:	eb 89       	ldd	r30, Y+19	; 0x13
    3bc4:	fc 89       	ldd	r31, Y+20	; 0x14
    3bc6:	82 85       	ldd	r24, Z+10	; 0x0a
    3bc8:	68 2f       	mov	r22, r24
    3bca:	70 e0       	ldi	r23, 0x00	; 0
    3bcc:	8a 89       	ldd	r24, Y+18	; 0x12
    3bce:	48 2f       	mov	r20, r24
    3bd0:	50 e0       	ldi	r21, 0x00	; 0
    3bd2:	89 89       	ldd	r24, Y+17	; 0x11
    3bd4:	28 2f       	mov	r18, r24
    3bd6:	30 e0       	ldi	r19, 0x00	; 0
    3bd8:	ca 01       	movw	r24, r20
    3bda:	88 0f       	add	r24, r24
    3bdc:	99 1f       	adc	r25, r25
    3bde:	88 0f       	add	r24, r24
    3be0:	99 1f       	adc	r25, r25
    3be2:	82 0f       	add	r24, r18
    3be4:	93 1f       	adc	r25, r19
    3be6:	fc 01       	movw	r30, r24
    3be8:	e2 53       	subi	r30, 0x32	; 50
    3bea:	ff 4f       	sbci	r31, 0xFF	; 255
    3bec:	20 81       	ld	r18, Z
    3bee:	8b 89       	ldd	r24, Y+19	; 0x13
    3bf0:	9c 89       	ldd	r25, Y+20	; 0x14
    3bf2:	fc 01       	movw	r30, r24
    3bf4:	e6 0f       	add	r30, r22
    3bf6:	f7 1f       	adc	r31, r23
    3bf8:	20 83       	st	Z, r18
					digits_obj->pass_digits[digits_obj->cursor] = btn_values2_pass[l_row_counter][l_column_counter];
    3bfa:	eb 89       	ldd	r30, Y+19	; 0x13
    3bfc:	fc 89       	ldd	r31, Y+20	; 0x14
    3bfe:	82 85       	ldd	r24, Z+10	; 0x0a
    3c00:	68 2f       	mov	r22, r24
    3c02:	70 e0       	ldi	r23, 0x00	; 0
    3c04:	8a 89       	ldd	r24, Y+18	; 0x12
    3c06:	48 2f       	mov	r20, r24
    3c08:	50 e0       	ldi	r21, 0x00	; 0
    3c0a:	89 89       	ldd	r24, Y+17	; 0x11
    3c0c:	28 2f       	mov	r18, r24
    3c0e:	30 e0       	ldi	r19, 0x00	; 0
    3c10:	ca 01       	movw	r24, r20
    3c12:	88 0f       	add	r24, r24
    3c14:	99 1f       	adc	r25, r25
    3c16:	88 0f       	add	r24, r24
    3c18:	99 1f       	adc	r25, r25
    3c1a:	82 0f       	add	r24, r18
    3c1c:	93 1f       	adc	r25, r19
    3c1e:	fc 01       	movw	r30, r24
    3c20:	e2 52       	subi	r30, 0x22	; 34
    3c22:	ff 4f       	sbci	r31, 0xFF	; 255
    3c24:	20 81       	ld	r18, Z
    3c26:	8b 89       	ldd	r24, Y+19	; 0x13
    3c28:	9c 89       	ldd	r25, Y+20	; 0x14
    3c2a:	86 0f       	add	r24, r22
    3c2c:	97 1f       	adc	r25, r23
    3c2e:	fc 01       	movw	r30, r24
    3c30:	35 96       	adiw	r30, 0x05	; 5
    3c32:	20 83       	st	Z, r18
					digits_obj->cursor += 1;
    3c34:	eb 89       	ldd	r30, Y+19	; 0x13
    3c36:	fc 89       	ldd	r31, Y+20	; 0x14
    3c38:	82 85       	ldd	r24, Z+10	; 0x0a
    3c3a:	8f 5f       	subi	r24, 0xFF	; 255
    3c3c:	eb 89       	ldd	r30, Y+19	; 0x13
    3c3e:	fc 89       	ldd	r31, Y+20	; 0x14
    3c40:	82 87       	std	Z+10, r24	; 0x0a
				}

				if(btn_values2[l_row_counter][l_column_counter] == '-')
    3c42:	8a 89       	ldd	r24, Y+18	; 0x12
    3c44:	48 2f       	mov	r20, r24
    3c46:	50 e0       	ldi	r21, 0x00	; 0
    3c48:	89 89       	ldd	r24, Y+17	; 0x11
    3c4a:	28 2f       	mov	r18, r24
    3c4c:	30 e0       	ldi	r19, 0x00	; 0
    3c4e:	ca 01       	movw	r24, r20
    3c50:	88 0f       	add	r24, r24
    3c52:	99 1f       	adc	r25, r25
    3c54:	88 0f       	add	r24, r24
    3c56:	99 1f       	adc	r25, r25
    3c58:	82 0f       	add	r24, r18
    3c5a:	93 1f       	adc	r25, r19
    3c5c:	fc 01       	movw	r30, r24
    3c5e:	e2 53       	subi	r30, 0x32	; 50
    3c60:	ff 4f       	sbci	r31, 0xFF	; 255
    3c62:	80 81       	ld	r24, Z
    3c64:	8d 32       	cpi	r24, 0x2D	; 45
    3c66:	19 f4       	brne	.+6      	; 0x3c6e <H_KEYPAD_u8_WriteOnDigits+0x250>
				{
					digits_obj->cursor = 0;
    3c68:	eb 89       	ldd	r30, Y+19	; 0x13
    3c6a:	fc 89       	ldd	r31, Y+20	; 0x14
    3c6c:	12 86       	std	Z+10, r1	; 0x0a

		DIO_voidSetPinValue(rows_ports[l_row_counter], rows_pins[l_row_counter], GPIO_LOW);

		_delay_ms(20);

		for(l_column_counter = 0; l_column_counter < KEYPAD_COLUMNS; l_column_counter++)
    3c6e:	89 89       	ldd	r24, Y+17	; 0x11
    3c70:	8f 5f       	subi	r24, 0xFF	; 255
    3c72:	89 8b       	std	Y+17, r24	; 0x11
    3c74:	89 89       	ldd	r24, Y+17	; 0x11
    3c76:	84 30       	cpi	r24, 0x04	; 4
    3c78:	08 f4       	brcc	.+2      	; 0x3c7c <H_KEYPAD_u8_WriteOnDigits+0x25e>
    3c7a:	86 cf       	rjmp	.-244    	; 0x3b88 <H_KEYPAD_u8_WriteOnDigits+0x16a>
{
	u8 l_row_counter = 0;
	u8 l_column_counter = 0;
	u8 l_counter = 0;
	u8 row_logic = 1;
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
    3c7c:	8a 89       	ldd	r24, Y+18	; 0x12
    3c7e:	8f 5f       	subi	r24, 0xFF	; 255
    3c80:	8a 8b       	std	Y+18, r24	; 0x12
    3c82:	8a 89       	ldd	r24, Y+18	; 0x12
    3c84:	84 30       	cpi	r24, 0x04	; 4
    3c86:	08 f4       	brcc	.+2      	; 0x3c8a <H_KEYPAD_u8_WriteOnDigits+0x26c>
    3c88:	dd ce       	rjmp	.-582    	; 0x3a44 <H_KEYPAD_u8_WriteOnDigits+0x26>

			}
			else{/* Nothing */}
		}
	}
}
    3c8a:	64 96       	adiw	r28, 0x14	; 20
    3c8c:	0f b6       	in	r0, 0x3f	; 63
    3c8e:	f8 94       	cli
    3c90:	de bf       	out	0x3e, r29	; 62
    3c92:	0f be       	out	0x3f, r0	; 63
    3c94:	cd bf       	out	0x3d, r28	; 61
    3c96:	cf 91       	pop	r28
    3c98:	df 91       	pop	r29
    3c9a:	08 95       	ret

00003c9c <EEPROM_Init>:
#include "EEPROM.h"



void EEPROM_Init(u8 req_speed)
{
    3c9c:	df 93       	push	r29
    3c9e:	cf 93       	push	r28
    3ca0:	00 d0       	rcall	.+0      	; 0x3ca2 <EEPROM_Init+0x6>
    3ca2:	00 d0       	rcall	.+0      	; 0x3ca4 <EEPROM_Init+0x8>
    3ca4:	0f 92       	push	r0
    3ca6:	cd b7       	in	r28, 0x3d	; 61
    3ca8:	de b7       	in	r29, 0x3e	; 62
    3caa:	8d 83       	std	Y+5, r24	; 0x05
	Error_Status_t ret_status = NO_ERROR;
    3cac:	19 82       	std	Y+1, r1	; 0x01
	i2c_t init_i2c = {.master_or_slave = I2C_MASTER_MODE,
					  .frequency = req_speed,
					  .prescaler = 0};
    3cae:	1a 82       	std	Y+2, r1	; 0x02
    3cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    3cb2:	8b 83       	std	Y+3, r24	; 0x03
    3cb4:	1c 82       	std	Y+4, r1	; 0x04
	ret_status = I2C_Init(&init_i2c);
    3cb6:	ce 01       	movw	r24, r28
    3cb8:	02 96       	adiw	r24, 0x02	; 2
    3cba:	0e 94 90 10 	call	0x2120	; 0x2120 <I2C_Init>
    3cbe:	89 83       	std	Y+1, r24	; 0x01
}
    3cc0:	0f 90       	pop	r0
    3cc2:	0f 90       	pop	r0
    3cc4:	0f 90       	pop	r0
    3cc6:	0f 90       	pop	r0
    3cc8:	0f 90       	pop	r0
    3cca:	cf 91       	pop	r28
    3ccc:	df 91       	pop	r29
    3cce:	08 95       	ret

00003cd0 <EEPROM_WriteByte>:


void EEPROM_WriteByte(u8 address_in_eeprom, u8 data)
{
    3cd0:	df 93       	push	r29
    3cd2:	cf 93       	push	r28
    3cd4:	00 d0       	rcall	.+0      	; 0x3cd6 <EEPROM_WriteByte+0x6>
    3cd6:	cd b7       	in	r28, 0x3d	; 61
    3cd8:	de b7       	in	r29, 0x3e	; 62
    3cda:	89 83       	std	Y+1, r24	; 0x01
    3cdc:	6a 83       	std	Y+2, r22	; 0x02
	// Send start condition
	I2C_SendStart();
    3cde:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <I2C_SendStart>

	// Send device address with write bit
	I2C_SendByte(EEPROM_DEVICE_ADDRESS_WRITE);
    3ce2:	80 ea       	ldi	r24, 0xA0	; 160
    3ce4:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>

	// Send EEPROM internal address
	I2C_SendByte(address_in_eeprom);
    3ce8:	89 81       	ldd	r24, Y+1	; 0x01
    3cea:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>

	// Send data byte
	I2C_SendByte(data);
    3cee:	8a 81       	ldd	r24, Y+2	; 0x02
    3cf0:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>

	// Send stop condition
	I2C_SendStop();
    3cf4:	0e 94 09 11 	call	0x2212	; 0x2212 <I2C_SendStop>
}
    3cf8:	0f 90       	pop	r0
    3cfa:	0f 90       	pop	r0
    3cfc:	cf 91       	pop	r28
    3cfe:	df 91       	pop	r29
    3d00:	08 95       	ret

00003d02 <EEPROM_ReadByte>:
u8 EEPROM_ReadByte(u8 address_in_eeprom)
{
    3d02:	df 93       	push	r29
    3d04:	cf 93       	push	r28
    3d06:	00 d0       	rcall	.+0      	; 0x3d08 <EEPROM_ReadByte+0x6>
    3d08:	cd b7       	in	r28, 0x3d	; 61
    3d0a:	de b7       	in	r29, 0x3e	; 62
    3d0c:	8a 83       	std	Y+2, r24	; 0x02
	u8 data;

	// Send start condition
	I2C_SendStart();
    3d0e:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <I2C_SendStart>

	// Send device address with write bit
	I2C_SendByte(EEPROM_DEVICE_ADDRESS_WRITE);
    3d12:	80 ea       	ldi	r24, 0xA0	; 160
    3d14:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>

	// Send EEPROM internal address
	I2C_SendByte(address_in_eeprom);
    3d18:	8a 81       	ldd	r24, Y+2	; 0x02
    3d1a:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>

	// Send repeated start condition
	I2C_SendStart();
    3d1e:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <I2C_SendStart>

	// Send device address with read bit
	I2C_SendByte(EEPROM_DEVICE_ADDRESS_READ);
    3d22:	81 ea       	ldi	r24, 0xA1	; 161
    3d24:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>

	// Receive data byte with ACK
	I2C_ReceiveByte_ACK(&data);
    3d28:	ce 01       	movw	r24, r28
    3d2a:	01 96       	adiw	r24, 0x01	; 1
    3d2c:	0e 94 19 11 	call	0x2232	; 0x2232 <I2C_ReceiveByte_ACK>

	// Send stop condition
	I2C_SendStop();
    3d30:	0e 94 09 11 	call	0x2212	; 0x2212 <I2C_SendStop>

	return data;
    3d34:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d36:	0f 90       	pop	r0
    3d38:	0f 90       	pop	r0
    3d3a:	cf 91       	pop	r28
    3d3c:	df 91       	pop	r29
    3d3e:	08 95       	ret

00003d40 <EEPROM_EraseByte>:

void EEPROM_EraseByte(u8 address_in_eeprom)
{
    3d40:	df 93       	push	r29
    3d42:	cf 93       	push	r28
    3d44:	0f 92       	push	r0
    3d46:	cd b7       	in	r28, 0x3d	; 61
    3d48:	de b7       	in	r29, 0x3e	; 62
    3d4a:	89 83       	std	Y+1, r24	; 0x01
    // Send start condition
    I2C_SendStart();
    3d4c:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <I2C_SendStart>

    // Send device address with write bit
    I2C_SendByte(EEPROM_DEVICE_ADDRESS_WRITE);
    3d50:	80 ea       	ldi	r24, 0xA0	; 160
    3d52:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>

    // Send EEPROM internal address
    I2C_SendByte(address_in_eeprom);
    3d56:	89 81       	ldd	r24, Y+1	; 0x01
    3d58:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>

    // Send data byte for erasing (e.g., 0xFF)
    I2C_SendByte(0xFF);
    3d5c:	8f ef       	ldi	r24, 0xFF	; 255
    3d5e:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <I2C_SendByte>

    // Send stop condition
    I2C_SendStop();
    3d62:	0e 94 09 11 	call	0x2212	; 0x2212 <I2C_SendStop>
}
    3d66:	0f 90       	pop	r0
    3d68:	cf 91       	pop	r28
    3d6a:	df 91       	pop	r29
    3d6c:	08 95       	ret

00003d6e <main>:

char buffer1[50];
char buffer2[50];

int main()
{
    3d6e:	df 93       	push	r29
    3d70:	cf 93       	push	r28
    3d72:	cd b7       	in	r28, 0x3d	; 61
    3d74:	de b7       	in	r29, 0x3e	; 62
    3d76:	c0 54       	subi	r28, 0x40	; 64
    3d78:	d0 40       	sbci	r29, 0x00	; 0
    3d7a:	0f b6       	in	r0, 0x3f	; 63
    3d7c:	f8 94       	cli
    3d7e:	de bf       	out	0x3e, r29	; 62
    3d80:	0f be       	out	0x3f, r0	; 63
    3d82:	cd bf       	out	0x3d, r28	; 61
	H_LCD_void_Init();
    3d84:	0e 94 ca 13 	call	0x2794	; 0x2794 <H_LCD_void_Init>
	RTC_Init(I2C_FREQ_100HZ);
    3d88:	80 e0       	ldi	r24, 0x00	; 0
    3d8a:	0e 94 48 19 	call	0x3290	; 0x3290 <RTC_Init>
	RTC_SetTime(&my_time);
    3d8e:	87 eb       	ldi	r24, 0xB7	; 183
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	0e 94 62 19 	call	0x32c4	; 0x32c4 <RTC_SetTime>
	RTC_SetDate(&my_date);
    3d96:	8b eb       	ldi	r24, 0xBB	; 187
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <RTC_SetDate>
    3d9e:	80 e0       	ldi	r24, 0x00	; 0
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	a0 ea       	ldi	r26, 0xA0	; 160
    3da4:	b1 e4       	ldi	r27, 0x41	; 65
    3da6:	8d ab       	std	Y+53, r24	; 0x35
    3da8:	9e ab       	std	Y+54, r25	; 0x36
    3daa:	af ab       	std	Y+55, r26	; 0x37
    3dac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dae:	6d a9       	ldd	r22, Y+53	; 0x35
    3db0:	7e a9       	ldd	r23, Y+54	; 0x36
    3db2:	8f a9       	ldd	r24, Y+55	; 0x37
    3db4:	98 ad       	ldd	r25, Y+56	; 0x38
    3db6:	2f e6       	ldi	r18, 0x6F	; 111
    3db8:	32 e1       	ldi	r19, 0x12	; 18
    3dba:	43 e8       	ldi	r20, 0x83	; 131
    3dbc:	5b e3       	ldi	r21, 0x3B	; 59
    3dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dc2:	dc 01       	movw	r26, r24
    3dc4:	cb 01       	movw	r24, r22
    3dc6:	89 ab       	std	Y+49, r24	; 0x31
    3dc8:	9a ab       	std	Y+50, r25	; 0x32
    3dca:	ab ab       	std	Y+51, r26	; 0x33
    3dcc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3dce:	69 a9       	ldd	r22, Y+49	; 0x31
    3dd0:	7a a9       	ldd	r23, Y+50	; 0x32
    3dd2:	8b a9       	ldd	r24, Y+51	; 0x33
    3dd4:	9c a9       	ldd	r25, Y+52	; 0x34
    3dd6:	20 e0       	ldi	r18, 0x00	; 0
    3dd8:	30 e0       	ldi	r19, 0x00	; 0
    3dda:	40 e8       	ldi	r20, 0x80	; 128
    3ddc:	5f e3       	ldi	r21, 0x3F	; 63
    3dde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3de2:	88 23       	and	r24, r24
    3de4:	2c f4       	brge	.+10     	; 0x3df0 <main+0x82>
		__ticks = 1;
    3de6:	81 e0       	ldi	r24, 0x01	; 1
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	98 ab       	std	Y+48, r25	; 0x30
    3dec:	8f a7       	std	Y+47, r24	; 0x2f
    3dee:	3d c0       	rjmp	.+122    	; 0x3e6a <main+0xfc>
	else if (__tmp > 65535)
    3df0:	69 a9       	ldd	r22, Y+49	; 0x31
    3df2:	7a a9       	ldd	r23, Y+50	; 0x32
    3df4:	8b a9       	ldd	r24, Y+51	; 0x33
    3df6:	9c a9       	ldd	r25, Y+52	; 0x34
    3df8:	20 e0       	ldi	r18, 0x00	; 0
    3dfa:	3f ef       	ldi	r19, 0xFF	; 255
    3dfc:	4f e7       	ldi	r20, 0x7F	; 127
    3dfe:	57 e4       	ldi	r21, 0x47	; 71
    3e00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e04:	18 16       	cp	r1, r24
    3e06:	3c f5       	brge	.+78     	; 0x3e56 <main+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e08:	6d a9       	ldd	r22, Y+53	; 0x35
    3e0a:	7e a9       	ldd	r23, Y+54	; 0x36
    3e0c:	8f a9       	ldd	r24, Y+55	; 0x37
    3e0e:	98 ad       	ldd	r25, Y+56	; 0x38
    3e10:	20 e0       	ldi	r18, 0x00	; 0
    3e12:	30 e0       	ldi	r19, 0x00	; 0
    3e14:	40 e2       	ldi	r20, 0x20	; 32
    3e16:	51 e4       	ldi	r21, 0x41	; 65
    3e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e1c:	dc 01       	movw	r26, r24
    3e1e:	cb 01       	movw	r24, r22
    3e20:	bc 01       	movw	r22, r24
    3e22:	cd 01       	movw	r24, r26
    3e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e28:	dc 01       	movw	r26, r24
    3e2a:	cb 01       	movw	r24, r22
    3e2c:	98 ab       	std	Y+48, r25	; 0x30
    3e2e:	8f a7       	std	Y+47, r24	; 0x2f
    3e30:	0d c0       	rjmp	.+26     	; 0x3e4c <main+0xde>
    3e32:	1e a6       	std	Y+46, r1	; 0x2e
    3e34:	1d a6       	std	Y+45, r1	; 0x2d
    3e36:	8d a5       	ldd	r24, Y+45	; 0x2d
    3e38:	9e a5       	ldd	r25, Y+46	; 0x2e
    3e3a:	01 97       	sbiw	r24, 0x01	; 1
    3e3c:	f1 f7       	brne	.-4      	; 0x3e3a <main+0xcc>
    3e3e:	9e a7       	std	Y+46, r25	; 0x2e
    3e40:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e42:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e44:	98 a9       	ldd	r25, Y+48	; 0x30
    3e46:	01 97       	sbiw	r24, 0x01	; 1
    3e48:	98 ab       	std	Y+48, r25	; 0x30
    3e4a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e4e:	98 a9       	ldd	r25, Y+48	; 0x30
    3e50:	00 97       	sbiw	r24, 0x00	; 0
    3e52:	79 f7       	brne	.-34     	; 0x3e32 <main+0xc4>
    3e54:	14 c0       	rjmp	.+40     	; 0x3e7e <main+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e56:	69 a9       	ldd	r22, Y+49	; 0x31
    3e58:	7a a9       	ldd	r23, Y+50	; 0x32
    3e5a:	8b a9       	ldd	r24, Y+51	; 0x33
    3e5c:	9c a9       	ldd	r25, Y+52	; 0x34
    3e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e62:	dc 01       	movw	r26, r24
    3e64:	cb 01       	movw	r24, r22
    3e66:	98 ab       	std	Y+48, r25	; 0x30
    3e68:	8f a7       	std	Y+47, r24	; 0x2f
    3e6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e6c:	98 a9       	ldd	r25, Y+48	; 0x30
    3e6e:	9c a7       	std	Y+44, r25	; 0x2c
    3e70:	8b a7       	std	Y+43, r24	; 0x2b
    3e72:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e74:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e76:	01 97       	sbiw	r24, 0x01	; 1
    3e78:	f1 f7       	brne	.-4      	; 0x3e76 <main+0x108>
    3e7a:	9c a7       	std	Y+44, r25	; 0x2c
    3e7c:	8b a7       	std	Y+43, r24	; 0x2b

	while (1)
	{
		_delay_ms(20);
		RTC_GetTime(&rec_time);
    3e7e:	89 e3       	ldi	r24, 0x39	; 57
    3e80:	91 e0       	ldi	r25, 0x01	; 1
    3e82:	0e 94 04 1a 	call	0x3408	; 0x3408 <RTC_GetTime>
    3e86:	80 e0       	ldi	r24, 0x00	; 0
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	a0 ea       	ldi	r26, 0xA0	; 160
    3e8c:	b1 e4       	ldi	r27, 0x41	; 65
    3e8e:	8f a3       	std	Y+39, r24	; 0x27
    3e90:	98 a7       	std	Y+40, r25	; 0x28
    3e92:	a9 a7       	std	Y+41, r26	; 0x29
    3e94:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e96:	6f a1       	ldd	r22, Y+39	; 0x27
    3e98:	78 a5       	ldd	r23, Y+40	; 0x28
    3e9a:	89 a5       	ldd	r24, Y+41	; 0x29
    3e9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e9e:	2f e6       	ldi	r18, 0x6F	; 111
    3ea0:	32 e1       	ldi	r19, 0x12	; 18
    3ea2:	43 e8       	ldi	r20, 0x83	; 131
    3ea4:	5b e3       	ldi	r21, 0x3B	; 59
    3ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eaa:	dc 01       	movw	r26, r24
    3eac:	cb 01       	movw	r24, r22
    3eae:	8b a3       	std	Y+35, r24	; 0x23
    3eb0:	9c a3       	std	Y+36, r25	; 0x24
    3eb2:	ad a3       	std	Y+37, r26	; 0x25
    3eb4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3eb6:	6b a1       	ldd	r22, Y+35	; 0x23
    3eb8:	7c a1       	ldd	r23, Y+36	; 0x24
    3eba:	8d a1       	ldd	r24, Y+37	; 0x25
    3ebc:	9e a1       	ldd	r25, Y+38	; 0x26
    3ebe:	20 e0       	ldi	r18, 0x00	; 0
    3ec0:	30 e0       	ldi	r19, 0x00	; 0
    3ec2:	40 e8       	ldi	r20, 0x80	; 128
    3ec4:	5f e3       	ldi	r21, 0x3F	; 63
    3ec6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3eca:	88 23       	and	r24, r24
    3ecc:	2c f4       	brge	.+10     	; 0x3ed8 <main+0x16a>
		__ticks = 1;
    3ece:	81 e0       	ldi	r24, 0x01	; 1
    3ed0:	90 e0       	ldi	r25, 0x00	; 0
    3ed2:	9a a3       	std	Y+34, r25	; 0x22
    3ed4:	89 a3       	std	Y+33, r24	; 0x21
    3ed6:	3d c0       	rjmp	.+122    	; 0x3f52 <main+0x1e4>
	else if (__tmp > 65535)
    3ed8:	6b a1       	ldd	r22, Y+35	; 0x23
    3eda:	7c a1       	ldd	r23, Y+36	; 0x24
    3edc:	8d a1       	ldd	r24, Y+37	; 0x25
    3ede:	9e a1       	ldd	r25, Y+38	; 0x26
    3ee0:	20 e0       	ldi	r18, 0x00	; 0
    3ee2:	3f ef       	ldi	r19, 0xFF	; 255
    3ee4:	4f e7       	ldi	r20, 0x7F	; 127
    3ee6:	57 e4       	ldi	r21, 0x47	; 71
    3ee8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3eec:	18 16       	cp	r1, r24
    3eee:	3c f5       	brge	.+78     	; 0x3f3e <main+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ef0:	6f a1       	ldd	r22, Y+39	; 0x27
    3ef2:	78 a5       	ldd	r23, Y+40	; 0x28
    3ef4:	89 a5       	ldd	r24, Y+41	; 0x29
    3ef6:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ef8:	20 e0       	ldi	r18, 0x00	; 0
    3efa:	30 e0       	ldi	r19, 0x00	; 0
    3efc:	40 e2       	ldi	r20, 0x20	; 32
    3efe:	51 e4       	ldi	r21, 0x41	; 65
    3f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f04:	dc 01       	movw	r26, r24
    3f06:	cb 01       	movw	r24, r22
    3f08:	bc 01       	movw	r22, r24
    3f0a:	cd 01       	movw	r24, r26
    3f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f10:	dc 01       	movw	r26, r24
    3f12:	cb 01       	movw	r24, r22
    3f14:	9a a3       	std	Y+34, r25	; 0x22
    3f16:	89 a3       	std	Y+33, r24	; 0x21
    3f18:	0d c0       	rjmp	.+26     	; 0x3f34 <main+0x1c6>
    3f1a:	18 a2       	std	Y+32, r1	; 0x20
    3f1c:	1f 8e       	std	Y+31, r1	; 0x1f
    3f1e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3f20:	98 a1       	ldd	r25, Y+32	; 0x20
    3f22:	01 97       	sbiw	r24, 0x01	; 1
    3f24:	f1 f7       	brne	.-4      	; 0x3f22 <main+0x1b4>
    3f26:	98 a3       	std	Y+32, r25	; 0x20
    3f28:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f2a:	89 a1       	ldd	r24, Y+33	; 0x21
    3f2c:	9a a1       	ldd	r25, Y+34	; 0x22
    3f2e:	01 97       	sbiw	r24, 0x01	; 1
    3f30:	9a a3       	std	Y+34, r25	; 0x22
    3f32:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f34:	89 a1       	ldd	r24, Y+33	; 0x21
    3f36:	9a a1       	ldd	r25, Y+34	; 0x22
    3f38:	00 97       	sbiw	r24, 0x00	; 0
    3f3a:	79 f7       	brne	.-34     	; 0x3f1a <main+0x1ac>
    3f3c:	14 c0       	rjmp	.+40     	; 0x3f66 <main+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f3e:	6b a1       	ldd	r22, Y+35	; 0x23
    3f40:	7c a1       	ldd	r23, Y+36	; 0x24
    3f42:	8d a1       	ldd	r24, Y+37	; 0x25
    3f44:	9e a1       	ldd	r25, Y+38	; 0x26
    3f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f4a:	dc 01       	movw	r26, r24
    3f4c:	cb 01       	movw	r24, r22
    3f4e:	9a a3       	std	Y+34, r25	; 0x22
    3f50:	89 a3       	std	Y+33, r24	; 0x21
    3f52:	89 a1       	ldd	r24, Y+33	; 0x21
    3f54:	9a a1       	ldd	r25, Y+34	; 0x22
    3f56:	9e 8f       	std	Y+30, r25	; 0x1e
    3f58:	8d 8f       	std	Y+29, r24	; 0x1d
    3f5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f5c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f5e:	01 97       	sbiw	r24, 0x01	; 1
    3f60:	f1 f7       	brne	.-4      	; 0x3f5e <main+0x1f0>
    3f62:	9e 8f       	std	Y+30, r25	; 0x1e
    3f64:	8d 8f       	std	Y+29, r24	; 0x1d
    3f66:	80 e0       	ldi	r24, 0x00	; 0
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	a0 ea       	ldi	r26, 0xA0	; 160
    3f6c:	b1 e4       	ldi	r27, 0x41	; 65
    3f6e:	89 8f       	std	Y+25, r24	; 0x19
    3f70:	9a 8f       	std	Y+26, r25	; 0x1a
    3f72:	ab 8f       	std	Y+27, r26	; 0x1b
    3f74:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f76:	69 8d       	ldd	r22, Y+25	; 0x19
    3f78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f7e:	2f e6       	ldi	r18, 0x6F	; 111
    3f80:	32 e1       	ldi	r19, 0x12	; 18
    3f82:	43 e8       	ldi	r20, 0x83	; 131
    3f84:	5b e3       	ldi	r21, 0x3B	; 59
    3f86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f8a:	dc 01       	movw	r26, r24
    3f8c:	cb 01       	movw	r24, r22
    3f8e:	8d 8b       	std	Y+21, r24	; 0x15
    3f90:	9e 8b       	std	Y+22, r25	; 0x16
    3f92:	af 8b       	std	Y+23, r26	; 0x17
    3f94:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f96:	6d 89       	ldd	r22, Y+21	; 0x15
    3f98:	7e 89       	ldd	r23, Y+22	; 0x16
    3f9a:	8f 89       	ldd	r24, Y+23	; 0x17
    3f9c:	98 8d       	ldd	r25, Y+24	; 0x18
    3f9e:	20 e0       	ldi	r18, 0x00	; 0
    3fa0:	30 e0       	ldi	r19, 0x00	; 0
    3fa2:	40 e8       	ldi	r20, 0x80	; 128
    3fa4:	5f e3       	ldi	r21, 0x3F	; 63
    3fa6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3faa:	88 23       	and	r24, r24
    3fac:	2c f4       	brge	.+10     	; 0x3fb8 <main+0x24a>
		__ticks = 1;
    3fae:	81 e0       	ldi	r24, 0x01	; 1
    3fb0:	90 e0       	ldi	r25, 0x00	; 0
    3fb2:	9c 8b       	std	Y+20, r25	; 0x14
    3fb4:	8b 8b       	std	Y+19, r24	; 0x13
    3fb6:	3d c0       	rjmp	.+122    	; 0x4032 <main+0x2c4>
	else if (__tmp > 65535)
    3fb8:	6d 89       	ldd	r22, Y+21	; 0x15
    3fba:	7e 89       	ldd	r23, Y+22	; 0x16
    3fbc:	8f 89       	ldd	r24, Y+23	; 0x17
    3fbe:	98 8d       	ldd	r25, Y+24	; 0x18
    3fc0:	20 e0       	ldi	r18, 0x00	; 0
    3fc2:	3f ef       	ldi	r19, 0xFF	; 255
    3fc4:	4f e7       	ldi	r20, 0x7F	; 127
    3fc6:	57 e4       	ldi	r21, 0x47	; 71
    3fc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3fcc:	18 16       	cp	r1, r24
    3fce:	3c f5       	brge	.+78     	; 0x401e <main+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fd0:	69 8d       	ldd	r22, Y+25	; 0x19
    3fd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3fd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3fd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fd8:	20 e0       	ldi	r18, 0x00	; 0
    3fda:	30 e0       	ldi	r19, 0x00	; 0
    3fdc:	40 e2       	ldi	r20, 0x20	; 32
    3fde:	51 e4       	ldi	r21, 0x41	; 65
    3fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fe4:	dc 01       	movw	r26, r24
    3fe6:	cb 01       	movw	r24, r22
    3fe8:	bc 01       	movw	r22, r24
    3fea:	cd 01       	movw	r24, r26
    3fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ff0:	dc 01       	movw	r26, r24
    3ff2:	cb 01       	movw	r24, r22
    3ff4:	9c 8b       	std	Y+20, r25	; 0x14
    3ff6:	8b 8b       	std	Y+19, r24	; 0x13
    3ff8:	0d c0       	rjmp	.+26     	; 0x4014 <main+0x2a6>
    3ffa:	1a 8a       	std	Y+18, r1	; 0x12
    3ffc:	19 8a       	std	Y+17, r1	; 0x11
    3ffe:	89 89       	ldd	r24, Y+17	; 0x11
    4000:	9a 89       	ldd	r25, Y+18	; 0x12
    4002:	01 97       	sbiw	r24, 0x01	; 1
    4004:	f1 f7       	brne	.-4      	; 0x4002 <main+0x294>
    4006:	9a 8b       	std	Y+18, r25	; 0x12
    4008:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    400a:	8b 89       	ldd	r24, Y+19	; 0x13
    400c:	9c 89       	ldd	r25, Y+20	; 0x14
    400e:	01 97       	sbiw	r24, 0x01	; 1
    4010:	9c 8b       	std	Y+20, r25	; 0x14
    4012:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4014:	8b 89       	ldd	r24, Y+19	; 0x13
    4016:	9c 89       	ldd	r25, Y+20	; 0x14
    4018:	00 97       	sbiw	r24, 0x00	; 0
    401a:	79 f7       	brne	.-34     	; 0x3ffa <main+0x28c>
    401c:	14 c0       	rjmp	.+40     	; 0x4046 <main+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    401e:	6d 89       	ldd	r22, Y+21	; 0x15
    4020:	7e 89       	ldd	r23, Y+22	; 0x16
    4022:	8f 89       	ldd	r24, Y+23	; 0x17
    4024:	98 8d       	ldd	r25, Y+24	; 0x18
    4026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    402a:	dc 01       	movw	r26, r24
    402c:	cb 01       	movw	r24, r22
    402e:	9c 8b       	std	Y+20, r25	; 0x14
    4030:	8b 8b       	std	Y+19, r24	; 0x13
    4032:	8b 89       	ldd	r24, Y+19	; 0x13
    4034:	9c 89       	ldd	r25, Y+20	; 0x14
    4036:	98 8b       	std	Y+16, r25	; 0x10
    4038:	8f 87       	std	Y+15, r24	; 0x0f
    403a:	8f 85       	ldd	r24, Y+15	; 0x0f
    403c:	98 89       	ldd	r25, Y+16	; 0x10
    403e:	01 97       	sbiw	r24, 0x01	; 1
    4040:	f1 f7       	brne	.-4      	; 0x403e <main+0x2d0>
    4042:	98 8b       	std	Y+16, r25	; 0x10
    4044:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(20);
		_delay_ms(20);
		RTC_GetDate(&rec_date);
    4046:	84 e0       	ldi	r24, 0x04	; 4
    4048:	91 e0       	ldi	r25, 0x01	; 1
    404a:	0e 94 23 1b 	call	0x3646	; 0x3646 <RTC_GetDate>
    404e:	80 e0       	ldi	r24, 0x00	; 0
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	a0 ea       	ldi	r26, 0xA0	; 160
    4054:	b1 e4       	ldi	r27, 0x41	; 65
    4056:	8b 87       	std	Y+11, r24	; 0x0b
    4058:	9c 87       	std	Y+12, r25	; 0x0c
    405a:	ad 87       	std	Y+13, r26	; 0x0d
    405c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    405e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4060:	7c 85       	ldd	r23, Y+12	; 0x0c
    4062:	8d 85       	ldd	r24, Y+13	; 0x0d
    4064:	9e 85       	ldd	r25, Y+14	; 0x0e
    4066:	2f e6       	ldi	r18, 0x6F	; 111
    4068:	32 e1       	ldi	r19, 0x12	; 18
    406a:	43 e8       	ldi	r20, 0x83	; 131
    406c:	5b e3       	ldi	r21, 0x3B	; 59
    406e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4072:	dc 01       	movw	r26, r24
    4074:	cb 01       	movw	r24, r22
    4076:	8f 83       	std	Y+7, r24	; 0x07
    4078:	98 87       	std	Y+8, r25	; 0x08
    407a:	a9 87       	std	Y+9, r26	; 0x09
    407c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    407e:	6f 81       	ldd	r22, Y+7	; 0x07
    4080:	78 85       	ldd	r23, Y+8	; 0x08
    4082:	89 85       	ldd	r24, Y+9	; 0x09
    4084:	9a 85       	ldd	r25, Y+10	; 0x0a
    4086:	20 e0       	ldi	r18, 0x00	; 0
    4088:	30 e0       	ldi	r19, 0x00	; 0
    408a:	40 e8       	ldi	r20, 0x80	; 128
    408c:	5f e3       	ldi	r21, 0x3F	; 63
    408e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4092:	88 23       	and	r24, r24
    4094:	2c f4       	brge	.+10     	; 0x40a0 <main+0x332>
		__ticks = 1;
    4096:	81 e0       	ldi	r24, 0x01	; 1
    4098:	90 e0       	ldi	r25, 0x00	; 0
    409a:	9e 83       	std	Y+6, r25	; 0x06
    409c:	8d 83       	std	Y+5, r24	; 0x05
    409e:	3d c0       	rjmp	.+122    	; 0x411a <main+0x3ac>
	else if (__tmp > 65535)
    40a0:	6f 81       	ldd	r22, Y+7	; 0x07
    40a2:	78 85       	ldd	r23, Y+8	; 0x08
    40a4:	89 85       	ldd	r24, Y+9	; 0x09
    40a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    40a8:	20 e0       	ldi	r18, 0x00	; 0
    40aa:	3f ef       	ldi	r19, 0xFF	; 255
    40ac:	4f e7       	ldi	r20, 0x7F	; 127
    40ae:	57 e4       	ldi	r21, 0x47	; 71
    40b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    40b4:	18 16       	cp	r1, r24
    40b6:	3c f5       	brge	.+78     	; 0x4106 <main+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    40ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    40bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    40be:	9e 85       	ldd	r25, Y+14	; 0x0e
    40c0:	20 e0       	ldi	r18, 0x00	; 0
    40c2:	30 e0       	ldi	r19, 0x00	; 0
    40c4:	40 e2       	ldi	r20, 0x20	; 32
    40c6:	51 e4       	ldi	r21, 0x41	; 65
    40c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40cc:	dc 01       	movw	r26, r24
    40ce:	cb 01       	movw	r24, r22
    40d0:	bc 01       	movw	r22, r24
    40d2:	cd 01       	movw	r24, r26
    40d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40d8:	dc 01       	movw	r26, r24
    40da:	cb 01       	movw	r24, r22
    40dc:	9e 83       	std	Y+6, r25	; 0x06
    40de:	8d 83       	std	Y+5, r24	; 0x05
    40e0:	0d c0       	rjmp	.+26     	; 0x40fc <main+0x38e>
    40e2:	1c 82       	std	Y+4, r1	; 0x04
    40e4:	1b 82       	std	Y+3, r1	; 0x03
    40e6:	8b 81       	ldd	r24, Y+3	; 0x03
    40e8:	9c 81       	ldd	r25, Y+4	; 0x04
    40ea:	01 97       	sbiw	r24, 0x01	; 1
    40ec:	f1 f7       	brne	.-4      	; 0x40ea <main+0x37c>
    40ee:	9c 83       	std	Y+4, r25	; 0x04
    40f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40f2:	8d 81       	ldd	r24, Y+5	; 0x05
    40f4:	9e 81       	ldd	r25, Y+6	; 0x06
    40f6:	01 97       	sbiw	r24, 0x01	; 1
    40f8:	9e 83       	std	Y+6, r25	; 0x06
    40fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40fc:	8d 81       	ldd	r24, Y+5	; 0x05
    40fe:	9e 81       	ldd	r25, Y+6	; 0x06
    4100:	00 97       	sbiw	r24, 0x00	; 0
    4102:	79 f7       	brne	.-34     	; 0x40e2 <main+0x374>
    4104:	14 c0       	rjmp	.+40     	; 0x412e <main+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4106:	6f 81       	ldd	r22, Y+7	; 0x07
    4108:	78 85       	ldd	r23, Y+8	; 0x08
    410a:	89 85       	ldd	r24, Y+9	; 0x09
    410c:	9a 85       	ldd	r25, Y+10	; 0x0a
    410e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4112:	dc 01       	movw	r26, r24
    4114:	cb 01       	movw	r24, r22
    4116:	9e 83       	std	Y+6, r25	; 0x06
    4118:	8d 83       	std	Y+5, r24	; 0x05
    411a:	8d 81       	ldd	r24, Y+5	; 0x05
    411c:	9e 81       	ldd	r25, Y+6	; 0x06
    411e:	9a 83       	std	Y+2, r25	; 0x02
    4120:	89 83       	std	Y+1, r24	; 0x01
    4122:	89 81       	ldd	r24, Y+1	; 0x01
    4124:	9a 81       	ldd	r25, Y+2	; 0x02
    4126:	01 97       	sbiw	r24, 0x01	; 1
    4128:	f1 f7       	brne	.-4      	; 0x4126 <main+0x3b8>
    412a:	9a 83       	std	Y+2, r25	; 0x02
    412c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(20);

		sprintf(buffer1, "%02d:%02d:%02d %s", rec_time.hour, rec_time.min, rec_time.sec, ((rec_time.ampm == 0) ? "AM" : "PM"));
    412e:	80 91 39 01 	lds	r24, 0x0139
    4132:	28 2f       	mov	r18, r24
    4134:	30 e0       	ldi	r19, 0x00	; 0
    4136:	21 96       	adiw	r28, 0x01	; 1
    4138:	3f af       	std	Y+63, r19	; 0x3f
    413a:	2e af       	std	Y+62, r18	; 0x3e
    413c:	21 97       	sbiw	r28, 0x01	; 1
    413e:	80 91 3a 01 	lds	r24, 0x013A
    4142:	28 2f       	mov	r18, r24
    4144:	30 e0       	ldi	r19, 0x00	; 0
    4146:	3e af       	std	Y+62, r19	; 0x3e
    4148:	2d af       	std	Y+61, r18	; 0x3d
    414a:	80 91 3b 01 	lds	r24, 0x013B
    414e:	28 2f       	mov	r18, r24
    4150:	30 e0       	ldi	r19, 0x00	; 0
    4152:	3c af       	std	Y+60, r19	; 0x3c
    4154:	2b af       	std	Y+59, r18	; 0x3b
    4156:	80 91 3c 01 	lds	r24, 0x013C
    415a:	88 23       	and	r24, r24
    415c:	29 f4       	brne	.+10     	; 0x4168 <main+0x3fa>
    415e:	80 e6       	ldi	r24, 0x60	; 96
    4160:	90 e0       	ldi	r25, 0x00	; 0
    4162:	9a af       	std	Y+58, r25	; 0x3a
    4164:	89 af       	std	Y+57, r24	; 0x39
    4166:	04 c0       	rjmp	.+8      	; 0x4170 <main+0x402>
    4168:	23 e6       	ldi	r18, 0x63	; 99
    416a:	30 e0       	ldi	r19, 0x00	; 0
    416c:	3a af       	std	Y+58, r19	; 0x3a
    416e:	29 af       	std	Y+57, r18	; 0x39
    4170:	8d b7       	in	r24, 0x3d	; 61
    4172:	9e b7       	in	r25, 0x3e	; 62
    4174:	0c 97       	sbiw	r24, 0x0c	; 12
    4176:	0f b6       	in	r0, 0x3f	; 63
    4178:	f8 94       	cli
    417a:	9e bf       	out	0x3e, r25	; 62
    417c:	0f be       	out	0x3f, r0	; 63
    417e:	8d bf       	out	0x3d, r24	; 61
    4180:	ed b7       	in	r30, 0x3d	; 61
    4182:	fe b7       	in	r31, 0x3e	; 62
    4184:	31 96       	adiw	r30, 0x01	; 1
    4186:	8e e3       	ldi	r24, 0x3E	; 62
    4188:	91 e0       	ldi	r25, 0x01	; 1
    418a:	91 83       	std	Z+1, r25	; 0x01
    418c:	80 83       	st	Z, r24
    418e:	86 e6       	ldi	r24, 0x66	; 102
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	93 83       	std	Z+3, r25	; 0x03
    4194:	82 83       	std	Z+2, r24	; 0x02
    4196:	21 96       	adiw	r28, 0x01	; 1
    4198:	2e ad       	ldd	r18, Y+62	; 0x3e
    419a:	3f ad       	ldd	r19, Y+63	; 0x3f
    419c:	21 97       	sbiw	r28, 0x01	; 1
    419e:	35 83       	std	Z+5, r19	; 0x05
    41a0:	24 83       	std	Z+4, r18	; 0x04
    41a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    41a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    41a6:	97 83       	std	Z+7, r25	; 0x07
    41a8:	86 83       	std	Z+6, r24	; 0x06
    41aa:	2b ad       	ldd	r18, Y+59	; 0x3b
    41ac:	3c ad       	ldd	r19, Y+60	; 0x3c
    41ae:	31 87       	std	Z+9, r19	; 0x09
    41b0:	20 87       	std	Z+8, r18	; 0x08
    41b2:	89 ad       	ldd	r24, Y+57	; 0x39
    41b4:	9a ad       	ldd	r25, Y+58	; 0x3a
    41b6:	93 87       	std	Z+11, r25	; 0x0b
    41b8:	82 87       	std	Z+10, r24	; 0x0a
    41ba:	0e 94 bc 21 	call	0x4378	; 0x4378 <sprintf>
    41be:	2d b7       	in	r18, 0x3d	; 61
    41c0:	3e b7       	in	r19, 0x3e	; 62
    41c2:	24 5f       	subi	r18, 0xF4	; 244
    41c4:	3f 4f       	sbci	r19, 0xFF	; 255
    41c6:	0f b6       	in	r0, 0x3f	; 63
    41c8:	f8 94       	cli
    41ca:	3e bf       	out	0x3e, r19	; 62
    41cc:	0f be       	out	0x3f, r0	; 63
    41ce:	2d bf       	out	0x3d, r18	; 61
		sprintf(buffer2, "%02d/%02d/%02d", rec_date.month, rec_date.day, rec_date.year);
    41d0:	80 91 05 01 	lds	r24, 0x0105
    41d4:	68 2f       	mov	r22, r24
    41d6:	70 e0       	ldi	r23, 0x00	; 0
    41d8:	80 91 06 01 	lds	r24, 0x0106
    41dc:	28 2f       	mov	r18, r24
    41de:	30 e0       	ldi	r19, 0x00	; 0
    41e0:	80 91 04 01 	lds	r24, 0x0104
    41e4:	48 2f       	mov	r20, r24
    41e6:	50 e0       	ldi	r21, 0x00	; 0
    41e8:	8d b7       	in	r24, 0x3d	; 61
    41ea:	9e b7       	in	r25, 0x3e	; 62
    41ec:	0a 97       	sbiw	r24, 0x0a	; 10
    41ee:	0f b6       	in	r0, 0x3f	; 63
    41f0:	f8 94       	cli
    41f2:	9e bf       	out	0x3e, r25	; 62
    41f4:	0f be       	out	0x3f, r0	; 63
    41f6:	8d bf       	out	0x3d, r24	; 61
    41f8:	ed b7       	in	r30, 0x3d	; 61
    41fa:	fe b7       	in	r31, 0x3e	; 62
    41fc:	31 96       	adiw	r30, 0x01	; 1
    41fe:	87 e0       	ldi	r24, 0x07	; 7
    4200:	91 e0       	ldi	r25, 0x01	; 1
    4202:	91 83       	std	Z+1, r25	; 0x01
    4204:	80 83       	st	Z, r24
    4206:	88 e7       	ldi	r24, 0x78	; 120
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	93 83       	std	Z+3, r25	; 0x03
    420c:	82 83       	std	Z+2, r24	; 0x02
    420e:	75 83       	std	Z+5, r23	; 0x05
    4210:	64 83       	std	Z+4, r22	; 0x04
    4212:	37 83       	std	Z+7, r19	; 0x07
    4214:	26 83       	std	Z+6, r18	; 0x06
    4216:	51 87       	std	Z+9, r21	; 0x09
    4218:	40 87       	std	Z+8, r20	; 0x08
    421a:	0e 94 bc 21 	call	0x4378	; 0x4378 <sprintf>
    421e:	2d b7       	in	r18, 0x3d	; 61
    4220:	3e b7       	in	r19, 0x3e	; 62
    4222:	26 5f       	subi	r18, 0xF6	; 246
    4224:	3f 4f       	sbci	r19, 0xFF	; 255
    4226:	0f b6       	in	r0, 0x3f	; 63
    4228:	f8 94       	cli
    422a:	3e bf       	out	0x3e, r19	; 62
    422c:	0f be       	out	0x3f, r0	; 63
    422e:	2d bf       	out	0x3d, r18	; 61
		H_LCD_void_gotoXY(2, 1);
    4230:	82 e0       	ldi	r24, 0x02	; 2
    4232:	61 e0       	ldi	r22, 0x01	; 1
    4234:	0e 94 51 18 	call	0x30a2	; 0x30a2 <H_LCD_void_gotoXY>
		H_LCD_void_SendString("Time : ");
    4238:	87 e8       	ldi	r24, 0x87	; 135
    423a:	90 e0       	ldi	r25, 0x00	; 0
    423c:	0e 94 30 18 	call	0x3060	; 0x3060 <H_LCD_void_SendString>
		H_LCD_void_SendString(buffer1);
    4240:	8e e3       	ldi	r24, 0x3E	; 62
    4242:	91 e0       	ldi	r25, 0x01	; 1
    4244:	0e 94 30 18 	call	0x3060	; 0x3060 <H_LCD_void_SendString>
		H_LCD_void_gotoXY(3, 1);
    4248:	83 e0       	ldi	r24, 0x03	; 3
    424a:	61 e0       	ldi	r22, 0x01	; 1
    424c:	0e 94 51 18 	call	0x30a2	; 0x30a2 <H_LCD_void_gotoXY>
		H_LCD_void_SendString("Date : ");
    4250:	8f e8       	ldi	r24, 0x8F	; 143
    4252:	90 e0       	ldi	r25, 0x00	; 0
    4254:	0e 94 30 18 	call	0x3060	; 0x3060 <H_LCD_void_SendString>
		H_LCD_void_SendString(buffer2);
    4258:	87 e0       	ldi	r24, 0x07	; 7
    425a:	91 e0       	ldi	r25, 0x01	; 1
    425c:	0e 94 30 18 	call	0x3060	; 0x3060 <H_LCD_void_SendString>
    4260:	9e cd       	rjmp	.-1220   	; 0x3d9e <main+0x30>

00004262 <__udivmodqi4>:
    4262:	99 1b       	sub	r25, r25
    4264:	79 e0       	ldi	r23, 0x09	; 9
    4266:	04 c0       	rjmp	.+8      	; 0x4270 <__udivmodqi4_ep>

00004268 <__udivmodqi4_loop>:
    4268:	99 1f       	adc	r25, r25
    426a:	96 17       	cp	r25, r22
    426c:	08 f0       	brcs	.+2      	; 0x4270 <__udivmodqi4_ep>
    426e:	96 1b       	sub	r25, r22

00004270 <__udivmodqi4_ep>:
    4270:	88 1f       	adc	r24, r24
    4272:	7a 95       	dec	r23
    4274:	c9 f7       	brne	.-14     	; 0x4268 <__udivmodqi4_loop>
    4276:	80 95       	com	r24
    4278:	08 95       	ret

0000427a <__divmodhi4>:
    427a:	97 fb       	bst	r25, 7
    427c:	09 2e       	mov	r0, r25
    427e:	07 26       	eor	r0, r23
    4280:	0a d0       	rcall	.+20     	; 0x4296 <__divmodhi4_neg1>
    4282:	77 fd       	sbrc	r23, 7
    4284:	04 d0       	rcall	.+8      	; 0x428e <__divmodhi4_neg2>
    4286:	0c d0       	rcall	.+24     	; 0x42a0 <__udivmodhi4>
    4288:	06 d0       	rcall	.+12     	; 0x4296 <__divmodhi4_neg1>
    428a:	00 20       	and	r0, r0
    428c:	1a f4       	brpl	.+6      	; 0x4294 <__divmodhi4_exit>

0000428e <__divmodhi4_neg2>:
    428e:	70 95       	com	r23
    4290:	61 95       	neg	r22
    4292:	7f 4f       	sbci	r23, 0xFF	; 255

00004294 <__divmodhi4_exit>:
    4294:	08 95       	ret

00004296 <__divmodhi4_neg1>:
    4296:	f6 f7       	brtc	.-4      	; 0x4294 <__divmodhi4_exit>
    4298:	90 95       	com	r25
    429a:	81 95       	neg	r24
    429c:	9f 4f       	sbci	r25, 0xFF	; 255
    429e:	08 95       	ret

000042a0 <__udivmodhi4>:
    42a0:	aa 1b       	sub	r26, r26
    42a2:	bb 1b       	sub	r27, r27
    42a4:	51 e1       	ldi	r21, 0x11	; 17
    42a6:	07 c0       	rjmp	.+14     	; 0x42b6 <__udivmodhi4_ep>

000042a8 <__udivmodhi4_loop>:
    42a8:	aa 1f       	adc	r26, r26
    42aa:	bb 1f       	adc	r27, r27
    42ac:	a6 17       	cp	r26, r22
    42ae:	b7 07       	cpc	r27, r23
    42b0:	10 f0       	brcs	.+4      	; 0x42b6 <__udivmodhi4_ep>
    42b2:	a6 1b       	sub	r26, r22
    42b4:	b7 0b       	sbc	r27, r23

000042b6 <__udivmodhi4_ep>:
    42b6:	88 1f       	adc	r24, r24
    42b8:	99 1f       	adc	r25, r25
    42ba:	5a 95       	dec	r21
    42bc:	a9 f7       	brne	.-22     	; 0x42a8 <__udivmodhi4_loop>
    42be:	80 95       	com	r24
    42c0:	90 95       	com	r25
    42c2:	bc 01       	movw	r22, r24
    42c4:	cd 01       	movw	r24, r26
    42c6:	08 95       	ret

000042c8 <__prologue_saves__>:
    42c8:	2f 92       	push	r2
    42ca:	3f 92       	push	r3
    42cc:	4f 92       	push	r4
    42ce:	5f 92       	push	r5
    42d0:	6f 92       	push	r6
    42d2:	7f 92       	push	r7
    42d4:	8f 92       	push	r8
    42d6:	9f 92       	push	r9
    42d8:	af 92       	push	r10
    42da:	bf 92       	push	r11
    42dc:	cf 92       	push	r12
    42de:	df 92       	push	r13
    42e0:	ef 92       	push	r14
    42e2:	ff 92       	push	r15
    42e4:	0f 93       	push	r16
    42e6:	1f 93       	push	r17
    42e8:	cf 93       	push	r28
    42ea:	df 93       	push	r29
    42ec:	cd b7       	in	r28, 0x3d	; 61
    42ee:	de b7       	in	r29, 0x3e	; 62
    42f0:	ca 1b       	sub	r28, r26
    42f2:	db 0b       	sbc	r29, r27
    42f4:	0f b6       	in	r0, 0x3f	; 63
    42f6:	f8 94       	cli
    42f8:	de bf       	out	0x3e, r29	; 62
    42fa:	0f be       	out	0x3f, r0	; 63
    42fc:	cd bf       	out	0x3d, r28	; 61
    42fe:	09 94       	ijmp

00004300 <__epilogue_restores__>:
    4300:	2a 88       	ldd	r2, Y+18	; 0x12
    4302:	39 88       	ldd	r3, Y+17	; 0x11
    4304:	48 88       	ldd	r4, Y+16	; 0x10
    4306:	5f 84       	ldd	r5, Y+15	; 0x0f
    4308:	6e 84       	ldd	r6, Y+14	; 0x0e
    430a:	7d 84       	ldd	r7, Y+13	; 0x0d
    430c:	8c 84       	ldd	r8, Y+12	; 0x0c
    430e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4310:	aa 84       	ldd	r10, Y+10	; 0x0a
    4312:	b9 84       	ldd	r11, Y+9	; 0x09
    4314:	c8 84       	ldd	r12, Y+8	; 0x08
    4316:	df 80       	ldd	r13, Y+7	; 0x07
    4318:	ee 80       	ldd	r14, Y+6	; 0x06
    431a:	fd 80       	ldd	r15, Y+5	; 0x05
    431c:	0c 81       	ldd	r16, Y+4	; 0x04
    431e:	1b 81       	ldd	r17, Y+3	; 0x03
    4320:	aa 81       	ldd	r26, Y+2	; 0x02
    4322:	b9 81       	ldd	r27, Y+1	; 0x01
    4324:	ce 0f       	add	r28, r30
    4326:	d1 1d       	adc	r29, r1
    4328:	0f b6       	in	r0, 0x3f	; 63
    432a:	f8 94       	cli
    432c:	de bf       	out	0x3e, r29	; 62
    432e:	0f be       	out	0x3f, r0	; 63
    4330:	cd bf       	out	0x3d, r28	; 61
    4332:	ed 01       	movw	r28, r26
    4334:	08 95       	ret

00004336 <itoa>:
    4336:	fb 01       	movw	r30, r22
    4338:	9f 01       	movw	r18, r30
    433a:	e8 94       	clt
    433c:	42 30       	cpi	r20, 0x02	; 2
    433e:	c4 f0       	brlt	.+48     	; 0x4370 <itoa+0x3a>
    4340:	45 32       	cpi	r20, 0x25	; 37
    4342:	b4 f4       	brge	.+44     	; 0x4370 <itoa+0x3a>
    4344:	4a 30       	cpi	r20, 0x0A	; 10
    4346:	29 f4       	brne	.+10     	; 0x4352 <itoa+0x1c>
    4348:	97 fb       	bst	r25, 7
    434a:	1e f4       	brtc	.+6      	; 0x4352 <itoa+0x1c>
    434c:	90 95       	com	r25
    434e:	81 95       	neg	r24
    4350:	9f 4f       	sbci	r25, 0xFF	; 255
    4352:	64 2f       	mov	r22, r20
    4354:	77 27       	eor	r23, r23
    4356:	0e 94 50 21 	call	0x42a0	; 0x42a0 <__udivmodhi4>
    435a:	80 5d       	subi	r24, 0xD0	; 208
    435c:	8a 33       	cpi	r24, 0x3A	; 58
    435e:	0c f0       	brlt	.+2      	; 0x4362 <itoa+0x2c>
    4360:	89 5d       	subi	r24, 0xD9	; 217
    4362:	81 93       	st	Z+, r24
    4364:	cb 01       	movw	r24, r22
    4366:	00 97       	sbiw	r24, 0x00	; 0
    4368:	a1 f7       	brne	.-24     	; 0x4352 <itoa+0x1c>
    436a:	16 f4       	brtc	.+4      	; 0x4370 <itoa+0x3a>
    436c:	5d e2       	ldi	r21, 0x2D	; 45
    436e:	51 93       	st	Z+, r21
    4370:	10 82       	st	Z, r1
    4372:	c9 01       	movw	r24, r18
    4374:	0c 94 d3 23 	jmp	0x47a6	; 0x47a6 <strrev>

00004378 <sprintf>:
    4378:	ae e0       	ldi	r26, 0x0E	; 14
    437a:	b0 e0       	ldi	r27, 0x00	; 0
    437c:	e2 ec       	ldi	r30, 0xC2	; 194
    437e:	f1 e2       	ldi	r31, 0x21	; 33
    4380:	0c 94 72 21 	jmp	0x42e4	; 0x42e4 <__prologue_saves__+0x1c>
    4384:	0d 89       	ldd	r16, Y+21	; 0x15
    4386:	1e 89       	ldd	r17, Y+22	; 0x16
    4388:	86 e0       	ldi	r24, 0x06	; 6
    438a:	8c 83       	std	Y+4, r24	; 0x04
    438c:	1a 83       	std	Y+2, r17	; 0x02
    438e:	09 83       	std	Y+1, r16	; 0x01
    4390:	8f ef       	ldi	r24, 0xFF	; 255
    4392:	9f e7       	ldi	r25, 0x7F	; 127
    4394:	9e 83       	std	Y+6, r25	; 0x06
    4396:	8d 83       	std	Y+5, r24	; 0x05
    4398:	9e 01       	movw	r18, r28
    439a:	27 5e       	subi	r18, 0xE7	; 231
    439c:	3f 4f       	sbci	r19, 0xFF	; 255
    439e:	ce 01       	movw	r24, r28
    43a0:	01 96       	adiw	r24, 0x01	; 1
    43a2:	6f 89       	ldd	r22, Y+23	; 0x17
    43a4:	78 8d       	ldd	r23, Y+24	; 0x18
    43a6:	a9 01       	movw	r20, r18
    43a8:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <vfprintf>
    43ac:	2f 81       	ldd	r18, Y+7	; 0x07
    43ae:	38 85       	ldd	r19, Y+8	; 0x08
    43b0:	02 0f       	add	r16, r18
    43b2:	13 1f       	adc	r17, r19
    43b4:	f8 01       	movw	r30, r16
    43b6:	10 82       	st	Z, r1
    43b8:	2e 96       	adiw	r28, 0x0e	; 14
    43ba:	e4 e0       	ldi	r30, 0x04	; 4
    43bc:	0c 94 8e 21 	jmp	0x431c	; 0x431c <__epilogue_restores__+0x1c>

000043c0 <vfprintf>:
    43c0:	ab e0       	ldi	r26, 0x0B	; 11
    43c2:	b0 e0       	ldi	r27, 0x00	; 0
    43c4:	e6 ee       	ldi	r30, 0xE6	; 230
    43c6:	f1 e2       	ldi	r31, 0x21	; 33
    43c8:	0c 94 64 21 	jmp	0x42c8	; 0x42c8 <__prologue_saves__>
    43cc:	3c 01       	movw	r6, r24
    43ce:	2b 01       	movw	r4, r22
    43d0:	5a 01       	movw	r10, r20
    43d2:	fc 01       	movw	r30, r24
    43d4:	17 82       	std	Z+7, r1	; 0x07
    43d6:	16 82       	std	Z+6, r1	; 0x06
    43d8:	83 81       	ldd	r24, Z+3	; 0x03
    43da:	81 fd       	sbrc	r24, 1
    43dc:	03 c0       	rjmp	.+6      	; 0x43e4 <vfprintf+0x24>
    43de:	6f ef       	ldi	r22, 0xFF	; 255
    43e0:	7f ef       	ldi	r23, 0xFF	; 255
    43e2:	c6 c1       	rjmp	.+908    	; 0x4770 <vfprintf+0x3b0>
    43e4:	9a e0       	ldi	r25, 0x0A	; 10
    43e6:	89 2e       	mov	r8, r25
    43e8:	1e 01       	movw	r2, r28
    43ea:	08 94       	sec
    43ec:	21 1c       	adc	r2, r1
    43ee:	31 1c       	adc	r3, r1
    43f0:	f3 01       	movw	r30, r6
    43f2:	23 81       	ldd	r18, Z+3	; 0x03
    43f4:	f2 01       	movw	r30, r4
    43f6:	23 fd       	sbrc	r18, 3
    43f8:	85 91       	lpm	r24, Z+
    43fa:	23 ff       	sbrs	r18, 3
    43fc:	81 91       	ld	r24, Z+
    43fe:	2f 01       	movw	r4, r30
    4400:	88 23       	and	r24, r24
    4402:	09 f4       	brne	.+2      	; 0x4406 <vfprintf+0x46>
    4404:	b2 c1       	rjmp	.+868    	; 0x476a <vfprintf+0x3aa>
    4406:	85 32       	cpi	r24, 0x25	; 37
    4408:	39 f4       	brne	.+14     	; 0x4418 <vfprintf+0x58>
    440a:	23 fd       	sbrc	r18, 3
    440c:	85 91       	lpm	r24, Z+
    440e:	23 ff       	sbrs	r18, 3
    4410:	81 91       	ld	r24, Z+
    4412:	2f 01       	movw	r4, r30
    4414:	85 32       	cpi	r24, 0x25	; 37
    4416:	29 f4       	brne	.+10     	; 0x4422 <vfprintf+0x62>
    4418:	90 e0       	ldi	r25, 0x00	; 0
    441a:	b3 01       	movw	r22, r6
    441c:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <fputc>
    4420:	e7 cf       	rjmp	.-50     	; 0x43f0 <vfprintf+0x30>
    4422:	98 2f       	mov	r25, r24
    4424:	ff 24       	eor	r15, r15
    4426:	ee 24       	eor	r14, r14
    4428:	99 24       	eor	r9, r9
    442a:	ff e1       	ldi	r31, 0x1F	; 31
    442c:	ff 15       	cp	r31, r15
    442e:	d0 f0       	brcs	.+52     	; 0x4464 <vfprintf+0xa4>
    4430:	9b 32       	cpi	r25, 0x2B	; 43
    4432:	69 f0       	breq	.+26     	; 0x444e <vfprintf+0x8e>
    4434:	9c 32       	cpi	r25, 0x2C	; 44
    4436:	28 f4       	brcc	.+10     	; 0x4442 <vfprintf+0x82>
    4438:	90 32       	cpi	r25, 0x20	; 32
    443a:	59 f0       	breq	.+22     	; 0x4452 <vfprintf+0x92>
    443c:	93 32       	cpi	r25, 0x23	; 35
    443e:	91 f4       	brne	.+36     	; 0x4464 <vfprintf+0xa4>
    4440:	0e c0       	rjmp	.+28     	; 0x445e <vfprintf+0x9e>
    4442:	9d 32       	cpi	r25, 0x2D	; 45
    4444:	49 f0       	breq	.+18     	; 0x4458 <vfprintf+0x98>
    4446:	90 33       	cpi	r25, 0x30	; 48
    4448:	69 f4       	brne	.+26     	; 0x4464 <vfprintf+0xa4>
    444a:	41 e0       	ldi	r20, 0x01	; 1
    444c:	24 c0       	rjmp	.+72     	; 0x4496 <vfprintf+0xd6>
    444e:	52 e0       	ldi	r21, 0x02	; 2
    4450:	f5 2a       	or	r15, r21
    4452:	84 e0       	ldi	r24, 0x04	; 4
    4454:	f8 2a       	or	r15, r24
    4456:	28 c0       	rjmp	.+80     	; 0x44a8 <vfprintf+0xe8>
    4458:	98 e0       	ldi	r25, 0x08	; 8
    445a:	f9 2a       	or	r15, r25
    445c:	25 c0       	rjmp	.+74     	; 0x44a8 <vfprintf+0xe8>
    445e:	e0 e1       	ldi	r30, 0x10	; 16
    4460:	fe 2a       	or	r15, r30
    4462:	22 c0       	rjmp	.+68     	; 0x44a8 <vfprintf+0xe8>
    4464:	f7 fc       	sbrc	r15, 7
    4466:	29 c0       	rjmp	.+82     	; 0x44ba <vfprintf+0xfa>
    4468:	89 2f       	mov	r24, r25
    446a:	80 53       	subi	r24, 0x30	; 48
    446c:	8a 30       	cpi	r24, 0x0A	; 10
    446e:	70 f4       	brcc	.+28     	; 0x448c <vfprintf+0xcc>
    4470:	f6 fe       	sbrs	r15, 6
    4472:	05 c0       	rjmp	.+10     	; 0x447e <vfprintf+0xbe>
    4474:	98 9c       	mul	r9, r8
    4476:	90 2c       	mov	r9, r0
    4478:	11 24       	eor	r1, r1
    447a:	98 0e       	add	r9, r24
    447c:	15 c0       	rjmp	.+42     	; 0x44a8 <vfprintf+0xe8>
    447e:	e8 9c       	mul	r14, r8
    4480:	e0 2c       	mov	r14, r0
    4482:	11 24       	eor	r1, r1
    4484:	e8 0e       	add	r14, r24
    4486:	f0 e2       	ldi	r31, 0x20	; 32
    4488:	ff 2a       	or	r15, r31
    448a:	0e c0       	rjmp	.+28     	; 0x44a8 <vfprintf+0xe8>
    448c:	9e 32       	cpi	r25, 0x2E	; 46
    448e:	29 f4       	brne	.+10     	; 0x449a <vfprintf+0xda>
    4490:	f6 fc       	sbrc	r15, 6
    4492:	6b c1       	rjmp	.+726    	; 0x476a <vfprintf+0x3aa>
    4494:	40 e4       	ldi	r20, 0x40	; 64
    4496:	f4 2a       	or	r15, r20
    4498:	07 c0       	rjmp	.+14     	; 0x44a8 <vfprintf+0xe8>
    449a:	9c 36       	cpi	r25, 0x6C	; 108
    449c:	19 f4       	brne	.+6      	; 0x44a4 <vfprintf+0xe4>
    449e:	50 e8       	ldi	r21, 0x80	; 128
    44a0:	f5 2a       	or	r15, r21
    44a2:	02 c0       	rjmp	.+4      	; 0x44a8 <vfprintf+0xe8>
    44a4:	98 36       	cpi	r25, 0x68	; 104
    44a6:	49 f4       	brne	.+18     	; 0x44ba <vfprintf+0xfa>
    44a8:	f2 01       	movw	r30, r4
    44aa:	23 fd       	sbrc	r18, 3
    44ac:	95 91       	lpm	r25, Z+
    44ae:	23 ff       	sbrs	r18, 3
    44b0:	91 91       	ld	r25, Z+
    44b2:	2f 01       	movw	r4, r30
    44b4:	99 23       	and	r25, r25
    44b6:	09 f0       	breq	.+2      	; 0x44ba <vfprintf+0xfa>
    44b8:	b8 cf       	rjmp	.-144    	; 0x442a <vfprintf+0x6a>
    44ba:	89 2f       	mov	r24, r25
    44bc:	85 54       	subi	r24, 0x45	; 69
    44be:	83 30       	cpi	r24, 0x03	; 3
    44c0:	18 f0       	brcs	.+6      	; 0x44c8 <vfprintf+0x108>
    44c2:	80 52       	subi	r24, 0x20	; 32
    44c4:	83 30       	cpi	r24, 0x03	; 3
    44c6:	38 f4       	brcc	.+14     	; 0x44d6 <vfprintf+0x116>
    44c8:	44 e0       	ldi	r20, 0x04	; 4
    44ca:	50 e0       	ldi	r21, 0x00	; 0
    44cc:	a4 0e       	add	r10, r20
    44ce:	b5 1e       	adc	r11, r21
    44d0:	5f e3       	ldi	r21, 0x3F	; 63
    44d2:	59 83       	std	Y+1, r21	; 0x01
    44d4:	0f c0       	rjmp	.+30     	; 0x44f4 <vfprintf+0x134>
    44d6:	93 36       	cpi	r25, 0x63	; 99
    44d8:	31 f0       	breq	.+12     	; 0x44e6 <vfprintf+0x126>
    44da:	93 37       	cpi	r25, 0x73	; 115
    44dc:	79 f0       	breq	.+30     	; 0x44fc <vfprintf+0x13c>
    44de:	93 35       	cpi	r25, 0x53	; 83
    44e0:	09 f0       	breq	.+2      	; 0x44e4 <vfprintf+0x124>
    44e2:	56 c0       	rjmp	.+172    	; 0x4590 <vfprintf+0x1d0>
    44e4:	20 c0       	rjmp	.+64     	; 0x4526 <vfprintf+0x166>
    44e6:	f5 01       	movw	r30, r10
    44e8:	80 81       	ld	r24, Z
    44ea:	89 83       	std	Y+1, r24	; 0x01
    44ec:	42 e0       	ldi	r20, 0x02	; 2
    44ee:	50 e0       	ldi	r21, 0x00	; 0
    44f0:	a4 0e       	add	r10, r20
    44f2:	b5 1e       	adc	r11, r21
    44f4:	61 01       	movw	r12, r2
    44f6:	01 e0       	ldi	r16, 0x01	; 1
    44f8:	10 e0       	ldi	r17, 0x00	; 0
    44fa:	12 c0       	rjmp	.+36     	; 0x4520 <vfprintf+0x160>
    44fc:	f5 01       	movw	r30, r10
    44fe:	c0 80       	ld	r12, Z
    4500:	d1 80       	ldd	r13, Z+1	; 0x01
    4502:	f6 fc       	sbrc	r15, 6
    4504:	03 c0       	rjmp	.+6      	; 0x450c <vfprintf+0x14c>
    4506:	6f ef       	ldi	r22, 0xFF	; 255
    4508:	7f ef       	ldi	r23, 0xFF	; 255
    450a:	02 c0       	rjmp	.+4      	; 0x4510 <vfprintf+0x150>
    450c:	69 2d       	mov	r22, r9
    450e:	70 e0       	ldi	r23, 0x00	; 0
    4510:	42 e0       	ldi	r20, 0x02	; 2
    4512:	50 e0       	ldi	r21, 0x00	; 0
    4514:	a4 0e       	add	r10, r20
    4516:	b5 1e       	adc	r11, r21
    4518:	c6 01       	movw	r24, r12
    451a:	0e 94 c8 23 	call	0x4790	; 0x4790 <strnlen>
    451e:	8c 01       	movw	r16, r24
    4520:	5f e7       	ldi	r21, 0x7F	; 127
    4522:	f5 22       	and	r15, r21
    4524:	14 c0       	rjmp	.+40     	; 0x454e <vfprintf+0x18e>
    4526:	f5 01       	movw	r30, r10
    4528:	c0 80       	ld	r12, Z
    452a:	d1 80       	ldd	r13, Z+1	; 0x01
    452c:	f6 fc       	sbrc	r15, 6
    452e:	03 c0       	rjmp	.+6      	; 0x4536 <vfprintf+0x176>
    4530:	6f ef       	ldi	r22, 0xFF	; 255
    4532:	7f ef       	ldi	r23, 0xFF	; 255
    4534:	02 c0       	rjmp	.+4      	; 0x453a <vfprintf+0x17a>
    4536:	69 2d       	mov	r22, r9
    4538:	70 e0       	ldi	r23, 0x00	; 0
    453a:	42 e0       	ldi	r20, 0x02	; 2
    453c:	50 e0       	ldi	r21, 0x00	; 0
    453e:	a4 0e       	add	r10, r20
    4540:	b5 1e       	adc	r11, r21
    4542:	c6 01       	movw	r24, r12
    4544:	0e 94 bd 23 	call	0x477a	; 0x477a <strnlen_P>
    4548:	8c 01       	movw	r16, r24
    454a:	50 e8       	ldi	r21, 0x80	; 128
    454c:	f5 2a       	or	r15, r21
    454e:	f3 fe       	sbrs	r15, 3
    4550:	07 c0       	rjmp	.+14     	; 0x4560 <vfprintf+0x1a0>
    4552:	1a c0       	rjmp	.+52     	; 0x4588 <vfprintf+0x1c8>
    4554:	80 e2       	ldi	r24, 0x20	; 32
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	b3 01       	movw	r22, r6
    455a:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <fputc>
    455e:	ea 94       	dec	r14
    4560:	8e 2d       	mov	r24, r14
    4562:	90 e0       	ldi	r25, 0x00	; 0
    4564:	08 17       	cp	r16, r24
    4566:	19 07       	cpc	r17, r25
    4568:	a8 f3       	brcs	.-22     	; 0x4554 <vfprintf+0x194>
    456a:	0e c0       	rjmp	.+28     	; 0x4588 <vfprintf+0x1c8>
    456c:	f6 01       	movw	r30, r12
    456e:	f7 fc       	sbrc	r15, 7
    4570:	85 91       	lpm	r24, Z+
    4572:	f7 fe       	sbrs	r15, 7
    4574:	81 91       	ld	r24, Z+
    4576:	6f 01       	movw	r12, r30
    4578:	90 e0       	ldi	r25, 0x00	; 0
    457a:	b3 01       	movw	r22, r6
    457c:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <fputc>
    4580:	e1 10       	cpse	r14, r1
    4582:	ea 94       	dec	r14
    4584:	01 50       	subi	r16, 0x01	; 1
    4586:	10 40       	sbci	r17, 0x00	; 0
    4588:	01 15       	cp	r16, r1
    458a:	11 05       	cpc	r17, r1
    458c:	79 f7       	brne	.-34     	; 0x456c <vfprintf+0x1ac>
    458e:	ea c0       	rjmp	.+468    	; 0x4764 <vfprintf+0x3a4>
    4590:	94 36       	cpi	r25, 0x64	; 100
    4592:	11 f0       	breq	.+4      	; 0x4598 <vfprintf+0x1d8>
    4594:	99 36       	cpi	r25, 0x69	; 105
    4596:	69 f5       	brne	.+90     	; 0x45f2 <vfprintf+0x232>
    4598:	f7 fe       	sbrs	r15, 7
    459a:	08 c0       	rjmp	.+16     	; 0x45ac <vfprintf+0x1ec>
    459c:	f5 01       	movw	r30, r10
    459e:	20 81       	ld	r18, Z
    45a0:	31 81       	ldd	r19, Z+1	; 0x01
    45a2:	42 81       	ldd	r20, Z+2	; 0x02
    45a4:	53 81       	ldd	r21, Z+3	; 0x03
    45a6:	84 e0       	ldi	r24, 0x04	; 4
    45a8:	90 e0       	ldi	r25, 0x00	; 0
    45aa:	0a c0       	rjmp	.+20     	; 0x45c0 <vfprintf+0x200>
    45ac:	f5 01       	movw	r30, r10
    45ae:	80 81       	ld	r24, Z
    45b0:	91 81       	ldd	r25, Z+1	; 0x01
    45b2:	9c 01       	movw	r18, r24
    45b4:	44 27       	eor	r20, r20
    45b6:	37 fd       	sbrc	r19, 7
    45b8:	40 95       	com	r20
    45ba:	54 2f       	mov	r21, r20
    45bc:	82 e0       	ldi	r24, 0x02	; 2
    45be:	90 e0       	ldi	r25, 0x00	; 0
    45c0:	a8 0e       	add	r10, r24
    45c2:	b9 1e       	adc	r11, r25
    45c4:	9f e6       	ldi	r25, 0x6F	; 111
    45c6:	f9 22       	and	r15, r25
    45c8:	57 ff       	sbrs	r21, 7
    45ca:	09 c0       	rjmp	.+18     	; 0x45de <vfprintf+0x21e>
    45cc:	50 95       	com	r21
    45ce:	40 95       	com	r20
    45d0:	30 95       	com	r19
    45d2:	21 95       	neg	r18
    45d4:	3f 4f       	sbci	r19, 0xFF	; 255
    45d6:	4f 4f       	sbci	r20, 0xFF	; 255
    45d8:	5f 4f       	sbci	r21, 0xFF	; 255
    45da:	e0 e8       	ldi	r30, 0x80	; 128
    45dc:	fe 2a       	or	r15, r30
    45de:	ca 01       	movw	r24, r20
    45e0:	b9 01       	movw	r22, r18
    45e2:	a1 01       	movw	r20, r2
    45e4:	2a e0       	ldi	r18, 0x0A	; 10
    45e6:	30 e0       	ldi	r19, 0x00	; 0
    45e8:	0e 94 0f 24 	call	0x481e	; 0x481e <__ultoa_invert>
    45ec:	d8 2e       	mov	r13, r24
    45ee:	d2 18       	sub	r13, r2
    45f0:	40 c0       	rjmp	.+128    	; 0x4672 <vfprintf+0x2b2>
    45f2:	95 37       	cpi	r25, 0x75	; 117
    45f4:	29 f4       	brne	.+10     	; 0x4600 <vfprintf+0x240>
    45f6:	1f 2d       	mov	r17, r15
    45f8:	1f 7e       	andi	r17, 0xEF	; 239
    45fa:	2a e0       	ldi	r18, 0x0A	; 10
    45fc:	30 e0       	ldi	r19, 0x00	; 0
    45fe:	1d c0       	rjmp	.+58     	; 0x463a <vfprintf+0x27a>
    4600:	1f 2d       	mov	r17, r15
    4602:	19 7f       	andi	r17, 0xF9	; 249
    4604:	9f 36       	cpi	r25, 0x6F	; 111
    4606:	61 f0       	breq	.+24     	; 0x4620 <vfprintf+0x260>
    4608:	90 37       	cpi	r25, 0x70	; 112
    460a:	20 f4       	brcc	.+8      	; 0x4614 <vfprintf+0x254>
    460c:	98 35       	cpi	r25, 0x58	; 88
    460e:	09 f0       	breq	.+2      	; 0x4612 <vfprintf+0x252>
    4610:	ac c0       	rjmp	.+344    	; 0x476a <vfprintf+0x3aa>
    4612:	0f c0       	rjmp	.+30     	; 0x4632 <vfprintf+0x272>
    4614:	90 37       	cpi	r25, 0x70	; 112
    4616:	39 f0       	breq	.+14     	; 0x4626 <vfprintf+0x266>
    4618:	98 37       	cpi	r25, 0x78	; 120
    461a:	09 f0       	breq	.+2      	; 0x461e <vfprintf+0x25e>
    461c:	a6 c0       	rjmp	.+332    	; 0x476a <vfprintf+0x3aa>
    461e:	04 c0       	rjmp	.+8      	; 0x4628 <vfprintf+0x268>
    4620:	28 e0       	ldi	r18, 0x08	; 8
    4622:	30 e0       	ldi	r19, 0x00	; 0
    4624:	0a c0       	rjmp	.+20     	; 0x463a <vfprintf+0x27a>
    4626:	10 61       	ori	r17, 0x10	; 16
    4628:	14 fd       	sbrc	r17, 4
    462a:	14 60       	ori	r17, 0x04	; 4
    462c:	20 e1       	ldi	r18, 0x10	; 16
    462e:	30 e0       	ldi	r19, 0x00	; 0
    4630:	04 c0       	rjmp	.+8      	; 0x463a <vfprintf+0x27a>
    4632:	14 fd       	sbrc	r17, 4
    4634:	16 60       	ori	r17, 0x06	; 6
    4636:	20 e1       	ldi	r18, 0x10	; 16
    4638:	32 e0       	ldi	r19, 0x02	; 2
    463a:	17 ff       	sbrs	r17, 7
    463c:	08 c0       	rjmp	.+16     	; 0x464e <vfprintf+0x28e>
    463e:	f5 01       	movw	r30, r10
    4640:	60 81       	ld	r22, Z
    4642:	71 81       	ldd	r23, Z+1	; 0x01
    4644:	82 81       	ldd	r24, Z+2	; 0x02
    4646:	93 81       	ldd	r25, Z+3	; 0x03
    4648:	44 e0       	ldi	r20, 0x04	; 4
    464a:	50 e0       	ldi	r21, 0x00	; 0
    464c:	08 c0       	rjmp	.+16     	; 0x465e <vfprintf+0x29e>
    464e:	f5 01       	movw	r30, r10
    4650:	80 81       	ld	r24, Z
    4652:	91 81       	ldd	r25, Z+1	; 0x01
    4654:	bc 01       	movw	r22, r24
    4656:	80 e0       	ldi	r24, 0x00	; 0
    4658:	90 e0       	ldi	r25, 0x00	; 0
    465a:	42 e0       	ldi	r20, 0x02	; 2
    465c:	50 e0       	ldi	r21, 0x00	; 0
    465e:	a4 0e       	add	r10, r20
    4660:	b5 1e       	adc	r11, r21
    4662:	a1 01       	movw	r20, r2
    4664:	0e 94 0f 24 	call	0x481e	; 0x481e <__ultoa_invert>
    4668:	d8 2e       	mov	r13, r24
    466a:	d2 18       	sub	r13, r2
    466c:	8f e7       	ldi	r24, 0x7F	; 127
    466e:	f8 2e       	mov	r15, r24
    4670:	f1 22       	and	r15, r17
    4672:	f6 fe       	sbrs	r15, 6
    4674:	0b c0       	rjmp	.+22     	; 0x468c <vfprintf+0x2cc>
    4676:	5e ef       	ldi	r21, 0xFE	; 254
    4678:	f5 22       	and	r15, r21
    467a:	d9 14       	cp	r13, r9
    467c:	38 f4       	brcc	.+14     	; 0x468c <vfprintf+0x2cc>
    467e:	f4 fe       	sbrs	r15, 4
    4680:	07 c0       	rjmp	.+14     	; 0x4690 <vfprintf+0x2d0>
    4682:	f2 fc       	sbrc	r15, 2
    4684:	05 c0       	rjmp	.+10     	; 0x4690 <vfprintf+0x2d0>
    4686:	8f ee       	ldi	r24, 0xEF	; 239
    4688:	f8 22       	and	r15, r24
    468a:	02 c0       	rjmp	.+4      	; 0x4690 <vfprintf+0x2d0>
    468c:	1d 2d       	mov	r17, r13
    468e:	01 c0       	rjmp	.+2      	; 0x4692 <vfprintf+0x2d2>
    4690:	19 2d       	mov	r17, r9
    4692:	f4 fe       	sbrs	r15, 4
    4694:	0d c0       	rjmp	.+26     	; 0x46b0 <vfprintf+0x2f0>
    4696:	fe 01       	movw	r30, r28
    4698:	ed 0d       	add	r30, r13
    469a:	f1 1d       	adc	r31, r1
    469c:	80 81       	ld	r24, Z
    469e:	80 33       	cpi	r24, 0x30	; 48
    46a0:	19 f4       	brne	.+6      	; 0x46a8 <vfprintf+0x2e8>
    46a2:	99 ee       	ldi	r25, 0xE9	; 233
    46a4:	f9 22       	and	r15, r25
    46a6:	08 c0       	rjmp	.+16     	; 0x46b8 <vfprintf+0x2f8>
    46a8:	1f 5f       	subi	r17, 0xFF	; 255
    46aa:	f2 fe       	sbrs	r15, 2
    46ac:	05 c0       	rjmp	.+10     	; 0x46b8 <vfprintf+0x2f8>
    46ae:	03 c0       	rjmp	.+6      	; 0x46b6 <vfprintf+0x2f6>
    46b0:	8f 2d       	mov	r24, r15
    46b2:	86 78       	andi	r24, 0x86	; 134
    46b4:	09 f0       	breq	.+2      	; 0x46b8 <vfprintf+0x2f8>
    46b6:	1f 5f       	subi	r17, 0xFF	; 255
    46b8:	0f 2d       	mov	r16, r15
    46ba:	f3 fc       	sbrc	r15, 3
    46bc:	14 c0       	rjmp	.+40     	; 0x46e6 <vfprintf+0x326>
    46be:	f0 fe       	sbrs	r15, 0
    46c0:	0f c0       	rjmp	.+30     	; 0x46e0 <vfprintf+0x320>
    46c2:	1e 15       	cp	r17, r14
    46c4:	10 f0       	brcs	.+4      	; 0x46ca <vfprintf+0x30a>
    46c6:	9d 2c       	mov	r9, r13
    46c8:	0b c0       	rjmp	.+22     	; 0x46e0 <vfprintf+0x320>
    46ca:	9d 2c       	mov	r9, r13
    46cc:	9e 0c       	add	r9, r14
    46ce:	91 1a       	sub	r9, r17
    46d0:	1e 2d       	mov	r17, r14
    46d2:	06 c0       	rjmp	.+12     	; 0x46e0 <vfprintf+0x320>
    46d4:	80 e2       	ldi	r24, 0x20	; 32
    46d6:	90 e0       	ldi	r25, 0x00	; 0
    46d8:	b3 01       	movw	r22, r6
    46da:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <fputc>
    46de:	1f 5f       	subi	r17, 0xFF	; 255
    46e0:	1e 15       	cp	r17, r14
    46e2:	c0 f3       	brcs	.-16     	; 0x46d4 <vfprintf+0x314>
    46e4:	04 c0       	rjmp	.+8      	; 0x46ee <vfprintf+0x32e>
    46e6:	1e 15       	cp	r17, r14
    46e8:	10 f4       	brcc	.+4      	; 0x46ee <vfprintf+0x32e>
    46ea:	e1 1a       	sub	r14, r17
    46ec:	01 c0       	rjmp	.+2      	; 0x46f0 <vfprintf+0x330>
    46ee:	ee 24       	eor	r14, r14
    46f0:	04 ff       	sbrs	r16, 4
    46f2:	0f c0       	rjmp	.+30     	; 0x4712 <vfprintf+0x352>
    46f4:	80 e3       	ldi	r24, 0x30	; 48
    46f6:	90 e0       	ldi	r25, 0x00	; 0
    46f8:	b3 01       	movw	r22, r6
    46fa:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <fputc>
    46fe:	02 ff       	sbrs	r16, 2
    4700:	1d c0       	rjmp	.+58     	; 0x473c <vfprintf+0x37c>
    4702:	01 fd       	sbrc	r16, 1
    4704:	03 c0       	rjmp	.+6      	; 0x470c <vfprintf+0x34c>
    4706:	88 e7       	ldi	r24, 0x78	; 120
    4708:	90 e0       	ldi	r25, 0x00	; 0
    470a:	0e c0       	rjmp	.+28     	; 0x4728 <vfprintf+0x368>
    470c:	88 e5       	ldi	r24, 0x58	; 88
    470e:	90 e0       	ldi	r25, 0x00	; 0
    4710:	0b c0       	rjmp	.+22     	; 0x4728 <vfprintf+0x368>
    4712:	80 2f       	mov	r24, r16
    4714:	86 78       	andi	r24, 0x86	; 134
    4716:	91 f0       	breq	.+36     	; 0x473c <vfprintf+0x37c>
    4718:	01 ff       	sbrs	r16, 1
    471a:	02 c0       	rjmp	.+4      	; 0x4720 <vfprintf+0x360>
    471c:	8b e2       	ldi	r24, 0x2B	; 43
    471e:	01 c0       	rjmp	.+2      	; 0x4722 <vfprintf+0x362>
    4720:	80 e2       	ldi	r24, 0x20	; 32
    4722:	f7 fc       	sbrc	r15, 7
    4724:	8d e2       	ldi	r24, 0x2D	; 45
    4726:	90 e0       	ldi	r25, 0x00	; 0
    4728:	b3 01       	movw	r22, r6
    472a:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <fputc>
    472e:	06 c0       	rjmp	.+12     	; 0x473c <vfprintf+0x37c>
    4730:	80 e3       	ldi	r24, 0x30	; 48
    4732:	90 e0       	ldi	r25, 0x00	; 0
    4734:	b3 01       	movw	r22, r6
    4736:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <fputc>
    473a:	9a 94       	dec	r9
    473c:	d9 14       	cp	r13, r9
    473e:	c0 f3       	brcs	.-16     	; 0x4730 <vfprintf+0x370>
    4740:	da 94       	dec	r13
    4742:	f1 01       	movw	r30, r2
    4744:	ed 0d       	add	r30, r13
    4746:	f1 1d       	adc	r31, r1
    4748:	80 81       	ld	r24, Z
    474a:	90 e0       	ldi	r25, 0x00	; 0
    474c:	b3 01       	movw	r22, r6
    474e:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <fputc>
    4752:	dd 20       	and	r13, r13
    4754:	a9 f7       	brne	.-22     	; 0x4740 <vfprintf+0x380>
    4756:	06 c0       	rjmp	.+12     	; 0x4764 <vfprintf+0x3a4>
    4758:	80 e2       	ldi	r24, 0x20	; 32
    475a:	90 e0       	ldi	r25, 0x00	; 0
    475c:	b3 01       	movw	r22, r6
    475e:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <fputc>
    4762:	ea 94       	dec	r14
    4764:	ee 20       	and	r14, r14
    4766:	c1 f7       	brne	.-16     	; 0x4758 <vfprintf+0x398>
    4768:	43 ce       	rjmp	.-890    	; 0x43f0 <vfprintf+0x30>
    476a:	f3 01       	movw	r30, r6
    476c:	66 81       	ldd	r22, Z+6	; 0x06
    476e:	77 81       	ldd	r23, Z+7	; 0x07
    4770:	cb 01       	movw	r24, r22
    4772:	2b 96       	adiw	r28, 0x0b	; 11
    4774:	e2 e1       	ldi	r30, 0x12	; 18
    4776:	0c 94 80 21 	jmp	0x4300	; 0x4300 <__epilogue_restores__>

0000477a <strnlen_P>:
    477a:	fc 01       	movw	r30, r24
    477c:	05 90       	lpm	r0, Z+
    477e:	61 50       	subi	r22, 0x01	; 1
    4780:	70 40       	sbci	r23, 0x00	; 0
    4782:	01 10       	cpse	r0, r1
    4784:	d8 f7       	brcc	.-10     	; 0x477c <strnlen_P+0x2>
    4786:	80 95       	com	r24
    4788:	90 95       	com	r25
    478a:	8e 0f       	add	r24, r30
    478c:	9f 1f       	adc	r25, r31
    478e:	08 95       	ret

00004790 <strnlen>:
    4790:	fc 01       	movw	r30, r24
    4792:	61 50       	subi	r22, 0x01	; 1
    4794:	70 40       	sbci	r23, 0x00	; 0
    4796:	01 90       	ld	r0, Z+
    4798:	01 10       	cpse	r0, r1
    479a:	d8 f7       	brcc	.-10     	; 0x4792 <strnlen+0x2>
    479c:	80 95       	com	r24
    479e:	90 95       	com	r25
    47a0:	8e 0f       	add	r24, r30
    47a2:	9f 1f       	adc	r25, r31
    47a4:	08 95       	ret

000047a6 <strrev>:
    47a6:	dc 01       	movw	r26, r24
    47a8:	fc 01       	movw	r30, r24
    47aa:	67 2f       	mov	r22, r23
    47ac:	71 91       	ld	r23, Z+
    47ae:	77 23       	and	r23, r23
    47b0:	e1 f7       	brne	.-8      	; 0x47aa <strrev+0x4>
    47b2:	32 97       	sbiw	r30, 0x02	; 2
    47b4:	04 c0       	rjmp	.+8      	; 0x47be <strrev+0x18>
    47b6:	7c 91       	ld	r23, X
    47b8:	6d 93       	st	X+, r22
    47ba:	70 83       	st	Z, r23
    47bc:	62 91       	ld	r22, -Z
    47be:	ae 17       	cp	r26, r30
    47c0:	bf 07       	cpc	r27, r31
    47c2:	c8 f3       	brcs	.-14     	; 0x47b6 <strrev+0x10>
    47c4:	08 95       	ret

000047c6 <fputc>:
    47c6:	0f 93       	push	r16
    47c8:	1f 93       	push	r17
    47ca:	cf 93       	push	r28
    47cc:	df 93       	push	r29
    47ce:	8c 01       	movw	r16, r24
    47d0:	eb 01       	movw	r28, r22
    47d2:	8b 81       	ldd	r24, Y+3	; 0x03
    47d4:	81 ff       	sbrs	r24, 1
    47d6:	1b c0       	rjmp	.+54     	; 0x480e <fputc+0x48>
    47d8:	82 ff       	sbrs	r24, 2
    47da:	0d c0       	rjmp	.+26     	; 0x47f6 <fputc+0x30>
    47dc:	2e 81       	ldd	r18, Y+6	; 0x06
    47de:	3f 81       	ldd	r19, Y+7	; 0x07
    47e0:	8c 81       	ldd	r24, Y+4	; 0x04
    47e2:	9d 81       	ldd	r25, Y+5	; 0x05
    47e4:	28 17       	cp	r18, r24
    47e6:	39 07       	cpc	r19, r25
    47e8:	64 f4       	brge	.+24     	; 0x4802 <fputc+0x3c>
    47ea:	e8 81       	ld	r30, Y
    47ec:	f9 81       	ldd	r31, Y+1	; 0x01
    47ee:	01 93       	st	Z+, r16
    47f0:	f9 83       	std	Y+1, r31	; 0x01
    47f2:	e8 83       	st	Y, r30
    47f4:	06 c0       	rjmp	.+12     	; 0x4802 <fputc+0x3c>
    47f6:	e8 85       	ldd	r30, Y+8	; 0x08
    47f8:	f9 85       	ldd	r31, Y+9	; 0x09
    47fa:	80 2f       	mov	r24, r16
    47fc:	09 95       	icall
    47fe:	89 2b       	or	r24, r25
    4800:	31 f4       	brne	.+12     	; 0x480e <fputc+0x48>
    4802:	8e 81       	ldd	r24, Y+6	; 0x06
    4804:	9f 81       	ldd	r25, Y+7	; 0x07
    4806:	01 96       	adiw	r24, 0x01	; 1
    4808:	9f 83       	std	Y+7, r25	; 0x07
    480a:	8e 83       	std	Y+6, r24	; 0x06
    480c:	02 c0       	rjmp	.+4      	; 0x4812 <fputc+0x4c>
    480e:	0f ef       	ldi	r16, 0xFF	; 255
    4810:	1f ef       	ldi	r17, 0xFF	; 255
    4812:	c8 01       	movw	r24, r16
    4814:	df 91       	pop	r29
    4816:	cf 91       	pop	r28
    4818:	1f 91       	pop	r17
    481a:	0f 91       	pop	r16
    481c:	08 95       	ret

0000481e <__ultoa_invert>:
    481e:	fa 01       	movw	r30, r20
    4820:	aa 27       	eor	r26, r26
    4822:	28 30       	cpi	r18, 0x08	; 8
    4824:	51 f1       	breq	.+84     	; 0x487a <__ultoa_invert+0x5c>
    4826:	20 31       	cpi	r18, 0x10	; 16
    4828:	81 f1       	breq	.+96     	; 0x488a <__ultoa_invert+0x6c>
    482a:	e8 94       	clt
    482c:	6f 93       	push	r22
    482e:	6e 7f       	andi	r22, 0xFE	; 254
    4830:	6e 5f       	subi	r22, 0xFE	; 254
    4832:	7f 4f       	sbci	r23, 0xFF	; 255
    4834:	8f 4f       	sbci	r24, 0xFF	; 255
    4836:	9f 4f       	sbci	r25, 0xFF	; 255
    4838:	af 4f       	sbci	r26, 0xFF	; 255
    483a:	b1 e0       	ldi	r27, 0x01	; 1
    483c:	3e d0       	rcall	.+124    	; 0x48ba <__ultoa_invert+0x9c>
    483e:	b4 e0       	ldi	r27, 0x04	; 4
    4840:	3c d0       	rcall	.+120    	; 0x48ba <__ultoa_invert+0x9c>
    4842:	67 0f       	add	r22, r23
    4844:	78 1f       	adc	r23, r24
    4846:	89 1f       	adc	r24, r25
    4848:	9a 1f       	adc	r25, r26
    484a:	a1 1d       	adc	r26, r1
    484c:	68 0f       	add	r22, r24
    484e:	79 1f       	adc	r23, r25
    4850:	8a 1f       	adc	r24, r26
    4852:	91 1d       	adc	r25, r1
    4854:	a1 1d       	adc	r26, r1
    4856:	6a 0f       	add	r22, r26
    4858:	71 1d       	adc	r23, r1
    485a:	81 1d       	adc	r24, r1
    485c:	91 1d       	adc	r25, r1
    485e:	a1 1d       	adc	r26, r1
    4860:	20 d0       	rcall	.+64     	; 0x48a2 <__ultoa_invert+0x84>
    4862:	09 f4       	brne	.+2      	; 0x4866 <__ultoa_invert+0x48>
    4864:	68 94       	set
    4866:	3f 91       	pop	r19
    4868:	2a e0       	ldi	r18, 0x0A	; 10
    486a:	26 9f       	mul	r18, r22
    486c:	11 24       	eor	r1, r1
    486e:	30 19       	sub	r19, r0
    4870:	30 5d       	subi	r19, 0xD0	; 208
    4872:	31 93       	st	Z+, r19
    4874:	de f6       	brtc	.-74     	; 0x482c <__ultoa_invert+0xe>
    4876:	cf 01       	movw	r24, r30
    4878:	08 95       	ret
    487a:	46 2f       	mov	r20, r22
    487c:	47 70       	andi	r20, 0x07	; 7
    487e:	40 5d       	subi	r20, 0xD0	; 208
    4880:	41 93       	st	Z+, r20
    4882:	b3 e0       	ldi	r27, 0x03	; 3
    4884:	0f d0       	rcall	.+30     	; 0x48a4 <__ultoa_invert+0x86>
    4886:	c9 f7       	brne	.-14     	; 0x487a <__ultoa_invert+0x5c>
    4888:	f6 cf       	rjmp	.-20     	; 0x4876 <__ultoa_invert+0x58>
    488a:	46 2f       	mov	r20, r22
    488c:	4f 70       	andi	r20, 0x0F	; 15
    488e:	40 5d       	subi	r20, 0xD0	; 208
    4890:	4a 33       	cpi	r20, 0x3A	; 58
    4892:	18 f0       	brcs	.+6      	; 0x489a <__ultoa_invert+0x7c>
    4894:	49 5d       	subi	r20, 0xD9	; 217
    4896:	31 fd       	sbrc	r19, 1
    4898:	40 52       	subi	r20, 0x20	; 32
    489a:	41 93       	st	Z+, r20
    489c:	02 d0       	rcall	.+4      	; 0x48a2 <__ultoa_invert+0x84>
    489e:	a9 f7       	brne	.-22     	; 0x488a <__ultoa_invert+0x6c>
    48a0:	ea cf       	rjmp	.-44     	; 0x4876 <__ultoa_invert+0x58>
    48a2:	b4 e0       	ldi	r27, 0x04	; 4
    48a4:	a6 95       	lsr	r26
    48a6:	97 95       	ror	r25
    48a8:	87 95       	ror	r24
    48aa:	77 95       	ror	r23
    48ac:	67 95       	ror	r22
    48ae:	ba 95       	dec	r27
    48b0:	c9 f7       	brne	.-14     	; 0x48a4 <__ultoa_invert+0x86>
    48b2:	00 97       	sbiw	r24, 0x00	; 0
    48b4:	61 05       	cpc	r22, r1
    48b6:	71 05       	cpc	r23, r1
    48b8:	08 95       	ret
    48ba:	9b 01       	movw	r18, r22
    48bc:	ac 01       	movw	r20, r24
    48be:	0a 2e       	mov	r0, r26
    48c0:	06 94       	lsr	r0
    48c2:	57 95       	ror	r21
    48c4:	47 95       	ror	r20
    48c6:	37 95       	ror	r19
    48c8:	27 95       	ror	r18
    48ca:	ba 95       	dec	r27
    48cc:	c9 f7       	brne	.-14     	; 0x48c0 <__ultoa_invert+0xa2>
    48ce:	62 0f       	add	r22, r18
    48d0:	73 1f       	adc	r23, r19
    48d2:	84 1f       	adc	r24, r20
    48d4:	95 1f       	adc	r25, r21
    48d6:	a0 1d       	adc	r26, r0
    48d8:	08 95       	ret

000048da <_exit>:
    48da:	f8 94       	cli

000048dc <__stop_program>:
    48dc:	ff cf       	rjmp	.-2      	; 0x48dc <__stop_program>
