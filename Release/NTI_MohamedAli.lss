
NTI_MohamedAli.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000658c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000214  00800060  0000658c  00006620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000079  00800274  00800274  00006834  2**0
                  ALLOC
  3 .stab         00008610  00000000  00000000  00006834  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000629e  00000000  00000000  0000ee44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000150e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00015282  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00015474  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0001787f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00018c05  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00019ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00019f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001a292  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001ac00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d8 0f 	jmp	0x1fb0	; 0x1fb0 <__vector_1>
       8:	0c 94 10 10 	jmp	0x2020	; 0x2020 <__vector_2>
       c:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__vector_6>
      1c:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__vector_7>
      20:	0c 94 87 0a 	jmp	0x150e	; 0x150e <__vector_8>
      24:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <__vector_9>
      28:	0c 94 87 0e 	jmp	0x1d0e	; 0x1d0e <__vector_10>
      2c:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__vector_11>
      30:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	f5 e6       	ldi	r31, 0x65	; 101
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3e       	cpi	r26, 0xED	; 237
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 92 22 	call	0x4524	; 0x4524 <main>
      8a:	0c 94 c4 32 	jmp	0x6588	; 0x6588 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b2 2f 	jmp	0x5f64	; 0x5f64 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e0       	ldi	r26, 0x0C	; 12
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ce 2f 	jmp	0x5f9c	; 0x5f9c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 be 2f 	jmp	0x5f7c	; 0x5f7c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 da 2f 	jmp	0x5fb4	; 0x5fb4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 be 2f 	jmp	0x5f7c	; 0x5f7c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 da 2f 	jmp	0x5fb4	; 0x5fb4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b2 2f 	jmp	0x5f64	; 0x5f64 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e0       	ldi	r24, 0x0C	; 12
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ce 2f 	jmp	0x5f9c	; 0x5f9c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ba 2f 	jmp	0x5f74	; 0x5f74 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e0       	ldi	r22, 0x0C	; 12
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d6 2f 	jmp	0x5fac	; 0x5fac <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 be 2f 	jmp	0x5f7c	; 0x5f7c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 da 2f 	jmp	0x5fb4	; 0x5fb4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 be 2f 	jmp	0x5f7c	; 0x5f7c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 da 2f 	jmp	0x5fb4	; 0x5fb4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 be 2f 	jmp	0x5f7c	; 0x5f7c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 da 2f 	jmp	0x5fb4	; 0x5fb4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c2 2f 	jmp	0x5f84	; 0x5f84 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 de 2f 	jmp	0x5fbc	; 0x5fbc <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 ba 2f 	jmp	0x5f74	; 0x5f74 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 d6 2f 	jmp	0x5fac	; 0x5fac <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ec 5e       	subi	r30, 0xEC	; 236
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Timer1_Init>:
void(*Timer1_CompA_isr)(void) = NULL;
void(*Timer1_Capt_isr)(void) = NULL;
/* ---------------------------------------------------------------------------------------*/

Error_Status_t Timer1_Init(const timer1_t *timer1_obj)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <Timer1_Init+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <Timer1_Init+0x8>
     e36:	0f 92       	push	r0
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	9b 83       	std	Y+3, r25	; 0x03
     e3e:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
     e40:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	9b 81       	ldd	r25, Y+3	; 0x03
     e46:	00 97       	sbiw	r24, 0x00	; 0
     e48:	19 f4       	brne	.+6      	; 0xe50 <Timer1_Init+0x22>
	{
		ret_status = NULL_POINTER;
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	89 83       	std	Y+1, r24	; 0x01
     e4e:	ae c0       	rjmp	.+348    	; 0xfac <Timer1_Init+0x17e>
	}
	else
	{
		// To initialize mode
		TIMER1_CONTROL->TCCR1A_CFG.WGM1_0_BIT = (((timer1_obj->mode) >> 0) & 0x01);
     e50:	a6 e4       	ldi	r26, 0x46	; 70
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	ea 81       	ldd	r30, Y+2	; 0x02
     e56:	fb 81       	ldd	r31, Y+3	; 0x03
     e58:	80 85       	ldd	r24, Z+8	; 0x08
     e5a:	8f 70       	andi	r24, 0x0F	; 15
     e5c:	81 70       	andi	r24, 0x01	; 1
     e5e:	81 70       	andi	r24, 0x01	; 1
     e60:	81 70       	andi	r24, 0x01	; 1
     e62:	98 2f       	mov	r25, r24
     e64:	91 70       	andi	r25, 0x01	; 1
     e66:	19 96       	adiw	r26, 0x09	; 9
     e68:	8c 91       	ld	r24, X
     e6a:	19 97       	sbiw	r26, 0x09	; 9
     e6c:	8e 7f       	andi	r24, 0xFE	; 254
     e6e:	89 2b       	or	r24, r25
     e70:	19 96       	adiw	r26, 0x09	; 9
     e72:	8c 93       	st	X, r24
		TIMER1_CONTROL->TCCR1A_CFG.WGM1_1_BIT = (((timer1_obj->mode) >> 1) & 0x01);
     e74:	a6 e4       	ldi	r26, 0x46	; 70
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	ea 81       	ldd	r30, Y+2	; 0x02
     e7a:	fb 81       	ldd	r31, Y+3	; 0x03
     e7c:	80 85       	ldd	r24, Z+8	; 0x08
     e7e:	8f 70       	andi	r24, 0x0F	; 15
     e80:	88 2f       	mov	r24, r24
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	95 95       	asr	r25
     e86:	87 95       	ror	r24
     e88:	81 70       	andi	r24, 0x01	; 1
     e8a:	81 70       	andi	r24, 0x01	; 1
     e8c:	81 70       	andi	r24, 0x01	; 1
     e8e:	81 70       	andi	r24, 0x01	; 1
     e90:	98 2f       	mov	r25, r24
     e92:	99 0f       	add	r25, r25
     e94:	19 96       	adiw	r26, 0x09	; 9
     e96:	8c 91       	ld	r24, X
     e98:	19 97       	sbiw	r26, 0x09	; 9
     e9a:	8d 7f       	andi	r24, 0xFD	; 253
     e9c:	89 2b       	or	r24, r25
     e9e:	19 96       	adiw	r26, 0x09	; 9
     ea0:	8c 93       	st	X, r24
		TIMER1_CONTROL->TCCR1B_CFG.WGM1_2_BIT = (((timer1_obj->mode) >> 2) & 0x01);
     ea2:	a6 e4       	ldi	r26, 0x46	; 70
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	ea 81       	ldd	r30, Y+2	; 0x02
     ea8:	fb 81       	ldd	r31, Y+3	; 0x03
     eaa:	80 85       	ldd	r24, Z+8	; 0x08
     eac:	8f 70       	andi	r24, 0x0F	; 15
     eae:	88 2f       	mov	r24, r24
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	95 95       	asr	r25
     eb4:	87 95       	ror	r24
     eb6:	95 95       	asr	r25
     eb8:	87 95       	ror	r24
     eba:	81 70       	andi	r24, 0x01	; 1
     ebc:	81 70       	andi	r24, 0x01	; 1
     ebe:	81 70       	andi	r24, 0x01	; 1
     ec0:	81 70       	andi	r24, 0x01	; 1
     ec2:	98 2f       	mov	r25, r24
     ec4:	99 0f       	add	r25, r25
     ec6:	99 0f       	add	r25, r25
     ec8:	99 0f       	add	r25, r25
     eca:	18 96       	adiw	r26, 0x08	; 8
     ecc:	8c 91       	ld	r24, X
     ece:	18 97       	sbiw	r26, 0x08	; 8
     ed0:	87 7f       	andi	r24, 0xF7	; 247
     ed2:	89 2b       	or	r24, r25
     ed4:	18 96       	adiw	r26, 0x08	; 8
     ed6:	8c 93       	st	X, r24
		TIMER1_CONTROL->TCCR1B_CFG.WGM1_3_BIT = (((timer1_obj->mode) >> 3) & 0x01);
     ed8:	a6 e4       	ldi	r26, 0x46	; 70
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	ea 81       	ldd	r30, Y+2	; 0x02
     ede:	fb 81       	ldd	r31, Y+3	; 0x03
     ee0:	80 85       	ldd	r24, Z+8	; 0x08
     ee2:	8f 70       	andi	r24, 0x0F	; 15
     ee4:	88 2f       	mov	r24, r24
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	95 95       	asr	r25
     eea:	87 95       	ror	r24
     eec:	95 95       	asr	r25
     eee:	87 95       	ror	r24
     ef0:	95 95       	asr	r25
     ef2:	87 95       	ror	r24
     ef4:	81 70       	andi	r24, 0x01	; 1
     ef6:	81 70       	andi	r24, 0x01	; 1
     ef8:	81 70       	andi	r24, 0x01	; 1
     efa:	81 70       	andi	r24, 0x01	; 1
     efc:	98 2f       	mov	r25, r24
     efe:	92 95       	swap	r25
     f00:	90 7f       	andi	r25, 0xF0	; 240
     f02:	18 96       	adiw	r26, 0x08	; 8
     f04:	8c 91       	ld	r24, X
     f06:	18 97       	sbiw	r26, 0x08	; 8
     f08:	8f 7e       	andi	r24, 0xEF	; 239
     f0a:	89 2b       	or	r24, r25
     f0c:	18 96       	adiw	r26, 0x08	; 8
     f0e:	8c 93       	st	X, r24


		// To select the output compare match pin
		TIMER1_CONTROL->TCCR1A_CFG.COM1A_BITS = timer1_obj->ctc_mode_A_cfg;
     f10:	a6 e4       	ldi	r26, 0x46	; 70
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	ea 81       	ldd	r30, Y+2	; 0x02
     f16:	fb 81       	ldd	r31, Y+3	; 0x03
     f18:	80 85       	ldd	r24, Z+8	; 0x08
     f1a:	98 2f       	mov	r25, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	99 27       	eor	r25, r25
     f20:	99 1f       	adc	r25, r25
     f22:	81 85       	ldd	r24, Z+9	; 0x09
     f24:	81 70       	andi	r24, 0x01	; 1
     f26:	88 0f       	add	r24, r24
     f28:	89 2b       	or	r24, r25
     f2a:	98 2f       	mov	r25, r24
     f2c:	92 95       	swap	r25
     f2e:	99 0f       	add	r25, r25
     f30:	99 0f       	add	r25, r25
     f32:	90 7c       	andi	r25, 0xC0	; 192
     f34:	19 96       	adiw	r26, 0x09	; 9
     f36:	8c 91       	ld	r24, X
     f38:	19 97       	sbiw	r26, 0x09	; 9
     f3a:	8f 73       	andi	r24, 0x3F	; 63
     f3c:	89 2b       	or	r24, r25
     f3e:	19 96       	adiw	r26, 0x09	; 9
     f40:	8c 93       	st	X, r24
		TIMER1_CONTROL->TCCR1A_CFG.COM1B_BITS = timer1_obj->ctc_mode_B_cfg;
     f42:	a6 e4       	ldi	r26, 0x46	; 70
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	ea 81       	ldd	r30, Y+2	; 0x02
     f48:	fb 81       	ldd	r31, Y+3	; 0x03
     f4a:	81 85       	ldd	r24, Z+9	; 0x09
     f4c:	86 95       	lsr	r24
     f4e:	83 70       	andi	r24, 0x03	; 3
     f50:	83 70       	andi	r24, 0x03	; 3
     f52:	98 2f       	mov	r25, r24
     f54:	92 95       	swap	r25
     f56:	90 7f       	andi	r25, 0xF0	; 240
     f58:	19 96       	adiw	r26, 0x09	; 9
     f5a:	8c 91       	ld	r24, X
     f5c:	19 97       	sbiw	r26, 0x09	; 9
     f5e:	8f 7c       	andi	r24, 0xCF	; 207
     f60:	89 2b       	or	r24, r25
     f62:	19 96       	adiw	r26, 0x09	; 9
     f64:	8c 93       	st	X, r24
     f66:	19 97       	sbiw	r26, 0x09	; 9


		// Set trigger of ICU
		switch(timer1_obj->icu_trigger) {
     f68:	ea 81       	ldd	r30, Y+2	; 0x02
     f6a:	fb 81       	ldd	r31, Y+3	; 0x03
     f6c:	81 85       	ldd	r24, Z+9	; 0x09
     f6e:	86 95       	lsr	r24
     f70:	86 95       	lsr	r24
     f72:	86 95       	lsr	r24
     f74:	81 70       	andi	r24, 0x01	; 1
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	3d 83       	std	Y+5, r19	; 0x05
     f7c:	2c 83       	std	Y+4, r18	; 0x04
     f7e:	8c 81       	ldd	r24, Y+4	; 0x04
     f80:	9d 81       	ldd	r25, Y+5	; 0x05
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	59 f0       	breq	.+22     	; 0xf9c <Timer1_Init+0x16e>
     f86:	2c 81       	ldd	r18, Y+4	; 0x04
     f88:	3d 81       	ldd	r19, Y+5	; 0x05
     f8a:	21 30       	cpi	r18, 0x01	; 1
     f8c:	31 05       	cpc	r19, r1
     f8e:	61 f4       	brne	.+24     	; 0xfa8 <Timer1_Init+0x17a>
			case TIMER1_INPUT_CAPTURE_RISING_EDGE:
				TIMER1_ICU_TRIGGER_RISING_EDGE();
     f90:	e6 e4       	ldi	r30, 0x46	; 70
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 85       	ldd	r24, Z+8	; 0x08
     f96:	80 64       	ori	r24, 0x40	; 64
     f98:	80 87       	std	Z+8, r24	; 0x08
     f9a:	08 c0       	rjmp	.+16     	; 0xfac <Timer1_Init+0x17e>
				break;
			case TIMER1_INPUT_CAPTURE_FALLING_EDGE:
				TIMER1_ICU_TRIGGER_FALLING_EDGE();
     f9c:	e6 e4       	ldi	r30, 0x46	; 70
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 85       	ldd	r24, Z+8	; 0x08
     fa2:	8f 7b       	andi	r24, 0xBF	; 191
     fa4:	80 87       	std	Z+8, r24	; 0x08
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <Timer1_Init+0x17e>
				break;
			default:
				ret_status = OUT_OF_RANGE_VALUE;
     fa8:	82 e0       	ldi	r24, 0x02	; 2
     faa:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}
	return ret_status;
     fac:	89 81       	ldd	r24, Y+1	; 0x01
}
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <Timer1_start>:


Error_Status_t Timer1_start(const timer1_t *timer1_obj)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <Timer1_start+0x6>
     fc4:	0f 92       	push	r0
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	9b 83       	std	Y+3, r25	; 0x03
     fcc:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
     fce:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	9b 81       	ldd	r25, Y+3	; 0x03
     fd4:	00 97       	sbiw	r24, 0x00	; 0
     fd6:	19 f4       	brne	.+6      	; 0xfde <Timer1_start+0x20>
	{
		ret_status = NULL_POINTER;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	89 83       	std	Y+1, r24	; 0x01
     fdc:	35 c0       	rjmp	.+106    	; 0x1048 <Timer1_start+0x8a>
	}
	else
	{
		if(TIMER1_NORMAL_MODE == timer1_obj)
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	9b 81       	ldd	r25, Y+3	; 0x03
     fe2:	00 97       	sbiw	r24, 0x00	; 0
     fe4:	99 f4       	brne	.+38     	; 0x100c <Timer1_start+0x4e>
		{
			TIMER1_CONTROL->TCCR1B_CFG.CS1_BITS = timer1_obj->prescaler_select;
     fe6:	a6 e4       	ldi	r26, 0x46	; 70
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	ea 81       	ldd	r30, Y+2	; 0x02
     fec:	fb 81       	ldd	r31, Y+3	; 0x03
     fee:	80 85       	ldd	r24, Z+8	; 0x08
     ff0:	82 95       	swap	r24
     ff2:	8f 70       	andi	r24, 0x0F	; 15
     ff4:	87 70       	andi	r24, 0x07	; 7
     ff6:	98 2f       	mov	r25, r24
     ff8:	97 70       	andi	r25, 0x07	; 7
     ffa:	18 96       	adiw	r26, 0x08	; 8
     ffc:	8c 91       	ld	r24, X
     ffe:	18 97       	sbiw	r26, 0x08	; 8
    1000:	88 7f       	andi	r24, 0xF8	; 248
    1002:	89 2b       	or	r24, r25
    1004:	18 96       	adiw	r26, 0x08	; 8
    1006:	8c 93       	st	X, r24
    1008:	18 97       	sbiw	r26, 0x08	; 8
    100a:	1e c0       	rjmp	.+60     	; 0x1048 <Timer1_start+0x8a>
		}
		else
		{
			TIMER1_CONTROL->TCCR1B_CFG.CS1_BITS = timer1_obj->prescaler_select;
    100c:	a6 e4       	ldi	r26, 0x46	; 70
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	ea 81       	ldd	r30, Y+2	; 0x02
    1012:	fb 81       	ldd	r31, Y+3	; 0x03
    1014:	80 85       	ldd	r24, Z+8	; 0x08
    1016:	82 95       	swap	r24
    1018:	8f 70       	andi	r24, 0x0F	; 15
    101a:	87 70       	andi	r24, 0x07	; 7
    101c:	98 2f       	mov	r25, r24
    101e:	97 70       	andi	r25, 0x07	; 7
    1020:	18 96       	adiw	r26, 0x08	; 8
    1022:	8c 91       	ld	r24, X
    1024:	18 97       	sbiw	r26, 0x08	; 8
    1026:	88 7f       	andi	r24, 0xF8	; 248
    1028:	89 2b       	or	r24, r25
    102a:	18 96       	adiw	r26, 0x08	; 8
    102c:	8c 93       	st	X, r24
    102e:	18 97       	sbiw	r26, 0x08	; 8

			/* Initialize first value of OCR registers */
			TIMER1_CONTROL->OCR1AL_CFG = 0;
    1030:	e6 e4       	ldi	r30, 0x46	; 70
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	14 82       	std	Z+4, r1	; 0x04
			TIMER1_CONTROL->OCR1AH_CFG = 0;
    1036:	e6 e4       	ldi	r30, 0x46	; 70
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	15 82       	std	Z+5, r1	; 0x05
			TIMER1_CONTROL->OCR1BL_CFG = 0;
    103c:	e6 e4       	ldi	r30, 0x46	; 70
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	12 82       	std	Z+2, r1	; 0x02
			TIMER1_CONTROL->OCR1BH_CFG = 0;
    1042:	e6 e4       	ldi	r30, 0x46	; 70
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	13 82       	std	Z+3, r1	; 0x03
		}
	}
	return ret_status;
    1048:	89 81       	ldd	r24, Y+1	; 0x01
}
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <Timer1_stop>:


Error_Status_t Timer1_stop(const timer1_t *timer1_obj)
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	00 d0       	rcall	.+0      	; 0x105c <Timer1_stop+0x6>
    105c:	0f 92       	push	r0
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	9b 83       	std	Y+3, r25	; 0x03
    1064:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1066:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	9b 81       	ldd	r25, Y+3	; 0x03
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	19 f4       	brne	.+6      	; 0x1076 <Timer1_stop+0x20>
	{
		ret_status = NULL_POINTER;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	05 c0       	rjmp	.+10     	; 0x1080 <Timer1_stop+0x2a>
	}
	else
	{
		// assign no pre-scaler to pre-scaler select bits
		TIMER1_CONTROL->TCCR1B_CFG.CS1_BITS = TIMER1_STOP_TIMER;
    1076:	e6 e4       	ldi	r30, 0x46	; 70
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 85       	ldd	r24, Z+8	; 0x08
    107c:	88 7f       	andi	r24, 0xF8	; 248
    107e:	80 87       	std	Z+8, r24	; 0x08
	}
	return ret_status;
    1080:	89 81       	ldd	r24, Y+1	; 0x01
}
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <Timer1_GetCounts>:


Error_Status_t Timer1_GetCounts(u16 *Num_of_count)
{
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	00 d0       	rcall	.+0      	; 0x1094 <Timer1_GetCounts+0x6>
    1094:	0f 92       	push	r0
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	9b 83       	std	Y+3, r25	; 0x03
    109c:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    109e:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Num_of_count)
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	9b 81       	ldd	r25, Y+3	; 0x03
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	19 f4       	brne	.+6      	; 0x10ae <Timer1_GetCounts+0x20>
	{
		ret_status = NULL_POINTER;
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	89 83       	std	Y+1, r24	; 0x01
    10ac:	08 c0       	rjmp	.+16     	; 0x10be <Timer1_GetCounts+0x30>
	}
	else
	{
		*Num_of_count = TIMER1_CONTROL->TCNT1_CFG;
    10ae:	e6 e4       	ldi	r30, 0x46	; 70
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	86 81       	ldd	r24, Z+6	; 0x06
    10b4:	97 81       	ldd	r25, Z+7	; 0x07
    10b6:	ea 81       	ldd	r30, Y+2	; 0x02
    10b8:	fb 81       	ldd	r31, Y+3	; 0x03
    10ba:	91 83       	std	Z+1, r25	; 0x01
    10bc:	80 83       	st	Z, r24
	}
	return ret_status;
    10be:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <Timer1_setDelayTimeMilliSec>:


Error_Status_t Timer1_setDelayTimeMilliSec(const timer1_t *timer1_obj, u8 Time_ms)
{
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <Timer1_setDelayTimeMilliSec+0x6>
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <Timer1_setDelayTimeMilliSec+0x8>
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	9b 83       	std	Y+3, r25	; 0x03
    10da:	8a 83       	std	Y+2, r24	; 0x02
    10dc:	6c 83       	std	Y+4, r22	; 0x04
	Error_Status_t ret_status = NO_ERROR;
    10de:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	9b 81       	ldd	r25, Y+3	; 0x03
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	11 f4       	brne	.+4      	; 0x10ec <Timer1_setDelayTimeMilliSec+0x20>
	{
		ret_status = NULL_POINTER;
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return ret_status;
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	08 95       	ret

000010fc <Timer1_OVF_IntEnable>:


Error_Status_t Timer1_OVF_IntEnable(void)
{
    10fc:	df 93       	push	r29
    10fe:	cf 93       	push	r28
    1100:	0f 92       	push	r0
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
    1106:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.TOIE1_BIT = 1;
    1108:	e6 e4       	ldi	r30, 0x46	; 70
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	83 89       	ldd	r24, Z+19	; 0x13
    110e:	84 60       	ori	r24, 0x04	; 4
    1110:	83 8b       	std	Z+19, r24	; 0x13
	return ret_status;
    1112:	89 81       	ldd	r24, Y+1	; 0x01
}
    1114:	0f 90       	pop	r0
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <Timer1_OCA_IntEnable>:


Error_Status_t Timer1_OCA_IntEnable(void)
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	0f 92       	push	r0
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
    1126:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.OCIE1A_BIT = 1;
    1128:	e6 e4       	ldi	r30, 0x46	; 70
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	83 89       	ldd	r24, Z+19	; 0x13
    112e:	80 61       	ori	r24, 0x10	; 16
    1130:	83 8b       	std	Z+19, r24	; 0x13
	return ret_status;
    1132:	89 81       	ldd	r24, Y+1	; 0x01
}
    1134:	0f 90       	pop	r0
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <Timer1_OCB_IntEnable>:


Error_Status_t Timer1_OCB_IntEnable(void)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	0f 92       	push	r0
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
    1146:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.OCIE1B_BIT = 1;
    1148:	e6 e4       	ldi	r30, 0x46	; 70
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	83 89       	ldd	r24, Z+19	; 0x13
    114e:	88 60       	ori	r24, 0x08	; 8
    1150:	83 8b       	std	Z+19, r24	; 0x13
	return ret_status;
    1152:	89 81       	ldd	r24, Y+1	; 0x01
}
    1154:	0f 90       	pop	r0
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <Timer1_ICU_IntEnable>:


Error_Status_t Timer1_ICU_IntEnable(void)
{
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	0f 92       	push	r0
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
    1166:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.TICIE1_BIT = 1;
    1168:	e6 e4       	ldi	r30, 0x46	; 70
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	83 89       	ldd	r24, Z+19	; 0x13
    116e:	80 62       	ori	r24, 0x20	; 32
    1170:	83 8b       	std	Z+19, r24	; 0x13
	return ret_status;
    1172:	89 81       	ldd	r24, Y+1	; 0x01
}
    1174:	0f 90       	pop	r0
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <Timer1_OVF_IntDisable>:


Error_Status_t Timer1_OVF_IntDisable(void)
{
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	0f 92       	push	r0
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
    1186:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.TOIE1_BIT = 0;
    1188:	e6 e4       	ldi	r30, 0x46	; 70
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	83 89       	ldd	r24, Z+19	; 0x13
    118e:	8b 7f       	andi	r24, 0xFB	; 251
    1190:	83 8b       	std	Z+19, r24	; 0x13
	return ret_status;
    1192:	89 81       	ldd	r24, Y+1	; 0x01
}
    1194:	0f 90       	pop	r0
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	08 95       	ret

0000119c <Timer1_OCA_IntDisable>:


Error_Status_t Timer1_OCA_IntDisable(void)
{
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	0f 92       	push	r0
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
    11a6:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.OCIE1A_BIT = 0;
    11a8:	e6 e4       	ldi	r30, 0x46	; 70
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	83 89       	ldd	r24, Z+19	; 0x13
    11ae:	8f 7e       	andi	r24, 0xEF	; 239
    11b0:	83 8b       	std	Z+19, r24	; 0x13
	return ret_status;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <Timer1_OCB_IntDisable>:


Error_Status_t Timer1_OCB_IntDisable(void)
{
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	0f 92       	push	r0
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
    11c6:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.OCIE1B_BIT = 0;
    11c8:	e6 e4       	ldi	r30, 0x46	; 70
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	83 89       	ldd	r24, Z+19	; 0x13
    11ce:	87 7f       	andi	r24, 0xF7	; 247
    11d0:	83 8b       	std	Z+19, r24	; 0x13
	return ret_status;
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11d4:	0f 90       	pop	r0
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <Timer1_ICU_IntDisable>:


Error_Status_t Timer1_ICU_IntDisable(void)
{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	0f 92       	push	r0
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
    11e6:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.TICIE1_BIT = 0;
    11e8:	e6 e4       	ldi	r30, 0x46	; 70
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	83 89       	ldd	r24, Z+19	; 0x13
    11ee:	8f 7d       	andi	r24, 0xDF	; 223
    11f0:	83 8b       	std	Z+19, r24	; 0x13
	return ret_status;
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11f4:	0f 90       	pop	r0
    11f6:	cf 91       	pop	r28
    11f8:	df 91       	pop	r29
    11fa:	08 95       	ret

000011fc <Timer1_OVF_setCallBack>:


Error_Status_t Timer1_OVF_setCallBack(const timer1_t *timer1_obj)
{
    11fc:	df 93       	push	r29
    11fe:	cf 93       	push	r28
    1200:	00 d0       	rcall	.+0      	; 0x1202 <Timer1_OVF_setCallBack+0x6>
    1202:	0f 92       	push	r0
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	9b 83       	std	Y+3, r25	; 0x03
    120a:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    120c:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	9b 81       	ldd	r25, Y+3	; 0x03
    1212:	00 97       	sbiw	r24, 0x00	; 0
    1214:	19 f4       	brne	.+6      	; 0x121c <Timer1_OVF_setCallBack+0x20>
	{
		ret_status = NULL_POINTER;
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	89 83       	std	Y+1, r24	; 0x01
    121a:	08 c0       	rjmp	.+16     	; 0x122c <Timer1_OVF_setCallBack+0x30>
	}
	else
	{
		Timer1_Over_Flow_isr = timer1_obj->timer1_ovf_isr;
    121c:	ea 81       	ldd	r30, Y+2	; 0x02
    121e:	fb 81       	ldd	r31, Y+3	; 0x03
    1220:	80 81       	ld	r24, Z
    1222:	91 81       	ldd	r25, Z+1	; 0x01
    1224:	90 93 75 02 	sts	0x0275, r25
    1228:	80 93 74 02 	sts	0x0274, r24
	}
	return ret_status;
    122c:	89 81       	ldd	r24, Y+1	; 0x01
}
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <Timer1_OCA_setCallBack>:


Error_Status_t Timer1_OCA_setCallBack(const timer1_t *timer1_obj)
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	00 d0       	rcall	.+0      	; 0x1240 <Timer1_OCA_setCallBack+0x6>
    1240:	0f 92       	push	r0
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	9b 83       	std	Y+3, r25	; 0x03
    1248:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    124a:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	9b 81       	ldd	r25, Y+3	; 0x03
    1250:	00 97       	sbiw	r24, 0x00	; 0
    1252:	19 f4       	brne	.+6      	; 0x125a <Timer1_OCA_setCallBack+0x20>
	{
		ret_status = NULL_POINTER;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	89 83       	std	Y+1, r24	; 0x01
    1258:	08 c0       	rjmp	.+16     	; 0x126a <Timer1_OCA_setCallBack+0x30>
	}
	else
	{
		Timer1_CompA_isr = timer1_obj->timer1_compA_isr;
    125a:	ea 81       	ldd	r30, Y+2	; 0x02
    125c:	fb 81       	ldd	r31, Y+3	; 0x03
    125e:	82 81       	ldd	r24, Z+2	; 0x02
    1260:	93 81       	ldd	r25, Z+3	; 0x03
    1262:	90 93 79 02 	sts	0x0279, r25
    1266:	80 93 78 02 	sts	0x0278, r24
	}
	return ret_status;
    126a:	89 81       	ldd	r24, Y+1	; 0x01
}
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <Timer1_OCB_setCallBack>:
Error_Status_t Timer1_OCB_setCallBack(const timer1_t *timer1_obj)
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	00 d0       	rcall	.+0      	; 0x127e <Timer1_OCB_setCallBack+0x6>
    127e:	0f 92       	push	r0
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	9b 83       	std	Y+3, r25	; 0x03
    1286:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1288:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	9b 81       	ldd	r25, Y+3	; 0x03
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	19 f4       	brne	.+6      	; 0x1298 <Timer1_OCB_setCallBack+0x20>
	{
		ret_status = NULL_POINTER;
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	89 83       	std	Y+1, r24	; 0x01
    1296:	08 c0       	rjmp	.+16     	; 0x12a8 <Timer1_OCB_setCallBack+0x30>
	}
	else
	{
		Timer1_CompB_isr = timer1_obj->timer1_compB_isr;
    1298:	ea 81       	ldd	r30, Y+2	; 0x02
    129a:	fb 81       	ldd	r31, Y+3	; 0x03
    129c:	84 81       	ldd	r24, Z+4	; 0x04
    129e:	95 81       	ldd	r25, Z+5	; 0x05
    12a0:	90 93 77 02 	sts	0x0277, r25
    12a4:	80 93 76 02 	sts	0x0276, r24
	}
	return ret_status;
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <Timer1_ICU_setCallBack>:
Error_Status_t Timer1_ICU_setCallBack(const timer1_t *timer1_obj)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <Timer1_ICU_setCallBack+0x6>
    12bc:	0f 92       	push	r0
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	9b 83       	std	Y+3, r25	; 0x03
    12c4:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    12c6:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	9b 81       	ldd	r25, Y+3	; 0x03
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	19 f4       	brne	.+6      	; 0x12d6 <Timer1_ICU_setCallBack+0x20>
	{
		ret_status = NULL_POINTER;
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	08 c0       	rjmp	.+16     	; 0x12e6 <Timer1_ICU_setCallBack+0x30>
	}
	else
	{
		Timer1_Capt_isr = timer1_obj->timer1_capt_isr;
    12d6:	ea 81       	ldd	r30, Y+2	; 0x02
    12d8:	fb 81       	ldd	r31, Y+3	; 0x03
    12da:	86 81       	ldd	r24, Z+6	; 0x06
    12dc:	97 81       	ldd	r25, Z+7	; 0x07
    12de:	90 93 7b 02 	sts	0x027B, r25
    12e2:	80 93 7a 02 	sts	0x027A, r24
	}
	return ret_status;
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <Timer1_setFastPWM>:


Error_Status_t Timer1_setFastPWM(const timer1_t *timer1_obj, u8 frequency ,u8 duty)
{
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <Timer1_setFastPWM+0x6>
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <Timer1_setFastPWM+0x8>
    12fc:	0f 92       	push	r0
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	9b 83       	std	Y+3, r25	; 0x03
    1304:	8a 83       	std	Y+2, r24	; 0x02
    1306:	6c 83       	std	Y+4, r22	; 0x04
    1308:	4d 83       	std	Y+5, r20	; 0x05
	Error_Status_t ret_status = NO_ERROR;
    130a:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	9b 81       	ldd	r25, Y+3	; 0x03
    1310:	00 97       	sbiw	r24, 0x00	; 0
    1312:	11 f4       	brne	.+4      	; 0x1318 <Timer1_setFastPWM+0x24>
	{
		ret_status = NULL_POINTER;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return ret_status;
    1318:	89 81       	ldd	r24, Y+1	; 0x01
}
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <Timer1_setphaseCorrectPWM>:


Error_Status_t Timer1_setphaseCorrectPWM(const timer1_t *timer1_obj,u8 frequency , u8 duty)
{
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	00 d0       	rcall	.+0      	; 0x1330 <Timer1_setphaseCorrectPWM+0x6>
    1330:	00 d0       	rcall	.+0      	; 0x1332 <Timer1_setphaseCorrectPWM+0x8>
    1332:	0f 92       	push	r0
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	9b 83       	std	Y+3, r25	; 0x03
    133a:	8a 83       	std	Y+2, r24	; 0x02
    133c:	6c 83       	std	Y+4, r22	; 0x04
    133e:	4d 83       	std	Y+5, r20	; 0x05
	Error_Status_t ret_status = NO_ERROR;
    1340:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	9b 81       	ldd	r25, Y+3	; 0x03
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	11 f4       	brne	.+4      	; 0x134e <Timer1_setphaseCorrectPWM+0x24>
	{
		ret_status = NULL_POINTER;
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return ret_status;
    134e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <Timer1_ICU_SetTrigger>:


Error_Status_t Timer1_ICU_SetTrigger(u8 trigger)
{
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	00 d0       	rcall	.+0      	; 0x1366 <Timer1_ICU_SetTrigger+0x6>
    1366:	00 d0       	rcall	.+0      	; 0x1368 <Timer1_ICU_SetTrigger+0x8>
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    136e:	19 82       	std	Y+1, r1	; 0x01
	switch(trigger){
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	3c 83       	std	Y+4, r19	; 0x04
    1378:	2b 83       	std	Y+3, r18	; 0x03
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	9c 81       	ldd	r25, Y+4	; 0x04
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	59 f0       	breq	.+22     	; 0x1398 <Timer1_ICU_SetTrigger+0x38>
    1382:	2b 81       	ldd	r18, Y+3	; 0x03
    1384:	3c 81       	ldd	r19, Y+4	; 0x04
    1386:	21 30       	cpi	r18, 0x01	; 1
    1388:	31 05       	cpc	r19, r1
    138a:	61 f4       	brne	.+24     	; 0x13a4 <Timer1_ICU_SetTrigger+0x44>
	case TIMER1_INPUT_CAPTURE_RISING_EDGE:
		TIMER1_ICU_TRIGGER_RISING_EDGE();
    138c:	e6 e4       	ldi	r30, 0x46	; 70
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 85       	ldd	r24, Z+8	; 0x08
    1392:	80 64       	ori	r24, 0x40	; 64
    1394:	80 87       	std	Z+8, r24	; 0x08
    1396:	08 c0       	rjmp	.+16     	; 0x13a8 <Timer1_ICU_SetTrigger+0x48>
		break;
	case TIMER1_INPUT_CAPTURE_FALLING_EDGE:
		TIMER1_ICU_TRIGGER_FALLING_EDGE();
    1398:	e6 e4       	ldi	r30, 0x46	; 70
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 85       	ldd	r24, Z+8	; 0x08
    139e:	8f 7b       	andi	r24, 0xBF	; 191
    13a0:	80 87       	std	Z+8, r24	; 0x08
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <Timer1_ICU_SetTrigger+0x48>
		break;
	default:
		ret_status = OUT_OF_RANGE_VALUE;
    13a4:	82 e0       	ldi	r24, 0x02	; 2
    13a6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return ret_status;
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <Timer1_ICU_takeReading>:


Error_Status_t Timer1_ICU_takeReading(u16 *icr_reading)
{
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	00 d0       	rcall	.+0      	; 0x13be <Timer1_ICU_takeReading+0x6>
    13be:	0f 92       	push	r0
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	9b 83       	std	Y+3, r25	; 0x03
    13c6:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    13c8:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == icr_reading)
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	9b 81       	ldd	r25, Y+3	; 0x03
    13ce:	00 97       	sbiw	r24, 0x00	; 0
    13d0:	19 f4       	brne	.+6      	; 0x13d8 <Timer1_ICU_takeReading+0x20>
	{
		ret_status = NULL_POINTER;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	89 83       	std	Y+1, r24	; 0x01
    13d6:	08 c0       	rjmp	.+16     	; 0x13e8 <Timer1_ICU_takeReading+0x30>
	}
	else
	{
		*icr_reading = TIMER1_CONTROL->ICR1_CFG;
    13d8:	e6 e4       	ldi	r30, 0x46	; 70
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	91 81       	ldd	r25, Z+1	; 0x01
    13e0:	ea 81       	ldd	r30, Y+2	; 0x02
    13e2:	fb 81       	ldd	r31, Y+3	; 0x03
    13e4:	91 83       	std	Z+1, r25	; 0x01
    13e6:	80 83       	st	Z, r24
	}
	return ret_status;
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	08 95       	ret

000013f6 <prescaler_map>:


/* -------------------------------------------------- Helper functions ---------------------------------- */
u16 prescaler_map(u8 mapped_value)
{
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <prescaler_map+0x6>
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <prescaler_map+0x8>
    13fe:	0f 92       	push	r0
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
    1404:	89 83       	std	Y+1, r24	; 0x01
    switch(mapped_value){
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	3d 83       	std	Y+5, r19	; 0x05
    140e:	2c 83       	std	Y+4, r18	; 0x04
    1410:	8c 81       	ldd	r24, Y+4	; 0x04
    1412:	9d 81       	ldd	r25, Y+5	; 0x05
    1414:	83 30       	cpi	r24, 0x03	; 3
    1416:	91 05       	cpc	r25, r1
    1418:	29 f1       	breq	.+74     	; 0x1464 <prescaler_map+0x6e>
    141a:	2c 81       	ldd	r18, Y+4	; 0x04
    141c:	3d 81       	ldd	r19, Y+5	; 0x05
    141e:	24 30       	cpi	r18, 0x04	; 4
    1420:	31 05       	cpc	r19, r1
    1422:	5c f4       	brge	.+22     	; 0x143a <prescaler_map+0x44>
    1424:	8c 81       	ldd	r24, Y+4	; 0x04
    1426:	9d 81       	ldd	r25, Y+5	; 0x05
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	91 05       	cpc	r25, r1
    142c:	89 f0       	breq	.+34     	; 0x1450 <prescaler_map+0x5a>
    142e:	2c 81       	ldd	r18, Y+4	; 0x04
    1430:	3d 81       	ldd	r19, Y+5	; 0x05
    1432:	22 30       	cpi	r18, 0x02	; 2
    1434:	31 05       	cpc	r19, r1
    1436:	89 f0       	breq	.+34     	; 0x145a <prescaler_map+0x64>
    1438:	24 c0       	rjmp	.+72     	; 0x1482 <prescaler_map+0x8c>
    143a:	8c 81       	ldd	r24, Y+4	; 0x04
    143c:	9d 81       	ldd	r25, Y+5	; 0x05
    143e:	84 30       	cpi	r24, 0x04	; 4
    1440:	91 05       	cpc	r25, r1
    1442:	a9 f0       	breq	.+42     	; 0x146e <prescaler_map+0x78>
    1444:	2c 81       	ldd	r18, Y+4	; 0x04
    1446:	3d 81       	ldd	r19, Y+5	; 0x05
    1448:	25 30       	cpi	r18, 0x05	; 5
    144a:	31 05       	cpc	r19, r1
    144c:	a9 f0       	breq	.+42     	; 0x1478 <prescaler_map+0x82>
    144e:	19 c0       	rjmp	.+50     	; 0x1482 <prescaler_map+0x8c>
        case TIMER1_PRESCALER_DIV_1:return 1;
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	9b 83       	std	Y+3, r25	; 0x03
    1456:	8a 83       	std	Y+2, r24	; 0x02
    1458:	18 c0       	rjmp	.+48     	; 0x148a <prescaler_map+0x94>
        case TIMER1_PRESCALER_DIV_8:return 8;
    145a:	28 e0       	ldi	r18, 0x08	; 8
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	3b 83       	std	Y+3, r19	; 0x03
    1460:	2a 83       	std	Y+2, r18	; 0x02
    1462:	13 c0       	rjmp	.+38     	; 0x148a <prescaler_map+0x94>
        case TIMER1_PRESCALER_DIV_64:return 64;
    1464:	80 e4       	ldi	r24, 0x40	; 64
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	9b 83       	std	Y+3, r25	; 0x03
    146a:	8a 83       	std	Y+2, r24	; 0x02
    146c:	0e c0       	rjmp	.+28     	; 0x148a <prescaler_map+0x94>
        case TIMER1_PRESCALER_DIV_256:return 256;
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	31 e0       	ldi	r19, 0x01	; 1
    1472:	3b 83       	std	Y+3, r19	; 0x03
    1474:	2a 83       	std	Y+2, r18	; 0x02
    1476:	09 c0       	rjmp	.+18     	; 0x148a <prescaler_map+0x94>
        case TIMER1_PRESCALER_DIV_1024:return 1024;
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	94 e0       	ldi	r25, 0x04	; 4
    147c:	9b 83       	std	Y+3, r25	; 0x03
    147e:	8a 83       	std	Y+2, r24	; 0x02
    1480:	04 c0       	rjmp	.+8      	; 0x148a <prescaler_map+0x94>
        default:return 1;
    1482:	21 e0       	ldi	r18, 0x01	; 1
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	3b 83       	std	Y+3, r19	; 0x03
    1488:	2a 83       	std	Y+2, r18	; 0x02
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	9b 81       	ldd	r25, Y+3	; 0x03
    }
}
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <__vector_9>:

/* ---------------------------------------- ISRs ---------------------------- */
// Define the ISR function with attribute
void TIMER1_OVF_VECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER1_OVF_VECTOR(void)
{
    149e:	1f 92       	push	r1
    14a0:	0f 92       	push	r0
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	0f 92       	push	r0
    14a6:	11 24       	eor	r1, r1
    14a8:	2f 93       	push	r18
    14aa:	3f 93       	push	r19
    14ac:	4f 93       	push	r20
    14ae:	5f 93       	push	r21
    14b0:	6f 93       	push	r22
    14b2:	7f 93       	push	r23
    14b4:	8f 93       	push	r24
    14b6:	9f 93       	push	r25
    14b8:	af 93       	push	r26
    14ba:	bf 93       	push	r27
    14bc:	ef 93       	push	r30
    14be:	ff 93       	push	r31
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	TIMER1_CONTROL->TIFR1_CFG.TOV1_BIT = 0;
    14c8:	e6 e4       	ldi	r30, 0x46	; 70
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	82 89       	ldd	r24, Z+18	; 0x12
    14ce:	8b 7f       	andi	r24, 0xFB	; 251
    14d0:	82 8b       	std	Z+18, r24	; 0x12

	// execute ISR if it existed
	if(Timer1_Over_Flow_isr)
    14d2:	80 91 74 02 	lds	r24, 0x0274
    14d6:	90 91 75 02 	lds	r25, 0x0275
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	29 f0       	breq	.+10     	; 0x14e8 <__vector_9+0x4a>
	{
		Timer1_Over_Flow_isr();
    14de:	e0 91 74 02 	lds	r30, 0x0274
    14e2:	f0 91 75 02 	lds	r31, 0x0275
    14e6:	09 95       	icall
	}
}
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	ff 91       	pop	r31
    14ee:	ef 91       	pop	r30
    14f0:	bf 91       	pop	r27
    14f2:	af 91       	pop	r26
    14f4:	9f 91       	pop	r25
    14f6:	8f 91       	pop	r24
    14f8:	7f 91       	pop	r23
    14fa:	6f 91       	pop	r22
    14fc:	5f 91       	pop	r21
    14fe:	4f 91       	pop	r20
    1500:	3f 91       	pop	r19
    1502:	2f 91       	pop	r18
    1504:	0f 90       	pop	r0
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	0f 90       	pop	r0
    150a:	1f 90       	pop	r1
    150c:	18 95       	reti

0000150e <__vector_8>:


// Define the ISR function with attribute
void TIMER1_COMPBVECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER1_COMPBVECTOR(void)
{
    150e:	1f 92       	push	r1
    1510:	0f 92       	push	r0
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	0f 92       	push	r0
    1516:	11 24       	eor	r1, r1
    1518:	2f 93       	push	r18
    151a:	3f 93       	push	r19
    151c:	4f 93       	push	r20
    151e:	5f 93       	push	r21
    1520:	6f 93       	push	r22
    1522:	7f 93       	push	r23
    1524:	8f 93       	push	r24
    1526:	9f 93       	push	r25
    1528:	af 93       	push	r26
    152a:	bf 93       	push	r27
    152c:	ef 93       	push	r30
    152e:	ff 93       	push	r31
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	TIMER1_CONTROL->TIFR1_CFG.OCF1B_BIT = 0;
    1538:	e6 e4       	ldi	r30, 0x46	; 70
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	82 89       	ldd	r24, Z+18	; 0x12
    153e:	87 7f       	andi	r24, 0xF7	; 247
    1540:	82 8b       	std	Z+18, r24	; 0x12

	// execute ISR if it existed
	if(Timer1_CompB_isr)
    1542:	80 91 76 02 	lds	r24, 0x0276
    1546:	90 91 77 02 	lds	r25, 0x0277
    154a:	00 97       	sbiw	r24, 0x00	; 0
    154c:	29 f0       	breq	.+10     	; 0x1558 <__vector_8+0x4a>
	{
		Timer1_CompB_isr();
    154e:	e0 91 76 02 	lds	r30, 0x0276
    1552:	f0 91 77 02 	lds	r31, 0x0277
    1556:	09 95       	icall
	}
}
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	ff 91       	pop	r31
    155e:	ef 91       	pop	r30
    1560:	bf 91       	pop	r27
    1562:	af 91       	pop	r26
    1564:	9f 91       	pop	r25
    1566:	8f 91       	pop	r24
    1568:	7f 91       	pop	r23
    156a:	6f 91       	pop	r22
    156c:	5f 91       	pop	r21
    156e:	4f 91       	pop	r20
    1570:	3f 91       	pop	r19
    1572:	2f 91       	pop	r18
    1574:	0f 90       	pop	r0
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	0f 90       	pop	r0
    157a:	1f 90       	pop	r1
    157c:	18 95       	reti

0000157e <__vector_7>:


// Define the ISR function with attribute
void TIMER1_COMPAVECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER1_COMPAVECTOR(void)
{
    157e:	1f 92       	push	r1
    1580:	0f 92       	push	r0
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	0f 92       	push	r0
    1586:	11 24       	eor	r1, r1
    1588:	2f 93       	push	r18
    158a:	3f 93       	push	r19
    158c:	4f 93       	push	r20
    158e:	5f 93       	push	r21
    1590:	6f 93       	push	r22
    1592:	7f 93       	push	r23
    1594:	8f 93       	push	r24
    1596:	9f 93       	push	r25
    1598:	af 93       	push	r26
    159a:	bf 93       	push	r27
    159c:	ef 93       	push	r30
    159e:	ff 93       	push	r31
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	TIMER1_CONTROL->TIFR1_CFG.OCF1A_BIT = 0;
    15a8:	e6 e4       	ldi	r30, 0x46	; 70
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	82 89       	ldd	r24, Z+18	; 0x12
    15ae:	8f 7e       	andi	r24, 0xEF	; 239
    15b0:	82 8b       	std	Z+18, r24	; 0x12

	// execute ISR if it existed
	if(Timer1_CompA_isr)
    15b2:	80 91 78 02 	lds	r24, 0x0278
    15b6:	90 91 79 02 	lds	r25, 0x0279
    15ba:	00 97       	sbiw	r24, 0x00	; 0
    15bc:	29 f0       	breq	.+10     	; 0x15c8 <__vector_7+0x4a>
	{
		Timer1_CompA_isr();
    15be:	e0 91 78 02 	lds	r30, 0x0278
    15c2:	f0 91 79 02 	lds	r31, 0x0279
    15c6:	09 95       	icall
	}
}
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	ff 91       	pop	r31
    15ce:	ef 91       	pop	r30
    15d0:	bf 91       	pop	r27
    15d2:	af 91       	pop	r26
    15d4:	9f 91       	pop	r25
    15d6:	8f 91       	pop	r24
    15d8:	7f 91       	pop	r23
    15da:	6f 91       	pop	r22
    15dc:	5f 91       	pop	r21
    15de:	4f 91       	pop	r20
    15e0:	3f 91       	pop	r19
    15e2:	2f 91       	pop	r18
    15e4:	0f 90       	pop	r0
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	0f 90       	pop	r0
    15ea:	1f 90       	pop	r1
    15ec:	18 95       	reti

000015ee <__vector_6>:


// Define the ISR function with attribute
void TIMER1_CAPTVECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER1_CAPTVECTOR(void)
{
    15ee:	1f 92       	push	r1
    15f0:	0f 92       	push	r0
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	0f 92       	push	r0
    15f6:	11 24       	eor	r1, r1
    15f8:	2f 93       	push	r18
    15fa:	3f 93       	push	r19
    15fc:	4f 93       	push	r20
    15fe:	5f 93       	push	r21
    1600:	6f 93       	push	r22
    1602:	7f 93       	push	r23
    1604:	8f 93       	push	r24
    1606:	9f 93       	push	r25
    1608:	af 93       	push	r26
    160a:	bf 93       	push	r27
    160c:	ef 93       	push	r30
    160e:	ff 93       	push	r31
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	TIMER1_CONTROL->TIFR1_CFG.ICF1_BIT = 0;
    1618:	e6 e4       	ldi	r30, 0x46	; 70
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	82 89       	ldd	r24, Z+18	; 0x12
    161e:	8f 7d       	andi	r24, 0xDF	; 223
    1620:	82 8b       	std	Z+18, r24	; 0x12

	// execute ISR if it existed
	if(Timer1_Capt_isr)
    1622:	80 91 7a 02 	lds	r24, 0x027A
    1626:	90 91 7b 02 	lds	r25, 0x027B
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	29 f0       	breq	.+10     	; 0x1638 <__vector_6+0x4a>
	{
		Timer1_Capt_isr();
    162e:	e0 91 7a 02 	lds	r30, 0x027A
    1632:	f0 91 7b 02 	lds	r31, 0x027B
    1636:	09 95       	icall
	}
}
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	ff 91       	pop	r31
    163e:	ef 91       	pop	r30
    1640:	bf 91       	pop	r27
    1642:	af 91       	pop	r26
    1644:	9f 91       	pop	r25
    1646:	8f 91       	pop	r24
    1648:	7f 91       	pop	r23
    164a:	6f 91       	pop	r22
    164c:	5f 91       	pop	r21
    164e:	4f 91       	pop	r20
    1650:	3f 91       	pop	r19
    1652:	2f 91       	pop	r18
    1654:	0f 90       	pop	r0
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	0f 90       	pop	r0
    165a:	1f 90       	pop	r1
    165c:	18 95       	reti

0000165e <Timer0_Init>:
//u32 rem_counts = 0;
//static u32 countr_ovf = 0;


Error_Status_t Timer0_Init(const timer0_t *timer0_obj)
{
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	00 d0       	rcall	.+0      	; 0x1664 <Timer0_Init+0x6>
    1664:	0f 92       	push	r0
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	9b 83       	std	Y+3, r25	; 0x03
    166c:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    166e:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	9b 81       	ldd	r25, Y+3	; 0x03
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	19 f4       	brne	.+6      	; 0x167e <Timer0_Init+0x20>
	{
		ret_status = NULL_POINTER;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	89 83       	std	Y+1, r24	; 0x01
    167c:	4a c0       	rjmp	.+148    	; 0x1712 <Timer0_Init+0xb4>
	}
	else
	{
		// To select mode
		TIMER0_CONTROL->TCCR0_CFG.WGM00_BIT = (((timer0_obj->mode) >> 0) & 0x01);
    167e:	a2 e5       	ldi	r26, 0x52	; 82
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	ea 81       	ldd	r30, Y+2	; 0x02
    1684:	fb 81       	ldd	r31, Y+3	; 0x03
    1686:	84 81       	ldd	r24, Z+4	; 0x04
    1688:	86 95       	lsr	r24
    168a:	86 95       	lsr	r24
    168c:	86 95       	lsr	r24
    168e:	83 70       	andi	r24, 0x03	; 3
    1690:	81 70       	andi	r24, 0x01	; 1
    1692:	81 70       	andi	r24, 0x01	; 1
    1694:	81 70       	andi	r24, 0x01	; 1
    1696:	81 70       	andi	r24, 0x01	; 1
    1698:	98 2f       	mov	r25, r24
    169a:	92 95       	swap	r25
    169c:	99 0f       	add	r25, r25
    169e:	99 0f       	add	r25, r25
    16a0:	90 7c       	andi	r25, 0xC0	; 192
    16a2:	11 96       	adiw	r26, 0x01	; 1
    16a4:	8c 91       	ld	r24, X
    16a6:	11 97       	sbiw	r26, 0x01	; 1
    16a8:	8f 7b       	andi	r24, 0xBF	; 191
    16aa:	89 2b       	or	r24, r25
    16ac:	11 96       	adiw	r26, 0x01	; 1
    16ae:	8c 93       	st	X, r24
		TIMER0_CONTROL->TCCR0_CFG.WGM01_BIT = (((timer0_obj->mode) >> 1) & 0x01);
    16b0:	a2 e5       	ldi	r26, 0x52	; 82
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	ea 81       	ldd	r30, Y+2	; 0x02
    16b6:	fb 81       	ldd	r31, Y+3	; 0x03
    16b8:	84 81       	ldd	r24, Z+4	; 0x04
    16ba:	86 95       	lsr	r24
    16bc:	86 95       	lsr	r24
    16be:	86 95       	lsr	r24
    16c0:	83 70       	andi	r24, 0x03	; 3
    16c2:	88 2f       	mov	r24, r24
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	95 95       	asr	r25
    16c8:	87 95       	ror	r24
    16ca:	81 70       	andi	r24, 0x01	; 1
    16cc:	81 70       	andi	r24, 0x01	; 1
    16ce:	81 70       	andi	r24, 0x01	; 1
    16d0:	81 70       	andi	r24, 0x01	; 1
    16d2:	98 2f       	mov	r25, r24
    16d4:	99 0f       	add	r25, r25
    16d6:	99 0f       	add	r25, r25
    16d8:	99 0f       	add	r25, r25
    16da:	11 96       	adiw	r26, 0x01	; 1
    16dc:	8c 91       	ld	r24, X
    16de:	11 97       	sbiw	r26, 0x01	; 1
    16e0:	87 7f       	andi	r24, 0xF7	; 247
    16e2:	89 2b       	or	r24, r25
    16e4:	11 96       	adiw	r26, 0x01	; 1
    16e6:	8c 93       	st	X, r24

		// To select the output compare match pin
		TIMER0_CONTROL->TCCR0_CFG.COM0_BITS = timer0_obj->ctc_mode_cfg;
    16e8:	a2 e5       	ldi	r26, 0x52	; 82
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	ea 81       	ldd	r30, Y+2	; 0x02
    16ee:	fb 81       	ldd	r31, Y+3	; 0x03
    16f0:	84 81       	ldd	r24, Z+4	; 0x04
    16f2:	82 95       	swap	r24
    16f4:	86 95       	lsr	r24
    16f6:	87 70       	andi	r24, 0x07	; 7
    16f8:	83 70       	andi	r24, 0x03	; 3
    16fa:	83 70       	andi	r24, 0x03	; 3
    16fc:	98 2f       	mov	r25, r24
    16fe:	92 95       	swap	r25
    1700:	90 7f       	andi	r25, 0xF0	; 240
    1702:	11 96       	adiw	r26, 0x01	; 1
    1704:	8c 91       	ld	r24, X
    1706:	11 97       	sbiw	r26, 0x01	; 1
    1708:	8f 7c       	andi	r24, 0xCF	; 207
    170a:	89 2b       	or	r24, r25
    170c:	11 96       	adiw	r26, 0x01	; 1
    170e:	8c 93       	st	X, r24
    1710:	11 97       	sbiw	r26, 0x01	; 1
	}
	return ret_status;
    1712:	89 81       	ldd	r24, Y+1	; 0x01
}
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret

00001720 <Timer0_start>:


Error_Status_t Timer0_start(const timer0_t *timer0_obj)
{
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	00 d0       	rcall	.+0      	; 0x1726 <Timer0_start+0x6>
    1726:	0f 92       	push	r0
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	9b 83       	std	Y+3, r25	; 0x03
    172e:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1730:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	9b 81       	ldd	r25, Y+3	; 0x03
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	19 f4       	brne	.+6      	; 0x1740 <Timer0_start+0x20>
	{
		ret_status = NULL_POINTER;
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	2e c0       	rjmp	.+92     	; 0x179c <Timer0_start+0x7c>
	}
	else
	{
		if(TIMER0_NORMAL_MODE == timer0_obj->mode){
    1740:	ea 81       	ldd	r30, Y+2	; 0x02
    1742:	fb 81       	ldd	r31, Y+3	; 0x03
    1744:	84 81       	ldd	r24, Z+4	; 0x04
    1746:	88 71       	andi	r24, 0x18	; 24
    1748:	88 23       	and	r24, r24
    174a:	89 f4       	brne	.+34     	; 0x176e <Timer0_start+0x4e>
			TIMER0_CONTROL->TCCR0_CFG.CS0_BITS = timer0_obj->prescaler_select;
    174c:	a2 e5       	ldi	r26, 0x52	; 82
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	ea 81       	ldd	r30, Y+2	; 0x02
    1752:	fb 81       	ldd	r31, Y+3	; 0x03
    1754:	84 81       	ldd	r24, Z+4	; 0x04
    1756:	87 70       	andi	r24, 0x07	; 7
    1758:	98 2f       	mov	r25, r24
    175a:	97 70       	andi	r25, 0x07	; 7
    175c:	11 96       	adiw	r26, 0x01	; 1
    175e:	8c 91       	ld	r24, X
    1760:	11 97       	sbiw	r26, 0x01	; 1
    1762:	88 7f       	andi	r24, 0xF8	; 248
    1764:	89 2b       	or	r24, r25
    1766:	11 96       	adiw	r26, 0x01	; 1
    1768:	8c 93       	st	X, r24
    176a:	11 97       	sbiw	r26, 0x01	; 1
    176c:	17 c0       	rjmp	.+46     	; 0x179c <Timer0_start+0x7c>
		}
		else
		{
			TIMER0_CONTROL->TCCR0_CFG.CS0_BITS = timer0_obj->prescaler_select;
    176e:	a2 e5       	ldi	r26, 0x52	; 82
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	ea 81       	ldd	r30, Y+2	; 0x02
    1774:	fb 81       	ldd	r31, Y+3	; 0x03
    1776:	84 81       	ldd	r24, Z+4	; 0x04
    1778:	87 70       	andi	r24, 0x07	; 7
    177a:	98 2f       	mov	r25, r24
    177c:	97 70       	andi	r25, 0x07	; 7
    177e:	11 96       	adiw	r26, 0x01	; 1
    1780:	8c 91       	ld	r24, X
    1782:	11 97       	sbiw	r26, 0x01	; 1
    1784:	88 7f       	andi	r24, 0xF8	; 248
    1786:	89 2b       	or	r24, r25
    1788:	11 96       	adiw	r26, 0x01	; 1
    178a:	8c 93       	st	X, r24
			DIO_voidSetPinDirection(PORTB_INDEX, PIN3_INDEX, GPIO_DIRECTION_OUTPUT);
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	63 e0       	ldi	r22, 0x03	; 3
    1790:	41 e0       	ldi	r20, 0x01	; 1
    1792:	0e 94 29 13 	call	0x2652	; 0x2652 <DIO_voidSetPinDirection>
			TIMER0_CONTROL->OCR0_CFG = 0;
    1796:	e2 e5       	ldi	r30, 0x52	; 82
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	12 86       	std	Z+10, r1	; 0x0a
		}

	}
	return ret_status;
    179c:	89 81       	ldd	r24, Y+1	; 0x01
}
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <Timer0_stop>:
Error_Status_t Timer0_stop(const timer0_t *timer0_obj)
{
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <Timer0_stop+0x6>
    17b0:	0f 92       	push	r0
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
    17b6:	9b 83       	std	Y+3, r25	; 0x03
    17b8:	8a 83       	std	Y+2, r24	; 0x02

	Error_Status_t ret_status = NO_ERROR;
    17ba:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	9b 81       	ldd	r25, Y+3	; 0x03
    17c0:	00 97       	sbiw	r24, 0x00	; 0
    17c2:	19 f4       	brne	.+6      	; 0x17ca <Timer0_stop+0x20>
	{
		ret_status = NULL_POINTER;
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	89 83       	std	Y+1, r24	; 0x01
    17c8:	05 c0       	rjmp	.+10     	; 0x17d4 <Timer0_stop+0x2a>
	}
	else
	{
		// assign no pre-scaler to pre-scaler select bits
		TIMER0_CONTROL->TCCR0_CFG.CS0_BITS = TIMER0_STOP_TIMER;
    17ca:	e2 e5       	ldi	r30, 0x52	; 82
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	81 81       	ldd	r24, Z+1	; 0x01
    17d0:	88 7f       	andi	r24, 0xF8	; 248
    17d2:	81 83       	std	Z+1, r24	; 0x01
	}
	return ret_status;
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	cf 91       	pop	r28
    17de:	df 91       	pop	r29
    17e0:	08 95       	ret

000017e2 <Timer0_GetCounts>:
Error_Status_t Timer0_GetCounts(const timer0_t *timer0_obj, u8 *Num_of_count)
{
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	00 d0       	rcall	.+0      	; 0x17e8 <Timer0_GetCounts+0x6>
    17e8:	00 d0       	rcall	.+0      	; 0x17ea <Timer0_GetCounts+0x8>
    17ea:	0f 92       	push	r0
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	9b 83       	std	Y+3, r25	; 0x03
    17f2:	8a 83       	std	Y+2, r24	; 0x02
    17f4:	7d 83       	std	Y+5, r23	; 0x05
    17f6:	6c 83       	std	Y+4, r22	; 0x04
	Error_Status_t ret_status = NO_ERROR;
    17f8:	19 82       	std	Y+1, r1	; 0x01
	if((NULL == timer0_obj) || (NULL == Num_of_count))
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	9b 81       	ldd	r25, Y+3	; 0x03
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	21 f0       	breq	.+8      	; 0x180a <Timer0_GetCounts+0x28>
    1802:	8c 81       	ldd	r24, Y+4	; 0x04
    1804:	9d 81       	ldd	r25, Y+5	; 0x05
    1806:	00 97       	sbiw	r24, 0x00	; 0
    1808:	19 f4       	brne	.+6      	; 0x1810 <Timer0_GetCounts+0x2e>
	{
		ret_status = NULL_POINTER;
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	89 83       	std	Y+1, r24	; 0x01
    180e:	06 c0       	rjmp	.+12     	; 0x181c <Timer0_GetCounts+0x3a>
	}
	else
	{
		*Num_of_count = TIMER0_CONTROL->TCNT0_CFG;
    1810:	e2 e5       	ldi	r30, 0x52	; 82
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	ec 81       	ldd	r30, Y+4	; 0x04
    1818:	fd 81       	ldd	r31, Y+5	; 0x05
    181a:	80 83       	st	Z, r24
	}
	return ret_status;
    181c:	89 81       	ldd	r24, Y+1	; 0x01
}
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	cf 91       	pop	r28
    182a:	df 91       	pop	r29
    182c:	08 95       	ret

0000182e <Timer0_setDelayTimeMilliSec>:



Error_Status_t Timer0_setDelayTimeMilliSec(const timer0_t *timer0_obj , u8 Time_ms, u32 *num_of_ovfs, u32 *rem_counts)
{
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	2e 97       	sbiw	r28, 0x0e	; 14
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	9f 83       	std	Y+7, r25	; 0x07
    1844:	8e 83       	std	Y+6, r24	; 0x06
    1846:	68 87       	std	Y+8, r22	; 0x08
    1848:	5a 87       	std	Y+10, r21	; 0x0a
    184a:	49 87       	std	Y+9, r20	; 0x09
    184c:	3c 87       	std	Y+12, r19	; 0x0c
    184e:	2b 87       	std	Y+11, r18	; 0x0b
	Error_Status_t ret_status = NO_ERROR;
    1850:	1d 82       	std	Y+5, r1	; 0x05
	u32 Total_counts = 0;
    1852:	19 82       	std	Y+1, r1	; 0x01
    1854:	1a 82       	std	Y+2, r1	; 0x02
    1856:	1b 82       	std	Y+3, r1	; 0x03
    1858:	1c 82       	std	Y+4, r1	; 0x04

	if(NULL == timer0_obj)
    185a:	8e 81       	ldd	r24, Y+6	; 0x06
    185c:	9f 81       	ldd	r25, Y+7	; 0x07
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	19 f4       	brne	.+6      	; 0x1868 <Timer0_setDelayTimeMilliSec+0x3a>
	{
		ret_status = NULL_POINTER;
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	8d 83       	std	Y+5, r24	; 0x05
    1866:	d0 c0       	rjmp	.+416    	; 0x1a08 <Timer0_setDelayTimeMilliSec+0x1da>
	}
	else
	{
		if(TIMER0_NORMAL_MODE == timer0_obj->mode)
    1868:	ee 81       	ldd	r30, Y+6	; 0x06
    186a:	ff 81       	ldd	r31, Y+7	; 0x07
    186c:	84 81       	ldd	r24, Z+4	; 0x04
    186e:	88 71       	andi	r24, 0x18	; 24
    1870:	88 23       	and	r24, r24
    1872:	09 f0       	breq	.+2      	; 0x1876 <Timer0_setDelayTimeMilliSec+0x48>
    1874:	c9 c0       	rjmp	.+402    	; 0x1a08 <Timer0_setDelayTimeMilliSec+0x1da>
		{
			switch(timer0_obj->prescaler_select){
    1876:	ee 81       	ldd	r30, Y+6	; 0x06
    1878:	ff 81       	ldd	r31, Y+7	; 0x07
    187a:	84 81       	ldd	r24, Z+4	; 0x04
    187c:	87 70       	andi	r24, 0x07	; 7
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	3e 87       	std	Y+14, r19	; 0x0e
    1884:	2d 87       	std	Y+13, r18	; 0x0d
    1886:	8d 85       	ldd	r24, Y+13	; 0x0d
    1888:	9e 85       	ldd	r25, Y+14	; 0x0e
    188a:	83 30       	cpi	r24, 0x03	; 3
    188c:	91 05       	cpc	r25, r1
    188e:	09 f4       	brne	.+2      	; 0x1892 <Timer0_setDelayTimeMilliSec+0x64>
    1890:	4d c0       	rjmp	.+154    	; 0x192c <Timer0_setDelayTimeMilliSec+0xfe>
    1892:	2d 85       	ldd	r18, Y+13	; 0x0d
    1894:	3e 85       	ldd	r19, Y+14	; 0x0e
    1896:	24 30       	cpi	r18, 0x04	; 4
    1898:	31 05       	cpc	r19, r1
    189a:	5c f4       	brge	.+22     	; 0x18b2 <Timer0_setDelayTimeMilliSec+0x84>
    189c:	8d 85       	ldd	r24, Y+13	; 0x0d
    189e:	9e 85       	ldd	r25, Y+14	; 0x0e
    18a0:	81 30       	cpi	r24, 0x01	; 1
    18a2:	91 05       	cpc	r25, r1
    18a4:	99 f0       	breq	.+38     	; 0x18cc <Timer0_setDelayTimeMilliSec+0x9e>
    18a6:	2d 85       	ldd	r18, Y+13	; 0x0d
    18a8:	3e 85       	ldd	r19, Y+14	; 0x0e
    18aa:	22 30       	cpi	r18, 0x02	; 2
    18ac:	31 05       	cpc	r19, r1
    18ae:	11 f1       	breq	.+68     	; 0x18f4 <Timer0_setDelayTimeMilliSec+0xc6>
    18b0:	8e c0       	rjmp	.+284    	; 0x19ce <Timer0_setDelayTimeMilliSec+0x1a0>
    18b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b6:	84 30       	cpi	r24, 0x04	; 4
    18b8:	91 05       	cpc	r25, r1
    18ba:	09 f4       	brne	.+2      	; 0x18be <Timer0_setDelayTimeMilliSec+0x90>
    18bc:	53 c0       	rjmp	.+166    	; 0x1964 <Timer0_setDelayTimeMilliSec+0x136>
    18be:	2d 85       	ldd	r18, Y+13	; 0x0d
    18c0:	3e 85       	ldd	r19, Y+14	; 0x0e
    18c2:	25 30       	cpi	r18, 0x05	; 5
    18c4:	31 05       	cpc	r19, r1
    18c6:	09 f4       	brne	.+2      	; 0x18ca <Timer0_setDelayTimeMilliSec+0x9c>
    18c8:	65 c0       	rjmp	.+202    	; 0x1994 <Timer0_setDelayTimeMilliSec+0x166>
    18ca:	81 c0       	rjmp	.+258    	; 0x19ce <Timer0_setDelayTimeMilliSec+0x1a0>
			case TIMER0_PRESCALER_DIV_1:
				Total_counts = (F_CPU * Time_ms * 1000) / 1;    // 1 : prescaler
    18cc:	88 85       	ldd	r24, Y+8	; 0x08
    18ce:	88 2f       	mov	r24, r24
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	a0 e0       	ldi	r26, 0x00	; 0
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 ea       	ldi	r19, 0xA0	; 160
    18da:	4c ea       	ldi	r20, 0xAC	; 172
    18dc:	59 eb       	ldi	r21, 0xB9	; 185
    18de:	bc 01       	movw	r22, r24
    18e0:	cd 01       	movw	r24, r26
    18e2:	0e 94 60 2f 	call	0x5ec0	; 0x5ec0 <__mulsi3>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	89 83       	std	Y+1, r24	; 0x01
    18ec:	9a 83       	std	Y+2, r25	; 0x02
    18ee:	ab 83       	std	Y+3, r26	; 0x03
    18f0:	bc 83       	std	Y+4, r27	; 0x04
    18f2:	6f c0       	rjmp	.+222    	; 0x19d2 <Timer0_setDelayTimeMilliSec+0x1a4>
				break;
			case TIMER0_PRESCALER_DIV_8:
				Total_counts = (F_CPU * Time_ms * 1000) / 8;    // 8 : prescaler
    18f4:	88 85       	ldd	r24, Y+8	; 0x08
    18f6:	88 2f       	mov	r24, r24
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	a0 e0       	ldi	r26, 0x00	; 0
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 ea       	ldi	r19, 0xA0	; 160
    1902:	4c ea       	ldi	r20, 0xAC	; 172
    1904:	59 eb       	ldi	r21, 0xB9	; 185
    1906:	bc 01       	movw	r22, r24
    1908:	cd 01       	movw	r24, r26
    190a:	0e 94 60 2f 	call	0x5ec0	; 0x5ec0 <__mulsi3>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	68 94       	set
    1914:	12 f8       	bld	r1, 2
    1916:	b6 95       	lsr	r27
    1918:	a7 95       	ror	r26
    191a:	97 95       	ror	r25
    191c:	87 95       	ror	r24
    191e:	16 94       	lsr	r1
    1920:	d1 f7       	brne	.-12     	; 0x1916 <Timer0_setDelayTimeMilliSec+0xe8>
    1922:	89 83       	std	Y+1, r24	; 0x01
    1924:	9a 83       	std	Y+2, r25	; 0x02
    1926:	ab 83       	std	Y+3, r26	; 0x03
    1928:	bc 83       	std	Y+4, r27	; 0x04
    192a:	53 c0       	rjmp	.+166    	; 0x19d2 <Timer0_setDelayTimeMilliSec+0x1a4>
				break;
			case TIMER0_PRESCALER_DIV_64:
				Total_counts = (F_CPU * Time_ms * 1000) / 64;   // 64 : prescaler
    192c:	88 85       	ldd	r24, Y+8	; 0x08
    192e:	88 2f       	mov	r24, r24
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	a0 e0       	ldi	r26, 0x00	; 0
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 ea       	ldi	r19, 0xA0	; 160
    193a:	4c ea       	ldi	r20, 0xAC	; 172
    193c:	59 eb       	ldi	r21, 0xB9	; 185
    193e:	bc 01       	movw	r22, r24
    1940:	cd 01       	movw	r24, r26
    1942:	0e 94 60 2f 	call	0x5ec0	; 0x5ec0 <__mulsi3>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	68 94       	set
    194c:	15 f8       	bld	r1, 5
    194e:	b6 95       	lsr	r27
    1950:	a7 95       	ror	r26
    1952:	97 95       	ror	r25
    1954:	87 95       	ror	r24
    1956:	16 94       	lsr	r1
    1958:	d1 f7       	brne	.-12     	; 0x194e <Timer0_setDelayTimeMilliSec+0x120>
    195a:	89 83       	std	Y+1, r24	; 0x01
    195c:	9a 83       	std	Y+2, r25	; 0x02
    195e:	ab 83       	std	Y+3, r26	; 0x03
    1960:	bc 83       	std	Y+4, r27	; 0x04
    1962:	37 c0       	rjmp	.+110    	; 0x19d2 <Timer0_setDelayTimeMilliSec+0x1a4>
				break;
			case TIMER0_PRESCALER_DIV_256:
				Total_counts = (F_CPU * Time_ms * 1000) / 256;  // 256 : prescaler
    1964:	88 85       	ldd	r24, Y+8	; 0x08
    1966:	88 2f       	mov	r24, r24
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	a0 e0       	ldi	r26, 0x00	; 0
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 ea       	ldi	r19, 0xA0	; 160
    1972:	4c ea       	ldi	r20, 0xAC	; 172
    1974:	59 eb       	ldi	r21, 0xB9	; 185
    1976:	bc 01       	movw	r22, r24
    1978:	cd 01       	movw	r24, r26
    197a:	0e 94 60 2f 	call	0x5ec0	; 0x5ec0 <__mulsi3>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	89 2f       	mov	r24, r25
    1984:	9a 2f       	mov	r25, r26
    1986:	ab 2f       	mov	r26, r27
    1988:	bb 27       	eor	r27, r27
    198a:	89 83       	std	Y+1, r24	; 0x01
    198c:	9a 83       	std	Y+2, r25	; 0x02
    198e:	ab 83       	std	Y+3, r26	; 0x03
    1990:	bc 83       	std	Y+4, r27	; 0x04
    1992:	1f c0       	rjmp	.+62     	; 0x19d2 <Timer0_setDelayTimeMilliSec+0x1a4>
				break;
			case TIMER0_PRESCALER_DIV_1024:
				Total_counts = (F_CPU * Time_ms * 1000) / 1024;  // 1024 : prescaler
    1994:	88 85       	ldd	r24, Y+8	; 0x08
    1996:	88 2f       	mov	r24, r24
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	a0 e0       	ldi	r26, 0x00	; 0
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 ea       	ldi	r19, 0xA0	; 160
    19a2:	4c ea       	ldi	r20, 0xAC	; 172
    19a4:	59 eb       	ldi	r21, 0xB9	; 185
    19a6:	bc 01       	movw	r22, r24
    19a8:	cd 01       	movw	r24, r26
    19aa:	0e 94 60 2f 	call	0x5ec0	; 0x5ec0 <__mulsi3>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	07 2e       	mov	r0, r23
    19b4:	7a e0       	ldi	r23, 0x0A	; 10
    19b6:	b6 95       	lsr	r27
    19b8:	a7 95       	ror	r26
    19ba:	97 95       	ror	r25
    19bc:	87 95       	ror	r24
    19be:	7a 95       	dec	r23
    19c0:	d1 f7       	brne	.-12     	; 0x19b6 <Timer0_setDelayTimeMilliSec+0x188>
    19c2:	70 2d       	mov	r23, r0
    19c4:	89 83       	std	Y+1, r24	; 0x01
    19c6:	9a 83       	std	Y+2, r25	; 0x02
    19c8:	ab 83       	std	Y+3, r26	; 0x03
    19ca:	bc 83       	std	Y+4, r27	; 0x04
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <Timer0_setDelayTimeMilliSec+0x1a4>
				break;
			default:
				ret_status = OUT_OF_RANGE_VALUE;
    19ce:	82 e0       	ldi	r24, 0x02	; 2
    19d0:	8d 83       	std	Y+5, r24	; 0x05
				break;
			}
			*num_of_ovfs = (u32)(Total_counts / 256);
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	9a 81       	ldd	r25, Y+2	; 0x02
    19d6:	ab 81       	ldd	r26, Y+3	; 0x03
    19d8:	bc 81       	ldd	r27, Y+4	; 0x04
    19da:	89 2f       	mov	r24, r25
    19dc:	9a 2f       	mov	r25, r26
    19de:	ab 2f       	mov	r26, r27
    19e0:	bb 27       	eor	r27, r27
    19e2:	e9 85       	ldd	r30, Y+9	; 0x09
    19e4:	fa 85       	ldd	r31, Y+10	; 0x0a
    19e6:	80 83       	st	Z, r24
    19e8:	91 83       	std	Z+1, r25	; 0x01
    19ea:	a2 83       	std	Z+2, r26	; 0x02
    19ec:	b3 83       	std	Z+3, r27	; 0x03
			*rem_counts = Total_counts % 256;
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	9a 81       	ldd	r25, Y+2	; 0x02
    19f2:	ab 81       	ldd	r26, Y+3	; 0x03
    19f4:	bc 81       	ldd	r27, Y+4	; 0x04
    19f6:	90 70       	andi	r25, 0x00	; 0
    19f8:	a0 70       	andi	r26, 0x00	; 0
    19fa:	b0 70       	andi	r27, 0x00	; 0
    19fc:	eb 85       	ldd	r30, Y+11	; 0x0b
    19fe:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a00:	80 83       	st	Z, r24
    1a02:	91 83       	std	Z+1, r25	; 0x01
    1a04:	a2 83       	std	Z+2, r26	; 0x02
    1a06:	b3 83       	std	Z+3, r27	; 0x03
		{

		}
		else{/* Nothing */}
	}
	return ret_status;
    1a08:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1a0a:	2e 96       	adiw	r28, 0x0e	; 14
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	de bf       	out	0x3e, r29	; 62
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	cd bf       	out	0x3d, r28	; 61
    1a16:	cf 91       	pop	r28
    1a18:	df 91       	pop	r29
    1a1a:	08 95       	ret

00001a1c <Timer0_EnableInt>:




Error_Status_t Timer0_EnableInt(u8 Int_ID)
{
    1a1c:	df 93       	push	r29
    1a1e:	cf 93       	push	r28
    1a20:	00 d0       	rcall	.+0      	; 0x1a22 <Timer0_EnableInt+0x6>
    1a22:	0f 92       	push	r0
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
    1a28:	89 83       	std	Y+1, r24	; 0x01
	// Enable global interrupts

	// Enable timer0 overflow interrupt and compare match interrupt
	switch(Int_ID){
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	3b 83       	std	Y+3, r19	; 0x03
    1a32:	2a 83       	std	Y+2, r18	; 0x02
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	9b 81       	ldd	r25, Y+3	; 0x03
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	31 f0       	breq	.+12     	; 0x1a48 <Timer0_EnableInt+0x2c>
    1a3c:	2a 81       	ldd	r18, Y+2	; 0x02
    1a3e:	3b 81       	ldd	r19, Y+3	; 0x03
    1a40:	21 30       	cpi	r18, 0x01	; 1
    1a42:	31 05       	cpc	r19, r1
    1a44:	39 f0       	breq	.+14     	; 0x1a54 <Timer0_EnableInt+0x38>
    1a46:	0b c0       	rjmp	.+22     	; 0x1a5e <Timer0_EnableInt+0x42>
		case TIMER0_OVF_INT_ENABLE:
			TIMER0_CONTROL->TIMSK_CFG.TOIE0_BIT = 1;
    1a48:	e2 e5       	ldi	r30, 0x52	; 82
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	87 81       	ldd	r24, Z+7	; 0x07
    1a4e:	81 60       	ori	r24, 0x01	; 1
    1a50:	87 83       	std	Z+7, r24	; 0x07
    1a52:	05 c0       	rjmp	.+10     	; 0x1a5e <Timer0_EnableInt+0x42>
			break;
		case TIMER0_CTC_INT_ENABLE:
			TIMER0_CONTROL->TIMSK_CFG.OCIE0_BIT = 1;
    1a54:	e2 e5       	ldi	r30, 0x52	; 82
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	87 81       	ldd	r24, Z+7	; 0x07
    1a5a:	82 60       	ori	r24, 0x02	; 2
    1a5c:	87 83       	std	Z+7, r24	; 0x07
			break;
	}
	return NO_ERROR;
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
}
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret

00001a6c <Timer0_DisableInt>:




Error_Status_t Timer0_DisableInt(u8 Int_ID)
{
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <Timer0_DisableInt+0x6>
    1a72:	0f 92       	push	r0
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	89 83       	std	Y+1, r24	; 0x01
	// Disable timer0 overflow interrupt and compare match interrupt
	switch(Int_ID){
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	3b 83       	std	Y+3, r19	; 0x03
    1a82:	2a 83       	std	Y+2, r18	; 0x02
    1a84:	8a 81       	ldd	r24, Y+2	; 0x02
    1a86:	9b 81       	ldd	r25, Y+3	; 0x03
    1a88:	82 30       	cpi	r24, 0x02	; 2
    1a8a:	91 05       	cpc	r25, r1
    1a8c:	31 f0       	breq	.+12     	; 0x1a9a <Timer0_DisableInt+0x2e>
    1a8e:	2a 81       	ldd	r18, Y+2	; 0x02
    1a90:	3b 81       	ldd	r19, Y+3	; 0x03
    1a92:	23 30       	cpi	r18, 0x03	; 3
    1a94:	31 05       	cpc	r19, r1
    1a96:	39 f0       	breq	.+14     	; 0x1aa6 <Timer0_DisableInt+0x3a>
    1a98:	0b c0       	rjmp	.+22     	; 0x1ab0 <Timer0_DisableInt+0x44>
		case TIMER0_OVF_INT_DISABLE:
			TIMER0_CONTROL->TIMSK_CFG.TOIE0_BIT = 0;
    1a9a:	e2 e5       	ldi	r30, 0x52	; 82
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	87 81       	ldd	r24, Z+7	; 0x07
    1aa0:	8e 7f       	andi	r24, 0xFE	; 254
    1aa2:	87 83       	std	Z+7, r24	; 0x07
    1aa4:	05 c0       	rjmp	.+10     	; 0x1ab0 <Timer0_DisableInt+0x44>
			break;
		case TIMER0_CTC_INT_DISABLE:
			TIMER0_CONTROL->TIMSK_CFG.OCIE0_BIT = 0;
    1aa6:	e2 e5       	ldi	r30, 0x52	; 82
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	87 81       	ldd	r24, Z+7	; 0x07
    1aac:	8d 7f       	andi	r24, 0xFD	; 253
    1aae:	87 83       	std	Z+7, r24	; 0x07
			break;
	}
	return NO_ERROR;
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
}
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <Timer0_setCallBack>:



Error_Status_t Timer0_setCallBack(const timer0_t *timer0_obj)
{
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	00 d0       	rcall	.+0      	; 0x1ac4 <Timer0_setCallBack+0x6>
    1ac4:	0f 92       	push	r0
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    1aca:	9b 83       	std	Y+3, r25	; 0x03
    1acc:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1ace:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	19 f4       	brne	.+6      	; 0x1ade <Timer0_setCallBack+0x20>
	{
		ret_status = NULL_POINTER;
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	10 c0       	rjmp	.+32     	; 0x1afe <Timer0_setCallBack+0x40>
	}
	else
	{
		Timer0_Over_Flow_isr = timer0_obj->timer0_over_flow_isr;
    1ade:	ea 81       	ldd	r30, Y+2	; 0x02
    1ae0:	fb 81       	ldd	r31, Y+3	; 0x03
    1ae2:	80 81       	ld	r24, Z
    1ae4:	91 81       	ldd	r25, Z+1	; 0x01
    1ae6:	90 93 7d 02 	sts	0x027D, r25
    1aea:	80 93 7c 02 	sts	0x027C, r24
		Timer0_Comp_isr = timer0_obj->timer0_comp_isr;
    1aee:	ea 81       	ldd	r30, Y+2	; 0x02
    1af0:	fb 81       	ldd	r31, Y+3	; 0x03
    1af2:	82 81       	ldd	r24, Z+2	; 0x02
    1af4:	93 81       	ldd	r25, Z+3	; 0x03
    1af6:	90 93 7f 02 	sts	0x027F, r25
    1afa:	80 93 7e 02 	sts	0x027E, r24
	}
	return ret_status;
    1afe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <Timer0_setFastPWM>:
Error_Status_t Timer0_setFastPWM(const timer0_t *timer0_obj, u8 frequency ,u8 duty)
{
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	00 d0       	rcall	.+0      	; 0x1b12 <Timer0_setFastPWM+0x6>
    1b12:	00 d0       	rcall	.+0      	; 0x1b14 <Timer0_setFastPWM+0x8>
    1b14:	0f 92       	push	r0
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	9b 83       	std	Y+3, r25	; 0x03
    1b1c:	8a 83       	std	Y+2, r24	; 0x02
    1b1e:	6c 83       	std	Y+4, r22	; 0x04
    1b20:	4d 83       	std	Y+5, r20	; 0x05
	Error_Status_t ret_status = NO_ERROR;
    1b22:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	9b 81       	ldd	r25, Y+3	; 0x03
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	19 f4       	brne	.+6      	; 0x1b32 <Timer0_setFastPWM+0x26>
	{
		ret_status = NULL_POINTER;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	89 83       	std	Y+1, r24	; 0x01
    1b30:	49 c0       	rjmp	.+146    	; 0x1bc4 <Timer0_setFastPWM+0xb8>
	}
	else
	{
		if(TIMER0_FAST_PWM_MODE == timer0_obj->mode)
    1b32:	ea 81       	ldd	r30, Y+2	; 0x02
    1b34:	fb 81       	ldd	r31, Y+3	; 0x03
    1b36:	84 81       	ldd	r24, Z+4	; 0x04
    1b38:	88 71       	andi	r24, 0x18	; 24
    1b3a:	88 31       	cpi	r24, 0x18	; 24
    1b3c:	09 f0       	breq	.+2      	; 0x1b40 <Timer0_setFastPWM+0x34>
    1b3e:	42 c0       	rjmp	.+132    	; 0x1bc4 <Timer0_setFastPWM+0xb8>
		{
			if(TIMER0_FAST_PWM_CLEAR_OC0_ON_COMPARE_MATCH == timer0_obj->ctc_mode_cfg)
    1b40:	ea 81       	ldd	r30, Y+2	; 0x02
    1b42:	fb 81       	ldd	r31, Y+3	; 0x03
    1b44:	84 81       	ldd	r24, Z+4	; 0x04
    1b46:	80 76       	andi	r24, 0x60	; 96
    1b48:	80 34       	cpi	r24, 0x40	; 64
    1b4a:	d9 f4       	brne	.+54     	; 0x1b82 <Timer0_setFastPWM+0x76>
			{
				TIMER0_CONTROL->OCR0_CFG = (duty * 255) / 100;
    1b4c:	e2 e5       	ldi	r30, 0x52	; 82
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	8d 81       	ldd	r24, Y+5	; 0x05
    1b52:	48 2f       	mov	r20, r24
    1b54:	50 e0       	ldi	r21, 0x00	; 0
    1b56:	ca 01       	movw	r24, r20
    1b58:	9c 01       	movw	r18, r24
    1b5a:	22 0f       	add	r18, r18
    1b5c:	33 1f       	adc	r19, r19
    1b5e:	c9 01       	movw	r24, r18
    1b60:	96 95       	lsr	r25
    1b62:	98 2f       	mov	r25, r24
    1b64:	88 27       	eor	r24, r24
    1b66:	97 95       	ror	r25
    1b68:	87 95       	ror	r24
    1b6a:	82 1b       	sub	r24, r18
    1b6c:	93 0b       	sbc	r25, r19
    1b6e:	84 0f       	add	r24, r20
    1b70:	95 1f       	adc	r25, r21
    1b72:	24 e6       	ldi	r18, 0x64	; 100
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	b9 01       	movw	r22, r18
    1b78:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <__divmodhi4>
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	82 87       	std	Z+10, r24	; 0x0a
    1b80:	21 c0       	rjmp	.+66     	; 0x1bc4 <Timer0_setFastPWM+0xb8>
			}
			else if(TIMER0_FAST_PWM_SET_OC0_ON_COMPARE_MATCH == timer0_obj->ctc_mode_cfg)
    1b82:	ea 81       	ldd	r30, Y+2	; 0x02
    1b84:	fb 81       	ldd	r31, Y+3	; 0x03
    1b86:	84 81       	ldd	r24, Z+4	; 0x04
    1b88:	80 76       	andi	r24, 0x60	; 96
    1b8a:	80 36       	cpi	r24, 0x60	; 96
    1b8c:	d9 f4       	brne	.+54     	; 0x1bc4 <Timer0_setFastPWM+0xb8>
			{
				//TIMER0_CONTROL->TCNT0_CFG =
				TIMER0_CONTROL->OCR0_CFG = 255 - ((duty * 255) / 100);
    1b8e:	e2 e5       	ldi	r30, 0x52	; 82
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	8d 81       	ldd	r24, Y+5	; 0x05
    1b94:	48 2f       	mov	r20, r24
    1b96:	50 e0       	ldi	r21, 0x00	; 0
    1b98:	ca 01       	movw	r24, r20
    1b9a:	9c 01       	movw	r18, r24
    1b9c:	22 0f       	add	r18, r18
    1b9e:	33 1f       	adc	r19, r19
    1ba0:	c9 01       	movw	r24, r18
    1ba2:	96 95       	lsr	r25
    1ba4:	98 2f       	mov	r25, r24
    1ba6:	88 27       	eor	r24, r24
    1ba8:	97 95       	ror	r25
    1baa:	87 95       	ror	r24
    1bac:	82 1b       	sub	r24, r18
    1bae:	93 0b       	sbc	r25, r19
    1bb0:	84 0f       	add	r24, r20
    1bb2:	95 1f       	adc	r25, r21
    1bb4:	24 e6       	ldi	r18, 0x64	; 100
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	b9 01       	movw	r22, r18
    1bba:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <__divmodhi4>
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	80 95       	com	r24
    1bc2:	82 87       	std	Z+10, r24	; 0x0a
			}
			else{/* Nothing */}
		}
		else{/* Nothing */}
	}
	return ret_status;
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	cf 91       	pop	r28
    1bd2:	df 91       	pop	r29
    1bd4:	08 95       	ret

00001bd6 <Timer0_setphaseCorrectPWM>:


Error_Status_t Timer0_setphaseCorrectPWM(const timer0_t *timer0_obj, u8 frequency , u8 duty)
{
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	00 d0       	rcall	.+0      	; 0x1bdc <Timer0_setphaseCorrectPWM+0x6>
    1bdc:	00 d0       	rcall	.+0      	; 0x1bde <Timer0_setphaseCorrectPWM+0x8>
    1bde:	0f 92       	push	r0
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	9b 83       	std	Y+3, r25	; 0x03
    1be6:	8a 83       	std	Y+2, r24	; 0x02
    1be8:	6c 83       	std	Y+4, r22	; 0x04
    1bea:	4d 83       	std	Y+5, r20	; 0x05
	Error_Status_t ret_status = NO_ERROR;
    1bec:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
    1bee:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf0:	9b 81       	ldd	r25, Y+3	; 0x03
    1bf2:	00 97       	sbiw	r24, 0x00	; 0
    1bf4:	19 f4       	brne	.+6      	; 0x1bfc <Timer0_setphaseCorrectPWM+0x26>
	{
		ret_status = NULL_POINTER;
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	89 83       	std	Y+1, r24	; 0x01
    1bfa:	48 c0       	rjmp	.+144    	; 0x1c8c <Timer0_setphaseCorrectPWM+0xb6>
	}
	else
	{
		if(TIMER0_PWM_PHASE_CORRECT_MODE == timer0_obj->mode)
    1bfc:	ea 81       	ldd	r30, Y+2	; 0x02
    1bfe:	fb 81       	ldd	r31, Y+3	; 0x03
    1c00:	84 81       	ldd	r24, Z+4	; 0x04
    1c02:	88 71       	andi	r24, 0x18	; 24
    1c04:	88 30       	cpi	r24, 0x08	; 8
    1c06:	09 f0       	breq	.+2      	; 0x1c0a <Timer0_setphaseCorrectPWM+0x34>
    1c08:	41 c0       	rjmp	.+130    	; 0x1c8c <Timer0_setphaseCorrectPWM+0xb6>
		{
			if(TIMER0_PHASE_CORRECT_PWM_CLEAR_OC0_ON_COMPARE_MATCH == timer0_obj->ctc_mode_cfg)
    1c0a:	ea 81       	ldd	r30, Y+2	; 0x02
    1c0c:	fb 81       	ldd	r31, Y+3	; 0x03
    1c0e:	84 81       	ldd	r24, Z+4	; 0x04
    1c10:	80 76       	andi	r24, 0x60	; 96
    1c12:	80 34       	cpi	r24, 0x40	; 64
    1c14:	c9 f4       	brne	.+50     	; 0x1c48 <Timer0_setphaseCorrectPWM+0x72>
			{
				TIMER0_CONTROL->OCR0_CFG = (u8)(((u8)(duty * 255) / 100) / 2);
    1c16:	e2 e5       	ldi	r30, 0x52	; 82
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1c:	48 2f       	mov	r20, r24
    1c1e:	50 e0       	ldi	r21, 0x00	; 0
    1c20:	ca 01       	movw	r24, r20
    1c22:	9c 01       	movw	r18, r24
    1c24:	22 0f       	add	r18, r18
    1c26:	33 1f       	adc	r19, r19
    1c28:	c9 01       	movw	r24, r18
    1c2a:	96 95       	lsr	r25
    1c2c:	98 2f       	mov	r25, r24
    1c2e:	88 27       	eor	r24, r24
    1c30:	97 95       	ror	r25
    1c32:	87 95       	ror	r24
    1c34:	82 1b       	sub	r24, r18
    1c36:	93 0b       	sbc	r25, r19
    1c38:	84 0f       	add	r24, r20
    1c3a:	95 1f       	adc	r25, r21
    1c3c:	98 ec       	ldi	r25, 0xC8	; 200
    1c3e:	69 2f       	mov	r22, r25
    1c40:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <__udivmodqi4>
    1c44:	82 87       	std	Z+10, r24	; 0x0a
    1c46:	22 c0       	rjmp	.+68     	; 0x1c8c <Timer0_setphaseCorrectPWM+0xb6>
			}
			else if(TIMER0_PHASE_CORRECT_PWM_SET_OC0_ON_COMPARE_MATCH == timer0_obj->ctc_mode_cfg)
    1c48:	ea 81       	ldd	r30, Y+2	; 0x02
    1c4a:	fb 81       	ldd	r31, Y+3	; 0x03
    1c4c:	84 81       	ldd	r24, Z+4	; 0x04
    1c4e:	80 76       	andi	r24, 0x60	; 96
    1c50:	80 36       	cpi	r24, 0x60	; 96
    1c52:	e1 f4       	brne	.+56     	; 0x1c8c <Timer0_setphaseCorrectPWM+0xb6>
			{
				TIMER0_CONTROL->OCR0_CFG = (u8)(255 - ((u8)((duty * 255) / 100) / 2));
    1c54:	e2 e5       	ldi	r30, 0x52	; 82
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5a:	48 2f       	mov	r20, r24
    1c5c:	50 e0       	ldi	r21, 0x00	; 0
    1c5e:	ca 01       	movw	r24, r20
    1c60:	9c 01       	movw	r18, r24
    1c62:	22 0f       	add	r18, r18
    1c64:	33 1f       	adc	r19, r19
    1c66:	c9 01       	movw	r24, r18
    1c68:	96 95       	lsr	r25
    1c6a:	98 2f       	mov	r25, r24
    1c6c:	88 27       	eor	r24, r24
    1c6e:	97 95       	ror	r25
    1c70:	87 95       	ror	r24
    1c72:	82 1b       	sub	r24, r18
    1c74:	93 0b       	sbc	r25, r19
    1c76:	84 0f       	add	r24, r20
    1c78:	95 1f       	adc	r25, r21
    1c7a:	24 e6       	ldi	r18, 0x64	; 100
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	b9 01       	movw	r22, r18
    1c80:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <__divmodhi4>
    1c84:	cb 01       	movw	r24, r22
    1c86:	86 95       	lsr	r24
    1c88:	80 95       	com	r24
    1c8a:	82 87       	std	Z+10, r24	; 0x0a
			}
			else{/* Nothing */}
		}
		else{/* Nothing */}
	}
	return ret_status;
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <__vector_11>:
/* ------------------------------------------------ Timer0 ISRs -------------------------------*/

// Define the ISR function with attribute
void TIMER0_OVF_VECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER0_OVF_VECTOR(void)
{
    1c9e:	1f 92       	push	r1
    1ca0:	0f 92       	push	r0
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	0f 92       	push	r0
    1ca6:	11 24       	eor	r1, r1
    1ca8:	2f 93       	push	r18
    1caa:	3f 93       	push	r19
    1cac:	4f 93       	push	r20
    1cae:	5f 93       	push	r21
    1cb0:	6f 93       	push	r22
    1cb2:	7f 93       	push	r23
    1cb4:	8f 93       	push	r24
    1cb6:	9f 93       	push	r25
    1cb8:	af 93       	push	r26
    1cba:	bf 93       	push	r27
    1cbc:	ef 93       	push	r30
    1cbe:	ff 93       	push	r31
    1cc0:	df 93       	push	r29
    1cc2:	cf 93       	push	r28
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	TIMER0_CONTROL->TIFR_CFG.TOF0_BIT = 0;
    1cc8:	e2 e5       	ldi	r30, 0x52	; 82
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	86 81       	ldd	r24, Z+6	; 0x06
    1cce:	8e 7f       	andi	r24, 0xFE	; 254
    1cd0:	86 83       	std	Z+6, r24	; 0x06
	//			Timer0_delay_callback();
	//		}
	//	}

	// execute ISR if it existed
	if(Timer0_Over_Flow_isr)
    1cd2:	80 91 7c 02 	lds	r24, 0x027C
    1cd6:	90 91 7d 02 	lds	r25, 0x027D
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	29 f0       	breq	.+10     	; 0x1ce8 <__vector_11+0x4a>
	{
		Timer0_Over_Flow_isr();
    1cde:	e0 91 7c 02 	lds	r30, 0x027C
    1ce2:	f0 91 7d 02 	lds	r31, 0x027D
    1ce6:	09 95       	icall
	}
}
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	ff 91       	pop	r31
    1cee:	ef 91       	pop	r30
    1cf0:	bf 91       	pop	r27
    1cf2:	af 91       	pop	r26
    1cf4:	9f 91       	pop	r25
    1cf6:	8f 91       	pop	r24
    1cf8:	7f 91       	pop	r23
    1cfa:	6f 91       	pop	r22
    1cfc:	5f 91       	pop	r21
    1cfe:	4f 91       	pop	r20
    1d00:	3f 91       	pop	r19
    1d02:	2f 91       	pop	r18
    1d04:	0f 90       	pop	r0
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	0f 90       	pop	r0
    1d0a:	1f 90       	pop	r1
    1d0c:	18 95       	reti

00001d0e <__vector_10>:


// Define the ISR function with attribute
void TIMER0_COMPA_VECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER0_COMPA_VECTOR(void)
{
    1d0e:	1f 92       	push	r1
    1d10:	0f 92       	push	r0
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	0f 92       	push	r0
    1d16:	11 24       	eor	r1, r1
    1d18:	2f 93       	push	r18
    1d1a:	3f 93       	push	r19
    1d1c:	4f 93       	push	r20
    1d1e:	5f 93       	push	r21
    1d20:	6f 93       	push	r22
    1d22:	7f 93       	push	r23
    1d24:	8f 93       	push	r24
    1d26:	9f 93       	push	r25
    1d28:	af 93       	push	r26
    1d2a:	bf 93       	push	r27
    1d2c:	ef 93       	push	r30
    1d2e:	ff 93       	push	r31
    1d30:	df 93       	push	r29
    1d32:	cf 93       	push	r28
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
	// clear flag
	TIMER0_CONTROL->TIFR_CFG.OCF0_BIT = 0;
    1d38:	e2 e5       	ldi	r30, 0x52	; 82
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	86 81       	ldd	r24, Z+6	; 0x06
    1d3e:	8d 7f       	andi	r24, 0xFD	; 253
    1d40:	86 83       	std	Z+6, r24	; 0x06

	// execute ISR if it existed
	if(Timer0_Comp_isr)
    1d42:	80 91 7e 02 	lds	r24, 0x027E
    1d46:	90 91 7f 02 	lds	r25, 0x027F
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	29 f0       	breq	.+10     	; 0x1d58 <__vector_10+0x4a>
	{
		Timer0_Comp_isr();
    1d4e:	e0 91 7e 02 	lds	r30, 0x027E
    1d52:	f0 91 7f 02 	lds	r31, 0x027F
    1d56:	09 95       	icall
	}
}
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	ff 91       	pop	r31
    1d5e:	ef 91       	pop	r30
    1d60:	bf 91       	pop	r27
    1d62:	af 91       	pop	r26
    1d64:	9f 91       	pop	r25
    1d66:	8f 91       	pop	r24
    1d68:	7f 91       	pop	r23
    1d6a:	6f 91       	pop	r22
    1d6c:	5f 91       	pop	r21
    1d6e:	4f 91       	pop	r20
    1d70:	3f 91       	pop	r19
    1d72:	2f 91       	pop	r18
    1d74:	0f 90       	pop	r0
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	0f 90       	pop	r0
    1d7a:	1f 90       	pop	r1
    1d7c:	18 95       	reti

00001d7e <M_EXTI_voidEnable>:
void (*INT0_ISR)(void) = NULL;
void (*INT1_ISR)(void) = NULL;
void (*INT2_ISR)(void) = NULL;

Error_Status_t M_EXTI_voidEnable(const EXT_INTERRUPT_T *exti_obj)
{
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	00 d0       	rcall	.+0      	; 0x1d84 <M_EXTI_voidEnable+0x6>
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <M_EXTI_voidEnable+0x8>
    1d86:	0f 92       	push	r0
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	9b 83       	std	Y+3, r25	; 0x03
    1d8e:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1d90:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == exti_obj)
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	9b 81       	ldd	r25, Y+3	; 0x03
    1d96:	00 97       	sbiw	r24, 0x00	; 0
    1d98:	19 f4       	brne	.+6      	; 0x1da0 <M_EXTI_voidEnable+0x22>
	{
		ret_status = NULL_POINTER;
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	89 83       	std	Y+1, r24	; 0x01
    1d9e:	69 c0       	rjmp	.+210    	; 0x1e72 <M_EXTI_voidEnable+0xf4>
	}
	else
	{
		GIE_Enable();
    1da0:	ef e5       	ldi	r30, 0x5F	; 95
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	80 68       	ori	r24, 0x80	; 128
    1da8:	80 83       	st	Z, r24
		switch (exti_obj->INTx_select) {
    1daa:	ea 81       	ldd	r30, Y+2	; 0x02
    1dac:	fb 81       	ldd	r31, Y+3	; 0x03
    1dae:	82 81       	ldd	r24, Z+2	; 0x02
    1db0:	83 70       	andi	r24, 0x03	; 3
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	3d 83       	std	Y+5, r19	; 0x05
    1db8:	2c 83       	std	Y+4, r18	; 0x04
    1dba:	8c 81       	ldd	r24, Y+4	; 0x04
    1dbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1dbe:	81 30       	cpi	r24, 0x01	; 1
    1dc0:	91 05       	cpc	r25, r1
    1dc2:	11 f1       	breq	.+68     	; 0x1e08 <M_EXTI_voidEnable+0x8a>
    1dc4:	2c 81       	ldd	r18, Y+4	; 0x04
    1dc6:	3d 81       	ldd	r19, Y+5	; 0x05
    1dc8:	22 30       	cpi	r18, 0x02	; 2
    1dca:	31 05       	cpc	r19, r1
    1dcc:	b9 f1       	breq	.+110    	; 0x1e3c <M_EXTI_voidEnable+0xbe>
    1dce:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd2:	00 97       	sbiw	r24, 0x00	; 0
    1dd4:	09 f0       	breq	.+2      	; 0x1dd8 <M_EXTI_voidEnable+0x5a>
    1dd6:	4b c0       	rjmp	.+150    	; 0x1e6e <M_EXTI_voidEnable+0xf0>
			case EXTI_INT0_ID:
				EXT_INT_CONTROL->GICR_CFG.INT0_BIT = EXTI0_ENABLE;
    1dd8:	e4 e5       	ldi	r30, 0x54	; 84
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	87 81       	ldd	r24, Z+7	; 0x07
    1dde:	80 64       	ori	r24, 0x40	; 64
    1de0:	87 83       	std	Z+7, r24	; 0x07
				EXT_INT_CONTROL->MCUCR_CFG.ISC0_BITS = exti_obj->INTx_sense;
    1de2:	a4 e5       	ldi	r26, 0x54	; 84
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	ea 81       	ldd	r30, Y+2	; 0x02
    1de8:	fb 81       	ldd	r31, Y+3	; 0x03
    1dea:	82 81       	ldd	r24, Z+2	; 0x02
    1dec:	86 95       	lsr	r24
    1dee:	86 95       	lsr	r24
    1df0:	83 70       	andi	r24, 0x03	; 3
    1df2:	98 2f       	mov	r25, r24
    1df4:	93 70       	andi	r25, 0x03	; 3
    1df6:	11 96       	adiw	r26, 0x01	; 1
    1df8:	8c 91       	ld	r24, X
    1dfa:	11 97       	sbiw	r26, 0x01	; 1
    1dfc:	8c 7f       	andi	r24, 0xFC	; 252
    1dfe:	89 2b       	or	r24, r25
    1e00:	11 96       	adiw	r26, 0x01	; 1
    1e02:	8c 93       	st	X, r24
    1e04:	11 97       	sbiw	r26, 0x01	; 1
    1e06:	35 c0       	rjmp	.+106    	; 0x1e72 <M_EXTI_voidEnable+0xf4>
				break;
			case EXTI_INT1_ID:
				EXT_INT_CONTROL->GICR_CFG.INT1_BIT = EXTI1_ENABLE;
    1e08:	e4 e5       	ldi	r30, 0x54	; 84
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	87 81       	ldd	r24, Z+7	; 0x07
    1e0e:	80 68       	ori	r24, 0x80	; 128
    1e10:	87 83       	std	Z+7, r24	; 0x07
				EXT_INT_CONTROL->MCUCR_CFG.ISC1_BITS = exti_obj->INTx_sense;
    1e12:	a4 e5       	ldi	r26, 0x54	; 84
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	ea 81       	ldd	r30, Y+2	; 0x02
    1e18:	fb 81       	ldd	r31, Y+3	; 0x03
    1e1a:	82 81       	ldd	r24, Z+2	; 0x02
    1e1c:	86 95       	lsr	r24
    1e1e:	86 95       	lsr	r24
    1e20:	83 70       	andi	r24, 0x03	; 3
    1e22:	83 70       	andi	r24, 0x03	; 3
    1e24:	98 2f       	mov	r25, r24
    1e26:	99 0f       	add	r25, r25
    1e28:	99 0f       	add	r25, r25
    1e2a:	11 96       	adiw	r26, 0x01	; 1
    1e2c:	8c 91       	ld	r24, X
    1e2e:	11 97       	sbiw	r26, 0x01	; 1
    1e30:	83 7f       	andi	r24, 0xF3	; 243
    1e32:	89 2b       	or	r24, r25
    1e34:	11 96       	adiw	r26, 0x01	; 1
    1e36:	8c 93       	st	X, r24
    1e38:	11 97       	sbiw	r26, 0x01	; 1
    1e3a:	1b c0       	rjmp	.+54     	; 0x1e72 <M_EXTI_voidEnable+0xf4>
				break;
			case EXTI_INT2_ID:
				EXT_INT_CONTROL->GICR_CFG.INT2_BIT = EXTI2_ENABLE;
    1e3c:	e4 e5       	ldi	r30, 0x54	; 84
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	87 81       	ldd	r24, Z+7	; 0x07
    1e42:	80 62       	ori	r24, 0x20	; 32
    1e44:	87 83       	std	Z+7, r24	; 0x07
				EXT_INT_CONTROL->MCUCSR_CFG.ISC2_BIT = exti_obj->INTx_sense;
    1e46:	a4 e5       	ldi	r26, 0x54	; 84
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e4c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e4e:	82 81       	ldd	r24, Z+2	; 0x02
    1e50:	86 95       	lsr	r24
    1e52:	86 95       	lsr	r24
    1e54:	83 70       	andi	r24, 0x03	; 3
    1e56:	81 70       	andi	r24, 0x01	; 1
    1e58:	81 70       	andi	r24, 0x01	; 1
    1e5a:	98 2f       	mov	r25, r24
    1e5c:	92 95       	swap	r25
    1e5e:	99 0f       	add	r25, r25
    1e60:	99 0f       	add	r25, r25
    1e62:	90 7c       	andi	r25, 0xC0	; 192
    1e64:	8c 91       	ld	r24, X
    1e66:	8f 7b       	andi	r24, 0xBF	; 191
    1e68:	89 2b       	or	r24, r25
    1e6a:	8c 93       	st	X, r24
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <M_EXTI_voidEnable+0xf4>
				break;
			default:
				ret_status = OUT_OF_RANGE_VALUE;
    1e6e:	82 e0       	ldi	r24, 0x02	; 2
    1e70:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}
	return ret_status;
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	08 95       	ret

00001e84 <M_EXTI_voidDisable>:
Error_Status_t M_EXTI_voidDisable(const EXT_INTERRUPT_T *exti_obj)
{
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <M_EXTI_voidDisable+0x6>
    1e8a:	00 d0       	rcall	.+0      	; 0x1e8c <M_EXTI_voidDisable+0x8>
    1e8c:	0f 92       	push	r0
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
    1e92:	9b 83       	std	Y+3, r25	; 0x03
    1e94:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1e96:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == exti_obj)
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	19 f4       	brne	.+6      	; 0x1ea6 <M_EXTI_voidDisable+0x22>
	{
		ret_status = NULL_POINTER;
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	89 83       	std	Y+1, r24	; 0x01
    1ea4:	2f c0       	rjmp	.+94     	; 0x1f04 <M_EXTI_voidDisable+0x80>
	}
	else
	{
		GIE_Disable();
    1ea6:	ef e5       	ldi	r30, 0x5F	; 95
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	8f 77       	andi	r24, 0x7F	; 127
    1eae:	80 83       	st	Z, r24
		switch (exti_obj->INTx_select) {
    1eb0:	ea 81       	ldd	r30, Y+2	; 0x02
    1eb2:	fb 81       	ldd	r31, Y+3	; 0x03
    1eb4:	82 81       	ldd	r24, Z+2	; 0x02
    1eb6:	83 70       	andi	r24, 0x03	; 3
    1eb8:	28 2f       	mov	r18, r24
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	3d 83       	std	Y+5, r19	; 0x05
    1ebe:	2c 83       	std	Y+4, r18	; 0x04
    1ec0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec4:	81 30       	cpi	r24, 0x01	; 1
    1ec6:	91 05       	cpc	r25, r1
    1ec8:	79 f0       	breq	.+30     	; 0x1ee8 <M_EXTI_voidDisable+0x64>
    1eca:	2c 81       	ldd	r18, Y+4	; 0x04
    1ecc:	3d 81       	ldd	r19, Y+5	; 0x05
    1ece:	22 30       	cpi	r18, 0x02	; 2
    1ed0:	31 05       	cpc	r19, r1
    1ed2:	81 f0       	breq	.+32     	; 0x1ef4 <M_EXTI_voidDisable+0x70>
    1ed4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	91 f4       	brne	.+36     	; 0x1f00 <M_EXTI_voidDisable+0x7c>
			case EXTI_INT0_ID:
				EXT_INT_CONTROL->GICR_CFG.INT0_BIT = EXTI0_DISABLE;
    1edc:	e4 e5       	ldi	r30, 0x54	; 84
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	87 81       	ldd	r24, Z+7	; 0x07
    1ee2:	8f 7b       	andi	r24, 0xBF	; 191
    1ee4:	87 83       	std	Z+7, r24	; 0x07
    1ee6:	0e c0       	rjmp	.+28     	; 0x1f04 <M_EXTI_voidDisable+0x80>
				break;
			case EXTI_INT1_ID:
				EXT_INT_CONTROL->GICR_CFG.INT1_BIT = EXTI1_DISABLE;
    1ee8:	e4 e5       	ldi	r30, 0x54	; 84
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	87 81       	ldd	r24, Z+7	; 0x07
    1eee:	8f 77       	andi	r24, 0x7F	; 127
    1ef0:	87 83       	std	Z+7, r24	; 0x07
    1ef2:	08 c0       	rjmp	.+16     	; 0x1f04 <M_EXTI_voidDisable+0x80>
				break;
			case EXTI_INT2_ID:
				EXT_INT_CONTROL->GICR_CFG.INT2_BIT = EXTI2_DISABLE;
    1ef4:	e4 e5       	ldi	r30, 0x54	; 84
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	87 81       	ldd	r24, Z+7	; 0x07
    1efa:	8f 7d       	andi	r24, 0xDF	; 223
    1efc:	87 83       	std	Z+7, r24	; 0x07
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <M_EXTI_voidDisable+0x80>
				break;
			default:
				ret_status = OUT_OF_RANGE_VALUE;
    1f00:	82 e0       	ldi	r24, 0x02	; 2
    1f02:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}
	return ret_status;
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	cf 91       	pop	r28
    1f12:	df 91       	pop	r29
    1f14:	08 95       	ret

00001f16 <M_EXTI_voidSet_CallBack>:
Error_Status_t M_EXTI_voidSet_CallBack(const EXT_INTERRUPT_T *exti_obj)
{
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <M_EXTI_voidSet_CallBack+0x6>
    1f1c:	00 d0       	rcall	.+0      	; 0x1f1e <M_EXTI_voidSet_CallBack+0x8>
    1f1e:	0f 92       	push	r0
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
    1f24:	9b 83       	std	Y+3, r25	; 0x03
    1f26:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1f28:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == exti_obj)
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2e:	00 97       	sbiw	r24, 0x00	; 0
    1f30:	19 f4       	brne	.+6      	; 0x1f38 <M_EXTI_voidSet_CallBack+0x22>
	{
		ret_status = NULL_POINTER;
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	89 83       	std	Y+1, r24	; 0x01
    1f36:	33 c0       	rjmp	.+102    	; 0x1f9e <M_EXTI_voidSet_CallBack+0x88>
	}
	else
	{
		switch (exti_obj->INTx_select) {
    1f38:	ea 81       	ldd	r30, Y+2	; 0x02
    1f3a:	fb 81       	ldd	r31, Y+3	; 0x03
    1f3c:	82 81       	ldd	r24, Z+2	; 0x02
    1f3e:	83 70       	andi	r24, 0x03	; 3
    1f40:	28 2f       	mov	r18, r24
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	3d 83       	std	Y+5, r19	; 0x05
    1f46:	2c 83       	std	Y+4, r18	; 0x04
    1f48:	8c 81       	ldd	r24, Y+4	; 0x04
    1f4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f4c:	81 30       	cpi	r24, 0x01	; 1
    1f4e:	91 05       	cpc	r25, r1
    1f50:	91 f0       	breq	.+36     	; 0x1f76 <M_EXTI_voidSet_CallBack+0x60>
    1f52:	2c 81       	ldd	r18, Y+4	; 0x04
    1f54:	3d 81       	ldd	r19, Y+5	; 0x05
    1f56:	22 30       	cpi	r18, 0x02	; 2
    1f58:	31 05       	cpc	r19, r1
    1f5a:	b1 f0       	breq	.+44     	; 0x1f88 <M_EXTI_voidSet_CallBack+0x72>
    1f5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f60:	00 97       	sbiw	r24, 0x00	; 0
    1f62:	d9 f4       	brne	.+54     	; 0x1f9a <M_EXTI_voidSet_CallBack+0x84>
			case EXTI_INT0_ID:
				INT0_ISR = exti_obj->EXT_INT_ISR;
    1f64:	ea 81       	ldd	r30, Y+2	; 0x02
    1f66:	fb 81       	ldd	r31, Y+3	; 0x03
    1f68:	80 81       	ld	r24, Z
    1f6a:	91 81       	ldd	r25, Z+1	; 0x01
    1f6c:	90 93 81 02 	sts	0x0281, r25
    1f70:	80 93 80 02 	sts	0x0280, r24
    1f74:	14 c0       	rjmp	.+40     	; 0x1f9e <M_EXTI_voidSet_CallBack+0x88>
				break;
			case EXTI_INT1_ID:
				INT1_ISR = exti_obj->EXT_INT_ISR;
    1f76:	ea 81       	ldd	r30, Y+2	; 0x02
    1f78:	fb 81       	ldd	r31, Y+3	; 0x03
    1f7a:	80 81       	ld	r24, Z
    1f7c:	91 81       	ldd	r25, Z+1	; 0x01
    1f7e:	90 93 83 02 	sts	0x0283, r25
    1f82:	80 93 82 02 	sts	0x0282, r24
    1f86:	0b c0       	rjmp	.+22     	; 0x1f9e <M_EXTI_voidSet_CallBack+0x88>
				break;
			case EXTI_INT2_ID:
				INT2_ISR = exti_obj->EXT_INT_ISR;
    1f88:	ea 81       	ldd	r30, Y+2	; 0x02
    1f8a:	fb 81       	ldd	r31, Y+3	; 0x03
    1f8c:	80 81       	ld	r24, Z
    1f8e:	91 81       	ldd	r25, Z+1	; 0x01
    1f90:	90 93 85 02 	sts	0x0285, r25
    1f94:	80 93 84 02 	sts	0x0284, r24
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <M_EXTI_voidSet_CallBack+0x88>
				break;
			default:
				ret_status = OUT_OF_RANGE_VALUE;
    1f9a:	82 e0       	ldi	r24, 0x02	; 2
    1f9c:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}
	return ret_status;
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	08 95       	ret

00001fb0 <__vector_1>:

/* ----------------------------------------- External Interrupt ISRs -------------------------- */
// Define the ISR function with attribute
void INT0_VECTOR(void) __attribute__((signal));
void INT0_VECTOR(void)
{
    1fb0:	1f 92       	push	r1
    1fb2:	0f 92       	push	r0
    1fb4:	0f b6       	in	r0, 0x3f	; 63
    1fb6:	0f 92       	push	r0
    1fb8:	11 24       	eor	r1, r1
    1fba:	2f 93       	push	r18
    1fbc:	3f 93       	push	r19
    1fbe:	4f 93       	push	r20
    1fc0:	5f 93       	push	r21
    1fc2:	6f 93       	push	r22
    1fc4:	7f 93       	push	r23
    1fc6:	8f 93       	push	r24
    1fc8:	9f 93       	push	r25
    1fca:	af 93       	push	r26
    1fcc:	bf 93       	push	r27
    1fce:	ef 93       	push	r30
    1fd0:	ff 93       	push	r31
    1fd2:	df 93       	push	r29
    1fd4:	cf 93       	push	r28
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	EXT_INT_CONTROL->GIFR_CFG.INTF0_BIT = 0;
    1fda:	e4 e5       	ldi	r30, 0x54	; 84
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	86 81       	ldd	r24, Z+6	; 0x06
    1fe0:	8f 7b       	andi	r24, 0xBF	; 191
    1fe2:	86 83       	std	Z+6, r24	; 0x06
	// execute ISR if it existed
	if(INT0_ISR)
    1fe4:	80 91 80 02 	lds	r24, 0x0280
    1fe8:	90 91 81 02 	lds	r25, 0x0281
    1fec:	00 97       	sbiw	r24, 0x00	; 0
    1fee:	29 f0       	breq	.+10     	; 0x1ffa <__vector_1+0x4a>
	{
		INT0_ISR();
    1ff0:	e0 91 80 02 	lds	r30, 0x0280
    1ff4:	f0 91 81 02 	lds	r31, 0x0281
    1ff8:	09 95       	icall
	}
}
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	ff 91       	pop	r31
    2000:	ef 91       	pop	r30
    2002:	bf 91       	pop	r27
    2004:	af 91       	pop	r26
    2006:	9f 91       	pop	r25
    2008:	8f 91       	pop	r24
    200a:	7f 91       	pop	r23
    200c:	6f 91       	pop	r22
    200e:	5f 91       	pop	r21
    2010:	4f 91       	pop	r20
    2012:	3f 91       	pop	r19
    2014:	2f 91       	pop	r18
    2016:	0f 90       	pop	r0
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	0f 90       	pop	r0
    201c:	1f 90       	pop	r1
    201e:	18 95       	reti

00002020 <__vector_2>:


// Define the ISR function with attribute
void INT1_VECTOR(void) __attribute__((signal));
void INT1_VECTOR(void)
{
    2020:	1f 92       	push	r1
    2022:	0f 92       	push	r0
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	0f 92       	push	r0
    2028:	11 24       	eor	r1, r1
    202a:	2f 93       	push	r18
    202c:	3f 93       	push	r19
    202e:	4f 93       	push	r20
    2030:	5f 93       	push	r21
    2032:	6f 93       	push	r22
    2034:	7f 93       	push	r23
    2036:	8f 93       	push	r24
    2038:	9f 93       	push	r25
    203a:	af 93       	push	r26
    203c:	bf 93       	push	r27
    203e:	ef 93       	push	r30
    2040:	ff 93       	push	r31
    2042:	df 93       	push	r29
    2044:	cf 93       	push	r28
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
	// clear flag
	EXT_INT_CONTROL->GIFR_CFG.INTF1_BIT = 0;
    204a:	e4 e5       	ldi	r30, 0x54	; 84
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	86 81       	ldd	r24, Z+6	; 0x06
    2050:	8f 77       	andi	r24, 0x7F	; 127
    2052:	86 83       	std	Z+6, r24	; 0x06
	// execute ISR if it existed
	if(INT1_ISR)
    2054:	80 91 82 02 	lds	r24, 0x0282
    2058:	90 91 83 02 	lds	r25, 0x0283
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	29 f0       	breq	.+10     	; 0x206a <__vector_2+0x4a>
	{
		INT1_ISR();
    2060:	e0 91 82 02 	lds	r30, 0x0282
    2064:	f0 91 83 02 	lds	r31, 0x0283
    2068:	09 95       	icall
	}
}
    206a:	cf 91       	pop	r28
    206c:	df 91       	pop	r29
    206e:	ff 91       	pop	r31
    2070:	ef 91       	pop	r30
    2072:	bf 91       	pop	r27
    2074:	af 91       	pop	r26
    2076:	9f 91       	pop	r25
    2078:	8f 91       	pop	r24
    207a:	7f 91       	pop	r23
    207c:	6f 91       	pop	r22
    207e:	5f 91       	pop	r21
    2080:	4f 91       	pop	r20
    2082:	3f 91       	pop	r19
    2084:	2f 91       	pop	r18
    2086:	0f 90       	pop	r0
    2088:	0f be       	out	0x3f, r0	; 63
    208a:	0f 90       	pop	r0
    208c:	1f 90       	pop	r1
    208e:	18 95       	reti

00002090 <__vector_3>:


// Define the ISR function with attribute
void INT2_VECTOR(void) __attribute__((signal));
void INT2_VECTOR(void)
{
    2090:	1f 92       	push	r1
    2092:	0f 92       	push	r0
    2094:	0f b6       	in	r0, 0x3f	; 63
    2096:	0f 92       	push	r0
    2098:	11 24       	eor	r1, r1
    209a:	2f 93       	push	r18
    209c:	3f 93       	push	r19
    209e:	4f 93       	push	r20
    20a0:	5f 93       	push	r21
    20a2:	6f 93       	push	r22
    20a4:	7f 93       	push	r23
    20a6:	8f 93       	push	r24
    20a8:	9f 93       	push	r25
    20aa:	af 93       	push	r26
    20ac:	bf 93       	push	r27
    20ae:	ef 93       	push	r30
    20b0:	ff 93       	push	r31
    20b2:	df 93       	push	r29
    20b4:	cf 93       	push	r28
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
	// clear flag
	EXT_INT_CONTROL->GIFR_CFG.INTF2_BIT = 1;
    20ba:	e4 e5       	ldi	r30, 0x54	; 84
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	86 81       	ldd	r24, Z+6	; 0x06
    20c0:	80 62       	ori	r24, 0x20	; 32
    20c2:	86 83       	std	Z+6, r24	; 0x06
	// execute ISR if it existed
	if(INT2_ISR)
    20c4:	80 91 84 02 	lds	r24, 0x0284
    20c8:	90 91 85 02 	lds	r25, 0x0285
    20cc:	00 97       	sbiw	r24, 0x00	; 0
    20ce:	29 f0       	breq	.+10     	; 0x20da <__vector_3+0x4a>
	{
		INT2_ISR();
    20d0:	e0 91 84 02 	lds	r30, 0x0284
    20d4:	f0 91 85 02 	lds	r31, 0x0285
    20d8:	09 95       	icall
	}
}
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	ff 91       	pop	r31
    20e0:	ef 91       	pop	r30
    20e2:	bf 91       	pop	r27
    20e4:	af 91       	pop	r26
    20e6:	9f 91       	pop	r25
    20e8:	8f 91       	pop	r24
    20ea:	7f 91       	pop	r23
    20ec:	6f 91       	pop	r22
    20ee:	5f 91       	pop	r21
    20f0:	4f 91       	pop	r20
    20f2:	3f 91       	pop	r19
    20f4:	2f 91       	pop	r18
    20f6:	0f 90       	pop	r0
    20f8:	0f be       	out	0x3f, r0	; 63
    20fa:	0f 90       	pop	r0
    20fc:	1f 90       	pop	r1
    20fe:	18 95       	reti

00002100 <WDT_Enable>:

#include "WatchDog.h"


void WDT_Enable(void)
{
    2100:	df 93       	push	r29
    2102:	cf 93       	push	r28
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
	WATCHDOG_CONTROL->WDE_BIT = 1;
    2108:	e1 e4       	ldi	r30, 0x41	; 65
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	88 60       	ori	r24, 0x08	; 8
    2110:	80 83       	st	Z, r24
}
    2112:	cf 91       	pop	r28
    2114:	df 91       	pop	r29
    2116:	08 95       	ret

00002118 <WDT_Disable>:


void WDT_Disable(void)
{
    2118:	df 93       	push	r29
    211a:	cf 93       	push	r28
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
	/* Write logic one to WDTOE and WDE  */
	WDTCR_REG |= (1 << WDTOE_POS) | (1 << WDE_POS);
    2120:	a1 e4       	ldi	r26, 0x41	; 65
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	e1 e4       	ldi	r30, 0x41	; 65
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	88 61       	ori	r24, 0x18	; 24
    212c:	8c 93       	st	X, r24
	WDTCR_REG = 0x00;
    212e:	e1 e4       	ldi	r30, 0x41	; 65
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	10 82       	st	Z, r1
}
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	08 95       	ret

0000213a <WDT_sleep>:


void WDT_sleep(u8 sleepTime)
{
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	0f 92       	push	r0
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
    2144:	89 83       	std	Y+1, r24	; 0x01
	WDT_Enable();
    2146:	0e 94 80 10 	call	0x2100	; 0x2100 <WDT_Enable>
	WATCHDOG_CONTROL->WDP_BITS = sleepTime;
    214a:	e1 e4       	ldi	r30, 0x41	; 65
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	89 81       	ldd	r24, Y+1	; 0x01
    2150:	87 70       	andi	r24, 0x07	; 7
    2152:	98 2f       	mov	r25, r24
    2154:	97 70       	andi	r25, 0x07	; 7
    2156:	80 81       	ld	r24, Z
    2158:	88 7f       	andi	r24, 0xF8	; 248
    215a:	89 2b       	or	r24, r25
    215c:	80 83       	st	Z, r24
}
    215e:	0f 90       	pop	r0
    2160:	cf 91       	pop	r28
    2162:	df 91       	pop	r29
    2164:	08 95       	ret

00002166 <WDT_refresh>:

void WDT_refresh(void)
{
    2166:	df 93       	push	r29
    2168:	cf 93       	push	r28
    216a:	cd b7       	in	r28, 0x3d	; 61
    216c:	de b7       	in	r29, 0x3e	; 62
	asm volatile ("WDR");
    216e:	a8 95       	wdr
}
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	08 95       	ret

00002176 <UART_Init>:

#include "UART.h"


Error_Status_t UART_Init(void)
{
    2176:	df 93       	push	r29
    2178:	cf 93       	push	r28
    217a:	00 d0       	rcall	.+0      	; 0x217c <UART_Init+0x6>
    217c:	00 d0       	rcall	.+0      	; 0x217e <UART_Init+0x8>
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
    2182:	1c 82       	std	Y+4, r1	; 0x04

	u8 baud = 51;
    2184:	83 e3       	ldi	r24, 0x33	; 51
    2186:	8b 83       	std	Y+3, r24	; 0x03

	// set baud rate
	UART_CONTROL->UBRRH_UCSRC_CFG = (u8)(baud >> 8);
    2188:	e9 e2       	ldi	r30, 0x29	; 41
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	88 2f       	mov	r24, r24
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	89 2f       	mov	r24, r25
    2194:	99 0f       	add	r25, r25
    2196:	99 0b       	sbc	r25, r25
    2198:	87 8b       	std	Z+23, r24	; 0x17
	UART_CONTROL->UBRRL_CFG = (u8)(baud);
    219a:	e9 e2       	ldi	r30, 0x29	; 41
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	8b 81       	ldd	r24, Y+3	; 0x03
    21a0:	80 83       	st	Z, r24

	// Enable transmitter and receiver
	u8 rx_tx = (0x01<<4) | (0x01<<3);
    21a2:	88 e1       	ldi	r24, 0x18	; 24
    21a4:	8a 83       	std	Y+2, r24	; 0x02
	UART_CONTROL->UCSRB_CFG = rx_tx;
    21a6:	e9 e2       	ldi	r30, 0x29	; 41
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	8a 81       	ldd	r24, Y+2	; 0x02
    21ac:	81 83       	std	Z+1, r24	; 0x01

	// set frame format
	u8 frame_form = (0x01<<7) | (0x01<<3) | (0x03<<1);
    21ae:	8e e8       	ldi	r24, 0x8E	; 142
    21b0:	89 83       	std	Y+1, r24	; 0x01
	UART_CONTROL->UBRRH_UCSRC_CFG = frame_form;
    21b2:	e9 e2       	ldi	r30, 0x29	; 41
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	87 8b       	std	Z+23, r24	; 0x17

	return ret_status;
    21ba:	8c 81       	ldd	r24, Y+4	; 0x04
}
    21bc:	0f 90       	pop	r0
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	08 95       	ret

000021ca <UART_SendByte>:


Error_Status_t UART_SendByte(u8 ch)
{
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	00 d0       	rcall	.+0      	; 0x21d0 <UART_SendByte+0x6>
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    21d6:	19 82       	std	Y+1, r1	; 0x01
	while(!(UART_CONTROL->UCSRA_CFG & (0x01 << 5)));
    21d8:	e9 e2       	ldi	r30, 0x29	; 41
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	82 81       	ldd	r24, Z+2	; 0x02
    21de:	88 2f       	mov	r24, r24
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	80 72       	andi	r24, 0x20	; 32
    21e4:	90 70       	andi	r25, 0x00	; 0
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	b9 f3       	breq	.-18     	; 0x21d8 <UART_SendByte+0xe>
	UART_CONTROL->UDR_CFG = ch;
    21ea:	e9 e2       	ldi	r30, 0x29	; 41
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	83 83       	std	Z+3, r24	; 0x03
	return ret_status;
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	cf 91       	pop	r28
    21fa:	df 91       	pop	r29
    21fc:	08 95       	ret

000021fe <UART_ReceiveByte>:


Error_Status_t UART_ReceiveByte(u8 *RecByte)
{
    21fe:	df 93       	push	r29
    2200:	cf 93       	push	r28
    2202:	00 d0       	rcall	.+0      	; 0x2204 <UART_ReceiveByte+0x6>
    2204:	0f 92       	push	r0
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	9b 83       	std	Y+3, r25	; 0x03
    220c:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    220e:	19 82       	std	Y+1, r1	; 0x01
	while(!(UART_CONTROL->UCSRA_CFG & (0x01 << 7)));
    2210:	e9 e2       	ldi	r30, 0x29	; 41
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	82 81       	ldd	r24, Z+2	; 0x02
    2216:	88 23       	and	r24, r24
    2218:	dc f7       	brge	.-10     	; 0x2210 <UART_ReceiveByte+0x12>
	*RecByte = UART_CONTROL->UDR_CFG;
    221a:	e9 e2       	ldi	r30, 0x29	; 41
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	83 81       	ldd	r24, Z+3	; 0x03
    2220:	ea 81       	ldd	r30, Y+2	; 0x02
    2222:	fb 81       	ldd	r31, Y+3	; 0x03
    2224:	80 83       	st	Z, r24
	return ret_status;
    2226:	89 81       	ldd	r24, Y+1	; 0x01
}
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    222e:	cf 91       	pop	r28
    2230:	df 91       	pop	r29
    2232:	08 95       	ret

00002234 <UART_SendString>:


Error_Status_t UART_SendString(u8 *Str)
{
    2234:	df 93       	push	r29
    2236:	cf 93       	push	r28
    2238:	00 d0       	rcall	.+0      	; 0x223a <UART_SendString+0x6>
    223a:	0f 92       	push	r0
    223c:	cd b7       	in	r28, 0x3d	; 61
    223e:	de b7       	in	r29, 0x3e	; 62
    2240:	9b 83       	std	Y+3, r25	; 0x03
    2242:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    2244:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Str)
    2246:	8a 81       	ldd	r24, Y+2	; 0x02
    2248:	9b 81       	ldd	r25, Y+3	; 0x03
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	71 f4       	brne	.+28     	; 0x226a <UART_SendString+0x36>
	{
		ret_status = NULL_POINTER;
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	89 83       	std	Y+1, r24	; 0x01
    2252:	10 c0       	rjmp	.+32     	; 0x2274 <UART_SendString+0x40>
	}
	else
	{
		while(*Str)
		{
			ret_status = UART_SendByte(*Str);
    2254:	ea 81       	ldd	r30, Y+2	; 0x02
    2256:	fb 81       	ldd	r31, Y+3	; 0x03
    2258:	80 81       	ld	r24, Z
    225a:	0e 94 e5 10 	call	0x21ca	; 0x21ca <UART_SendByte>
    225e:	89 83       	std	Y+1, r24	; 0x01
			Str++;
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	9b 81       	ldd	r25, Y+3	; 0x03
    2264:	01 96       	adiw	r24, 0x01	; 1
    2266:	9b 83       	std	Y+3, r25	; 0x03
    2268:	8a 83       	std	Y+2, r24	; 0x02
	{
		ret_status = NULL_POINTER;
	}
	else
	{
		while(*Str)
    226a:	ea 81       	ldd	r30, Y+2	; 0x02
    226c:	fb 81       	ldd	r31, Y+3	; 0x03
    226e:	80 81       	ld	r24, Z
    2270:	88 23       	and	r24, r24
    2272:	81 f7       	brne	.-32     	; 0x2254 <UART_SendString+0x20>
		{
			ret_status = UART_SendByte(*Str);
			Str++;
		}
	}
	return ret_status;
    2274:	89 81       	ldd	r24, Y+1	; 0x01
}
    2276:	0f 90       	pop	r0
    2278:	0f 90       	pop	r0
    227a:	0f 90       	pop	r0
    227c:	cf 91       	pop	r28
    227e:	df 91       	pop	r29
    2280:	08 95       	ret

00002282 <SPI_Init>:

// SPI callback
void (*spi_callbackfun)(void) = NULL;

Error_Status_t SPI_Init(const SPI_T *spi_obj)
{
    2282:	df 93       	push	r29
    2284:	cf 93       	push	r28
    2286:	00 d0       	rcall	.+0      	; 0x2288 <SPI_Init+0x6>
    2288:	0f 92       	push	r0
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
    228e:	9b 83       	std	Y+3, r25	; 0x03
    2290:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    2292:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == spi_obj)
    2294:	8a 81       	ldd	r24, Y+2	; 0x02
    2296:	9b 81       	ldd	r25, Y+3	; 0x03
    2298:	00 97       	sbiw	r24, 0x00	; 0
    229a:	19 f4       	brne	.+6      	; 0x22a2 <SPI_Init+0x20>
	{
		ret_status = NULL_POINTER;
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	89 83       	std	Y+1, r24	; 0x01
    22a0:	22 c0       	rjmp	.+68     	; 0x22e6 <SPI_Init+0x64>
	}
	else
	{
		if(MASTER_CONFIG == spi_obj->MasterSlaveSelect)
    22a2:	ea 81       	ldd	r30, Y+2	; 0x02
    22a4:	fb 81       	ldd	r31, Y+3	; 0x03
    22a6:	82 81       	ldd	r24, Z+2	; 0x02
    22a8:	88 23       	and	r24, r24
    22aa:	79 f4       	brne	.+30     	; 0x22ca <SPI_Init+0x48>
		{
			DIO_voidSetPinDirection(PORTB_INDEX, PIN5_INDEX, GPIO_DIRECTION_OUTPUT);
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	65 e0       	ldi	r22, 0x05	; 5
    22b0:	41 e0       	ldi	r20, 0x01	; 1
    22b2:	0e 94 29 13 	call	0x2652	; 0x2652 <DIO_voidSetPinDirection>
			DIO_voidSetPinDirection(PORTB_INDEX, PIN7_INDEX, GPIO_DIRECTION_OUTPUT);
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	67 e0       	ldi	r22, 0x07	; 7
    22ba:	41 e0       	ldi	r20, 0x01	; 1
    22bc:	0e 94 29 13 	call	0x2652	; 0x2652 <DIO_voidSetPinDirection>
			SPI_MAP->SPCR_CFG = (0x01 << 6) | (0x01 << 4) | (0x01 << 0);
    22c0:	ed e2       	ldi	r30, 0x2D	; 45
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	81 e5       	ldi	r24, 0x51	; 81
    22c6:	80 83       	st	Z, r24
    22c8:	0e c0       	rjmp	.+28     	; 0x22e6 <SPI_Init+0x64>
		}
		else if(SLAVE_CONFIG == spi_obj->MasterSlaveSelect)
    22ca:	ea 81       	ldd	r30, Y+2	; 0x02
    22cc:	fb 81       	ldd	r31, Y+3	; 0x03
    22ce:	82 81       	ldd	r24, Z+2	; 0x02
    22d0:	81 30       	cpi	r24, 0x01	; 1
    22d2:	49 f4       	brne	.+18     	; 0x22e6 <SPI_Init+0x64>
		{
			DIO_voidSetPinDirection(PORTB_INDEX, PIN6_INDEX, GPIO_DIRECTION_OUTPUT);
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	66 e0       	ldi	r22, 0x06	; 6
    22d8:	41 e0       	ldi	r20, 0x01	; 1
    22da:	0e 94 29 13 	call	0x2652	; 0x2652 <DIO_voidSetPinDirection>
			SPI_MAP->SPCR_CFG = (0x01 <<6);
    22de:	ed e2       	ldi	r30, 0x2D	; 45
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 e4       	ldi	r24, 0x40	; 64
    22e4:	80 83       	st	Z, r24
		}
	}
	return ret_status;
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    22e8:	0f 90       	pop	r0
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <SPI_Transfere>:
Error_Status_t SPI_Transfere(u8 Copy_u8Ch, u8 *pch)
{
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	00 d0       	rcall	.+0      	; 0x22fa <SPI_Transfere+0x6>
    22fa:	00 d0       	rcall	.+0      	; 0x22fc <SPI_Transfere+0x8>
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
    2300:	8a 83       	std	Y+2, r24	; 0x02
    2302:	7c 83       	std	Y+4, r23	; 0x04
    2304:	6b 83       	std	Y+3, r22	; 0x03
	Error_Status_t ret_status = NO_ERROR;
    2306:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == pch)
    2308:	8b 81       	ldd	r24, Y+3	; 0x03
    230a:	9c 81       	ldd	r25, Y+4	; 0x04
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	19 f4       	brne	.+6      	; 0x2316 <SPI_Transfere+0x22>
	{
		ret_status = NULL_POINTER;
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	89 83       	std	Y+1, r24	; 0x01
    2314:	0f c0       	rjmp	.+30     	; 0x2334 <SPI_Transfere+0x40>
	}
	else
	{
		SPI_MAP->SPDR_CFG = Copy_u8Ch;
    2316:	ed e2       	ldi	r30, 0x2D	; 45
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	8a 81       	ldd	r24, Y+2	; 0x02
    231c:	82 83       	std	Z+2, r24	; 0x02
		while(!(SPI_MAP->SPSR_CFG & (0x01<<7)));
    231e:	ed e2       	ldi	r30, 0x2D	; 45
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	81 81       	ldd	r24, Z+1	; 0x01
    2324:	88 23       	and	r24, r24
    2326:	dc f7       	brge	.-10     	; 0x231e <SPI_Transfere+0x2a>
		*pch = SPI_MAP->SPDR_CFG;
    2328:	ed e2       	ldi	r30, 0x2D	; 45
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	82 81       	ldd	r24, Z+2	; 0x02
    232e:	eb 81       	ldd	r30, Y+3	; 0x03
    2330:	fc 81       	ldd	r31, Y+4	; 0x04
    2332:	80 83       	st	Z, r24
	}
	return ret_status;
    2334:	89 81       	ldd	r24, Y+1	; 0x01
}
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	cf 91       	pop	r28
    2340:	df 91       	pop	r29
    2342:	08 95       	ret

00002344 <SPI_AsynchCallBack>:

Error_Status_t SPI_AsynchCallBack(void (*spi_callback)(void), u8 ch)
{
    2344:	df 93       	push	r29
    2346:	cf 93       	push	r28
    2348:	00 d0       	rcall	.+0      	; 0x234a <SPI_AsynchCallBack+0x6>
    234a:	00 d0       	rcall	.+0      	; 0x234c <SPI_AsynchCallBack+0x8>
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
    2350:	9b 83       	std	Y+3, r25	; 0x03
    2352:	8a 83       	std	Y+2, r24	; 0x02
    2354:	6c 83       	std	Y+4, r22	; 0x04
	Error_Status_t ret_status = NO_ERROR;
    2356:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == spi_callback)
    2358:	8a 81       	ldd	r24, Y+2	; 0x02
    235a:	9b 81       	ldd	r25, Y+3	; 0x03
    235c:	00 97       	sbiw	r24, 0x00	; 0
    235e:	19 f4       	brne	.+6      	; 0x2366 <SPI_AsynchCallBack+0x22>
	{
		ret_status = NULL_POINTER;
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	89 83       	std	Y+1, r24	; 0x01
    2364:	16 c0       	rjmp	.+44     	; 0x2392 <SPI_AsynchCallBack+0x4e>
	}
	else
	{
		SPI_MAP->SPCR_CFG |= (0x01<<7);
    2366:	ad e2       	ldi	r26, 0x2D	; 45
    2368:	b0 e0       	ldi	r27, 0x00	; 0
    236a:	ed e2       	ldi	r30, 0x2D	; 45
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	80 81       	ld	r24, Z
    2370:	80 68       	ori	r24, 0x80	; 128
    2372:	8c 93       	st	X, r24
		spi_callbackfun = spi_callback;
    2374:	8a 81       	ldd	r24, Y+2	; 0x02
    2376:	9b 81       	ldd	r25, Y+3	; 0x03
    2378:	90 93 88 02 	sts	0x0288, r25
    237c:	80 93 87 02 	sts	0x0287, r24
		SPI_MAP->SPDR_CFG = ch;
    2380:	ed e2       	ldi	r30, 0x2D	; 45
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	8c 81       	ldd	r24, Y+4	; 0x04
    2386:	82 83       	std	Z+2, r24	; 0x02
		while(!(SPI_MAP->SPSR_CFG & (0x01<<7)));
    2388:	ed e2       	ldi	r30, 0x2D	; 45
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	81 81       	ldd	r24, Z+1	; 0x01
    238e:	88 23       	and	r24, r24
    2390:	dc f7       	brge	.-10     	; 0x2388 <SPI_AsynchCallBack+0x44>
	}
	return ret_status;
    2392:	89 81       	ldd	r24, Y+1	; 0x01
}
    2394:	0f 90       	pop	r0
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	08 95       	ret

000023a2 <SPI_Send_String>:

Error_Status_t SPI_Send_String(u8 *Str)
{
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	00 d0       	rcall	.+0      	; 0x23a8 <SPI_Send_String+0x6>
    23a8:	00 d0       	rcall	.+0      	; 0x23aa <SPI_Send_String+0x8>
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	9c 83       	std	Y+4, r25	; 0x04
    23b0:	8b 83       	std	Y+3, r24	; 0x03
	Error_Status_t ret_status = NO_ERROR;
    23b2:	19 82       	std	Y+1, r1	; 0x01
	u8 dummy_var;
	if(NULL == Str)
    23b4:	8b 81       	ldd	r24, Y+3	; 0x03
    23b6:	9c 81       	ldd	r25, Y+4	; 0x04
    23b8:	00 97       	sbiw	r24, 0x00	; 0
    23ba:	91 f4       	brne	.+36     	; 0x23e0 <SPI_Send_String+0x3e>
	{
		ret_status = NULL_POINTER;
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	89 83       	std	Y+1, r24	; 0x01
    23c0:	14 c0       	rjmp	.+40     	; 0x23ea <SPI_Send_String+0x48>
	}
	else
	{
		while(*Str)
		{
			ret_status = SPI_Transfere(*Str, &dummy_var);
    23c2:	eb 81       	ldd	r30, Y+3	; 0x03
    23c4:	fc 81       	ldd	r31, Y+4	; 0x04
    23c6:	80 81       	ld	r24, Z
    23c8:	9e 01       	movw	r18, r28
    23ca:	2e 5f       	subi	r18, 0xFE	; 254
    23cc:	3f 4f       	sbci	r19, 0xFF	; 255
    23ce:	b9 01       	movw	r22, r18
    23d0:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <SPI_Transfere>
    23d4:	89 83       	std	Y+1, r24	; 0x01
			Str++;
    23d6:	8b 81       	ldd	r24, Y+3	; 0x03
    23d8:	9c 81       	ldd	r25, Y+4	; 0x04
    23da:	01 96       	adiw	r24, 0x01	; 1
    23dc:	9c 83       	std	Y+4, r25	; 0x04
    23de:	8b 83       	std	Y+3, r24	; 0x03
	{
		ret_status = NULL_POINTER;
	}
	else
	{
		while(*Str)
    23e0:	eb 81       	ldd	r30, Y+3	; 0x03
    23e2:	fc 81       	ldd	r31, Y+4	; 0x04
    23e4:	80 81       	ld	r24, Z
    23e6:	88 23       	and	r24, r24
    23e8:	61 f7       	brne	.-40     	; 0x23c2 <SPI_Send_String+0x20>
		{
			ret_status = SPI_Transfere(*Str, &dummy_var);
			Str++;
		}
	}
	return ret_status;
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    23ec:	0f 90       	pop	r0
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	cf 91       	pop	r28
    23f6:	df 91       	pop	r29
    23f8:	08 95       	ret

000023fa <__vector_12>:


// Define the ISR function with attribute
void SPI_VECTOR(void) __attribute__((signal));
void SPI_VECTOR(void)
{
    23fa:	1f 92       	push	r1
    23fc:	0f 92       	push	r0
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	0f 92       	push	r0
    2402:	11 24       	eor	r1, r1
    2404:	2f 93       	push	r18
    2406:	3f 93       	push	r19
    2408:	4f 93       	push	r20
    240a:	5f 93       	push	r21
    240c:	6f 93       	push	r22
    240e:	7f 93       	push	r23
    2410:	8f 93       	push	r24
    2412:	9f 93       	push	r25
    2414:	af 93       	push	r26
    2416:	bf 93       	push	r27
    2418:	ef 93       	push	r30
    241a:	ff 93       	push	r31
    241c:	df 93       	push	r29
    241e:	cf 93       	push	r28
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
	// Clear flag

	// execute ISR if it existed
	dum = SPI_MAP->SPDR_CFG;
    2424:	ed e2       	ldi	r30, 0x2D	; 45
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	82 81       	ldd	r24, Z+2	; 0x02
    242a:	80 93 86 02 	sts	0x0286, r24
//	CLEAR_BIT(SPI_MAP->SPCR_CFG, 7);

	if(spi_callbackfun)
    242e:	80 91 87 02 	lds	r24, 0x0287
    2432:	90 91 88 02 	lds	r25, 0x0288
    2436:	00 97       	sbiw	r24, 0x00	; 0
    2438:	29 f0       	breq	.+10     	; 0x2444 <__vector_12+0x4a>
	{
		spi_callbackfun();
    243a:	e0 91 87 02 	lds	r30, 0x0287
    243e:	f0 91 88 02 	lds	r31, 0x0288
    2442:	09 95       	icall
	}
}
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	ff 91       	pop	r31
    244a:	ef 91       	pop	r30
    244c:	bf 91       	pop	r27
    244e:	af 91       	pop	r26
    2450:	9f 91       	pop	r25
    2452:	8f 91       	pop	r24
    2454:	7f 91       	pop	r23
    2456:	6f 91       	pop	r22
    2458:	5f 91       	pop	r21
    245a:	4f 91       	pop	r20
    245c:	3f 91       	pop	r19
    245e:	2f 91       	pop	r18
    2460:	0f 90       	pop	r0
    2462:	0f be       	out	0x3f, r0	; 63
    2464:	0f 90       	pop	r0
    2466:	1f 90       	pop	r1
    2468:	18 95       	reti

0000246a <I2C_Init>:
 */

#include "I2C.h"

Error_Status_t I2C_Init(const i2c_t *i2c_obj)
{
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	00 d0       	rcall	.+0      	; 0x2470 <I2C_Init+0x6>
    2470:	00 d0       	rcall	.+0      	; 0x2472 <I2C_Init+0x8>
    2472:	0f 92       	push	r0
    2474:	cd b7       	in	r28, 0x3d	; 61
    2476:	de b7       	in	r29, 0x3e	; 62
    2478:	9b 83       	std	Y+3, r25	; 0x03
    247a:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    247c:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == i2c_obj)
    247e:	8a 81       	ldd	r24, Y+2	; 0x02
    2480:	9b 81       	ldd	r25, Y+3	; 0x03
    2482:	00 97       	sbiw	r24, 0x00	; 0
    2484:	19 f4       	brne	.+6      	; 0x248c <I2C_Init+0x22>
	{
		ret_status = NULL_POINTER;
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	89 83       	std	Y+1, r24	; 0x01
    248a:	2f c0       	rjmp	.+94     	; 0x24ea <I2C_Init+0x80>
	}
	else
	{
		// to set prescaler to be one
		I2C_CONTROL->TWSR_REG &= ~(1 << 0);
    248c:	a0 e2       	ldi	r26, 0x20	; 32
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	e0 e2       	ldi	r30, 0x20	; 32
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	81 81       	ldd	r24, Z+1	; 0x01
    2496:	8e 7f       	andi	r24, 0xFE	; 254
    2498:	11 96       	adiw	r26, 0x01	; 1
    249a:	8c 93       	st	X, r24
		I2C_CONTROL->TWSR_REG &= ~(1 << 1);
    249c:	a0 e2       	ldi	r26, 0x20	; 32
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	e0 e2       	ldi	r30, 0x20	; 32
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	81 81       	ldd	r24, Z+1	; 0x01
    24a6:	8d 7f       	andi	r24, 0xFD	; 253
    24a8:	11 96       	adiw	r26, 0x01	; 1
    24aa:	8c 93       	st	X, r24
    24ac:	11 97       	sbiw	r26, 0x01	; 1

		// to set bit rate register
		switch (i2c_obj->frequency)
    24ae:	ea 81       	ldd	r30, Y+2	; 0x02
    24b0:	fb 81       	ldd	r31, Y+3	; 0x03
    24b2:	81 81       	ldd	r24, Z+1	; 0x01
    24b4:	28 2f       	mov	r18, r24
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	3d 83       	std	Y+5, r19	; 0x05
    24ba:	2c 83       	std	Y+4, r18	; 0x04
    24bc:	8c 81       	ldd	r24, Y+4	; 0x04
    24be:	9d 81       	ldd	r25, Y+5	; 0x05
    24c0:	00 97       	sbiw	r24, 0x00	; 0
    24c2:	31 f0       	breq	.+12     	; 0x24d0 <I2C_Init+0x66>
    24c4:	2c 81       	ldd	r18, Y+4	; 0x04
    24c6:	3d 81       	ldd	r19, Y+5	; 0x05
    24c8:	21 30       	cpi	r18, 0x01	; 1
    24ca:	31 05       	cpc	r19, r1
    24cc:	31 f0       	breq	.+12     	; 0x24da <I2C_Init+0x70>
    24ce:	09 c0       	rjmp	.+18     	; 0x24e2 <I2C_Init+0x78>
		{
		case I2C_FREQ_100HZ:
			I2C_CONTROL->TWBR_REG = 72;
    24d0:	e0 e2       	ldi	r30, 0x20	; 32
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	88 e4       	ldi	r24, 0x48	; 72
    24d6:	80 83       	st	Z, r24
    24d8:	04 c0       	rjmp	.+8      	; 0x24e2 <I2C_Init+0x78>
			break;
		case I2C_FERQ_400HZ:
			I2C_CONTROL->TWBR_REG = 12;
    24da:	e0 e2       	ldi	r30, 0x20	; 32
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	8c e0       	ldi	r24, 0x0C	; 12
    24e0:	80 83       	st	Z, r24

			break;
		}

		// Enable TWI
		I2C_CONTROL->TWCR_REG = (1 << 0) | (1 << 6);
    24e2:	e0 e2       	ldi	r30, 0x20	; 32
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	81 e4       	ldi	r24, 0x41	; 65
    24e8:	86 ab       	std	Z+54, r24	; 0x36
	}
	return ret_status;
    24ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    24ec:	0f 90       	pop	r0
    24ee:	0f 90       	pop	r0
    24f0:	0f 90       	pop	r0
    24f2:	0f 90       	pop	r0
    24f4:	0f 90       	pop	r0
    24f6:	cf 91       	pop	r28
    24f8:	df 91       	pop	r29
    24fa:	08 95       	ret

000024fc <I2C_SendByte>:



Error_Status_t I2C_SendByte(u8 Copy_u8data)
{
    24fc:	df 93       	push	r29
    24fe:	cf 93       	push	r28
    2500:	00 d0       	rcall	.+0      	; 0x2502 <I2C_SendByte+0x6>
    2502:	cd b7       	in	r28, 0x3d	; 61
    2504:	de b7       	in	r29, 0x3e	; 62
    2506:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NULL_POINTER;
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	89 83       	std	Y+1, r24	; 0x01
	I2C_CONTROL->TWDR_REG = Copy_u8data;
    250c:	e0 e2       	ldi	r30, 0x20	; 32
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	8a 81       	ldd	r24, Y+2	; 0x02
    2512:	83 83       	std	Z+3, r24	; 0x03
	I2C_CONTROL->TWCR_REG = (1 << 7) | (1 << 2);
    2514:	e0 e2       	ldi	r30, 0x20	; 32
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	84 e8       	ldi	r24, 0x84	; 132
    251a:	86 ab       	std	Z+54, r24	; 0x36
	while(!(I2C_CONTROL->TWCR_REG & (1 << 7)));
    251c:	e0 e2       	ldi	r30, 0x20	; 32
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	86 a9       	ldd	r24, Z+54	; 0x36
    2522:	88 23       	and	r24, r24
    2524:	dc f7       	brge	.-10     	; 0x251c <I2C_SendByte+0x20>
	return ret_status;
    2526:	89 81       	ldd	r24, Y+1	; 0x01
}
    2528:	0f 90       	pop	r0
    252a:	0f 90       	pop	r0
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	08 95       	ret

00002532 <I2C_SendStart>:



Error_Status_t I2C_SendStart(void)
{
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	0f 92       	push	r0
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NULL_POINTER;
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	89 83       	std	Y+1, r24	; 0x01
	I2C_CONTROL->TWCR_REG = (1 << 5) | (1 << 7) | (1 << 2);
    2540:	e0 e2       	ldi	r30, 0x20	; 32
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	84 ea       	ldi	r24, 0xA4	; 164
    2546:	86 ab       	std	Z+54, r24	; 0x36
	while(!(I2C_CONTROL->TWCR_REG & (1 << 7)));
    2548:	e0 e2       	ldi	r30, 0x20	; 32
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	86 a9       	ldd	r24, Z+54	; 0x36
    254e:	88 23       	and	r24, r24
    2550:	dc f7       	brge	.-10     	; 0x2548 <I2C_SendStart+0x16>
	return ret_status;
    2552:	89 81       	ldd	r24, Y+1	; 0x01
}
    2554:	0f 90       	pop	r0
    2556:	cf 91       	pop	r28
    2558:	df 91       	pop	r29
    255a:	08 95       	ret

0000255c <I2C_SendStop>:



Error_Status_t I2C_SendStop(void)
{
    255c:	df 93       	push	r29
    255e:	cf 93       	push	r28
    2560:	0f 92       	push	r0
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NULL_POINTER;
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	89 83       	std	Y+1, r24	; 0x01
	I2C_CONTROL->TWCR_REG = (1 << 4) | (1 << 7) | (1 << 2);
    256a:	e0 e2       	ldi	r30, 0x20	; 32
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	84 e9       	ldi	r24, 0x94	; 148
    2570:	86 ab       	std	Z+54, r24	; 0x36
	return ret_status;
    2572:	89 81       	ldd	r24, Y+1	; 0x01
}
    2574:	0f 90       	pop	r0
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <I2C_ReceiveByte_ACK>:


Error_Status_t I2C_ReceiveByte_ACK(u8 *ptr)
{
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	00 d0       	rcall	.+0      	; 0x2582 <I2C_ReceiveByte_ACK+0x6>
    2582:	0f 92       	push	r0
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
    2588:	9b 83       	std	Y+3, r25	; 0x03
    258a:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NULL_POINTER;
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == ptr)
    2590:	8a 81       	ldd	r24, Y+2	; 0x02
    2592:	9b 81       	ldd	r25, Y+3	; 0x03
    2594:	00 97       	sbiw	r24, 0x00	; 0
    2596:	19 f4       	brne	.+6      	; 0x259e <I2C_ReceiveByte_ACK+0x22>
	{
		ret_status = NULL_POINTER;
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	89 83       	std	Y+1, r24	; 0x01
    259c:	0f c0       	rjmp	.+30     	; 0x25bc <I2C_ReceiveByte_ACK+0x40>
	}
	else
	{
		I2C_CONTROL->TWCR_REG = (1 << 7) | (1 << 6) | (1 << 2);
    259e:	e0 e2       	ldi	r30, 0x20	; 32
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	84 ec       	ldi	r24, 0xC4	; 196
    25a4:	86 ab       	std	Z+54, r24	; 0x36
		while(!(I2C_CONTROL->TWCR_REG & (1 << 7)));
    25a6:	e0 e2       	ldi	r30, 0x20	; 32
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	86 a9       	ldd	r24, Z+54	; 0x36
    25ac:	88 23       	and	r24, r24
    25ae:	dc f7       	brge	.-10     	; 0x25a6 <I2C_ReceiveByte_ACK+0x2a>
		*ptr = I2C_CONTROL->TWDR_REG;
    25b0:	e0 e2       	ldi	r30, 0x20	; 32
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	83 81       	ldd	r24, Z+3	; 0x03
    25b6:	ea 81       	ldd	r30, Y+2	; 0x02
    25b8:	fb 81       	ldd	r31, Y+3	; 0x03
    25ba:	80 83       	st	Z, r24
	}
	return ret_status;
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    25be:	0f 90       	pop	r0
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	cf 91       	pop	r28
    25c6:	df 91       	pop	r29
    25c8:	08 95       	ret

000025ca <I2C_ReceiveByte_NoACK>:


Error_Status_t I2C_ReceiveByte_NoACK(u8 *ptr)
{
    25ca:	df 93       	push	r29
    25cc:	cf 93       	push	r28
    25ce:	00 d0       	rcall	.+0      	; 0x25d0 <I2C_ReceiveByte_NoACK+0x6>
    25d0:	0f 92       	push	r0
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
    25d6:	9b 83       	std	Y+3, r25	; 0x03
    25d8:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    25da:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == ptr)
    25dc:	8a 81       	ldd	r24, Y+2	; 0x02
    25de:	9b 81       	ldd	r25, Y+3	; 0x03
    25e0:	00 97       	sbiw	r24, 0x00	; 0
    25e2:	19 f4       	brne	.+6      	; 0x25ea <I2C_ReceiveByte_NoACK+0x20>
	{
		ret_status = NULL_POINTER;
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	89 83       	std	Y+1, r24	; 0x01
    25e8:	0f c0       	rjmp	.+30     	; 0x2608 <I2C_ReceiveByte_NoACK+0x3e>
	}
	else
	{
		I2C_CONTROL->TWCR_REG = (1 << 7) | (1 << 2);
    25ea:	e0 e2       	ldi	r30, 0x20	; 32
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	84 e8       	ldi	r24, 0x84	; 132
    25f0:	86 ab       	std	Z+54, r24	; 0x36
		while(!(I2C_CONTROL->TWCR_REG & (1 << 7)));
    25f2:	e0 e2       	ldi	r30, 0x20	; 32
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	86 a9       	ldd	r24, Z+54	; 0x36
    25f8:	88 23       	and	r24, r24
    25fa:	dc f7       	brge	.-10     	; 0x25f2 <I2C_ReceiveByte_NoACK+0x28>
		*ptr = I2C_CONTROL->TWDR_REG;
    25fc:	e0 e2       	ldi	r30, 0x20	; 32
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	83 81       	ldd	r24, Z+3	; 0x03
    2602:	ea 81       	ldd	r30, Y+2	; 0x02
    2604:	fb 81       	ldd	r31, Y+3	; 0x03
    2606:	80 83       	st	Z, r24
	}
	return ret_status;
    2608:	89 81       	ldd	r24, Y+1	; 0x01
}
    260a:	0f 90       	pop	r0
    260c:	0f 90       	pop	r0
    260e:	0f 90       	pop	r0
    2610:	cf 91       	pop	r28
    2612:	df 91       	pop	r29
    2614:	08 95       	ret

00002616 <I2C_GetStatus>:
Error_Status_t I2C_GetStatus(u8 *status)
{
    2616:	df 93       	push	r29
    2618:	cf 93       	push	r28
    261a:	00 d0       	rcall	.+0      	; 0x261c <I2C_GetStatus+0x6>
    261c:	0f 92       	push	r0
    261e:	cd b7       	in	r28, 0x3d	; 61
    2620:	de b7       	in	r29, 0x3e	; 62
    2622:	9b 83       	std	Y+3, r25	; 0x03
    2624:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    2626:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == status)
    2628:	8a 81       	ldd	r24, Y+2	; 0x02
    262a:	9b 81       	ldd	r25, Y+3	; 0x03
    262c:	00 97       	sbiw	r24, 0x00	; 0
    262e:	19 f4       	brne	.+6      	; 0x2636 <I2C_GetStatus+0x20>
	{
		ret_status = NULL_POINTER;
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	89 83       	std	Y+1, r24	; 0x01
    2634:	07 c0       	rjmp	.+14     	; 0x2644 <I2C_GetStatus+0x2e>
	}
	else
	{
		*status = (I2C_CONTROL->TWSR_REG & 0xF8);
    2636:	e0 e2       	ldi	r30, 0x20	; 32
    2638:	f0 e0       	ldi	r31, 0x00	; 0
    263a:	81 81       	ldd	r24, Z+1	; 0x01
    263c:	88 7f       	andi	r24, 0xF8	; 248
    263e:	ea 81       	ldd	r30, Y+2	; 0x02
    2640:	fb 81       	ldd	r31, Y+3	; 0x03
    2642:	80 83       	st	Z, r24
	}
	return ret_status;
    2644:	89 81       	ldd	r24, Y+1	; 0x01
}
    2646:	0f 90       	pop	r0
    2648:	0f 90       	pop	r0
    264a:	0f 90       	pop	r0
    264c:	cf 91       	pop	r28
    264e:	df 91       	pop	r29
    2650:	08 95       	ret

00002652 <DIO_voidSetPinDirection>:

volatile DIO_t *Ports_index[NUM_PORTS] = {GPIO_PINS_A, GPIO_PINS_B, GPIO_PINS_C, GPIO_PINS_D};


void DIO_voidSetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId,  u8 Copy_u8Direction)
{
    2652:	df 93       	push	r29
    2654:	cf 93       	push	r28
    2656:	00 d0       	rcall	.+0      	; 0x2658 <DIO_voidSetPinDirection+0x6>
    2658:	00 d0       	rcall	.+0      	; 0x265a <DIO_voidSetPinDirection+0x8>
    265a:	0f 92       	push	r0
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
    2660:	89 83       	std	Y+1, r24	; 0x01
    2662:	6a 83       	std	Y+2, r22	; 0x02
    2664:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_u8PortId <= NUM_PORTS-1) && Copy_u8PinId <= NUM_PINS-1)
    2666:	89 81       	ldd	r24, Y+1	; 0x01
    2668:	84 30       	cpi	r24, 0x04	; 4
    266a:	08 f0       	brcs	.+2      	; 0x266e <DIO_voidSetPinDirection+0x1c>
    266c:	61 c0       	rjmp	.+194    	; 0x2730 <DIO_voidSetPinDirection+0xde>
    266e:	8a 81       	ldd	r24, Y+2	; 0x02
    2670:	88 30       	cpi	r24, 0x08	; 8
    2672:	08 f0       	brcs	.+2      	; 0x2676 <DIO_voidSetPinDirection+0x24>
    2674:	5d c0       	rjmp	.+186    	; 0x2730 <DIO_voidSetPinDirection+0xde>
	{
		switch(Copy_u8Direction){
    2676:	8b 81       	ldd	r24, Y+3	; 0x03
    2678:	28 2f       	mov	r18, r24
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	3d 83       	std	Y+5, r19	; 0x05
    267e:	2c 83       	std	Y+4, r18	; 0x04
    2680:	8c 81       	ldd	r24, Y+4	; 0x04
    2682:	9d 81       	ldd	r25, Y+5	; 0x05
    2684:	00 97       	sbiw	r24, 0x00	; 0
    2686:	69 f1       	breq	.+90     	; 0x26e2 <DIO_voidSetPinDirection+0x90>
    2688:	2c 81       	ldd	r18, Y+4	; 0x04
    268a:	3d 81       	ldd	r19, Y+5	; 0x05
    268c:	21 30       	cpi	r18, 0x01	; 1
    268e:	31 05       	cpc	r19, r1
    2690:	09 f0       	breq	.+2      	; 0x2694 <DIO_voidSetPinDirection+0x42>
    2692:	4e c0       	rjmp	.+156    	; 0x2730 <DIO_voidSetPinDirection+0xde>
		case(GPIO_DIRECTION_OUTPUT):
						SET_BIT(Ports_index[Copy_u8PortId]->DDRx, Copy_u8PinId);
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	88 2f       	mov	r24, r24
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	88 0f       	add	r24, r24
    269c:	99 1f       	adc	r25, r25
    269e:	fc 01       	movw	r30, r24
    26a0:	ec 5e       	subi	r30, 0xEC	; 236
    26a2:	fd 4f       	sbci	r31, 0xFD	; 253
    26a4:	a0 81       	ld	r26, Z
    26a6:	b1 81       	ldd	r27, Z+1	; 0x01
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	88 2f       	mov	r24, r24
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	88 0f       	add	r24, r24
    26b0:	99 1f       	adc	r25, r25
    26b2:	fc 01       	movw	r30, r24
    26b4:	ec 5e       	subi	r30, 0xEC	; 236
    26b6:	fd 4f       	sbci	r31, 0xFD	; 253
    26b8:	01 90       	ld	r0, Z+
    26ba:	f0 81       	ld	r31, Z
    26bc:	e0 2d       	mov	r30, r0
    26be:	81 81       	ldd	r24, Z+1	; 0x01
    26c0:	48 2f       	mov	r20, r24
    26c2:	8a 81       	ldd	r24, Y+2	; 0x02
    26c4:	28 2f       	mov	r18, r24
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	02 2e       	mov	r0, r18
    26ce:	02 c0       	rjmp	.+4      	; 0x26d4 <DIO_voidSetPinDirection+0x82>
    26d0:	88 0f       	add	r24, r24
    26d2:	99 1f       	adc	r25, r25
    26d4:	0a 94       	dec	r0
    26d6:	e2 f7       	brpl	.-8      	; 0x26d0 <DIO_voidSetPinDirection+0x7e>
    26d8:	84 2b       	or	r24, r20
    26da:	11 96       	adiw	r26, 0x01	; 1
    26dc:	8c 93       	st	X, r24
    26de:	11 97       	sbiw	r26, 0x01	; 1
    26e0:	27 c0       	rjmp	.+78     	; 0x2730 <DIO_voidSetPinDirection+0xde>
		break;
		case(GPIO_DIRECTION_INPUT):
						CLEAR_BIT(Ports_index[Copy_u8PortId]->DDRx, Copy_u8PinId);
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	88 2f       	mov	r24, r24
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	88 0f       	add	r24, r24
    26ea:	99 1f       	adc	r25, r25
    26ec:	fc 01       	movw	r30, r24
    26ee:	ec 5e       	subi	r30, 0xEC	; 236
    26f0:	fd 4f       	sbci	r31, 0xFD	; 253
    26f2:	a0 81       	ld	r26, Z
    26f4:	b1 81       	ldd	r27, Z+1	; 0x01
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
    26f8:	88 2f       	mov	r24, r24
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	88 0f       	add	r24, r24
    26fe:	99 1f       	adc	r25, r25
    2700:	fc 01       	movw	r30, r24
    2702:	ec 5e       	subi	r30, 0xEC	; 236
    2704:	fd 4f       	sbci	r31, 0xFD	; 253
    2706:	01 90       	ld	r0, Z+
    2708:	f0 81       	ld	r31, Z
    270a:	e0 2d       	mov	r30, r0
    270c:	81 81       	ldd	r24, Z+1	; 0x01
    270e:	48 2f       	mov	r20, r24
    2710:	8a 81       	ldd	r24, Y+2	; 0x02
    2712:	28 2f       	mov	r18, r24
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	02 2e       	mov	r0, r18
    271c:	02 c0       	rjmp	.+4      	; 0x2722 <DIO_voidSetPinDirection+0xd0>
    271e:	88 0f       	add	r24, r24
    2720:	99 1f       	adc	r25, r25
    2722:	0a 94       	dec	r0
    2724:	e2 f7       	brpl	.-8      	; 0x271e <DIO_voidSetPinDirection+0xcc>
    2726:	80 95       	com	r24
    2728:	84 23       	and	r24, r20
    272a:	11 96       	adiw	r26, 0x01	; 1
    272c:	8c 93       	st	X, r24
    272e:	11 97       	sbiw	r26, 0x01	; 1
		break;
		}
	}
	else{/* Nothing */}
}
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	cf 91       	pop	r28
    273c:	df 91       	pop	r29
    273e:	08 95       	ret

00002740 <DIO_voidSetPinValue>:


void DIO_voidSetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8Value)
{
    2740:	df 93       	push	r29
    2742:	cf 93       	push	r28
    2744:	00 d0       	rcall	.+0      	; 0x2746 <DIO_voidSetPinValue+0x6>
    2746:	00 d0       	rcall	.+0      	; 0x2748 <DIO_voidSetPinValue+0x8>
    2748:	0f 92       	push	r0
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
    274e:	89 83       	std	Y+1, r24	; 0x01
    2750:	6a 83       	std	Y+2, r22	; 0x02
    2752:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_u8PortId <= NUM_PORTS-1) && (Copy_u8PinId <= NUM_PINS-1))
    2754:	89 81       	ldd	r24, Y+1	; 0x01
    2756:	84 30       	cpi	r24, 0x04	; 4
    2758:	08 f0       	brcs	.+2      	; 0x275c <DIO_voidSetPinValue+0x1c>
    275a:	61 c0       	rjmp	.+194    	; 0x281e <DIO_voidSetPinValue+0xde>
    275c:	8a 81       	ldd	r24, Y+2	; 0x02
    275e:	88 30       	cpi	r24, 0x08	; 8
    2760:	08 f0       	brcs	.+2      	; 0x2764 <DIO_voidSetPinValue+0x24>
    2762:	5d c0       	rjmp	.+186    	; 0x281e <DIO_voidSetPinValue+0xde>
	{
		switch(Copy_u8Value){
    2764:	8b 81       	ldd	r24, Y+3	; 0x03
    2766:	28 2f       	mov	r18, r24
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	3d 83       	std	Y+5, r19	; 0x05
    276c:	2c 83       	std	Y+4, r18	; 0x04
    276e:	8c 81       	ldd	r24, Y+4	; 0x04
    2770:	9d 81       	ldd	r25, Y+5	; 0x05
    2772:	00 97       	sbiw	r24, 0x00	; 0
    2774:	69 f1       	breq	.+90     	; 0x27d0 <DIO_voidSetPinValue+0x90>
    2776:	2c 81       	ldd	r18, Y+4	; 0x04
    2778:	3d 81       	ldd	r19, Y+5	; 0x05
    277a:	21 30       	cpi	r18, 0x01	; 1
    277c:	31 05       	cpc	r19, r1
    277e:	09 f0       	breq	.+2      	; 0x2782 <DIO_voidSetPinValue+0x42>
    2780:	4e c0       	rjmp	.+156    	; 0x281e <DIO_voidSetPinValue+0xde>
		case(GPIO_HIGH):
				SET_BIT(Ports_index[Copy_u8PortId]->PORTx, Copy_u8PinId);
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	88 2f       	mov	r24, r24
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	88 0f       	add	r24, r24
    278a:	99 1f       	adc	r25, r25
    278c:	fc 01       	movw	r30, r24
    278e:	ec 5e       	subi	r30, 0xEC	; 236
    2790:	fd 4f       	sbci	r31, 0xFD	; 253
    2792:	a0 81       	ld	r26, Z
    2794:	b1 81       	ldd	r27, Z+1	; 0x01
    2796:	89 81       	ldd	r24, Y+1	; 0x01
    2798:	88 2f       	mov	r24, r24
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	88 0f       	add	r24, r24
    279e:	99 1f       	adc	r25, r25
    27a0:	fc 01       	movw	r30, r24
    27a2:	ec 5e       	subi	r30, 0xEC	; 236
    27a4:	fd 4f       	sbci	r31, 0xFD	; 253
    27a6:	01 90       	ld	r0, Z+
    27a8:	f0 81       	ld	r31, Z
    27aa:	e0 2d       	mov	r30, r0
    27ac:	82 81       	ldd	r24, Z+2	; 0x02
    27ae:	48 2f       	mov	r20, r24
    27b0:	8a 81       	ldd	r24, Y+2	; 0x02
    27b2:	28 2f       	mov	r18, r24
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	02 2e       	mov	r0, r18
    27bc:	02 c0       	rjmp	.+4      	; 0x27c2 <DIO_voidSetPinValue+0x82>
    27be:	88 0f       	add	r24, r24
    27c0:	99 1f       	adc	r25, r25
    27c2:	0a 94       	dec	r0
    27c4:	e2 f7       	brpl	.-8      	; 0x27be <DIO_voidSetPinValue+0x7e>
    27c6:	84 2b       	or	r24, r20
    27c8:	12 96       	adiw	r26, 0x02	; 2
    27ca:	8c 93       	st	X, r24
    27cc:	12 97       	sbiw	r26, 0x02	; 2
    27ce:	27 c0       	rjmp	.+78     	; 0x281e <DIO_voidSetPinValue+0xde>
		break;
		case(GPIO_LOW):
				CLEAR_BIT(Ports_index[Copy_u8PortId]->PORTx, Copy_u8PinId);
    27d0:	89 81       	ldd	r24, Y+1	; 0x01
    27d2:	88 2f       	mov	r24, r24
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	88 0f       	add	r24, r24
    27d8:	99 1f       	adc	r25, r25
    27da:	fc 01       	movw	r30, r24
    27dc:	ec 5e       	subi	r30, 0xEC	; 236
    27de:	fd 4f       	sbci	r31, 0xFD	; 253
    27e0:	a0 81       	ld	r26, Z
    27e2:	b1 81       	ldd	r27, Z+1	; 0x01
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	88 2f       	mov	r24, r24
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	88 0f       	add	r24, r24
    27ec:	99 1f       	adc	r25, r25
    27ee:	fc 01       	movw	r30, r24
    27f0:	ec 5e       	subi	r30, 0xEC	; 236
    27f2:	fd 4f       	sbci	r31, 0xFD	; 253
    27f4:	01 90       	ld	r0, Z+
    27f6:	f0 81       	ld	r31, Z
    27f8:	e0 2d       	mov	r30, r0
    27fa:	82 81       	ldd	r24, Z+2	; 0x02
    27fc:	48 2f       	mov	r20, r24
    27fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2800:	28 2f       	mov	r18, r24
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	02 2e       	mov	r0, r18
    280a:	02 c0       	rjmp	.+4      	; 0x2810 <DIO_voidSetPinValue+0xd0>
    280c:	88 0f       	add	r24, r24
    280e:	99 1f       	adc	r25, r25
    2810:	0a 94       	dec	r0
    2812:	e2 f7       	brpl	.-8      	; 0x280c <DIO_voidSetPinValue+0xcc>
    2814:	80 95       	com	r24
    2816:	84 23       	and	r24, r20
    2818:	12 96       	adiw	r26, 0x02	; 2
    281a:	8c 93       	st	X, r24
    281c:	12 97       	sbiw	r26, 0x02	; 2
		break;
		}
	}
	else{/* Nothing */}
}
    281e:	0f 90       	pop	r0
    2820:	0f 90       	pop	r0
    2822:	0f 90       	pop	r0
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	cf 91       	pop	r28
    282a:	df 91       	pop	r29
    282c:	08 95       	ret

0000282e <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue(u8 Copy_u8PortId, u8 Copy_u8PinId)
{
    282e:	df 93       	push	r29
    2830:	cf 93       	push	r28
    2832:	00 d0       	rcall	.+0      	; 0x2834 <DIO_voidTogglePinValue+0x6>
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62
    2838:	89 83       	std	Y+1, r24	; 0x01
    283a:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8PortId <= NUM_PORTS-1) && (Copy_u8PinId <= NUM_PINS-1))
    283c:	89 81       	ldd	r24, Y+1	; 0x01
    283e:	84 30       	cpi	r24, 0x04	; 4
    2840:	48 f5       	brcc	.+82     	; 0x2894 <DIO_voidTogglePinValue+0x66>
    2842:	8a 81       	ldd	r24, Y+2	; 0x02
    2844:	88 30       	cpi	r24, 0x08	; 8
    2846:	30 f5       	brcc	.+76     	; 0x2894 <DIO_voidTogglePinValue+0x66>
	{
		TOGGLE_BIT(Ports_index[Copy_u8PortId]->PORTx,Copy_u8PinId);
    2848:	89 81       	ldd	r24, Y+1	; 0x01
    284a:	88 2f       	mov	r24, r24
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	88 0f       	add	r24, r24
    2850:	99 1f       	adc	r25, r25
    2852:	fc 01       	movw	r30, r24
    2854:	ec 5e       	subi	r30, 0xEC	; 236
    2856:	fd 4f       	sbci	r31, 0xFD	; 253
    2858:	a0 81       	ld	r26, Z
    285a:	b1 81       	ldd	r27, Z+1	; 0x01
    285c:	89 81       	ldd	r24, Y+1	; 0x01
    285e:	88 2f       	mov	r24, r24
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	88 0f       	add	r24, r24
    2864:	99 1f       	adc	r25, r25
    2866:	fc 01       	movw	r30, r24
    2868:	ec 5e       	subi	r30, 0xEC	; 236
    286a:	fd 4f       	sbci	r31, 0xFD	; 253
    286c:	01 90       	ld	r0, Z+
    286e:	f0 81       	ld	r31, Z
    2870:	e0 2d       	mov	r30, r0
    2872:	82 81       	ldd	r24, Z+2	; 0x02
    2874:	48 2f       	mov	r20, r24
    2876:	8a 81       	ldd	r24, Y+2	; 0x02
    2878:	28 2f       	mov	r18, r24
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	02 2e       	mov	r0, r18
    2882:	02 c0       	rjmp	.+4      	; 0x2888 <DIO_voidTogglePinValue+0x5a>
    2884:	88 0f       	add	r24, r24
    2886:	99 1f       	adc	r25, r25
    2888:	0a 94       	dec	r0
    288a:	e2 f7       	brpl	.-8      	; 0x2884 <DIO_voidTogglePinValue+0x56>
    288c:	84 27       	eor	r24, r20
    288e:	12 96       	adiw	r26, 0x02	; 2
    2890:	8c 93       	st	X, r24
    2892:	12 97       	sbiw	r26, 0x02	; 2
	}
	else{/* Nothing */}
}
    2894:	0f 90       	pop	r0
    2896:	0f 90       	pop	r0
    2898:	cf 91       	pop	r28
    289a:	df 91       	pop	r29
    289c:	08 95       	ret

0000289e <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId)
{
    289e:	df 93       	push	r29
    28a0:	cf 93       	push	r28
    28a2:	00 d0       	rcall	.+0      	; 0x28a4 <DIO_u8GetPinValue+0x6>
    28a4:	0f 92       	push	r0
    28a6:	cd b7       	in	r28, 0x3d	; 61
    28a8:	de b7       	in	r29, 0x3e	; 62
    28aa:	8a 83       	std	Y+2, r24	; 0x02
    28ac:	6b 83       	std	Y+3, r22	; 0x03
	u8 ret_val = 0;
    28ae:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8PortId <= NUM_PORTS-1) && (Copy_u8PinId <= NUM_PINS-1)){
    28b0:	8a 81       	ldd	r24, Y+2	; 0x02
    28b2:	84 30       	cpi	r24, 0x04	; 4
    28b4:	e8 f4       	brcc	.+58     	; 0x28f0 <DIO_u8GetPinValue+0x52>
    28b6:	8b 81       	ldd	r24, Y+3	; 0x03
    28b8:	88 30       	cpi	r24, 0x08	; 8
    28ba:	d0 f4       	brcc	.+52     	; 0x28f0 <DIO_u8GetPinValue+0x52>
		ret_val = READ_BIT(Ports_index[Copy_u8PortId]->PINx, Copy_u8PinId);
    28bc:	8a 81       	ldd	r24, Y+2	; 0x02
    28be:	88 2f       	mov	r24, r24
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	88 0f       	add	r24, r24
    28c4:	99 1f       	adc	r25, r25
    28c6:	fc 01       	movw	r30, r24
    28c8:	ec 5e       	subi	r30, 0xEC	; 236
    28ca:	fd 4f       	sbci	r31, 0xFD	; 253
    28cc:	01 90       	ld	r0, Z+
    28ce:	f0 81       	ld	r31, Z
    28d0:	e0 2d       	mov	r30, r0
    28d2:	80 81       	ld	r24, Z
    28d4:	28 2f       	mov	r18, r24
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	8b 81       	ldd	r24, Y+3	; 0x03
    28da:	88 2f       	mov	r24, r24
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	a9 01       	movw	r20, r18
    28e0:	02 c0       	rjmp	.+4      	; 0x28e6 <DIO_u8GetPinValue+0x48>
    28e2:	55 95       	asr	r21
    28e4:	47 95       	ror	r20
    28e6:	8a 95       	dec	r24
    28e8:	e2 f7       	brpl	.-8      	; 0x28e2 <DIO_u8GetPinValue+0x44>
    28ea:	ca 01       	movw	r24, r20
    28ec:	81 70       	andi	r24, 0x01	; 1
    28ee:	89 83       	std	Y+1, r24	; 0x01
	}else{/* Nothing */}
	return ret_val;
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    28f2:	0f 90       	pop	r0
    28f4:	0f 90       	pop	r0
    28f6:	0f 90       	pop	r0
    28f8:	cf 91       	pop	r28
    28fa:	df 91       	pop	r29
    28fc:	08 95       	ret

000028fe <DIO_voidSetPortDirection>:


void DIO_voidSetPortDirection(u8 Copy_u8PortId,  u8 Copy_u8Direction)
{
    28fe:	df 93       	push	r29
    2900:	cf 93       	push	r28
    2902:	00 d0       	rcall	.+0      	; 0x2904 <DIO_voidSetPortDirection+0x6>
    2904:	cd b7       	in	r28, 0x3d	; 61
    2906:	de b7       	in	r29, 0x3e	; 62
    2908:	89 83       	std	Y+1, r24	; 0x01
    290a:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortId <= NUM_PORTS-1){
    290c:	89 81       	ldd	r24, Y+1	; 0x01
    290e:	84 30       	cpi	r24, 0x04	; 4
    2910:	68 f4       	brcc	.+26     	; 0x292c <DIO_voidSetPortDirection+0x2e>
		Ports_index[Copy_u8PortId]->DDRx = Copy_u8Direction;
    2912:	89 81       	ldd	r24, Y+1	; 0x01
    2914:	88 2f       	mov	r24, r24
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	88 0f       	add	r24, r24
    291a:	99 1f       	adc	r25, r25
    291c:	fc 01       	movw	r30, r24
    291e:	ec 5e       	subi	r30, 0xEC	; 236
    2920:	fd 4f       	sbci	r31, 0xFD	; 253
    2922:	01 90       	ld	r0, Z+
    2924:	f0 81       	ld	r31, Z
    2926:	e0 2d       	mov	r30, r0
    2928:	8a 81       	ldd	r24, Y+2	; 0x02
    292a:	81 83       	std	Z+1, r24	; 0x01
	}
	else{/* Nothing */}
}
    292c:	0f 90       	pop	r0
    292e:	0f 90       	pop	r0
    2930:	cf 91       	pop	r28
    2932:	df 91       	pop	r29
    2934:	08 95       	ret

00002936 <DIO_voidSetPortValues>:


void DIO_voidSetPortValues(u8 Copy_u8PortId, u8 Copy_u8Value)
{
    2936:	df 93       	push	r29
    2938:	cf 93       	push	r28
    293a:	00 d0       	rcall	.+0      	; 0x293c <DIO_voidSetPortValues+0x6>
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
    2940:	89 83       	std	Y+1, r24	; 0x01
    2942:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortId <= NUM_PORTS-1){
    2944:	89 81       	ldd	r24, Y+1	; 0x01
    2946:	84 30       	cpi	r24, 0x04	; 4
    2948:	68 f4       	brcc	.+26     	; 0x2964 <DIO_voidSetPortValues+0x2e>
		Ports_index[Copy_u8PortId]->PORTx = Copy_u8Value;
    294a:	89 81       	ldd	r24, Y+1	; 0x01
    294c:	88 2f       	mov	r24, r24
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	88 0f       	add	r24, r24
    2952:	99 1f       	adc	r25, r25
    2954:	fc 01       	movw	r30, r24
    2956:	ec 5e       	subi	r30, 0xEC	; 236
    2958:	fd 4f       	sbci	r31, 0xFD	; 253
    295a:	01 90       	ld	r0, Z+
    295c:	f0 81       	ld	r31, Z
    295e:	e0 2d       	mov	r30, r0
    2960:	8a 81       	ldd	r24, Y+2	; 0x02
    2962:	82 83       	std	Z+2, r24	; 0x02
	}
	else{/* Nothing */}
}
    2964:	0f 90       	pop	r0
    2966:	0f 90       	pop	r0
    2968:	cf 91       	pop	r28
    296a:	df 91       	pop	r29
    296c:	08 95       	ret

0000296e <DIO_u8GetPortValues>:


u8 DIO_u8GetPortValues(u8 Copy_u8PortId)
{
    296e:	df 93       	push	r29
    2970:	cf 93       	push	r28
    2972:	00 d0       	rcall	.+0      	; 0x2974 <DIO_u8GetPortValues+0x6>
    2974:	cd b7       	in	r28, 0x3d	; 61
    2976:	de b7       	in	r29, 0x3e	; 62
    2978:	8a 83       	std	Y+2, r24	; 0x02
	u8 ret_val = 0;
    297a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortId <= NUM_PORTS-1){
    297c:	8a 81       	ldd	r24, Y+2	; 0x02
    297e:	84 30       	cpi	r24, 0x04	; 4
    2980:	68 f4       	brcc	.+26     	; 0x299c <DIO_u8GetPortValues+0x2e>
		ret_val = (Ports_index[Copy_u8PortId]->PINx);
    2982:	8a 81       	ldd	r24, Y+2	; 0x02
    2984:	88 2f       	mov	r24, r24
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	88 0f       	add	r24, r24
    298a:	99 1f       	adc	r25, r25
    298c:	fc 01       	movw	r30, r24
    298e:	ec 5e       	subi	r30, 0xEC	; 236
    2990:	fd 4f       	sbci	r31, 0xFD	; 253
    2992:	01 90       	ld	r0, Z+
    2994:	f0 81       	ld	r31, Z
    2996:	e0 2d       	mov	r30, r0
    2998:	80 81       	ld	r24, Z
    299a:	89 83       	std	Y+1, r24	; 0x01
	}else{/* Nothing */}
	return ret_val;
    299c:	89 81       	ldd	r24, Y+1	; 0x01
}
    299e:	0f 90       	pop	r0
    29a0:	0f 90       	pop	r0
    29a2:	cf 91       	pop	r28
    29a4:	df 91       	pop	r29
    29a6:	08 95       	ret

000029a8 <ADC_voidInit>:
 */

#include "ADC.h"

void ADC_voidInit(const ADC_cfg_t *ADC_obj)
{
    29a8:	df 93       	push	r29
    29aa:	cf 93       	push	r28
    29ac:	00 d0       	rcall	.+0      	; 0x29ae <ADC_voidInit+0x6>
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62
    29b2:	9a 83       	std	Y+2, r25	; 0x02
    29b4:	89 83       	std	Y+1, r24	; 0x01
	if(NULL != ADC_obj)
    29b6:	89 81       	ldd	r24, Y+1	; 0x01
    29b8:	9a 81       	ldd	r25, Y+2	; 0x02
    29ba:	00 97       	sbiw	r24, 0x00	; 0
    29bc:	09 f4       	brne	.+2      	; 0x29c0 <ADC_voidInit+0x18>
    29be:	5f c0       	rjmp	.+190    	; 0x2a7e <ADC_voidInit+0xd6>
	{
		/* Disable ADC */
		ADC_DISABLE_CFG();
    29c0:	e4 e2       	ldi	r30, 0x24	; 36
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	82 81       	ldd	r24, Z+2	; 0x02
    29c6:	8f 77       	andi	r24, 0x7F	; 127
    29c8:	82 83       	std	Z+2, r24	; 0x02

		/* Make ADC port as input */
		//DIO_voidSetPortDirection(PORTA_INDEX, 0x00);
		ADC_SELECT_VOLTAGE_REF_CFG(ADC_obj->voltage_reference_select);
    29ca:	a4 e2       	ldi	r26, 0x24	; 36
    29cc:	b0 e0       	ldi	r27, 0x00	; 0
    29ce:	e9 81       	ldd	r30, Y+1	; 0x01
    29d0:	fa 81       	ldd	r31, Y+2	; 0x02
    29d2:	80 81       	ld	r24, Z
    29d4:	86 95       	lsr	r24
    29d6:	86 95       	lsr	r24
    29d8:	86 95       	lsr	r24
    29da:	83 70       	andi	r24, 0x03	; 3
    29dc:	98 2f       	mov	r25, r24
    29de:	92 95       	swap	r25
    29e0:	99 0f       	add	r25, r25
    29e2:	99 0f       	add	r25, r25
    29e4:	90 7c       	andi	r25, 0xC0	; 192
    29e6:	13 96       	adiw	r26, 0x03	; 3
    29e8:	8c 91       	ld	r24, X
    29ea:	13 97       	sbiw	r26, 0x03	; 3
    29ec:	8f 73       	andi	r24, 0x3F	; 63
    29ee:	89 2b       	or	r24, r25
    29f0:	13 96       	adiw	r26, 0x03	; 3
    29f2:	8c 93       	st	X, r24
		ADC_SELECT_PRESCALER(ADC_obj->prescaler_select);
    29f4:	a4 e2       	ldi	r26, 0x24	; 36
    29f6:	b0 e0       	ldi	r27, 0x00	; 0
    29f8:	e9 81       	ldd	r30, Y+1	; 0x01
    29fa:	fa 81       	ldd	r31, Y+2	; 0x02
    29fc:	80 81       	ld	r24, Z
    29fe:	82 95       	swap	r24
    2a00:	86 95       	lsr	r24
    2a02:	86 95       	lsr	r24
    2a04:	83 70       	andi	r24, 0x03	; 3
    2a06:	81 70       	andi	r24, 0x01	; 1
    2a08:	87 70       	andi	r24, 0x07	; 7
    2a0a:	98 2f       	mov	r25, r24
    2a0c:	97 70       	andi	r25, 0x07	; 7
    2a0e:	12 96       	adiw	r26, 0x02	; 2
    2a10:	8c 91       	ld	r24, X
    2a12:	12 97       	sbiw	r26, 0x02	; 2
    2a14:	88 7f       	andi	r24, 0xF8	; 248
    2a16:	89 2b       	or	r24, r25
    2a18:	12 96       	adiw	r26, 0x02	; 2
    2a1a:	8c 93       	st	X, r24
		ADC_AUTO_TRIGGER_ENABLE_CONFIG();
    2a1c:	e4 e2       	ldi	r30, 0x24	; 36
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	82 81       	ldd	r24, Z+2	; 0x02
    2a22:	80 62       	ori	r24, 0x20	; 32
    2a24:	82 83       	std	Z+2, r24	; 0x02
		ADC_SELECT_TRIGGER_SOURCE_EVENT(ADC_obj->select_trigger_source);
    2a26:	a4 e2       	ldi	r26, 0x24	; 36
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a2c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a2e:	80 81       	ld	r24, Z
    2a30:	87 70       	andi	r24, 0x07	; 7
    2a32:	98 2f       	mov	r25, r24
    2a34:	92 95       	swap	r25
    2a36:	99 0f       	add	r25, r25
    2a38:	90 7e       	andi	r25, 0xE0	; 224
    2a3a:	9c 96       	adiw	r26, 0x2c	; 44
    2a3c:	8c 91       	ld	r24, X
    2a3e:	9c 97       	sbiw	r26, 0x2c	; 44
    2a40:	8f 71       	andi	r24, 0x1F	; 31
    2a42:	89 2b       	or	r24, r25
    2a44:	9c 96       	adiw	r26, 0x2c	; 44
    2a46:	8c 93       	st	X, r24
		ADC_SELECT_ADJUSTTFICATION(ADC_obj->adjustification_select);
    2a48:	a4 e2       	ldi	r26, 0x24	; 36
    2a4a:	b0 e0       	ldi	r27, 0x00	; 0
    2a4c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a4e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a50:	80 81       	ld	r24, Z
    2a52:	82 95       	swap	r24
    2a54:	86 95       	lsr	r24
    2a56:	87 70       	andi	r24, 0x07	; 7
    2a58:	81 70       	andi	r24, 0x01	; 1
    2a5a:	81 70       	andi	r24, 0x01	; 1
    2a5c:	98 2f       	mov	r25, r24
    2a5e:	92 95       	swap	r25
    2a60:	99 0f       	add	r25, r25
    2a62:	90 7e       	andi	r25, 0xE0	; 224
    2a64:	13 96       	adiw	r26, 0x03	; 3
    2a66:	8c 91       	ld	r24, X
    2a68:	13 97       	sbiw	r26, 0x03	; 3
    2a6a:	8f 7d       	andi	r24, 0xDF	; 223
    2a6c:	89 2b       	or	r24, r25
    2a6e:	13 96       	adiw	r26, 0x03	; 3
    2a70:	8c 93       	st	X, r24
    2a72:	13 97       	sbiw	r26, 0x03	; 3

		/* Enable ADC */
		ADC_ENABLE_CFG();
    2a74:	e4 e2       	ldi	r30, 0x24	; 36
    2a76:	f0 e0       	ldi	r31, 0x00	; 0
    2a78:	82 81       	ldd	r24, Z+2	; 0x02
    2a7a:	80 68       	ori	r24, 0x80	; 128
    2a7c:	82 83       	std	Z+2, r24	; 0x02
	}
	else{/* Nothing */}
}
    2a7e:	0f 90       	pop	r0
    2a80:	0f 90       	pop	r0
    2a82:	cf 91       	pop	r28
    2a84:	df 91       	pop	r29
    2a86:	08 95       	ret

00002a88 <ADC_getDigitalValueSynchNonBlocking>:

void ADC_getDigitalValueSynchNonBlocking(const ADC_cfg_t *ADC_obj, u8 Copy_u8Channel, u16 *result)
{
    2a88:	df 93       	push	r29
    2a8a:	cf 93       	push	r28
    2a8c:	00 d0       	rcall	.+0      	; 0x2a8e <ADC_getDigitalValueSynchNonBlocking+0x6>
    2a8e:	00 d0       	rcall	.+0      	; 0x2a90 <ADC_getDigitalValueSynchNonBlocking+0x8>
    2a90:	0f 92       	push	r0
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
    2a96:	9a 83       	std	Y+2, r25	; 0x02
    2a98:	89 83       	std	Y+1, r24	; 0x01
    2a9a:	6b 83       	std	Y+3, r22	; 0x03
    2a9c:	5d 83       	std	Y+5, r21	; 0x05
    2a9e:	4c 83       	std	Y+4, r20	; 0x04
	// select the channel
	ADC_SELECT_CHANNEL_CFG(Copy_u8Channel);
    2aa0:	e4 e2       	ldi	r30, 0x24	; 36
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa6:	8f 71       	andi	r24, 0x1F	; 31
    2aa8:	98 2f       	mov	r25, r24
    2aaa:	9f 71       	andi	r25, 0x1F	; 31
    2aac:	83 81       	ldd	r24, Z+3	; 0x03
    2aae:	80 7e       	andi	r24, 0xE0	; 224
    2ab0:	89 2b       	or	r24, r25
    2ab2:	83 83       	std	Z+3, r24	; 0x03

	// start conversion
	ADC_START_CONVERSION_CFG();
    2ab4:	e4 e2       	ldi	r30, 0x24	; 36
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	82 81       	ldd	r24, Z+2	; 0x02
    2aba:	80 64       	ori	r24, 0x40	; 64
    2abc:	82 83       	std	Z+2, r24	; 0x02

	// Wait for conversion to complete (polling)
	while (ADC_CONTROL->ADCSRA_REG.ADSC_BIT);
    2abe:	e4 e2       	ldi	r30, 0x24	; 36
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	82 81       	ldd	r24, Z+2	; 0x02
    2ac4:	80 74       	andi	r24, 0x40	; 64
    2ac6:	88 23       	and	r24, r24
    2ac8:	d1 f7       	brne	.-12     	; 0x2abe <ADC_getDigitalValueSynchNonBlocking+0x36>

	if(ADC_obj->adjustification_select == ADC_RIGHT_JUSTIFY)
    2aca:	e9 81       	ldd	r30, Y+1	; 0x01
    2acc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ace:	80 81       	ld	r24, Z
    2ad0:	80 72       	andi	r24, 0x20	; 32
    2ad2:	88 23       	and	r24, r24
    2ad4:	d9 f4       	brne	.+54     	; 0x2b0c <ADC_getDigitalValueSynchNonBlocking+0x84>
	{
//		*result = (u16)((ADC_CONTROL->ADCH_REG << 8) + ADC_CONTROL->ADCL_REG);
		*result = (u16)((ADC_CONTROL->ADCH_REG) << 8);
    2ad6:	e4 e2       	ldi	r30, 0x24	; 36
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	81 81       	ldd	r24, Z+1	; 0x01
    2adc:	88 2f       	mov	r24, r24
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	98 2f       	mov	r25, r24
    2ae2:	88 27       	eor	r24, r24
    2ae4:	ec 81       	ldd	r30, Y+4	; 0x04
    2ae6:	fd 81       	ldd	r31, Y+5	; 0x05
    2ae8:	91 83       	std	Z+1, r25	; 0x01
    2aea:	80 83       	st	Z, r24
		*result += (u16)ADC_CONTROL->ADCL_REG;
    2aec:	ec 81       	ldd	r30, Y+4	; 0x04
    2aee:	fd 81       	ldd	r31, Y+5	; 0x05
    2af0:	20 81       	ld	r18, Z
    2af2:	31 81       	ldd	r19, Z+1	; 0x01
    2af4:	e4 e2       	ldi	r30, 0x24	; 36
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	80 81       	ld	r24, Z
    2afa:	88 2f       	mov	r24, r24
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	82 0f       	add	r24, r18
    2b00:	93 1f       	adc	r25, r19
    2b02:	ec 81       	ldd	r30, Y+4	; 0x04
    2b04:	fd 81       	ldd	r31, Y+5	; 0x05
    2b06:	91 83       	std	Z+1, r25	; 0x01
    2b08:	80 83       	st	Z, r24
    2b0a:	21 c0       	rjmp	.+66     	; 0x2b4e <ADC_getDigitalValueSynchNonBlocking+0xc6>
	}
	else if(ADC_obj->adjustification_select == ADC_LEFT_JUSTIFY)
    2b0c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b0e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b10:	80 81       	ld	r24, Z
    2b12:	80 72       	andi	r24, 0x20	; 32
    2b14:	88 23       	and	r24, r24
    2b16:	d9 f0       	breq	.+54     	; 0x2b4e <ADC_getDigitalValueSynchNonBlocking+0xc6>
	{
		*result = (u16)((ADC_CONTROL->ADCH_REG << 8) + ADC_CONTROL->ADCL_REG) >> 6;
    2b18:	e4 e2       	ldi	r30, 0x24	; 36
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	81 81       	ldd	r24, Z+1	; 0x01
    2b1e:	88 2f       	mov	r24, r24
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	38 2f       	mov	r19, r24
    2b24:	22 27       	eor	r18, r18
    2b26:	e4 e2       	ldi	r30, 0x24	; 36
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	80 81       	ld	r24, Z
    2b2c:	88 2f       	mov	r24, r24
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	82 0f       	add	r24, r18
    2b32:	93 1f       	adc	r25, r19
    2b34:	00 24       	eor	r0, r0
    2b36:	88 0f       	add	r24, r24
    2b38:	99 1f       	adc	r25, r25
    2b3a:	00 1c       	adc	r0, r0
    2b3c:	88 0f       	add	r24, r24
    2b3e:	99 1f       	adc	r25, r25
    2b40:	00 1c       	adc	r0, r0
    2b42:	89 2f       	mov	r24, r25
    2b44:	90 2d       	mov	r25, r0
    2b46:	ec 81       	ldd	r30, Y+4	; 0x04
    2b48:	fd 81       	ldd	r31, Y+5	; 0x05
    2b4a:	91 83       	std	Z+1, r25	; 0x01
    2b4c:	80 83       	st	Z, r24
	}
	else{/* Nothing */}
}
    2b4e:	0f 90       	pop	r0
    2b50:	0f 90       	pop	r0
    2b52:	0f 90       	pop	r0
    2b54:	0f 90       	pop	r0
    2b56:	0f 90       	pop	r0
    2b58:	cf 91       	pop	r28
    2b5a:	df 91       	pop	r29
    2b5c:	08 95       	ret

00002b5e <H_LCD_void_Init>:
#include "char_lcd.h"

u8 countDigits(s32 number);

void H_LCD_void_Init(void)
{
    2b5e:	df 93       	push	r29
    2b60:	cf 93       	push	r28
    2b62:	cd b7       	in	r28, 0x3d	; 61
    2b64:	de b7       	in	r29, 0x3e	; 62
    2b66:	aa 97       	sbiw	r28, 0x2a	; 42
    2b68:	0f b6       	in	r0, 0x3f	; 63
    2b6a:	f8 94       	cli
    2b6c:	de bf       	out	0x3e, r29	; 62
    2b6e:	0f be       	out	0x3f, r0	; 63
    2b70:	cd bf       	out	0x3d, r28	; 61
#if LCD_MODE_SELECT == LCD_4_BIT_MODE_SELECT

	// configure enale and rs and data pins
	DIO_voidSetPinDirection(LCD_4BIT_RS_PIN_PORT, LCD_4BIT_RS_PIN, GPIO_DIRECTION_OUTPUT);
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	63 e0       	ldi	r22, 0x03	; 3
    2b76:	41 e0       	ldi	r20, 0x01	; 1
    2b78:	0e 94 29 13 	call	0x2652	; 0x2652 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_DIRECTION_OUTPUT);
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	62 e0       	ldi	r22, 0x02	; 2
    2b80:	41 e0       	ldi	r20, 0x01	; 1
    2b82:	0e 94 29 13 	call	0x2652	; 0x2652 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_4BIT_D7_PIN_PORT, LCD_4_BIT_D7_PIN, GPIO_DIRECTION_OUTPUT);
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	60 e0       	ldi	r22, 0x00	; 0
    2b8a:	41 e0       	ldi	r20, 0x01	; 1
    2b8c:	0e 94 29 13 	call	0x2652	; 0x2652 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_4BIT_D6_PIN_PORT, LCD_4_BIT_D6_PIN, GPIO_DIRECTION_OUTPUT);
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	61 e0       	ldi	r22, 0x01	; 1
    2b94:	41 e0       	ldi	r20, 0x01	; 1
    2b96:	0e 94 29 13 	call	0x2652	; 0x2652 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_4BIT_D5_PIN_PORT, LCD_4_BIT_D5_PIN, GPIO_DIRECTION_OUTPUT);
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	62 e0       	ldi	r22, 0x02	; 2
    2b9e:	41 e0       	ldi	r20, 0x01	; 1
    2ba0:	0e 94 29 13 	call	0x2652	; 0x2652 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_4BIT_D4_PIN_PORT, LCD_4_BIT_D4_PIN, GPIO_DIRECTION_OUTPUT);
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	64 e0       	ldi	r22, 0x04	; 4
    2ba8:	41 e0       	ldi	r20, 0x01	; 1
    2baa:	0e 94 29 13 	call	0x2652	; 0x2652 <DIO_voidSetPinDirection>
    2bae:	80 e0       	ldi	r24, 0x00	; 0
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	a0 ea       	ldi	r26, 0xA0	; 160
    2bb4:	b1 e4       	ldi	r27, 0x41	; 65
    2bb6:	8f a3       	std	Y+39, r24	; 0x27
    2bb8:	98 a7       	std	Y+40, r25	; 0x28
    2bba:	a9 a7       	std	Y+41, r26	; 0x29
    2bbc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bbe:	6f a1       	ldd	r22, Y+39	; 0x27
    2bc0:	78 a5       	ldd	r23, Y+40	; 0x28
    2bc2:	89 a5       	ldd	r24, Y+41	; 0x29
    2bc4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	4a e7       	ldi	r20, 0x7A	; 122
    2bcc:	55 e4       	ldi	r21, 0x45	; 69
    2bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	8b a3       	std	Y+35, r24	; 0x23
    2bd8:	9c a3       	std	Y+36, r25	; 0x24
    2bda:	ad a3       	std	Y+37, r26	; 0x25
    2bdc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2bde:	6b a1       	ldd	r22, Y+35	; 0x23
    2be0:	7c a1       	ldd	r23, Y+36	; 0x24
    2be2:	8d a1       	ldd	r24, Y+37	; 0x25
    2be4:	9e a1       	ldd	r25, Y+38	; 0x26
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	40 e8       	ldi	r20, 0x80	; 128
    2bec:	5f e3       	ldi	r21, 0x3F	; 63
    2bee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bf2:	88 23       	and	r24, r24
    2bf4:	2c f4       	brge	.+10     	; 0x2c00 <H_LCD_void_Init+0xa2>
		__ticks = 1;
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	9a a3       	std	Y+34, r25	; 0x22
    2bfc:	89 a3       	std	Y+33, r24	; 0x21
    2bfe:	3f c0       	rjmp	.+126    	; 0x2c7e <H_LCD_void_Init+0x120>
	else if (__tmp > 65535)
    2c00:	6b a1       	ldd	r22, Y+35	; 0x23
    2c02:	7c a1       	ldd	r23, Y+36	; 0x24
    2c04:	8d a1       	ldd	r24, Y+37	; 0x25
    2c06:	9e a1       	ldd	r25, Y+38	; 0x26
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	3f ef       	ldi	r19, 0xFF	; 255
    2c0c:	4f e7       	ldi	r20, 0x7F	; 127
    2c0e:	57 e4       	ldi	r21, 0x47	; 71
    2c10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c14:	18 16       	cp	r1, r24
    2c16:	4c f5       	brge	.+82     	; 0x2c6a <H_LCD_void_Init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c18:	6f a1       	ldd	r22, Y+39	; 0x27
    2c1a:	78 a5       	ldd	r23, Y+40	; 0x28
    2c1c:	89 a5       	ldd	r24, Y+41	; 0x29
    2c1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	40 e2       	ldi	r20, 0x20	; 32
    2c26:	51 e4       	ldi	r21, 0x41	; 65
    2c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	cb 01       	movw	r24, r22
    2c30:	bc 01       	movw	r22, r24
    2c32:	cd 01       	movw	r24, r26
    2c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	9a a3       	std	Y+34, r25	; 0x22
    2c3e:	89 a3       	std	Y+33, r24	; 0x21
    2c40:	0f c0       	rjmp	.+30     	; 0x2c60 <H_LCD_void_Init+0x102>
    2c42:	80 e9       	ldi	r24, 0x90	; 144
    2c44:	91 e0       	ldi	r25, 0x01	; 1
    2c46:	98 a3       	std	Y+32, r25	; 0x20
    2c48:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c4a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c4c:	98 a1       	ldd	r25, Y+32	; 0x20
    2c4e:	01 97       	sbiw	r24, 0x01	; 1
    2c50:	f1 f7       	brne	.-4      	; 0x2c4e <H_LCD_void_Init+0xf0>
    2c52:	98 a3       	std	Y+32, r25	; 0x20
    2c54:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c56:	89 a1       	ldd	r24, Y+33	; 0x21
    2c58:	9a a1       	ldd	r25, Y+34	; 0x22
    2c5a:	01 97       	sbiw	r24, 0x01	; 1
    2c5c:	9a a3       	std	Y+34, r25	; 0x22
    2c5e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c60:	89 a1       	ldd	r24, Y+33	; 0x21
    2c62:	9a a1       	ldd	r25, Y+34	; 0x22
    2c64:	00 97       	sbiw	r24, 0x00	; 0
    2c66:	69 f7       	brne	.-38     	; 0x2c42 <H_LCD_void_Init+0xe4>
    2c68:	14 c0       	rjmp	.+40     	; 0x2c92 <H_LCD_void_Init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c6a:	6b a1       	ldd	r22, Y+35	; 0x23
    2c6c:	7c a1       	ldd	r23, Y+36	; 0x24
    2c6e:	8d a1       	ldd	r24, Y+37	; 0x25
    2c70:	9e a1       	ldd	r25, Y+38	; 0x26
    2c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c76:	dc 01       	movw	r26, r24
    2c78:	cb 01       	movw	r24, r22
    2c7a:	9a a3       	std	Y+34, r25	; 0x22
    2c7c:	89 a3       	std	Y+33, r24	; 0x21
    2c7e:	89 a1       	ldd	r24, Y+33	; 0x21
    2c80:	9a a1       	ldd	r25, Y+34	; 0x22
    2c82:	9e 8f       	std	Y+30, r25	; 0x1e
    2c84:	8d 8f       	std	Y+29, r24	; 0x1d
    2c86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c88:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	f1 f7       	brne	.-4      	; 0x2c8a <H_LCD_void_Init+0x12c>
    2c8e:	9e 8f       	std	Y+30, r25	; 0x1e
    2c90:	8d 8f       	std	Y+29, r24	; 0x1d

	// delay before any start
	_delay_ms(20);
	H_LCD_void_SendCommand(LCD_8BIT_MODE_2_LINE);
    2c92:	88 e3       	ldi	r24, 0x38	; 56
    2c94:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <H_LCD_void_SendCommand>
    2c98:	80 e0       	ldi	r24, 0x00	; 0
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	a0 ea       	ldi	r26, 0xA0	; 160
    2c9e:	b0 e4       	ldi	r27, 0x40	; 64
    2ca0:	89 8f       	std	Y+25, r24	; 0x19
    2ca2:	9a 8f       	std	Y+26, r25	; 0x1a
    2ca4:	ab 8f       	std	Y+27, r26	; 0x1b
    2ca6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca8:	69 8d       	ldd	r22, Y+25	; 0x19
    2caa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	4a e7       	ldi	r20, 0x7A	; 122
    2cb6:	55 e4       	ldi	r21, 0x45	; 69
    2cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	8d 8b       	std	Y+21, r24	; 0x15
    2cc2:	9e 8b       	std	Y+22, r25	; 0x16
    2cc4:	af 8b       	std	Y+23, r26	; 0x17
    2cc6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cc8:	6d 89       	ldd	r22, Y+21	; 0x15
    2cca:	7e 89       	ldd	r23, Y+22	; 0x16
    2ccc:	8f 89       	ldd	r24, Y+23	; 0x17
    2cce:	98 8d       	ldd	r25, Y+24	; 0x18
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	40 e8       	ldi	r20, 0x80	; 128
    2cd6:	5f e3       	ldi	r21, 0x3F	; 63
    2cd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cdc:	88 23       	and	r24, r24
    2cde:	2c f4       	brge	.+10     	; 0x2cea <H_LCD_void_Init+0x18c>
		__ticks = 1;
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	9c 8b       	std	Y+20, r25	; 0x14
    2ce6:	8b 8b       	std	Y+19, r24	; 0x13
    2ce8:	3f c0       	rjmp	.+126    	; 0x2d68 <H_LCD_void_Init+0x20a>
	else if (__tmp > 65535)
    2cea:	6d 89       	ldd	r22, Y+21	; 0x15
    2cec:	7e 89       	ldd	r23, Y+22	; 0x16
    2cee:	8f 89       	ldd	r24, Y+23	; 0x17
    2cf0:	98 8d       	ldd	r25, Y+24	; 0x18
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	3f ef       	ldi	r19, 0xFF	; 255
    2cf6:	4f e7       	ldi	r20, 0x7F	; 127
    2cf8:	57 e4       	ldi	r21, 0x47	; 71
    2cfa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cfe:	18 16       	cp	r1, r24
    2d00:	4c f5       	brge	.+82     	; 0x2d54 <H_LCD_void_Init+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d02:	69 8d       	ldd	r22, Y+25	; 0x19
    2d04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d0a:	20 e0       	ldi	r18, 0x00	; 0
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	40 e2       	ldi	r20, 0x20	; 32
    2d10:	51 e4       	ldi	r21, 0x41	; 65
    2d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	bc 01       	movw	r22, r24
    2d1c:	cd 01       	movw	r24, r26
    2d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	9c 8b       	std	Y+20, r25	; 0x14
    2d28:	8b 8b       	std	Y+19, r24	; 0x13
    2d2a:	0f c0       	rjmp	.+30     	; 0x2d4a <H_LCD_void_Init+0x1ec>
    2d2c:	80 e9       	ldi	r24, 0x90	; 144
    2d2e:	91 e0       	ldi	r25, 0x01	; 1
    2d30:	9a 8b       	std	Y+18, r25	; 0x12
    2d32:	89 8b       	std	Y+17, r24	; 0x11
    2d34:	89 89       	ldd	r24, Y+17	; 0x11
    2d36:	9a 89       	ldd	r25, Y+18	; 0x12
    2d38:	01 97       	sbiw	r24, 0x01	; 1
    2d3a:	f1 f7       	brne	.-4      	; 0x2d38 <H_LCD_void_Init+0x1da>
    2d3c:	9a 8b       	std	Y+18, r25	; 0x12
    2d3e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d40:	8b 89       	ldd	r24, Y+19	; 0x13
    2d42:	9c 89       	ldd	r25, Y+20	; 0x14
    2d44:	01 97       	sbiw	r24, 0x01	; 1
    2d46:	9c 8b       	std	Y+20, r25	; 0x14
    2d48:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d4a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d4c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d4e:	00 97       	sbiw	r24, 0x00	; 0
    2d50:	69 f7       	brne	.-38     	; 0x2d2c <H_LCD_void_Init+0x1ce>
    2d52:	14 c0       	rjmp	.+40     	; 0x2d7c <H_LCD_void_Init+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d54:	6d 89       	ldd	r22, Y+21	; 0x15
    2d56:	7e 89       	ldd	r23, Y+22	; 0x16
    2d58:	8f 89       	ldd	r24, Y+23	; 0x17
    2d5a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d60:	dc 01       	movw	r26, r24
    2d62:	cb 01       	movw	r24, r22
    2d64:	9c 8b       	std	Y+20, r25	; 0x14
    2d66:	8b 8b       	std	Y+19, r24	; 0x13
    2d68:	8b 89       	ldd	r24, Y+19	; 0x13
    2d6a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d6c:	98 8b       	std	Y+16, r25	; 0x10
    2d6e:	8f 87       	std	Y+15, r24	; 0x0f
    2d70:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d72:	98 89       	ldd	r25, Y+16	; 0x10
    2d74:	01 97       	sbiw	r24, 0x01	; 1
    2d76:	f1 f7       	brne	.-4      	; 0x2d74 <H_LCD_void_Init+0x216>
    2d78:	98 8b       	std	Y+16, r25	; 0x10
    2d7a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	H_LCD_void_SendCommand(LCD_8BIT_MODE_2_LINE);
    2d7c:	88 e3       	ldi	r24, 0x38	; 56
    2d7e:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <H_LCD_void_SendCommand>
    2d82:	80 e0       	ldi	r24, 0x00	; 0
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	a6 e1       	ldi	r26, 0x16	; 22
    2d88:	b3 e4       	ldi	r27, 0x43	; 67
    2d8a:	8b 87       	std	Y+11, r24	; 0x0b
    2d8c:	9c 87       	std	Y+12, r25	; 0x0c
    2d8e:	ad 87       	std	Y+13, r26	; 0x0d
    2d90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d92:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d94:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d96:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d98:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	4a e7       	ldi	r20, 0x7A	; 122
    2da0:	55 e4       	ldi	r21, 0x45	; 69
    2da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	8f 83       	std	Y+7, r24	; 0x07
    2dac:	98 87       	std	Y+8, r25	; 0x08
    2dae:	a9 87       	std	Y+9, r26	; 0x09
    2db0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2db2:	6f 81       	ldd	r22, Y+7	; 0x07
    2db4:	78 85       	ldd	r23, Y+8	; 0x08
    2db6:	89 85       	ldd	r24, Y+9	; 0x09
    2db8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	40 e8       	ldi	r20, 0x80	; 128
    2dc0:	5f e3       	ldi	r21, 0x3F	; 63
    2dc2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dc6:	88 23       	and	r24, r24
    2dc8:	2c f4       	brge	.+10     	; 0x2dd4 <H_LCD_void_Init+0x276>
		__ticks = 1;
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	9e 83       	std	Y+6, r25	; 0x06
    2dd0:	8d 83       	std	Y+5, r24	; 0x05
    2dd2:	3f c0       	rjmp	.+126    	; 0x2e52 <H_LCD_void_Init+0x2f4>
	else if (__tmp > 65535)
    2dd4:	6f 81       	ldd	r22, Y+7	; 0x07
    2dd6:	78 85       	ldd	r23, Y+8	; 0x08
    2dd8:	89 85       	ldd	r24, Y+9	; 0x09
    2dda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ddc:	20 e0       	ldi	r18, 0x00	; 0
    2dde:	3f ef       	ldi	r19, 0xFF	; 255
    2de0:	4f e7       	ldi	r20, 0x7F	; 127
    2de2:	57 e4       	ldi	r21, 0x47	; 71
    2de4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2de8:	18 16       	cp	r1, r24
    2dea:	4c f5       	brge	.+82     	; 0x2e3e <H_LCD_void_Init+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dec:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dee:	7c 85       	ldd	r23, Y+12	; 0x0c
    2df0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2df2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2df4:	20 e0       	ldi	r18, 0x00	; 0
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	40 e2       	ldi	r20, 0x20	; 32
    2dfa:	51 e4       	ldi	r21, 0x41	; 65
    2dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e00:	dc 01       	movw	r26, r24
    2e02:	cb 01       	movw	r24, r22
    2e04:	bc 01       	movw	r22, r24
    2e06:	cd 01       	movw	r24, r26
    2e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	9e 83       	std	Y+6, r25	; 0x06
    2e12:	8d 83       	std	Y+5, r24	; 0x05
    2e14:	0f c0       	rjmp	.+30     	; 0x2e34 <H_LCD_void_Init+0x2d6>
    2e16:	80 e9       	ldi	r24, 0x90	; 144
    2e18:	91 e0       	ldi	r25, 0x01	; 1
    2e1a:	9c 83       	std	Y+4, r25	; 0x04
    2e1c:	8b 83       	std	Y+3, r24	; 0x03
    2e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e20:	9c 81       	ldd	r25, Y+4	; 0x04
    2e22:	01 97       	sbiw	r24, 0x01	; 1
    2e24:	f1 f7       	brne	.-4      	; 0x2e22 <H_LCD_void_Init+0x2c4>
    2e26:	9c 83       	std	Y+4, r25	; 0x04
    2e28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e2e:	01 97       	sbiw	r24, 0x01	; 1
    2e30:	9e 83       	std	Y+6, r25	; 0x06
    2e32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e34:	8d 81       	ldd	r24, Y+5	; 0x05
    2e36:	9e 81       	ldd	r25, Y+6	; 0x06
    2e38:	00 97       	sbiw	r24, 0x00	; 0
    2e3a:	69 f7       	brne	.-38     	; 0x2e16 <H_LCD_void_Init+0x2b8>
    2e3c:	14 c0       	rjmp	.+40     	; 0x2e66 <H_LCD_void_Init+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e40:	78 85       	ldd	r23, Y+8	; 0x08
    2e42:	89 85       	ldd	r24, Y+9	; 0x09
    2e44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e4a:	dc 01       	movw	r26, r24
    2e4c:	cb 01       	movw	r24, r22
    2e4e:	9e 83       	std	Y+6, r25	; 0x06
    2e50:	8d 83       	std	Y+5, r24	; 0x05
    2e52:	8d 81       	ldd	r24, Y+5	; 0x05
    2e54:	9e 81       	ldd	r25, Y+6	; 0x06
    2e56:	9a 83       	std	Y+2, r25	; 0x02
    2e58:	89 83       	std	Y+1, r24	; 0x01
    2e5a:	89 81       	ldd	r24, Y+1	; 0x01
    2e5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e5e:	01 97       	sbiw	r24, 0x01	; 1
    2e60:	f1 f7       	brne	.-4      	; 0x2e5e <H_LCD_void_Init+0x300>
    2e62:	9a 83       	std	Y+2, r25	; 0x02
    2e64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(150);
	H_LCD_void_SendCommand(LCD_8BIT_MODE_2_LINE);
    2e66:	88 e3       	ldi	r24, 0x38	; 56
    2e68:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_CLEAR);
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_RETURN_HOME);
    2e72:	82 e0       	ldi	r24, 0x02	; 2
    2e74:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_ENTRY_MODE);
    2e78:	86 e0       	ldi	r24, 0x06	; 6
    2e7a:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_CURSOR_OFF_DISPLAY_ON);
    2e7e:	8c e0       	ldi	r24, 0x0C	; 12
    2e80:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_4BIT_MODE_2_LINE);
    2e84:	88 e2       	ldi	r24, 0x28	; 40
    2e86:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_DDRAM_START); // start column
    2e8a:	80 e8       	ldi	r24, 0x80	; 128
    2e8c:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <H_LCD_void_SendCommand>

#elif LCD_MODE_SELECT == LCD_8_BIT_MODE_SELECT


#endif
}
    2e90:	aa 96       	adiw	r28, 0x2a	; 42
    2e92:	0f b6       	in	r0, 0x3f	; 63
    2e94:	f8 94       	cli
    2e96:	de bf       	out	0x3e, r29	; 62
    2e98:	0f be       	out	0x3f, r0	; 63
    2e9a:	cd bf       	out	0x3d, r28	; 61
    2e9c:	cf 91       	pop	r28
    2e9e:	df 91       	pop	r29
    2ea0:	08 95       	ret

00002ea2 <H_LCD_void_SendCommand>:



void H_LCD_void_SendCommand(u8 Copy_u8Command)
{
    2ea2:	df 93       	push	r29
    2ea4:	cf 93       	push	r28
    2ea6:	cd b7       	in	r28, 0x3d	; 61
    2ea8:	de b7       	in	r29, 0x3e	; 62
    2eaa:	6d 97       	sbiw	r28, 0x1d	; 29
    2eac:	0f b6       	in	r0, 0x3f	; 63
    2eae:	f8 94       	cli
    2eb0:	de bf       	out	0x3e, r29	; 62
    2eb2:	0f be       	out	0x3f, r0	; 63
    2eb4:	cd bf       	out	0x3d, r28	; 61
    2eb6:	8d 8f       	std	Y+29, r24	; 0x1d
#if LCD_MODE_SELECT == LCD_4_BIT_MODE_SELECT
	// write logic low to rs pin
	DIO_voidSetPinValue(LCD_4BIT_RS_PIN_PORT, LCD_4BIT_RS_PIN, GPIO_LOW);
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	63 e0       	ldi	r22, 0x03	; 3
    2ebc:	40 e0       	ldi	r20, 0x00	; 0
    2ebe:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>

	// Sending most significant nibble of command through data pins
	DIO_voidSetPinValue(LCD_4BIT_D7_PIN_PORT, LCD_4_BIT_D7_PIN, (Copy_u8Command >> 4)&(u8)1);
    2ec2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ec4:	82 95       	swap	r24
    2ec6:	8f 70       	andi	r24, 0x0F	; 15
    2ec8:	98 2f       	mov	r25, r24
    2eca:	91 70       	andi	r25, 0x01	; 1
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	60 e0       	ldi	r22, 0x00	; 0
    2ed0:	49 2f       	mov	r20, r25
    2ed2:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D6_PIN_PORT, LCD_4_BIT_D6_PIN, (Copy_u8Command >> 5)&(u8)1);
    2ed6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ed8:	82 95       	swap	r24
    2eda:	86 95       	lsr	r24
    2edc:	87 70       	andi	r24, 0x07	; 7
    2ede:	98 2f       	mov	r25, r24
    2ee0:	91 70       	andi	r25, 0x01	; 1
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	61 e0       	ldi	r22, 0x01	; 1
    2ee6:	49 2f       	mov	r20, r25
    2ee8:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D5_PIN_PORT, LCD_4_BIT_D5_PIN, (Copy_u8Command >> 6)&(u8)1);
    2eec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2eee:	82 95       	swap	r24
    2ef0:	86 95       	lsr	r24
    2ef2:	86 95       	lsr	r24
    2ef4:	83 70       	andi	r24, 0x03	; 3
    2ef6:	98 2f       	mov	r25, r24
    2ef8:	91 70       	andi	r25, 0x01	; 1
    2efa:	81 e0       	ldi	r24, 0x01	; 1
    2efc:	62 e0       	ldi	r22, 0x02	; 2
    2efe:	49 2f       	mov	r20, r25
    2f00:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D4_PIN_PORT, LCD_4_BIT_D4_PIN, (Copy_u8Command >> 7)&(u8)1);
    2f04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f06:	98 2f       	mov	r25, r24
    2f08:	99 1f       	adc	r25, r25
    2f0a:	99 27       	eor	r25, r25
    2f0c:	99 1f       	adc	r25, r25
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	64 e0       	ldi	r22, 0x04	; 4
    2f12:	49 2f       	mov	r20, r25
    2f14:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>

	// send enable signal
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_HIGH);
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	62 e0       	ldi	r22, 0x02	; 2
    2f1c:	41 e0       	ldi	r20, 0x01	; 1
    2f1e:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	a0 ea       	ldi	r26, 0xA0	; 160
    2f28:	b0 e4       	ldi	r27, 0x40	; 64
    2f2a:	89 8f       	std	Y+25, r24	; 0x19
    2f2c:	9a 8f       	std	Y+26, r25	; 0x1a
    2f2e:	ab 8f       	std	Y+27, r26	; 0x1b
    2f30:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f32:	69 8d       	ldd	r22, Y+25	; 0x19
    2f34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f3a:	20 e0       	ldi	r18, 0x00	; 0
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	4a e7       	ldi	r20, 0x7A	; 122
    2f40:	55 e4       	ldi	r21, 0x45	; 69
    2f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f46:	dc 01       	movw	r26, r24
    2f48:	cb 01       	movw	r24, r22
    2f4a:	8d 8b       	std	Y+21, r24	; 0x15
    2f4c:	9e 8b       	std	Y+22, r25	; 0x16
    2f4e:	af 8b       	std	Y+23, r26	; 0x17
    2f50:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f52:	6d 89       	ldd	r22, Y+21	; 0x15
    2f54:	7e 89       	ldd	r23, Y+22	; 0x16
    2f56:	8f 89       	ldd	r24, Y+23	; 0x17
    2f58:	98 8d       	ldd	r25, Y+24	; 0x18
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	40 e8       	ldi	r20, 0x80	; 128
    2f60:	5f e3       	ldi	r21, 0x3F	; 63
    2f62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f66:	88 23       	and	r24, r24
    2f68:	2c f4       	brge	.+10     	; 0x2f74 <H_LCD_void_SendCommand+0xd2>
		__ticks = 1;
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	9c 8b       	std	Y+20, r25	; 0x14
    2f70:	8b 8b       	std	Y+19, r24	; 0x13
    2f72:	3f c0       	rjmp	.+126    	; 0x2ff2 <H_LCD_void_SendCommand+0x150>
	else if (__tmp > 65535)
    2f74:	6d 89       	ldd	r22, Y+21	; 0x15
    2f76:	7e 89       	ldd	r23, Y+22	; 0x16
    2f78:	8f 89       	ldd	r24, Y+23	; 0x17
    2f7a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	3f ef       	ldi	r19, 0xFF	; 255
    2f80:	4f e7       	ldi	r20, 0x7F	; 127
    2f82:	57 e4       	ldi	r21, 0x47	; 71
    2f84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f88:	18 16       	cp	r1, r24
    2f8a:	4c f5       	brge	.+82     	; 0x2fde <H_LCD_void_SendCommand+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f8c:	69 8d       	ldd	r22, Y+25	; 0x19
    2f8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	40 e2       	ldi	r20, 0x20	; 32
    2f9a:	51 e4       	ldi	r21, 0x41	; 65
    2f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	cb 01       	movw	r24, r22
    2fa4:	bc 01       	movw	r22, r24
    2fa6:	cd 01       	movw	r24, r26
    2fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	9c 8b       	std	Y+20, r25	; 0x14
    2fb2:	8b 8b       	std	Y+19, r24	; 0x13
    2fb4:	0f c0       	rjmp	.+30     	; 0x2fd4 <H_LCD_void_SendCommand+0x132>
    2fb6:	80 e9       	ldi	r24, 0x90	; 144
    2fb8:	91 e0       	ldi	r25, 0x01	; 1
    2fba:	9a 8b       	std	Y+18, r25	; 0x12
    2fbc:	89 8b       	std	Y+17, r24	; 0x11
    2fbe:	89 89       	ldd	r24, Y+17	; 0x11
    2fc0:	9a 89       	ldd	r25, Y+18	; 0x12
    2fc2:	01 97       	sbiw	r24, 0x01	; 1
    2fc4:	f1 f7       	brne	.-4      	; 0x2fc2 <H_LCD_void_SendCommand+0x120>
    2fc6:	9a 8b       	std	Y+18, r25	; 0x12
    2fc8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fca:	8b 89       	ldd	r24, Y+19	; 0x13
    2fcc:	9c 89       	ldd	r25, Y+20	; 0x14
    2fce:	01 97       	sbiw	r24, 0x01	; 1
    2fd0:	9c 8b       	std	Y+20, r25	; 0x14
    2fd2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd4:	8b 89       	ldd	r24, Y+19	; 0x13
    2fd6:	9c 89       	ldd	r25, Y+20	; 0x14
    2fd8:	00 97       	sbiw	r24, 0x00	; 0
    2fda:	69 f7       	brne	.-38     	; 0x2fb6 <H_LCD_void_SendCommand+0x114>
    2fdc:	14 c0       	rjmp	.+40     	; 0x3006 <H_LCD_void_SendCommand+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fde:	6d 89       	ldd	r22, Y+21	; 0x15
    2fe0:	7e 89       	ldd	r23, Y+22	; 0x16
    2fe2:	8f 89       	ldd	r24, Y+23	; 0x17
    2fe4:	98 8d       	ldd	r25, Y+24	; 0x18
    2fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	9c 8b       	std	Y+20, r25	; 0x14
    2ff0:	8b 8b       	std	Y+19, r24	; 0x13
    2ff2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ff4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ff6:	98 8b       	std	Y+16, r25	; 0x10
    2ff8:	8f 87       	std	Y+15, r24	; 0x0f
    2ffa:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ffc:	98 89       	ldd	r25, Y+16	; 0x10
    2ffe:	01 97       	sbiw	r24, 0x01	; 1
    3000:	f1 f7       	brne	.-4      	; 0x2ffe <H_LCD_void_SendCommand+0x15c>
    3002:	98 8b       	std	Y+16, r25	; 0x10
    3004:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_LOW);
    3006:	80 e0       	ldi	r24, 0x00	; 0
    3008:	62 e0       	ldi	r22, 0x02	; 2
    300a:	40 e0       	ldi	r20, 0x00	; 0
    300c:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>

	// Sending least significant nibble of command through data pins
	DIO_voidSetPinValue(LCD_4BIT_D7_PIN_PORT, LCD_4_BIT_D7_PIN, ((Copy_u8Command) >> 0)&(u8)1);
    3010:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3012:	98 2f       	mov	r25, r24
    3014:	91 70       	andi	r25, 0x01	; 1
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	60 e0       	ldi	r22, 0x00	; 0
    301a:	49 2f       	mov	r20, r25
    301c:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D6_PIN_PORT, LCD_4_BIT_D6_PIN, ((Copy_u8Command) >> 1)&(u8)1);
    3020:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3022:	86 95       	lsr	r24
    3024:	98 2f       	mov	r25, r24
    3026:	91 70       	andi	r25, 0x01	; 1
    3028:	81 e0       	ldi	r24, 0x01	; 1
    302a:	61 e0       	ldi	r22, 0x01	; 1
    302c:	49 2f       	mov	r20, r25
    302e:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D5_PIN_PORT, LCD_4_BIT_D5_PIN, ((Copy_u8Command) >> 2)&(u8)1);
    3032:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3034:	86 95       	lsr	r24
    3036:	86 95       	lsr	r24
    3038:	98 2f       	mov	r25, r24
    303a:	91 70       	andi	r25, 0x01	; 1
    303c:	81 e0       	ldi	r24, 0x01	; 1
    303e:	62 e0       	ldi	r22, 0x02	; 2
    3040:	49 2f       	mov	r20, r25
    3042:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D4_PIN_PORT, LCD_4_BIT_D4_PIN, ((Copy_u8Command) >> 3)&(u8)1);
    3046:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3048:	86 95       	lsr	r24
    304a:	86 95       	lsr	r24
    304c:	86 95       	lsr	r24
    304e:	98 2f       	mov	r25, r24
    3050:	91 70       	andi	r25, 0x01	; 1
    3052:	81 e0       	ldi	r24, 0x01	; 1
    3054:	64 e0       	ldi	r22, 0x04	; 4
    3056:	49 2f       	mov	r20, r25
    3058:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>

	// send enable signal
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_HIGH);
    305c:	80 e0       	ldi	r24, 0x00	; 0
    305e:	62 e0       	ldi	r22, 0x02	; 2
    3060:	41 e0       	ldi	r20, 0x01	; 1
    3062:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
    3066:	80 e0       	ldi	r24, 0x00	; 0
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	a0 ea       	ldi	r26, 0xA0	; 160
    306c:	b0 e4       	ldi	r27, 0x40	; 64
    306e:	8b 87       	std	Y+11, r24	; 0x0b
    3070:	9c 87       	std	Y+12, r25	; 0x0c
    3072:	ad 87       	std	Y+13, r26	; 0x0d
    3074:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3076:	6b 85       	ldd	r22, Y+11	; 0x0b
    3078:	7c 85       	ldd	r23, Y+12	; 0x0c
    307a:	8d 85       	ldd	r24, Y+13	; 0x0d
    307c:	9e 85       	ldd	r25, Y+14	; 0x0e
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	4a e7       	ldi	r20, 0x7A	; 122
    3084:	55 e4       	ldi	r21, 0x45	; 69
    3086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308a:	dc 01       	movw	r26, r24
    308c:	cb 01       	movw	r24, r22
    308e:	8f 83       	std	Y+7, r24	; 0x07
    3090:	98 87       	std	Y+8, r25	; 0x08
    3092:	a9 87       	std	Y+9, r26	; 0x09
    3094:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3096:	6f 81       	ldd	r22, Y+7	; 0x07
    3098:	78 85       	ldd	r23, Y+8	; 0x08
    309a:	89 85       	ldd	r24, Y+9	; 0x09
    309c:	9a 85       	ldd	r25, Y+10	; 0x0a
    309e:	20 e0       	ldi	r18, 0x00	; 0
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	40 e8       	ldi	r20, 0x80	; 128
    30a4:	5f e3       	ldi	r21, 0x3F	; 63
    30a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30aa:	88 23       	and	r24, r24
    30ac:	2c f4       	brge	.+10     	; 0x30b8 <H_LCD_void_SendCommand+0x216>
		__ticks = 1;
    30ae:	81 e0       	ldi	r24, 0x01	; 1
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	9e 83       	std	Y+6, r25	; 0x06
    30b4:	8d 83       	std	Y+5, r24	; 0x05
    30b6:	3f c0       	rjmp	.+126    	; 0x3136 <H_LCD_void_SendCommand+0x294>
	else if (__tmp > 65535)
    30b8:	6f 81       	ldd	r22, Y+7	; 0x07
    30ba:	78 85       	ldd	r23, Y+8	; 0x08
    30bc:	89 85       	ldd	r24, Y+9	; 0x09
    30be:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c0:	20 e0       	ldi	r18, 0x00	; 0
    30c2:	3f ef       	ldi	r19, 0xFF	; 255
    30c4:	4f e7       	ldi	r20, 0x7F	; 127
    30c6:	57 e4       	ldi	r21, 0x47	; 71
    30c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30cc:	18 16       	cp	r1, r24
    30ce:	4c f5       	brge	.+82     	; 0x3122 <H_LCD_void_SendCommand+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    30d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    30d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30d8:	20 e0       	ldi	r18, 0x00	; 0
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	40 e2       	ldi	r20, 0x20	; 32
    30de:	51 e4       	ldi	r21, 0x41	; 65
    30e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e4:	dc 01       	movw	r26, r24
    30e6:	cb 01       	movw	r24, r22
    30e8:	bc 01       	movw	r22, r24
    30ea:	cd 01       	movw	r24, r26
    30ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f0:	dc 01       	movw	r26, r24
    30f2:	cb 01       	movw	r24, r22
    30f4:	9e 83       	std	Y+6, r25	; 0x06
    30f6:	8d 83       	std	Y+5, r24	; 0x05
    30f8:	0f c0       	rjmp	.+30     	; 0x3118 <H_LCD_void_SendCommand+0x276>
    30fa:	80 e9       	ldi	r24, 0x90	; 144
    30fc:	91 e0       	ldi	r25, 0x01	; 1
    30fe:	9c 83       	std	Y+4, r25	; 0x04
    3100:	8b 83       	std	Y+3, r24	; 0x03
    3102:	8b 81       	ldd	r24, Y+3	; 0x03
    3104:	9c 81       	ldd	r25, Y+4	; 0x04
    3106:	01 97       	sbiw	r24, 0x01	; 1
    3108:	f1 f7       	brne	.-4      	; 0x3106 <H_LCD_void_SendCommand+0x264>
    310a:	9c 83       	std	Y+4, r25	; 0x04
    310c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    310e:	8d 81       	ldd	r24, Y+5	; 0x05
    3110:	9e 81       	ldd	r25, Y+6	; 0x06
    3112:	01 97       	sbiw	r24, 0x01	; 1
    3114:	9e 83       	std	Y+6, r25	; 0x06
    3116:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3118:	8d 81       	ldd	r24, Y+5	; 0x05
    311a:	9e 81       	ldd	r25, Y+6	; 0x06
    311c:	00 97       	sbiw	r24, 0x00	; 0
    311e:	69 f7       	brne	.-38     	; 0x30fa <H_LCD_void_SendCommand+0x258>
    3120:	14 c0       	rjmp	.+40     	; 0x314a <H_LCD_void_SendCommand+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3122:	6f 81       	ldd	r22, Y+7	; 0x07
    3124:	78 85       	ldd	r23, Y+8	; 0x08
    3126:	89 85       	ldd	r24, Y+9	; 0x09
    3128:	9a 85       	ldd	r25, Y+10	; 0x0a
    312a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312e:	dc 01       	movw	r26, r24
    3130:	cb 01       	movw	r24, r22
    3132:	9e 83       	std	Y+6, r25	; 0x06
    3134:	8d 83       	std	Y+5, r24	; 0x05
    3136:	8d 81       	ldd	r24, Y+5	; 0x05
    3138:	9e 81       	ldd	r25, Y+6	; 0x06
    313a:	9a 83       	std	Y+2, r25	; 0x02
    313c:	89 83       	std	Y+1, r24	; 0x01
    313e:	89 81       	ldd	r24, Y+1	; 0x01
    3140:	9a 81       	ldd	r25, Y+2	; 0x02
    3142:	01 97       	sbiw	r24, 0x01	; 1
    3144:	f1 f7       	brne	.-4      	; 0x3142 <H_LCD_void_SendCommand+0x2a0>
    3146:	9a 83       	std	Y+2, r25	; 0x02
    3148:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_LOW);
    314a:	80 e0       	ldi	r24, 0x00	; 0
    314c:	62 e0       	ldi	r22, 0x02	; 2
    314e:	40 e0       	ldi	r20, 0x00	; 0
    3150:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
#elif LCD_MODE_SELECT == LCD_8_BIT_MODE_SELECT


#endif

}
    3154:	6d 96       	adiw	r28, 0x1d	; 29
    3156:	0f b6       	in	r0, 0x3f	; 63
    3158:	f8 94       	cli
    315a:	de bf       	out	0x3e, r29	; 62
    315c:	0f be       	out	0x3f, r0	; 63
    315e:	cd bf       	out	0x3d, r28	; 61
    3160:	cf 91       	pop	r28
    3162:	df 91       	pop	r29
    3164:	08 95       	ret

00003166 <H_LCD_void_SendData>:
void H_LCD_void_SendData(u8 Copy_u8Data)
{
    3166:	df 93       	push	r29
    3168:	cf 93       	push	r28
    316a:	cd b7       	in	r28, 0x3d	; 61
    316c:	de b7       	in	r29, 0x3e	; 62
    316e:	6d 97       	sbiw	r28, 0x1d	; 29
    3170:	0f b6       	in	r0, 0x3f	; 63
    3172:	f8 94       	cli
    3174:	de bf       	out	0x3e, r29	; 62
    3176:	0f be       	out	0x3f, r0	; 63
    3178:	cd bf       	out	0x3d, r28	; 61
    317a:	8d 8f       	std	Y+29, r24	; 0x1d
#if LCD_MODE_SELECT == LCD_4_BIT_MODE_SELECT
	// write logic high to rs pin
	DIO_voidSetPinValue(LCD_4BIT_RS_PIN_PORT, LCD_4BIT_RS_PIN, GPIO_HIGH);
    317c:	80 e0       	ldi	r24, 0x00	; 0
    317e:	63 e0       	ldi	r22, 0x03	; 3
    3180:	41 e0       	ldi	r20, 0x01	; 1
    3182:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>

	// Sending most significant nibble of command through data pins
	DIO_voidSetPinValue(LCD_4BIT_D7_PIN_PORT, LCD_4_BIT_D7_PIN, (Copy_u8Data >> 4)&(u8)1);
    3186:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3188:	82 95       	swap	r24
    318a:	8f 70       	andi	r24, 0x0F	; 15
    318c:	98 2f       	mov	r25, r24
    318e:	91 70       	andi	r25, 0x01	; 1
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	60 e0       	ldi	r22, 0x00	; 0
    3194:	49 2f       	mov	r20, r25
    3196:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D6_PIN_PORT, LCD_4_BIT_D6_PIN, (Copy_u8Data >> 5)&(u8)1);
    319a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    319c:	82 95       	swap	r24
    319e:	86 95       	lsr	r24
    31a0:	87 70       	andi	r24, 0x07	; 7
    31a2:	98 2f       	mov	r25, r24
    31a4:	91 70       	andi	r25, 0x01	; 1
    31a6:	81 e0       	ldi	r24, 0x01	; 1
    31a8:	61 e0       	ldi	r22, 0x01	; 1
    31aa:	49 2f       	mov	r20, r25
    31ac:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D5_PIN_PORT, LCD_4_BIT_D5_PIN, (Copy_u8Data >> 6)&(u8)1);
    31b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31b2:	82 95       	swap	r24
    31b4:	86 95       	lsr	r24
    31b6:	86 95       	lsr	r24
    31b8:	83 70       	andi	r24, 0x03	; 3
    31ba:	98 2f       	mov	r25, r24
    31bc:	91 70       	andi	r25, 0x01	; 1
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	62 e0       	ldi	r22, 0x02	; 2
    31c2:	49 2f       	mov	r20, r25
    31c4:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D4_PIN_PORT, LCD_4_BIT_D4_PIN, (Copy_u8Data >> 7)&(u8)1);
    31c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31ca:	98 2f       	mov	r25, r24
    31cc:	99 1f       	adc	r25, r25
    31ce:	99 27       	eor	r25, r25
    31d0:	99 1f       	adc	r25, r25
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	64 e0       	ldi	r22, 0x04	; 4
    31d6:	49 2f       	mov	r20, r25
    31d8:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>

	// send enable signal
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_HIGH);
    31dc:	80 e0       	ldi	r24, 0x00	; 0
    31de:	62 e0       	ldi	r22, 0x02	; 2
    31e0:	41 e0       	ldi	r20, 0x01	; 1
    31e2:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
    31e6:	80 e0       	ldi	r24, 0x00	; 0
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	a0 ea       	ldi	r26, 0xA0	; 160
    31ec:	b0 e4       	ldi	r27, 0x40	; 64
    31ee:	89 8f       	std	Y+25, r24	; 0x19
    31f0:	9a 8f       	std	Y+26, r25	; 0x1a
    31f2:	ab 8f       	std	Y+27, r26	; 0x1b
    31f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31f6:	69 8d       	ldd	r22, Y+25	; 0x19
    31f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31fe:	20 e0       	ldi	r18, 0x00	; 0
    3200:	30 e0       	ldi	r19, 0x00	; 0
    3202:	4a e7       	ldi	r20, 0x7A	; 122
    3204:	55 e4       	ldi	r21, 0x45	; 69
    3206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    320a:	dc 01       	movw	r26, r24
    320c:	cb 01       	movw	r24, r22
    320e:	8d 8b       	std	Y+21, r24	; 0x15
    3210:	9e 8b       	std	Y+22, r25	; 0x16
    3212:	af 8b       	std	Y+23, r26	; 0x17
    3214:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3216:	6d 89       	ldd	r22, Y+21	; 0x15
    3218:	7e 89       	ldd	r23, Y+22	; 0x16
    321a:	8f 89       	ldd	r24, Y+23	; 0x17
    321c:	98 8d       	ldd	r25, Y+24	; 0x18
    321e:	20 e0       	ldi	r18, 0x00	; 0
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	40 e8       	ldi	r20, 0x80	; 128
    3224:	5f e3       	ldi	r21, 0x3F	; 63
    3226:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    322a:	88 23       	and	r24, r24
    322c:	2c f4       	brge	.+10     	; 0x3238 <H_LCD_void_SendData+0xd2>
		__ticks = 1;
    322e:	81 e0       	ldi	r24, 0x01	; 1
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	9c 8b       	std	Y+20, r25	; 0x14
    3234:	8b 8b       	std	Y+19, r24	; 0x13
    3236:	3f c0       	rjmp	.+126    	; 0x32b6 <H_LCD_void_SendData+0x150>
	else if (__tmp > 65535)
    3238:	6d 89       	ldd	r22, Y+21	; 0x15
    323a:	7e 89       	ldd	r23, Y+22	; 0x16
    323c:	8f 89       	ldd	r24, Y+23	; 0x17
    323e:	98 8d       	ldd	r25, Y+24	; 0x18
    3240:	20 e0       	ldi	r18, 0x00	; 0
    3242:	3f ef       	ldi	r19, 0xFF	; 255
    3244:	4f e7       	ldi	r20, 0x7F	; 127
    3246:	57 e4       	ldi	r21, 0x47	; 71
    3248:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    324c:	18 16       	cp	r1, r24
    324e:	4c f5       	brge	.+82     	; 0x32a2 <H_LCD_void_SendData+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3250:	69 8d       	ldd	r22, Y+25	; 0x19
    3252:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3254:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3256:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3258:	20 e0       	ldi	r18, 0x00	; 0
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	40 e2       	ldi	r20, 0x20	; 32
    325e:	51 e4       	ldi	r21, 0x41	; 65
    3260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	bc 01       	movw	r22, r24
    326a:	cd 01       	movw	r24, r26
    326c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	9c 8b       	std	Y+20, r25	; 0x14
    3276:	8b 8b       	std	Y+19, r24	; 0x13
    3278:	0f c0       	rjmp	.+30     	; 0x3298 <H_LCD_void_SendData+0x132>
    327a:	80 e9       	ldi	r24, 0x90	; 144
    327c:	91 e0       	ldi	r25, 0x01	; 1
    327e:	9a 8b       	std	Y+18, r25	; 0x12
    3280:	89 8b       	std	Y+17, r24	; 0x11
    3282:	89 89       	ldd	r24, Y+17	; 0x11
    3284:	9a 89       	ldd	r25, Y+18	; 0x12
    3286:	01 97       	sbiw	r24, 0x01	; 1
    3288:	f1 f7       	brne	.-4      	; 0x3286 <H_LCD_void_SendData+0x120>
    328a:	9a 8b       	std	Y+18, r25	; 0x12
    328c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    328e:	8b 89       	ldd	r24, Y+19	; 0x13
    3290:	9c 89       	ldd	r25, Y+20	; 0x14
    3292:	01 97       	sbiw	r24, 0x01	; 1
    3294:	9c 8b       	std	Y+20, r25	; 0x14
    3296:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3298:	8b 89       	ldd	r24, Y+19	; 0x13
    329a:	9c 89       	ldd	r25, Y+20	; 0x14
    329c:	00 97       	sbiw	r24, 0x00	; 0
    329e:	69 f7       	brne	.-38     	; 0x327a <H_LCD_void_SendData+0x114>
    32a0:	14 c0       	rjmp	.+40     	; 0x32ca <H_LCD_void_SendData+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a2:	6d 89       	ldd	r22, Y+21	; 0x15
    32a4:	7e 89       	ldd	r23, Y+22	; 0x16
    32a6:	8f 89       	ldd	r24, Y+23	; 0x17
    32a8:	98 8d       	ldd	r25, Y+24	; 0x18
    32aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ae:	dc 01       	movw	r26, r24
    32b0:	cb 01       	movw	r24, r22
    32b2:	9c 8b       	std	Y+20, r25	; 0x14
    32b4:	8b 8b       	std	Y+19, r24	; 0x13
    32b6:	8b 89       	ldd	r24, Y+19	; 0x13
    32b8:	9c 89       	ldd	r25, Y+20	; 0x14
    32ba:	98 8b       	std	Y+16, r25	; 0x10
    32bc:	8f 87       	std	Y+15, r24	; 0x0f
    32be:	8f 85       	ldd	r24, Y+15	; 0x0f
    32c0:	98 89       	ldd	r25, Y+16	; 0x10
    32c2:	01 97       	sbiw	r24, 0x01	; 1
    32c4:	f1 f7       	brne	.-4      	; 0x32c2 <H_LCD_void_SendData+0x15c>
    32c6:	98 8b       	std	Y+16, r25	; 0x10
    32c8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_LOW);
    32ca:	80 e0       	ldi	r24, 0x00	; 0
    32cc:	62 e0       	ldi	r22, 0x02	; 2
    32ce:	40 e0       	ldi	r20, 0x00	; 0
    32d0:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>

	// Sending least significant nibble of command through data pins
	DIO_voidSetPinValue(LCD_4BIT_D7_PIN_PORT, LCD_4_BIT_D7_PIN, ((Copy_u8Data) >> 0)&(u8)1);
    32d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32d6:	98 2f       	mov	r25, r24
    32d8:	91 70       	andi	r25, 0x01	; 1
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	60 e0       	ldi	r22, 0x00	; 0
    32de:	49 2f       	mov	r20, r25
    32e0:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D6_PIN_PORT, LCD_4_BIT_D6_PIN, ((Copy_u8Data) >> 1)&(u8)1);
    32e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32e6:	86 95       	lsr	r24
    32e8:	98 2f       	mov	r25, r24
    32ea:	91 70       	andi	r25, 0x01	; 1
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	61 e0       	ldi	r22, 0x01	; 1
    32f0:	49 2f       	mov	r20, r25
    32f2:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D5_PIN_PORT, LCD_4_BIT_D5_PIN, ((Copy_u8Data) >> 2)&(u8)1);
    32f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32f8:	86 95       	lsr	r24
    32fa:	86 95       	lsr	r24
    32fc:	98 2f       	mov	r25, r24
    32fe:	91 70       	andi	r25, 0x01	; 1
    3300:	81 e0       	ldi	r24, 0x01	; 1
    3302:	62 e0       	ldi	r22, 0x02	; 2
    3304:	49 2f       	mov	r20, r25
    3306:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D4_PIN_PORT, LCD_4_BIT_D4_PIN, ((Copy_u8Data) >> 3)&(u8)1);
    330a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    330c:	86 95       	lsr	r24
    330e:	86 95       	lsr	r24
    3310:	86 95       	lsr	r24
    3312:	98 2f       	mov	r25, r24
    3314:	91 70       	andi	r25, 0x01	; 1
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	64 e0       	ldi	r22, 0x04	; 4
    331a:	49 2f       	mov	r20, r25
    331c:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>

	// send enable signal
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_HIGH);
    3320:	80 e0       	ldi	r24, 0x00	; 0
    3322:	62 e0       	ldi	r22, 0x02	; 2
    3324:	41 e0       	ldi	r20, 0x01	; 1
    3326:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
    332a:	80 e0       	ldi	r24, 0x00	; 0
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	a0 ea       	ldi	r26, 0xA0	; 160
    3330:	b0 e4       	ldi	r27, 0x40	; 64
    3332:	8b 87       	std	Y+11, r24	; 0x0b
    3334:	9c 87       	std	Y+12, r25	; 0x0c
    3336:	ad 87       	std	Y+13, r26	; 0x0d
    3338:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    333a:	6b 85       	ldd	r22, Y+11	; 0x0b
    333c:	7c 85       	ldd	r23, Y+12	; 0x0c
    333e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3340:	9e 85       	ldd	r25, Y+14	; 0x0e
    3342:	20 e0       	ldi	r18, 0x00	; 0
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	4a e7       	ldi	r20, 0x7A	; 122
    3348:	55 e4       	ldi	r21, 0x45	; 69
    334a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    334e:	dc 01       	movw	r26, r24
    3350:	cb 01       	movw	r24, r22
    3352:	8f 83       	std	Y+7, r24	; 0x07
    3354:	98 87       	std	Y+8, r25	; 0x08
    3356:	a9 87       	std	Y+9, r26	; 0x09
    3358:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    335a:	6f 81       	ldd	r22, Y+7	; 0x07
    335c:	78 85       	ldd	r23, Y+8	; 0x08
    335e:	89 85       	ldd	r24, Y+9	; 0x09
    3360:	9a 85       	ldd	r25, Y+10	; 0x0a
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	40 e8       	ldi	r20, 0x80	; 128
    3368:	5f e3       	ldi	r21, 0x3F	; 63
    336a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    336e:	88 23       	and	r24, r24
    3370:	2c f4       	brge	.+10     	; 0x337c <H_LCD_void_SendData+0x216>
		__ticks = 1;
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	9e 83       	std	Y+6, r25	; 0x06
    3378:	8d 83       	std	Y+5, r24	; 0x05
    337a:	3f c0       	rjmp	.+126    	; 0x33fa <H_LCD_void_SendData+0x294>
	else if (__tmp > 65535)
    337c:	6f 81       	ldd	r22, Y+7	; 0x07
    337e:	78 85       	ldd	r23, Y+8	; 0x08
    3380:	89 85       	ldd	r24, Y+9	; 0x09
    3382:	9a 85       	ldd	r25, Y+10	; 0x0a
    3384:	20 e0       	ldi	r18, 0x00	; 0
    3386:	3f ef       	ldi	r19, 0xFF	; 255
    3388:	4f e7       	ldi	r20, 0x7F	; 127
    338a:	57 e4       	ldi	r21, 0x47	; 71
    338c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3390:	18 16       	cp	r1, r24
    3392:	4c f5       	brge	.+82     	; 0x33e6 <H_LCD_void_SendData+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3394:	6b 85       	ldd	r22, Y+11	; 0x0b
    3396:	7c 85       	ldd	r23, Y+12	; 0x0c
    3398:	8d 85       	ldd	r24, Y+13	; 0x0d
    339a:	9e 85       	ldd	r25, Y+14	; 0x0e
    339c:	20 e0       	ldi	r18, 0x00	; 0
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	40 e2       	ldi	r20, 0x20	; 32
    33a2:	51 e4       	ldi	r21, 0x41	; 65
    33a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a8:	dc 01       	movw	r26, r24
    33aa:	cb 01       	movw	r24, r22
    33ac:	bc 01       	movw	r22, r24
    33ae:	cd 01       	movw	r24, r26
    33b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b4:	dc 01       	movw	r26, r24
    33b6:	cb 01       	movw	r24, r22
    33b8:	9e 83       	std	Y+6, r25	; 0x06
    33ba:	8d 83       	std	Y+5, r24	; 0x05
    33bc:	0f c0       	rjmp	.+30     	; 0x33dc <H_LCD_void_SendData+0x276>
    33be:	80 e9       	ldi	r24, 0x90	; 144
    33c0:	91 e0       	ldi	r25, 0x01	; 1
    33c2:	9c 83       	std	Y+4, r25	; 0x04
    33c4:	8b 83       	std	Y+3, r24	; 0x03
    33c6:	8b 81       	ldd	r24, Y+3	; 0x03
    33c8:	9c 81       	ldd	r25, Y+4	; 0x04
    33ca:	01 97       	sbiw	r24, 0x01	; 1
    33cc:	f1 f7       	brne	.-4      	; 0x33ca <H_LCD_void_SendData+0x264>
    33ce:	9c 83       	std	Y+4, r25	; 0x04
    33d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d2:	8d 81       	ldd	r24, Y+5	; 0x05
    33d4:	9e 81       	ldd	r25, Y+6	; 0x06
    33d6:	01 97       	sbiw	r24, 0x01	; 1
    33d8:	9e 83       	std	Y+6, r25	; 0x06
    33da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33dc:	8d 81       	ldd	r24, Y+5	; 0x05
    33de:	9e 81       	ldd	r25, Y+6	; 0x06
    33e0:	00 97       	sbiw	r24, 0x00	; 0
    33e2:	69 f7       	brne	.-38     	; 0x33be <H_LCD_void_SendData+0x258>
    33e4:	14 c0       	rjmp	.+40     	; 0x340e <H_LCD_void_SendData+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33e6:	6f 81       	ldd	r22, Y+7	; 0x07
    33e8:	78 85       	ldd	r23, Y+8	; 0x08
    33ea:	89 85       	ldd	r24, Y+9	; 0x09
    33ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f2:	dc 01       	movw	r26, r24
    33f4:	cb 01       	movw	r24, r22
    33f6:	9e 83       	std	Y+6, r25	; 0x06
    33f8:	8d 83       	std	Y+5, r24	; 0x05
    33fa:	8d 81       	ldd	r24, Y+5	; 0x05
    33fc:	9e 81       	ldd	r25, Y+6	; 0x06
    33fe:	9a 83       	std	Y+2, r25	; 0x02
    3400:	89 83       	std	Y+1, r24	; 0x01
    3402:	89 81       	ldd	r24, Y+1	; 0x01
    3404:	9a 81       	ldd	r25, Y+2	; 0x02
    3406:	01 97       	sbiw	r24, 0x01	; 1
    3408:	f1 f7       	brne	.-4      	; 0x3406 <H_LCD_void_SendData+0x2a0>
    340a:	9a 83       	std	Y+2, r25	; 0x02
    340c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_LOW);
    340e:	80 e0       	ldi	r24, 0x00	; 0
    3410:	62 e0       	ldi	r22, 0x02	; 2
    3412:	40 e0       	ldi	r20, 0x00	; 0
    3414:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>

#elif LCD_MODE_SELECT == LCD_8_BIT_MODE_SELECT  // 8bits configurations


#endif
}
    3418:	6d 96       	adiw	r28, 0x1d	; 29
    341a:	0f b6       	in	r0, 0x3f	; 63
    341c:	f8 94       	cli
    341e:	de bf       	out	0x3e, r29	; 62
    3420:	0f be       	out	0x3f, r0	; 63
    3422:	cd bf       	out	0x3d, r28	; 61
    3424:	cf 91       	pop	r28
    3426:	df 91       	pop	r29
    3428:	08 95       	ret

0000342a <H_LCD_void_SendString>:
void H_LCD_void_SendString(u8 *Copy_u8Str)
{
    342a:	df 93       	push	r29
    342c:	cf 93       	push	r28
    342e:	00 d0       	rcall	.+0      	; 0x3430 <H_LCD_void_SendString+0x6>
    3430:	cd b7       	in	r28, 0x3d	; 61
    3432:	de b7       	in	r29, 0x3e	; 62
    3434:	9a 83       	std	Y+2, r25	; 0x02
    3436:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Copy_u8Str)
    3438:	89 81       	ldd	r24, Y+1	; 0x01
    343a:	9a 81       	ldd	r25, Y+2	; 0x02
    343c:	00 97       	sbiw	r24, 0x00	; 0
    343e:	89 f0       	breq	.+34     	; 0x3462 <H_LCD_void_SendString+0x38>
    3440:	0b c0       	rjmp	.+22     	; 0x3458 <H_LCD_void_SendString+0x2e>
	}
	else
	{
		while(*Copy_u8Str)
		{
			H_LCD_void_SendData(*Copy_u8Str++);
    3442:	e9 81       	ldd	r30, Y+1	; 0x01
    3444:	fa 81       	ldd	r31, Y+2	; 0x02
    3446:	20 81       	ld	r18, Z
    3448:	89 81       	ldd	r24, Y+1	; 0x01
    344a:	9a 81       	ldd	r25, Y+2	; 0x02
    344c:	01 96       	adiw	r24, 0x01	; 1
    344e:	9a 83       	std	Y+2, r25	; 0x02
    3450:	89 83       	std	Y+1, r24	; 0x01
    3452:	82 2f       	mov	r24, r18
    3454:	0e 94 b3 18 	call	0x3166	; 0x3166 <H_LCD_void_SendData>
	{
		/* Nothing */
	}
	else
	{
		while(*Copy_u8Str)
    3458:	e9 81       	ldd	r30, Y+1	; 0x01
    345a:	fa 81       	ldd	r31, Y+2	; 0x02
    345c:	80 81       	ld	r24, Z
    345e:	88 23       	and	r24, r24
    3460:	81 f7       	brne	.-32     	; 0x3442 <H_LCD_void_SendString+0x18>
		{
			H_LCD_void_SendData(*Copy_u8Str++);
		}
	}
}
    3462:	0f 90       	pop	r0
    3464:	0f 90       	pop	r0
    3466:	cf 91       	pop	r28
    3468:	df 91       	pop	r29
    346a:	08 95       	ret

0000346c <H_LCD_void_gotoXY>:
void H_LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    346c:	df 93       	push	r29
    346e:	cf 93       	push	r28
    3470:	00 d0       	rcall	.+0      	; 0x3472 <H_LCD_void_gotoXY+0x6>
    3472:	00 d0       	rcall	.+0      	; 0x3474 <H_LCD_void_gotoXY+0x8>
    3474:	cd b7       	in	r28, 0x3d	; 61
    3476:	de b7       	in	r29, 0x3e	; 62
    3478:	89 83       	std	Y+1, r24	; 0x01
    347a:	6a 83       	std	Y+2, r22	; 0x02
	copy_u8Col--;
    347c:	8a 81       	ldd	r24, Y+2	; 0x02
    347e:	81 50       	subi	r24, 0x01	; 1
    3480:	8a 83       	std	Y+2, r24	; 0x02
	switch(copy_u8Row){
    3482:	89 81       	ldd	r24, Y+1	; 0x01
    3484:	28 2f       	mov	r18, r24
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	3c 83       	std	Y+4, r19	; 0x04
    348a:	2b 83       	std	Y+3, r18	; 0x03
    348c:	8b 81       	ldd	r24, Y+3	; 0x03
    348e:	9c 81       	ldd	r25, Y+4	; 0x04
    3490:	82 30       	cpi	r24, 0x02	; 2
    3492:	91 05       	cpc	r25, r1
    3494:	d9 f0       	breq	.+54     	; 0x34cc <H_LCD_void_gotoXY+0x60>
    3496:	2b 81       	ldd	r18, Y+3	; 0x03
    3498:	3c 81       	ldd	r19, Y+4	; 0x04
    349a:	23 30       	cpi	r18, 0x03	; 3
    349c:	31 05       	cpc	r19, r1
    349e:	34 f4       	brge	.+12     	; 0x34ac <H_LCD_void_gotoXY+0x40>
    34a0:	8b 81       	ldd	r24, Y+3	; 0x03
    34a2:	9c 81       	ldd	r25, Y+4	; 0x04
    34a4:	81 30       	cpi	r24, 0x01	; 1
    34a6:	91 05       	cpc	r25, r1
    34a8:	61 f0       	breq	.+24     	; 0x34c2 <H_LCD_void_gotoXY+0x56>
    34aa:	1e c0       	rjmp	.+60     	; 0x34e8 <H_LCD_void_gotoXY+0x7c>
    34ac:	2b 81       	ldd	r18, Y+3	; 0x03
    34ae:	3c 81       	ldd	r19, Y+4	; 0x04
    34b0:	23 30       	cpi	r18, 0x03	; 3
    34b2:	31 05       	cpc	r19, r1
    34b4:	81 f0       	breq	.+32     	; 0x34d6 <H_LCD_void_gotoXY+0x6a>
    34b6:	8b 81       	ldd	r24, Y+3	; 0x03
    34b8:	9c 81       	ldd	r25, Y+4	; 0x04
    34ba:	84 30       	cpi	r24, 0x04	; 4
    34bc:	91 05       	cpc	r25, r1
    34be:	81 f0       	breq	.+32     	; 0x34e0 <H_LCD_void_gotoXY+0x74>
    34c0:	13 c0       	rjmp	.+38     	; 0x34e8 <H_LCD_void_gotoXY+0x7c>
	case ROW1:
		H_LCD_void_SendCommand(0x80 + copy_u8Col);
    34c2:	8a 81       	ldd	r24, Y+2	; 0x02
    34c4:	80 58       	subi	r24, 0x80	; 128
    34c6:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <H_LCD_void_SendCommand>
    34ca:	0e c0       	rjmp	.+28     	; 0x34e8 <H_LCD_void_gotoXY+0x7c>
		break;
	case ROW2:
		H_LCD_void_SendCommand(0xc0 + copy_u8Col);
    34cc:	8a 81       	ldd	r24, Y+2	; 0x02
    34ce:	80 54       	subi	r24, 0x40	; 64
    34d0:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <H_LCD_void_SendCommand>
    34d4:	09 c0       	rjmp	.+18     	; 0x34e8 <H_LCD_void_gotoXY+0x7c>
		break;
	case ROW3:
		H_LCD_void_SendCommand(0x94 + copy_u8Col);
    34d6:	8a 81       	ldd	r24, Y+2	; 0x02
    34d8:	8c 56       	subi	r24, 0x6C	; 108
    34da:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <H_LCD_void_SendCommand>
    34de:	04 c0       	rjmp	.+8      	; 0x34e8 <H_LCD_void_gotoXY+0x7c>
		break;
	case ROW4:
		H_LCD_void_SendCommand(0xd4 + copy_u8Col);
    34e0:	8a 81       	ldd	r24, Y+2	; 0x02
    34e2:	8c 52       	subi	r24, 0x2C	; 44
    34e4:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <H_LCD_void_SendCommand>
		break;
	default:

		break;
	}
}
    34e8:	0f 90       	pop	r0
    34ea:	0f 90       	pop	r0
    34ec:	0f 90       	pop	r0
    34ee:	0f 90       	pop	r0
    34f0:	cf 91       	pop	r28
    34f2:	df 91       	pop	r29
    34f4:	08 95       	ret

000034f6 <H_LCD_void_sendIntNum>:



void H_LCD_void_sendIntNum(u32 copy_s32Num)
{
    34f6:	df 93       	push	r29
    34f8:	cf 93       	push	r28
    34fa:	cd b7       	in	r28, 0x3d	; 61
    34fc:	de b7       	in	r29, 0x3e	; 62
    34fe:	2f 97       	sbiw	r28, 0x0f	; 15
    3500:	0f b6       	in	r0, 0x3f	; 63
    3502:	f8 94       	cli
    3504:	de bf       	out	0x3e, r29	; 62
    3506:	0f be       	out	0x3f, r0	; 63
    3508:	cd bf       	out	0x3d, r28	; 61
    350a:	6c 87       	std	Y+12, r22	; 0x0c
    350c:	7d 87       	std	Y+13, r23	; 0x0d
    350e:	8e 87       	std	Y+14, r24	; 0x0e
    3510:	9f 87       	std	Y+15, r25	; 0x0f
//	temp_str[num_of_digits] = '\0';
//	sprintf((u8 *)temp_str, "%i", copy_s32Num);
//	H_LCD_void_SendString(temp_str);

	char buffer[11];  // A 32-bit number, maximum 10 digits
	itoa(copy_s32Num, buffer, 10);  // Convert the number to a string
    3512:	8c 85       	ldd	r24, Y+12	; 0x0c
    3514:	9d 85       	ldd	r25, Y+13	; 0x0d
    3516:	9e 01       	movw	r18, r28
    3518:	2f 5f       	subi	r18, 0xFF	; 255
    351a:	3f 4f       	sbci	r19, 0xFF	; 255
    351c:	b9 01       	movw	r22, r18
    351e:	4a e0       	ldi	r20, 0x0A	; 10
    3520:	50 e0       	ldi	r21, 0x00	; 0
    3522:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <itoa>
	H_LCD_void_SendString(buffer);
    3526:	ce 01       	movw	r24, r28
    3528:	01 96       	adiw	r24, 0x01	; 1
    352a:	0e 94 15 1a 	call	0x342a	; 0x342a <H_LCD_void_SendString>
}
    352e:	2f 96       	adiw	r28, 0x0f	; 15
    3530:	0f b6       	in	r0, 0x3f	; 63
    3532:	f8 94       	cli
    3534:	de bf       	out	0x3e, r29	; 62
    3536:	0f be       	out	0x3f, r0	; 63
    3538:	cd bf       	out	0x3d, r28	; 61
    353a:	cf 91       	pop	r28
    353c:	df 91       	pop	r29
    353e:	08 95       	ret

00003540 <H_LCD_void_Clear_Display>:



void H_LCD_void_Clear_Display(void)
{
    3540:	df 93       	push	r29
    3542:	cf 93       	push	r28
    3544:	cd b7       	in	r28, 0x3d	; 61
    3546:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_SendCommand(LCD_CLEAR);
    3548:	81 e0       	ldi	r24, 0x01	; 1
    354a:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <H_LCD_void_SendCommand>
}
    354e:	cf 91       	pop	r28
    3550:	df 91       	pop	r29
    3552:	08 95       	ret

00003554 <H_LCD_void_creatCustomChar>:



void H_LCD_void_creatCustomChar(const u8 * ArrPattern,u8 copy_u8charCode)
{
    3554:	df 93       	push	r29
    3556:	cf 93       	push	r28
    3558:	00 d0       	rcall	.+0      	; 0x355a <H_LCD_void_creatCustomChar+0x6>
    355a:	00 d0       	rcall	.+0      	; 0x355c <H_LCD_void_creatCustomChar+0x8>
    355c:	cd b7       	in	r28, 0x3d	; 61
    355e:	de b7       	in	r29, 0x3e	; 62
    3560:	9b 83       	std	Y+3, r25	; 0x03
    3562:	8a 83       	std	Y+2, r24	; 0x02
    3564:	6c 83       	std	Y+4, r22	; 0x04
	u8 lcd_counter = 0;
    3566:	19 82       	std	Y+1, r1	; 0x01
	if(NULL != ArrPattern)
    3568:	8a 81       	ldd	r24, Y+2	; 0x02
    356a:	9b 81       	ldd	r25, Y+3	; 0x03
    356c:	00 97       	sbiw	r24, 0x00	; 0
    356e:	b1 f0       	breq	.+44     	; 0x359c <H_LCD_void_creatCustomChar+0x48>
	{
		H_LCD_void_SendCommand(LCD_CGRAM_START);
    3570:	80 e4       	ldi	r24, 0x40	; 64
    3572:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <H_LCD_void_SendCommand>
		for(lcd_counter = 0; lcd_counter <= 7; ++lcd_counter)
    3576:	19 82       	std	Y+1, r1	; 0x01
    3578:	0e c0       	rjmp	.+28     	; 0x3596 <H_LCD_void_creatCustomChar+0x42>
		{
			H_LCD_void_SendData(ArrPattern[lcd_counter]);
    357a:	89 81       	ldd	r24, Y+1	; 0x01
    357c:	28 2f       	mov	r18, r24
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	8a 81       	ldd	r24, Y+2	; 0x02
    3582:	9b 81       	ldd	r25, Y+3	; 0x03
    3584:	fc 01       	movw	r30, r24
    3586:	e2 0f       	add	r30, r18
    3588:	f3 1f       	adc	r31, r19
    358a:	80 81       	ld	r24, Z
    358c:	0e 94 b3 18 	call	0x3166	; 0x3166 <H_LCD_void_SendData>
{
	u8 lcd_counter = 0;
	if(NULL != ArrPattern)
	{
		H_LCD_void_SendCommand(LCD_CGRAM_START);
		for(lcd_counter = 0; lcd_counter <= 7; ++lcd_counter)
    3590:	89 81       	ldd	r24, Y+1	; 0x01
    3592:	8f 5f       	subi	r24, 0xFF	; 255
    3594:	89 83       	std	Y+1, r24	; 0x01
    3596:	89 81       	ldd	r24, Y+1	; 0x01
    3598:	88 30       	cpi	r24, 0x08	; 8
    359a:	78 f3       	brcs	.-34     	; 0x357a <H_LCD_void_creatCustomChar+0x26>
		{
			H_LCD_void_SendData(ArrPattern[lcd_counter]);
		}
	}
	else{/* Nothing */}
}
    359c:	0f 90       	pop	r0
    359e:	0f 90       	pop	r0
    35a0:	0f 90       	pop	r0
    35a2:	0f 90       	pop	r0
    35a4:	cf 91       	pop	r28
    35a6:	df 91       	pop	r29
    35a8:	08 95       	ret

000035aa <H_LCD_void_displayCustomChar>:

void H_LCD_void_displayCustomChar(u8 copy_u8charCode)
{
    35aa:	df 93       	push	r29
    35ac:	cf 93       	push	r28
    35ae:	0f 92       	push	r0
    35b0:	cd b7       	in	r28, 0x3d	; 61
    35b2:	de b7       	in	r29, 0x3e	; 62
    35b4:	89 83       	std	Y+1, r24	; 0x01
	H_LCD_void_SendData(copy_u8charCode);
    35b6:	89 81       	ldd	r24, Y+1	; 0x01
    35b8:	0e 94 b3 18 	call	0x3166	; 0x3166 <H_LCD_void_SendData>
}
    35bc:	0f 90       	pop	r0
    35be:	cf 91       	pop	r28
    35c0:	df 91       	pop	r29
    35c2:	08 95       	ret

000035c4 <Timer1_ovf_isr>:



/* ------------------------------ Timer1 Overflow ISR ------------------------- */
void Timer1_ovf_isr(void)
{
    35c4:	df 93       	push	r29
    35c6:	cf 93       	push	r28
    35c8:	cd b7       	in	r28, 0x3d	; 61
    35ca:	de b7       	in	r29, 0x3e	; 62
	ovf_counter++;
    35cc:	80 91 89 02 	lds	r24, 0x0289
    35d0:	90 91 8a 02 	lds	r25, 0x028A
    35d4:	a0 91 8b 02 	lds	r26, 0x028B
    35d8:	b0 91 8c 02 	lds	r27, 0x028C
    35dc:	01 96       	adiw	r24, 0x01	; 1
    35de:	a1 1d       	adc	r26, r1
    35e0:	b1 1d       	adc	r27, r1
    35e2:	80 93 89 02 	sts	0x0289, r24
    35e6:	90 93 8a 02 	sts	0x028A, r25
    35ea:	a0 93 8b 02 	sts	0x028B, r26
    35ee:	b0 93 8c 02 	sts	0x028C, r27
}
    35f2:	cf 91       	pop	r28
    35f4:	df 91       	pop	r29
    35f6:	08 95       	ret

000035f8 <Timer1_icu_isr>:
/* ---------------------------------------------------------------------------- */


/* ------------------------------ ICU ISR ------------------------------------- */
void Timer1_icu_isr(void)
{
    35f8:	df 93       	push	r29
    35fa:	cf 93       	push	r28
    35fc:	0f 92       	push	r0
    35fe:	cd b7       	in	r28, 0x3d	; 61
    3600:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
    3602:	19 82       	std	Y+1, r1	; 0x01
	if(state_machine_counter == 0) // to detect rising edge
    3604:	80 91 91 02 	lds	r24, 0x0291
    3608:	88 23       	and	r24, r24
    360a:	91 f4       	brne	.+36     	; 0x3630 <Timer1_icu_isr+0x38>
	{
		ret_status = Timer1_ICU_takeReading(&reading_1); // take value of current TCNT1 register
    360c:	82 e9       	ldi	r24, 0x92	; 146
    360e:	92 e0       	ldi	r25, 0x02	; 2
    3610:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <Timer1_ICU_takeReading>
    3614:	89 83       	std	Y+1, r24	; 0x01

		ret_status = Timer1_ICU_SetTrigger(TIMER1_INPUT_CAPTURE_FALLING_EDGE);
    3616:	80 e0       	ldi	r24, 0x00	; 0
    3618:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer1_ICU_SetTrigger>
    361c:	89 83       	std	Y+1, r24	; 0x01

		ovf_counter = 0;
    361e:	10 92 89 02 	sts	0x0289, r1
    3622:	10 92 8a 02 	sts	0x028A, r1
    3626:	10 92 8b 02 	sts	0x028B, r1
    362a:	10 92 8c 02 	sts	0x028C, r1
    362e:	1f c0       	rjmp	.+62     	; 0x366e <Timer1_icu_isr+0x76>
	}
	else if(state_machine_counter == 1) // to detect falling edge
    3630:	80 91 91 02 	lds	r24, 0x0291
    3634:	81 30       	cpi	r24, 0x01	; 1
    3636:	d9 f4       	brne	.+54     	; 0x366e <Timer1_icu_isr+0x76>
	{
		ret_status = Timer1_ICU_takeReading(&reading_2); // take value of current TCNT1 register
    3638:	86 e9       	ldi	r24, 0x96	; 150
    363a:	92 e0       	ldi	r25, 0x02	; 2
    363c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <Timer1_ICU_takeReading>
    3640:	89 83       	std	Y+1, r24	; 0x01
		ovf = ovf_counter;
    3642:	80 91 89 02 	lds	r24, 0x0289
    3646:	90 91 8a 02 	lds	r25, 0x028A
    364a:	a0 91 8b 02 	lds	r26, 0x028B
    364e:	b0 91 8c 02 	lds	r27, 0x028C
    3652:	80 93 8d 02 	sts	0x028D, r24
    3656:	90 93 8e 02 	sts	0x028E, r25
    365a:	a0 93 8f 02 	sts	0x028F, r26
    365e:	b0 93 90 02 	sts	0x0290, r27
		ret_status = Timer1_OVF_IntDisable();
    3662:	0e 94 be 08 	call	0x117c	; 0x117c <Timer1_OVF_IntDisable>
    3666:	89 83       	std	Y+1, r24	; 0x01
		ret_status = Timer1_ICU_IntDisable();
    3668:	0e 94 ee 08 	call	0x11dc	; 0x11dc <Timer1_ICU_IntDisable>
    366c:	89 83       	std	Y+1, r24	; 0x01
	}
	state_machine_counter++;
    366e:	80 91 91 02 	lds	r24, 0x0291
    3672:	8f 5f       	subi	r24, 0xFF	; 255
    3674:	80 93 91 02 	sts	0x0291, r24
}
    3678:	0f 90       	pop	r0
    367a:	cf 91       	pop	r28
    367c:	df 91       	pop	r29
    367e:	08 95       	ret

00003680 <Ultrasonic_Init>:
/* ---------------------------------------------------------------------------- */



void Ultrasonic_Init(u8 Trig_Pin_Port, u8 Trig_Pin_PinNum, u8 Echo_Pin_Port, u8 Echo_Pin_Num)
{
    3680:	df 93       	push	r29
    3682:	cf 93       	push	r28
    3684:	cd b7       	in	r28, 0x3d	; 61
    3686:	de b7       	in	r29, 0x3e	; 62
    3688:	64 97       	sbiw	r28, 0x14	; 20
    368a:	0f b6       	in	r0, 0x3f	; 63
    368c:	f8 94       	cli
    368e:	de bf       	out	0x3e, r29	; 62
    3690:	0f be       	out	0x3f, r0	; 63
    3692:	cd bf       	out	0x3d, r28	; 61
    3694:	8c 87       	std	Y+12, r24	; 0x0c
    3696:	6d 87       	std	Y+13, r22	; 0x0d
    3698:	4e 87       	std	Y+14, r20	; 0x0e
    369a:	2f 87       	std	Y+15, r18	; 0x0f
	Error_Status_t ret_status = NO_ERROR;
    369c:	19 82       	std	Y+1, r1	; 0x01

	/* ---------------------------- Initialize Echo pin and Trig pin directions --------*/
	DIO_voidSetPinDirection(Trig_Pin_Port, Trig_Pin_PinNum, GPIO_DIRECTION_OUTPUT); // TRIG pin
    369e:	8c 85       	ldd	r24, Y+12	; 0x0c
    36a0:	6d 85       	ldd	r22, Y+13	; 0x0d
    36a2:	41 e0       	ldi	r20, 0x01	; 1
    36a4:	0e 94 29 13 	call	0x2652	; 0x2652 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(Echo_Pin_Port, Echo_Pin_Num, GPIO_DIRECTION_INPUT);  // ICU pin (ECHO pin)
    36a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    36aa:	6f 85       	ldd	r22, Y+15	; 0x0f
    36ac:	40 e0       	ldi	r20, 0x00	; 0
    36ae:	0e 94 29 13 	call	0x2652	; 0x2652 <DIO_voidSetPinDirection>
			.ctc_mode_B_cfg = TIMER1_NON_PWM_NORMAL_PORT,
			.icu_trigger = TIMER1_INPUT_CAPTURE_RISING_EDGE, // Trigger On rising edge
			.timer1_ovf_isr = Timer1_ovf_isr, // Set CallBack for Timer1 overflow
			.timer1_capt_isr = Timer1_icu_isr, // Set CallBack for ICU of Timer1
			.timer1_compA_isr = NULL,
			.timer1_compB_isr = NULL};
    36b2:	ce 01       	movw	r24, r28
    36b4:	02 96       	adiw	r24, 0x02	; 2
    36b6:	99 8b       	std	Y+17, r25	; 0x11
    36b8:	88 8b       	std	Y+16, r24	; 0x10
    36ba:	ea e3       	ldi	r30, 0x3A	; 58
    36bc:	f2 e0       	ldi	r31, 0x02	; 2
    36be:	fb 8b       	std	Y+19, r31	; 0x13
    36c0:	ea 8b       	std	Y+18, r30	; 0x12
    36c2:	fa e0       	ldi	r31, 0x0A	; 10
    36c4:	fc 8b       	std	Y+20, r31	; 0x14
    36c6:	ea 89       	ldd	r30, Y+18	; 0x12
    36c8:	fb 89       	ldd	r31, Y+19	; 0x13
    36ca:	00 80       	ld	r0, Z
    36cc:	8a 89       	ldd	r24, Y+18	; 0x12
    36ce:	9b 89       	ldd	r25, Y+19	; 0x13
    36d0:	01 96       	adiw	r24, 0x01	; 1
    36d2:	9b 8b       	std	Y+19, r25	; 0x13
    36d4:	8a 8b       	std	Y+18, r24	; 0x12
    36d6:	e8 89       	ldd	r30, Y+16	; 0x10
    36d8:	f9 89       	ldd	r31, Y+17	; 0x11
    36da:	00 82       	st	Z, r0
    36dc:	88 89       	ldd	r24, Y+16	; 0x10
    36de:	99 89       	ldd	r25, Y+17	; 0x11
    36e0:	01 96       	adiw	r24, 0x01	; 1
    36e2:	99 8b       	std	Y+17, r25	; 0x11
    36e4:	88 8b       	std	Y+16, r24	; 0x10
    36e6:	9c 89       	ldd	r25, Y+20	; 0x14
    36e8:	91 50       	subi	r25, 0x01	; 1
    36ea:	9c 8b       	std	Y+20, r25	; 0x14
    36ec:	ec 89       	ldd	r30, Y+20	; 0x14
    36ee:	ee 23       	and	r30, r30
    36f0:	51 f7       	brne	.-44     	; 0x36c6 <Ultrasonic_Init+0x46>

	/* ---------------------------------- Initialize Timer1 ----------------------------- */
	ret_status = Timer1_Init(&timer1_obj);
    36f2:	ce 01       	movw	r24, r28
    36f4:	02 96       	adiw	r24, 0x02	; 2
    36f6:	0e 94 17 07 	call	0xe2e	; 0xe2e <Timer1_Init>
    36fa:	89 83       	std	Y+1, r24	; 0x01

	/* ---------------------------------- Enable Overflow Interrupt of Timer1 ----------- */
	ret_status = Timer1_OVF_IntEnable();
    36fc:	0e 94 7e 08 	call	0x10fc	; 0x10fc <Timer1_OVF_IntEnable>
    3700:	89 83       	std	Y+1, r24	; 0x01
	/* ---------------------------------- Enable ICU Interrupt of Timer1 ---------------- */
	ret_status = Timer1_ICU_IntEnable();
    3702:	0e 94 ae 08 	call	0x115c	; 0x115c <Timer1_ICU_IntEnable>
    3706:	89 83       	std	Y+1, r24	; 0x01

	/* ----------------------------------- Global Interrupt Enable ---------------------- */
	GIE_Enable();
    3708:	ef e5       	ldi	r30, 0x5F	; 95
    370a:	f0 e0       	ldi	r31, 0x00	; 0
    370c:	80 81       	ld	r24, Z
    370e:	80 68       	ori	r24, 0x80	; 128
    3710:	80 83       	st	Z, r24

	/* ---------------------------------- Set CallBacks --------------------------------- */
	ret_status = Timer1_OVF_setCallBack(&timer1_obj);
    3712:	ce 01       	movw	r24, r28
    3714:	02 96       	adiw	r24, 0x02	; 2
    3716:	0e 94 fe 08 	call	0x11fc	; 0x11fc <Timer1_OVF_setCallBack>
    371a:	89 83       	std	Y+1, r24	; 0x01
	ret_status = Timer1_ICU_setCallBack(&timer1_obj);
    371c:	ce 01       	movw	r24, r28
    371e:	02 96       	adiw	r24, 0x02	; 2
    3720:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <Timer1_ICU_setCallBack>
    3724:	89 83       	std	Y+1, r24	; 0x01

	/* ---------------------------------- Start Timer1 ---------------------------------- */
	ret_status = Timer1_start(&timer1_obj);
    3726:	ce 01       	movw	r24, r28
    3728:	02 96       	adiw	r24, 0x02	; 2
    372a:	0e 94 df 07 	call	0xfbe	; 0xfbe <Timer1_start>
    372e:	89 83       	std	Y+1, r24	; 0x01
}
    3730:	64 96       	adiw	r28, 0x14	; 20
    3732:	0f b6       	in	r0, 0x3f	; 63
    3734:	f8 94       	cli
    3736:	de bf       	out	0x3e, r29	; 62
    3738:	0f be       	out	0x3f, r0	; 63
    373a:	cd bf       	out	0x3d, r28	; 61
    373c:	cf 91       	pop	r28
    373e:	df 91       	pop	r29
    3740:	08 95       	ret

00003742 <Ultrasonic_SetTrigger>:



void Ultrasonic_SetTrigger(u8 Trig_Pin_Port, u8 Trig_Pin_Num)
{
    3742:	df 93       	push	r29
    3744:	cf 93       	push	r28
    3746:	cd b7       	in	r28, 0x3d	; 61
    3748:	de b7       	in	r29, 0x3e	; 62
    374a:	6a 97       	sbiw	r28, 0x1a	; 26
    374c:	0f b6       	in	r0, 0x3f	; 63
    374e:	f8 94       	cli
    3750:	de bf       	out	0x3e, r29	; 62
    3752:	0f be       	out	0x3f, r0	; 63
    3754:	cd bf       	out	0x3d, r28	; 61
    3756:	89 8f       	std	Y+25, r24	; 0x19
    3758:	6a 8f       	std	Y+26, r22	; 0x1a
	DIO_voidSetPinValue(Trig_Pin_Port, Trig_Pin_Num, GPIO_HIGH);
    375a:	89 8d       	ldd	r24, Y+25	; 0x19
    375c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    375e:	41 e0       	ldi	r20, 0x01	; 1
    3760:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
    3764:	80 e0       	ldi	r24, 0x00	; 0
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	a0 e2       	ldi	r26, 0x20	; 32
    376a:	b1 e4       	ldi	r27, 0x41	; 65
    376c:	8d 8b       	std	Y+21, r24	; 0x15
    376e:	9e 8b       	std	Y+22, r25	; 0x16
    3770:	af 8b       	std	Y+23, r26	; 0x17
    3772:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3774:	6d 89       	ldd	r22, Y+21	; 0x15
    3776:	7e 89       	ldd	r23, Y+22	; 0x16
    3778:	8f 89       	ldd	r24, Y+23	; 0x17
    377a:	98 8d       	ldd	r25, Y+24	; 0x18
    377c:	2b ea       	ldi	r18, 0xAB	; 171
    377e:	3a ea       	ldi	r19, 0xAA	; 170
    3780:	4a ea       	ldi	r20, 0xAA	; 170
    3782:	50 e4       	ldi	r21, 0x40	; 64
    3784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3788:	dc 01       	movw	r26, r24
    378a:	cb 01       	movw	r24, r22
    378c:	89 8b       	std	Y+17, r24	; 0x11
    378e:	9a 8b       	std	Y+18, r25	; 0x12
    3790:	ab 8b       	std	Y+19, r26	; 0x13
    3792:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3794:	69 89       	ldd	r22, Y+17	; 0x11
    3796:	7a 89       	ldd	r23, Y+18	; 0x12
    3798:	8b 89       	ldd	r24, Y+19	; 0x13
    379a:	9c 89       	ldd	r25, Y+20	; 0x14
    379c:	20 e0       	ldi	r18, 0x00	; 0
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	40 e8       	ldi	r20, 0x80	; 128
    37a2:	5f e3       	ldi	r21, 0x3F	; 63
    37a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37a8:	88 23       	and	r24, r24
    37aa:	1c f4       	brge	.+6      	; 0x37b2 <Ultrasonic_SetTrigger+0x70>
		__ticks = 1;
    37ac:	81 e0       	ldi	r24, 0x01	; 1
    37ae:	88 8b       	std	Y+16, r24	; 0x10
    37b0:	91 c0       	rjmp	.+290    	; 0x38d4 <Ultrasonic_SetTrigger+0x192>
	else if (__tmp > 255)
    37b2:	69 89       	ldd	r22, Y+17	; 0x11
    37b4:	7a 89       	ldd	r23, Y+18	; 0x12
    37b6:	8b 89       	ldd	r24, Y+19	; 0x13
    37b8:	9c 89       	ldd	r25, Y+20	; 0x14
    37ba:	20 e0       	ldi	r18, 0x00	; 0
    37bc:	30 e0       	ldi	r19, 0x00	; 0
    37be:	4f e7       	ldi	r20, 0x7F	; 127
    37c0:	53 e4       	ldi	r21, 0x43	; 67
    37c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37c6:	18 16       	cp	r1, r24
    37c8:	0c f0       	brlt	.+2      	; 0x37cc <Ultrasonic_SetTrigger+0x8a>
    37ca:	7b c0       	rjmp	.+246    	; 0x38c2 <Ultrasonic_SetTrigger+0x180>
	{
		_delay_ms(__us / 1000.0);
    37cc:	6d 89       	ldd	r22, Y+21	; 0x15
    37ce:	7e 89       	ldd	r23, Y+22	; 0x16
    37d0:	8f 89       	ldd	r24, Y+23	; 0x17
    37d2:	98 8d       	ldd	r25, Y+24	; 0x18
    37d4:	20 e0       	ldi	r18, 0x00	; 0
    37d6:	30 e0       	ldi	r19, 0x00	; 0
    37d8:	4a e7       	ldi	r20, 0x7A	; 122
    37da:	54 e4       	ldi	r21, 0x44	; 68
    37dc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    37e0:	dc 01       	movw	r26, r24
    37e2:	cb 01       	movw	r24, r22
    37e4:	8c 87       	std	Y+12, r24	; 0x0c
    37e6:	9d 87       	std	Y+13, r25	; 0x0d
    37e8:	ae 87       	std	Y+14, r26	; 0x0e
    37ea:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ec:	6c 85       	ldd	r22, Y+12	; 0x0c
    37ee:	7d 85       	ldd	r23, Y+13	; 0x0d
    37f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    37f2:	9f 85       	ldd	r25, Y+15	; 0x0f
    37f4:	20 e0       	ldi	r18, 0x00	; 0
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	4a e7       	ldi	r20, 0x7A	; 122
    37fa:	55 e4       	ldi	r21, 0x45	; 69
    37fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3800:	dc 01       	movw	r26, r24
    3802:	cb 01       	movw	r24, r22
    3804:	88 87       	std	Y+8, r24	; 0x08
    3806:	99 87       	std	Y+9, r25	; 0x09
    3808:	aa 87       	std	Y+10, r26	; 0x0a
    380a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    380c:	68 85       	ldd	r22, Y+8	; 0x08
    380e:	79 85       	ldd	r23, Y+9	; 0x09
    3810:	8a 85       	ldd	r24, Y+10	; 0x0a
    3812:	9b 85       	ldd	r25, Y+11	; 0x0b
    3814:	20 e0       	ldi	r18, 0x00	; 0
    3816:	30 e0       	ldi	r19, 0x00	; 0
    3818:	40 e8       	ldi	r20, 0x80	; 128
    381a:	5f e3       	ldi	r21, 0x3F	; 63
    381c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3820:	88 23       	and	r24, r24
    3822:	2c f4       	brge	.+10     	; 0x382e <Ultrasonic_SetTrigger+0xec>
		__ticks = 1;
    3824:	81 e0       	ldi	r24, 0x01	; 1
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	9f 83       	std	Y+7, r25	; 0x07
    382a:	8e 83       	std	Y+6, r24	; 0x06
    382c:	3f c0       	rjmp	.+126    	; 0x38ac <Ultrasonic_SetTrigger+0x16a>
	else if (__tmp > 65535)
    382e:	68 85       	ldd	r22, Y+8	; 0x08
    3830:	79 85       	ldd	r23, Y+9	; 0x09
    3832:	8a 85       	ldd	r24, Y+10	; 0x0a
    3834:	9b 85       	ldd	r25, Y+11	; 0x0b
    3836:	20 e0       	ldi	r18, 0x00	; 0
    3838:	3f ef       	ldi	r19, 0xFF	; 255
    383a:	4f e7       	ldi	r20, 0x7F	; 127
    383c:	57 e4       	ldi	r21, 0x47	; 71
    383e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3842:	18 16       	cp	r1, r24
    3844:	4c f5       	brge	.+82     	; 0x3898 <Ultrasonic_SetTrigger+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3846:	6c 85       	ldd	r22, Y+12	; 0x0c
    3848:	7d 85       	ldd	r23, Y+13	; 0x0d
    384a:	8e 85       	ldd	r24, Y+14	; 0x0e
    384c:	9f 85       	ldd	r25, Y+15	; 0x0f
    384e:	20 e0       	ldi	r18, 0x00	; 0
    3850:	30 e0       	ldi	r19, 0x00	; 0
    3852:	40 e2       	ldi	r20, 0x20	; 32
    3854:	51 e4       	ldi	r21, 0x41	; 65
    3856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    385a:	dc 01       	movw	r26, r24
    385c:	cb 01       	movw	r24, r22
    385e:	bc 01       	movw	r22, r24
    3860:	cd 01       	movw	r24, r26
    3862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3866:	dc 01       	movw	r26, r24
    3868:	cb 01       	movw	r24, r22
    386a:	9f 83       	std	Y+7, r25	; 0x07
    386c:	8e 83       	std	Y+6, r24	; 0x06
    386e:	0f c0       	rjmp	.+30     	; 0x388e <Ultrasonic_SetTrigger+0x14c>
    3870:	80 e9       	ldi	r24, 0x90	; 144
    3872:	91 e0       	ldi	r25, 0x01	; 1
    3874:	9d 83       	std	Y+5, r25	; 0x05
    3876:	8c 83       	std	Y+4, r24	; 0x04
    3878:	8c 81       	ldd	r24, Y+4	; 0x04
    387a:	9d 81       	ldd	r25, Y+5	; 0x05
    387c:	01 97       	sbiw	r24, 0x01	; 1
    387e:	f1 f7       	brne	.-4      	; 0x387c <Ultrasonic_SetTrigger+0x13a>
    3880:	9d 83       	std	Y+5, r25	; 0x05
    3882:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3884:	8e 81       	ldd	r24, Y+6	; 0x06
    3886:	9f 81       	ldd	r25, Y+7	; 0x07
    3888:	01 97       	sbiw	r24, 0x01	; 1
    388a:	9f 83       	std	Y+7, r25	; 0x07
    388c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    388e:	8e 81       	ldd	r24, Y+6	; 0x06
    3890:	9f 81       	ldd	r25, Y+7	; 0x07
    3892:	00 97       	sbiw	r24, 0x00	; 0
    3894:	69 f7       	brne	.-38     	; 0x3870 <Ultrasonic_SetTrigger+0x12e>
    3896:	24 c0       	rjmp	.+72     	; 0x38e0 <Ultrasonic_SetTrigger+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3898:	68 85       	ldd	r22, Y+8	; 0x08
    389a:	79 85       	ldd	r23, Y+9	; 0x09
    389c:	8a 85       	ldd	r24, Y+10	; 0x0a
    389e:	9b 85       	ldd	r25, Y+11	; 0x0b
    38a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a4:	dc 01       	movw	r26, r24
    38a6:	cb 01       	movw	r24, r22
    38a8:	9f 83       	std	Y+7, r25	; 0x07
    38aa:	8e 83       	std	Y+6, r24	; 0x06
    38ac:	8e 81       	ldd	r24, Y+6	; 0x06
    38ae:	9f 81       	ldd	r25, Y+7	; 0x07
    38b0:	9b 83       	std	Y+3, r25	; 0x03
    38b2:	8a 83       	std	Y+2, r24	; 0x02
    38b4:	8a 81       	ldd	r24, Y+2	; 0x02
    38b6:	9b 81       	ldd	r25, Y+3	; 0x03
    38b8:	01 97       	sbiw	r24, 0x01	; 1
    38ba:	f1 f7       	brne	.-4      	; 0x38b8 <Ultrasonic_SetTrigger+0x176>
    38bc:	9b 83       	std	Y+3, r25	; 0x03
    38be:	8a 83       	std	Y+2, r24	; 0x02
    38c0:	0f c0       	rjmp	.+30     	; 0x38e0 <Ultrasonic_SetTrigger+0x19e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    38c2:	69 89       	ldd	r22, Y+17	; 0x11
    38c4:	7a 89       	ldd	r23, Y+18	; 0x12
    38c6:	8b 89       	ldd	r24, Y+19	; 0x13
    38c8:	9c 89       	ldd	r25, Y+20	; 0x14
    38ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ce:	dc 01       	movw	r26, r24
    38d0:	cb 01       	movw	r24, r22
    38d2:	88 8b       	std	Y+16, r24	; 0x10
    38d4:	88 89       	ldd	r24, Y+16	; 0x10
    38d6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    38d8:	89 81       	ldd	r24, Y+1	; 0x01
    38da:	8a 95       	dec	r24
    38dc:	f1 f7       	brne	.-4      	; 0x38da <Ultrasonic_SetTrigger+0x198>
    38de:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_voidSetPinValue(Trig_Pin_Port, Trig_Pin_Num, GPIO_LOW);
    38e0:	89 8d       	ldd	r24, Y+25	; 0x19
    38e2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    38e4:	40 e0       	ldi	r20, 0x00	; 0
    38e6:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
}
    38ea:	6a 96       	adiw	r28, 0x1a	; 26
    38ec:	0f b6       	in	r0, 0x3f	; 63
    38ee:	f8 94       	cli
    38f0:	de bf       	out	0x3e, r29	; 62
    38f2:	0f be       	out	0x3f, r0	; 63
    38f4:	cd bf       	out	0x3d, r28	; 61
    38f6:	cf 91       	pop	r28
    38f8:	df 91       	pop	r29
    38fa:	08 95       	ret

000038fc <Ultrasonic_Read_Distance>:



void Ultrasonic_Read_Distance(u16 *distance)
{
    38fc:	ef 92       	push	r14
    38fe:	ff 92       	push	r15
    3900:	0f 93       	push	r16
    3902:	1f 93       	push	r17
    3904:	df 93       	push	r29
    3906:	cf 93       	push	r28
    3908:	cd b7       	in	r28, 0x3d	; 61
    390a:	de b7       	in	r29, 0x3e	; 62
    390c:	65 97       	sbiw	r28, 0x15	; 21
    390e:	0f b6       	in	r0, 0x3f	; 63
    3910:	f8 94       	cli
    3912:	de bf       	out	0x3e, r29	; 62
    3914:	0f be       	out	0x3f, r0	; 63
    3916:	cd bf       	out	0x3d, r28	; 61
    3918:	9d 8b       	std	Y+21, r25	; 0x15
    391a:	8c 8b       	std	Y+20, r24	; 0x14
	u32 counts = 0;
    391c:	18 8a       	std	Y+16, r1	; 0x10
    391e:	19 8a       	std	Y+17, r1	; 0x11
    3920:	1a 8a       	std	Y+18, r1	; 0x12
    3922:	1b 8a       	std	Y+19, r1	; 0x13
	Error_Status_t ret_status = NO_ERROR;
    3924:	1f 86       	std	Y+15, r1	; 0x0f

	if(state_machine_counter == 2)
    3926:	80 91 91 02 	lds	r24, 0x0291
    392a:	82 30       	cpi	r24, 0x02	; 2
    392c:	09 f0       	breq	.+2      	; 0x3930 <Ultrasonic_Read_Distance+0x34>
    392e:	e6 c0       	rjmp	.+460    	; 0x3afc <Ultrasonic_Read_Distance+0x200>
	{
		state_machine_counter = 0;
    3930:	10 92 91 02 	sts	0x0291, r1
		counts = ((u32)reading_2 + (u32)(ovf * 65535)) - (u32)reading_1;
    3934:	80 91 8d 02 	lds	r24, 0x028D
    3938:	90 91 8e 02 	lds	r25, 0x028E
    393c:	a0 91 8f 02 	lds	r26, 0x028F
    3940:	b0 91 90 02 	lds	r27, 0x0290
    3944:	2f ef       	ldi	r18, 0xFF	; 255
    3946:	3f ef       	ldi	r19, 0xFF	; 255
    3948:	40 e0       	ldi	r20, 0x00	; 0
    394a:	50 e0       	ldi	r21, 0x00	; 0
    394c:	bc 01       	movw	r22, r24
    394e:	cd 01       	movw	r24, r26
    3950:	0e 94 60 2f 	call	0x5ec0	; 0x5ec0 <__mulsi3>
    3954:	9b 01       	movw	r18, r22
    3956:	ac 01       	movw	r20, r24
    3958:	80 91 96 02 	lds	r24, 0x0296
    395c:	90 91 97 02 	lds	r25, 0x0297
    3960:	a0 91 98 02 	lds	r26, 0x0298
    3964:	b0 91 99 02 	lds	r27, 0x0299
    3968:	28 0f       	add	r18, r24
    396a:	39 1f       	adc	r19, r25
    396c:	4a 1f       	adc	r20, r26
    396e:	5b 1f       	adc	r21, r27
    3970:	80 91 92 02 	lds	r24, 0x0292
    3974:	90 91 93 02 	lds	r25, 0x0293
    3978:	a0 91 94 02 	lds	r26, 0x0294
    397c:	b0 91 95 02 	lds	r27, 0x0295
    3980:	79 01       	movw	r14, r18
    3982:	8a 01       	movw	r16, r20
    3984:	e8 1a       	sub	r14, r24
    3986:	f9 0a       	sbc	r15, r25
    3988:	0a 0b       	sbc	r16, r26
    398a:	1b 0b       	sbc	r17, r27
    398c:	d8 01       	movw	r26, r16
    398e:	c7 01       	movw	r24, r14
    3990:	88 8b       	std	Y+16, r24	; 0x10
    3992:	99 8b       	std	Y+17, r25	; 0x11
    3994:	aa 8b       	std	Y+18, r26	; 0x12
    3996:	bb 8b       	std	Y+19, r27	; 0x13
		*distance = counts / 7.37;
    3998:	68 89       	ldd	r22, Y+16	; 0x10
    399a:	79 89       	ldd	r23, Y+17	; 0x11
    399c:	8a 89       	ldd	r24, Y+18	; 0x12
    399e:	9b 89       	ldd	r25, Y+19	; 0x13
    39a0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    39a4:	dc 01       	movw	r26, r24
    39a6:	cb 01       	movw	r24, r22
    39a8:	bc 01       	movw	r22, r24
    39aa:	cd 01       	movw	r24, r26
    39ac:	2a e0       	ldi	r18, 0x0A	; 10
    39ae:	37 ed       	ldi	r19, 0xD7	; 215
    39b0:	4b ee       	ldi	r20, 0xEB	; 235
    39b2:	50 e4       	ldi	r21, 0x40	; 64
    39b4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    39b8:	dc 01       	movw	r26, r24
    39ba:	cb 01       	movw	r24, r22
    39bc:	bc 01       	movw	r22, r24
    39be:	cd 01       	movw	r24, r26
    39c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c4:	dc 01       	movw	r26, r24
    39c6:	cb 01       	movw	r24, r22
    39c8:	ec 89       	ldd	r30, Y+20	; 0x14
    39ca:	fd 89       	ldd	r31, Y+21	; 0x15
    39cc:	91 83       	std	Z+1, r25	; 0x01
    39ce:	80 83       	st	Z, r24
    39d0:	80 e0       	ldi	r24, 0x00	; 0
    39d2:	90 e0       	ldi	r25, 0x00	; 0
    39d4:	a6 e9       	ldi	r26, 0x96	; 150
    39d6:	b3 e4       	ldi	r27, 0x43	; 67
    39d8:	8b 87       	std	Y+11, r24	; 0x0b
    39da:	9c 87       	std	Y+12, r25	; 0x0c
    39dc:	ad 87       	std	Y+13, r26	; 0x0d
    39de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    39e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    39e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    39e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    39e8:	20 e0       	ldi	r18, 0x00	; 0
    39ea:	30 e0       	ldi	r19, 0x00	; 0
    39ec:	4a e7       	ldi	r20, 0x7A	; 122
    39ee:	55 e4       	ldi	r21, 0x45	; 69
    39f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39f4:	dc 01       	movw	r26, r24
    39f6:	cb 01       	movw	r24, r22
    39f8:	8f 83       	std	Y+7, r24	; 0x07
    39fa:	98 87       	std	Y+8, r25	; 0x08
    39fc:	a9 87       	std	Y+9, r26	; 0x09
    39fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a00:	6f 81       	ldd	r22, Y+7	; 0x07
    3a02:	78 85       	ldd	r23, Y+8	; 0x08
    3a04:	89 85       	ldd	r24, Y+9	; 0x09
    3a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a08:	20 e0       	ldi	r18, 0x00	; 0
    3a0a:	30 e0       	ldi	r19, 0x00	; 0
    3a0c:	40 e8       	ldi	r20, 0x80	; 128
    3a0e:	5f e3       	ldi	r21, 0x3F	; 63
    3a10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a14:	88 23       	and	r24, r24
    3a16:	2c f4       	brge	.+10     	; 0x3a22 <Ultrasonic_Read_Distance+0x126>
		__ticks = 1;
    3a18:	81 e0       	ldi	r24, 0x01	; 1
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	9e 83       	std	Y+6, r25	; 0x06
    3a1e:	8d 83       	std	Y+5, r24	; 0x05
    3a20:	3f c0       	rjmp	.+126    	; 0x3aa0 <Ultrasonic_Read_Distance+0x1a4>
	else if (__tmp > 65535)
    3a22:	6f 81       	ldd	r22, Y+7	; 0x07
    3a24:	78 85       	ldd	r23, Y+8	; 0x08
    3a26:	89 85       	ldd	r24, Y+9	; 0x09
    3a28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a2a:	20 e0       	ldi	r18, 0x00	; 0
    3a2c:	3f ef       	ldi	r19, 0xFF	; 255
    3a2e:	4f e7       	ldi	r20, 0x7F	; 127
    3a30:	57 e4       	ldi	r21, 0x47	; 71
    3a32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a36:	18 16       	cp	r1, r24
    3a38:	4c f5       	brge	.+82     	; 0x3a8c <Ultrasonic_Read_Distance+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a40:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a42:	20 e0       	ldi	r18, 0x00	; 0
    3a44:	30 e0       	ldi	r19, 0x00	; 0
    3a46:	40 e2       	ldi	r20, 0x20	; 32
    3a48:	51 e4       	ldi	r21, 0x41	; 65
    3a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a4e:	dc 01       	movw	r26, r24
    3a50:	cb 01       	movw	r24, r22
    3a52:	bc 01       	movw	r22, r24
    3a54:	cd 01       	movw	r24, r26
    3a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a5a:	dc 01       	movw	r26, r24
    3a5c:	cb 01       	movw	r24, r22
    3a5e:	9e 83       	std	Y+6, r25	; 0x06
    3a60:	8d 83       	std	Y+5, r24	; 0x05
    3a62:	0f c0       	rjmp	.+30     	; 0x3a82 <Ultrasonic_Read_Distance+0x186>
    3a64:	80 e9       	ldi	r24, 0x90	; 144
    3a66:	91 e0       	ldi	r25, 0x01	; 1
    3a68:	9c 83       	std	Y+4, r25	; 0x04
    3a6a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    3a70:	01 97       	sbiw	r24, 0x01	; 1
    3a72:	f1 f7       	brne	.-4      	; 0x3a70 <Ultrasonic_Read_Distance+0x174>
    3a74:	9c 83       	std	Y+4, r25	; 0x04
    3a76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a78:	8d 81       	ldd	r24, Y+5	; 0x05
    3a7a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a7c:	01 97       	sbiw	r24, 0x01	; 1
    3a7e:	9e 83       	std	Y+6, r25	; 0x06
    3a80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a82:	8d 81       	ldd	r24, Y+5	; 0x05
    3a84:	9e 81       	ldd	r25, Y+6	; 0x06
    3a86:	00 97       	sbiw	r24, 0x00	; 0
    3a88:	69 f7       	brne	.-38     	; 0x3a64 <Ultrasonic_Read_Distance+0x168>
    3a8a:	14 c0       	rjmp	.+40     	; 0x3ab4 <Ultrasonic_Read_Distance+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a8c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a8e:	78 85       	ldd	r23, Y+8	; 0x08
    3a90:	89 85       	ldd	r24, Y+9	; 0x09
    3a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a98:	dc 01       	movw	r26, r24
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	9e 83       	std	Y+6, r25	; 0x06
    3a9e:	8d 83       	std	Y+5, r24	; 0x05
    3aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa4:	9a 83       	std	Y+2, r25	; 0x02
    3aa6:	89 83       	std	Y+1, r24	; 0x01
    3aa8:	89 81       	ldd	r24, Y+1	; 0x01
    3aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    3aac:	01 97       	sbiw	r24, 0x01	; 1
    3aae:	f1 f7       	brne	.-4      	; 0x3aac <Ultrasonic_Read_Distance+0x1b0>
    3ab0:	9a 83       	std	Y+2, r25	; 0x02
    3ab2:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(300);
		ovf = 0;
    3ab4:	10 92 8d 02 	sts	0x028D, r1
    3ab8:	10 92 8e 02 	sts	0x028E, r1
    3abc:	10 92 8f 02 	sts	0x028F, r1
    3ac0:	10 92 90 02 	sts	0x0290, r1
		ovf_counter = 0;
    3ac4:	10 92 89 02 	sts	0x0289, r1
    3ac8:	10 92 8a 02 	sts	0x028A, r1
    3acc:	10 92 8b 02 	sts	0x028B, r1
    3ad0:	10 92 8c 02 	sts	0x028C, r1
		ret_status = Timer1_ICU_SetTrigger(TIMER1_INPUT_CAPTURE_RISING_EDGE);
    3ad4:	81 e0       	ldi	r24, 0x01	; 1
    3ad6:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer1_ICU_SetTrigger>
    3ada:	8f 87       	std	Y+15, r24	; 0x0f
		TIMER1_CONTROL->TIFR1_CFG.ICF1_BIT = 0;
    3adc:	e6 e4       	ldi	r30, 0x46	; 70
    3ade:	f0 e0       	ldi	r31, 0x00	; 0
    3ae0:	82 89       	ldd	r24, Z+18	; 0x12
    3ae2:	8f 7d       	andi	r24, 0xDF	; 223
    3ae4:	82 8b       	std	Z+18, r24	; 0x12
		TIMER1_CONTROL->TIFR1_CFG.TOV1_BIT = 0;
    3ae6:	e6 e4       	ldi	r30, 0x46	; 70
    3ae8:	f0 e0       	ldi	r31, 0x00	; 0
    3aea:	82 89       	ldd	r24, Z+18	; 0x12
    3aec:	8b 7f       	andi	r24, 0xFB	; 251
    3aee:	82 8b       	std	Z+18, r24	; 0x12
		ret_status = Timer1_ICU_IntEnable();
    3af0:	0e 94 ae 08 	call	0x115c	; 0x115c <Timer1_ICU_IntEnable>
    3af4:	8f 87       	std	Y+15, r24	; 0x0f
		ret_status = Timer1_OVF_IntEnable();
    3af6:	0e 94 7e 08 	call	0x10fc	; 0x10fc <Timer1_OVF_IntEnable>
    3afa:	8f 87       	std	Y+15, r24	; 0x0f
	}
	else{ /* Nothing */ }

}
    3afc:	65 96       	adiw	r28, 0x15	; 21
    3afe:	0f b6       	in	r0, 0x3f	; 63
    3b00:	f8 94       	cli
    3b02:	de bf       	out	0x3e, r29	; 62
    3b04:	0f be       	out	0x3f, r0	; 63
    3b06:	cd bf       	out	0x3d, r28	; 61
    3b08:	cf 91       	pop	r28
    3b0a:	df 91       	pop	r29
    3b0c:	1f 91       	pop	r17
    3b0e:	0f 91       	pop	r16
    3b10:	ff 90       	pop	r15
    3b12:	ef 90       	pop	r14
    3b14:	08 95       	ret

00003b16 <SevenSeG_voidinit>:
 *      Author: Mohamed Aly
 */
#include "seven_segment.h"

void SevenSeG_voidinit(void)
{
    3b16:	df 93       	push	r29
    3b18:	cf 93       	push	r28
    3b1a:	cd b7       	in	r28, 0x3d	; 61
    3b1c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(SEGMENT_PIN0_PORT, SEGMENT_PIN0, GPIO_DIRECTION_OUTPUT);
    3b1e:	81 e0       	ldi	r24, 0x01	; 1
    3b20:	60 e0       	ldi	r22, 0x00	; 0
    3b22:	41 e0       	ldi	r20, 0x01	; 1
    3b24:	0e 94 29 13 	call	0x2652	; 0x2652 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(SEGMENT_PIN1_PORT, SEGMENT_PIN1, GPIO_DIRECTION_OUTPUT);
    3b28:	81 e0       	ldi	r24, 0x01	; 1
    3b2a:	61 e0       	ldi	r22, 0x01	; 1
    3b2c:	41 e0       	ldi	r20, 0x01	; 1
    3b2e:	0e 94 29 13 	call	0x2652	; 0x2652 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(SEGMENT_PIN2_PORT, SEGMENT_PIN2, GPIO_DIRECTION_OUTPUT);
    3b32:	81 e0       	ldi	r24, 0x01	; 1
    3b34:	62 e0       	ldi	r22, 0x02	; 2
    3b36:	41 e0       	ldi	r20, 0x01	; 1
    3b38:	0e 94 29 13 	call	0x2652	; 0x2652 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(SEGMENT_PIN3_PORT, SEGMENT_PIN3, GPIO_DIRECTION_OUTPUT);
    3b3c:	81 e0       	ldi	r24, 0x01	; 1
    3b3e:	64 e0       	ldi	r22, 0x04	; 4
    3b40:	41 e0       	ldi	r20, 0x01	; 1
    3b42:	0e 94 29 13 	call	0x2652	; 0x2652 <DIO_voidSetPinDirection>
}
    3b46:	cf 91       	pop	r28
    3b48:	df 91       	pop	r29
    3b4a:	08 95       	ret

00003b4c <SevenSeG_voidWriteNum>:

void SevenSeG_voidWriteNum(u8 Copy_u8Number)
{
    3b4c:	df 93       	push	r29
    3b4e:	cf 93       	push	r28
    3b50:	0f 92       	push	r0
    3b52:	cd b7       	in	r28, 0x3d	; 61
    3b54:	de b7       	in	r29, 0x3e	; 62
    3b56:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPinValue(SEGMENT_PIN0_PORT, SEGMENT_PIN0, ((Copy_u8Number >> 0) & 0x01));
    3b58:	89 81       	ldd	r24, Y+1	; 0x01
    3b5a:	98 2f       	mov	r25, r24
    3b5c:	91 70       	andi	r25, 0x01	; 1
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	60 e0       	ldi	r22, 0x00	; 0
    3b62:	49 2f       	mov	r20, r25
    3b64:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(SEGMENT_PIN1_PORT, SEGMENT_PIN1, ((Copy_u8Number >> 1) & 0x01));
    3b68:	89 81       	ldd	r24, Y+1	; 0x01
    3b6a:	86 95       	lsr	r24
    3b6c:	98 2f       	mov	r25, r24
    3b6e:	91 70       	andi	r25, 0x01	; 1
    3b70:	81 e0       	ldi	r24, 0x01	; 1
    3b72:	61 e0       	ldi	r22, 0x01	; 1
    3b74:	49 2f       	mov	r20, r25
    3b76:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(SEGMENT_PIN2_PORT, SEGMENT_PIN2, ((Copy_u8Number >> 2) & 0x01));
    3b7a:	89 81       	ldd	r24, Y+1	; 0x01
    3b7c:	86 95       	lsr	r24
    3b7e:	86 95       	lsr	r24
    3b80:	98 2f       	mov	r25, r24
    3b82:	91 70       	andi	r25, 0x01	; 1
    3b84:	81 e0       	ldi	r24, 0x01	; 1
    3b86:	62 e0       	ldi	r22, 0x02	; 2
    3b88:	49 2f       	mov	r20, r25
    3b8a:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(SEGMENT_PIN3_PORT, SEGMENT_PIN3, ((Copy_u8Number >> 3) & 0x01));
    3b8e:	89 81       	ldd	r24, Y+1	; 0x01
    3b90:	86 95       	lsr	r24
    3b92:	86 95       	lsr	r24
    3b94:	86 95       	lsr	r24
    3b96:	98 2f       	mov	r25, r24
    3b98:	91 70       	andi	r25, 0x01	; 1
    3b9a:	81 e0       	ldi	r24, 0x01	; 1
    3b9c:	64 e0       	ldi	r22, 0x04	; 4
    3b9e:	49 2f       	mov	r20, r25
    3ba0:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
}
    3ba4:	0f 90       	pop	r0
    3ba6:	cf 91       	pop	r28
    3ba8:	df 91       	pop	r29
    3baa:	08 95       	ret

00003bac <RTC_Init>:
static u8 decimal_to_BCD(u8 decimal);
static u8 BCD_to_decimal(u8 bcd);


void RTC_Init(u8 req_speed)
{
    3bac:	df 93       	push	r29
    3bae:	cf 93       	push	r28
    3bb0:	00 d0       	rcall	.+0      	; 0x3bb2 <RTC_Init+0x6>
    3bb2:	00 d0       	rcall	.+0      	; 0x3bb4 <RTC_Init+0x8>
    3bb4:	0f 92       	push	r0
    3bb6:	cd b7       	in	r28, 0x3d	; 61
    3bb8:	de b7       	in	r29, 0x3e	; 62
    3bba:	8d 83       	std	Y+5, r24	; 0x05
	Error_Status_t ret_status = NO_ERROR;
    3bbc:	19 82       	std	Y+1, r1	; 0x01
	i2c_t init_i2c = {.master_or_slave = I2C_MASTER_MODE,
			.frequency = req_speed,
			.prescaler = 0};
    3bbe:	1a 82       	std	Y+2, r1	; 0x02
    3bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    3bc2:	8b 83       	std	Y+3, r24	; 0x03
    3bc4:	1c 82       	std	Y+4, r1	; 0x04
	ret_status = I2C_Init(&init_i2c);
    3bc6:	ce 01       	movw	r24, r28
    3bc8:	02 96       	adiw	r24, 0x02	; 2
    3bca:	0e 94 35 12 	call	0x246a	; 0x246a <I2C_Init>
    3bce:	89 83       	std	Y+1, r24	; 0x01
}
    3bd0:	0f 90       	pop	r0
    3bd2:	0f 90       	pop	r0
    3bd4:	0f 90       	pop	r0
    3bd6:	0f 90       	pop	r0
    3bd8:	0f 90       	pop	r0
    3bda:	cf 91       	pop	r28
    3bdc:	df 91       	pop	r29
    3bde:	08 95       	ret

00003be0 <RTC_SetTime>:


void RTC_SetTime(const RTC_TIME_T *init_time)
{
    3be0:	df 93       	push	r29
    3be2:	cf 93       	push	r28
    3be4:	00 d0       	rcall	.+0      	; 0x3be6 <RTC_SetTime+0x6>
    3be6:	00 d0       	rcall	.+0      	; 0x3be8 <RTC_SetTime+0x8>
    3be8:	00 d0       	rcall	.+0      	; 0x3bea <RTC_SetTime+0xa>
    3bea:	cd b7       	in	r28, 0x3d	; 61
    3bec:	de b7       	in	r29, 0x3e	; 62
    3bee:	9e 83       	std	Y+6, r25	; 0x06
    3bf0:	8d 83       	std	Y+5, r24	; 0x05
#if RTC_TIME_SYSTEM == RTC_24HR_SYSTEM

	Error_Status_t ret_status = NO_ERROR;
    3bf2:	1c 82       	std	Y+4, r1	; 0x04

	// Convert hours, minutes, and seconds to BCD format
	u8 sec_bcd = decimal_to_BCD(init_time->sec);
    3bf4:	ed 81       	ldd	r30, Y+5	; 0x05
    3bf6:	fe 81       	ldd	r31, Y+6	; 0x06
    3bf8:	82 81       	ldd	r24, Z+2	; 0x02
    3bfa:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <decimal_to_BCD>
    3bfe:	8b 83       	std	Y+3, r24	; 0x03
	u8 min_bcd = decimal_to_BCD(init_time->min);
    3c00:	ed 81       	ldd	r30, Y+5	; 0x05
    3c02:	fe 81       	ldd	r31, Y+6	; 0x06
    3c04:	81 81       	ldd	r24, Z+1	; 0x01
    3c06:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <decimal_to_BCD>
    3c0a:	8a 83       	std	Y+2, r24	; 0x02
	u8 hour_bcd = decimal_to_BCD(init_time->hour);
    3c0c:	ed 81       	ldd	r30, Y+5	; 0x05
    3c0e:	fe 81       	ldd	r31, Y+6	; 0x06
    3c10:	80 81       	ld	r24, Z
    3c12:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <decimal_to_BCD>
    3c16:	89 83       	std	Y+1, r24	; 0x01

	// Send start
	ret_status = I2C_SendStart();
    3c18:	0e 94 99 12 	call	0x2532	; 0x2532 <I2C_SendStart>
    3c1c:	8c 83       	std	Y+4, r24	; 0x04

	// send address
	ret_status = I2C_SendByte(DS1307_ADDRESS_WRITE);
    3c1e:	80 ed       	ldi	r24, 0xD0	; 208
    3c20:	0e 94 7e 12 	call	0x24fc	; 0x24fc <I2C_SendByte>
    3c24:	8c 83       	std	Y+4, r24	; 0x04

	// Send address that wanted to access
	ret_status = I2C_SendByte(DS1307_BASE_ADDRESS_OF_TIME);
    3c26:	80 e0       	ldi	r24, 0x00	; 0
    3c28:	0e 94 7e 12 	call	0x24fc	; 0x24fc <I2C_SendByte>
    3c2c:	8c 83       	std	Y+4, r24	; 0x04

	// send second
	ret_status = I2C_SendByte(sec_bcd);
    3c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c30:	0e 94 7e 12 	call	0x24fc	; 0x24fc <I2C_SendByte>
    3c34:	8c 83       	std	Y+4, r24	; 0x04

	// send min
	ret_status = I2C_SendByte(min_bcd);
    3c36:	8a 81       	ldd	r24, Y+2	; 0x02
    3c38:	0e 94 7e 12 	call	0x24fc	; 0x24fc <I2C_SendByte>
    3c3c:	8c 83       	std	Y+4, r24	; 0x04

	// send hour
	ret_status = I2C_SendByte(hour_bcd);
    3c3e:	89 81       	ldd	r24, Y+1	; 0x01
    3c40:	0e 94 7e 12 	call	0x24fc	; 0x24fc <I2C_SendByte>
    3c44:	8c 83       	std	Y+4, r24	; 0x04

	// send stop
	ret_status = I2C_SendStop();
    3c46:	0e 94 ae 12 	call	0x255c	; 0x255c <I2C_SendStop>
    3c4a:	8c 83       	std	Y+4, r24	; 0x04

	// send stop
	ret_status = I2C_SendStop();

#endif
}
    3c4c:	26 96       	adiw	r28, 0x06	; 6
    3c4e:	0f b6       	in	r0, 0x3f	; 63
    3c50:	f8 94       	cli
    3c52:	de bf       	out	0x3e, r29	; 62
    3c54:	0f be       	out	0x3f, r0	; 63
    3c56:	cd bf       	out	0x3d, r28	; 61
    3c58:	cf 91       	pop	r28
    3c5a:	df 91       	pop	r29
    3c5c:	08 95       	ret

00003c5e <RTC_GetTime>:



void RTC_GetTime(RTC_TIME_T *time)
{
    3c5e:	df 93       	push	r29
    3c60:	cf 93       	push	r28
    3c62:	00 d0       	rcall	.+0      	; 0x3c64 <RTC_GetTime+0x6>
    3c64:	0f 92       	push	r0
    3c66:	cd b7       	in	r28, 0x3d	; 61
    3c68:	de b7       	in	r29, 0x3e	; 62
    3c6a:	9b 83       	std	Y+3, r25	; 0x03
    3c6c:	8a 83       	std	Y+2, r24	; 0x02
#if RTC_TIME_SYSTEM == RTC_24HR_SYSTEM

	Error_Status_t ret_status = NO_ERROR;
    3c6e:	19 82       	std	Y+1, r1	; 0x01
	// Send start
	ret_status = I2C_SendStart();
    3c70:	0e 94 99 12 	call	0x2532	; 0x2532 <I2C_SendStart>
    3c74:	89 83       	std	Y+1, r24	; 0x01
	// send address
	ret_status = I2C_SendByte(DS1307_ADDRESS_WRITE);
    3c76:	80 ed       	ldi	r24, 0xD0	; 208
    3c78:	0e 94 7e 12 	call	0x24fc	; 0x24fc <I2C_SendByte>
    3c7c:	89 83       	std	Y+1, r24	; 0x01
	// Send address that wanted to access
	ret_status = I2C_SendByte(DS1307_BASE_ADDRESS_OF_TIME);
    3c7e:	80 e0       	ldi	r24, 0x00	; 0
    3c80:	0e 94 7e 12 	call	0x24fc	; 0x24fc <I2C_SendByte>
    3c84:	89 83       	std	Y+1, r24	; 0x01
	// Send start
	ret_status = I2C_SendStart();
    3c86:	0e 94 99 12 	call	0x2532	; 0x2532 <I2C_SendStart>
    3c8a:	89 83       	std	Y+1, r24	; 0x01
	// send address
	ret_status = I2C_SendByte(DS1307_ADDRESS_READ);
    3c8c:	81 ed       	ldi	r24, 0xD1	; 209
    3c8e:	0e 94 7e 12 	call	0x24fc	; 0x24fc <I2C_SendByte>
    3c92:	89 83       	std	Y+1, r24	; 0x01

	// receive time
	ret_status = I2C_ReceiveByte_ACK(&(time->sec));
    3c94:	8a 81       	ldd	r24, Y+2	; 0x02
    3c96:	9b 81       	ldd	r25, Y+3	; 0x03
    3c98:	02 96       	adiw	r24, 0x02	; 2
    3c9a:	0e 94 be 12 	call	0x257c	; 0x257c <I2C_ReceiveByte_ACK>
    3c9e:	89 83       	std	Y+1, r24	; 0x01
	ret_status = I2C_ReceiveByte_ACK(&(time->min));
    3ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ca4:	01 96       	adiw	r24, 0x01	; 1
    3ca6:	0e 94 be 12 	call	0x257c	; 0x257c <I2C_ReceiveByte_ACK>
    3caa:	89 83       	std	Y+1, r24	; 0x01
	ret_status = I2C_ReceiveByte_NoACK(&(time->hour));
    3cac:	8a 81       	ldd	r24, Y+2	; 0x02
    3cae:	9b 81       	ldd	r25, Y+3	; 0x03
    3cb0:	0e 94 e5 12 	call	0x25ca	; 0x25ca <I2C_ReceiveByte_NoACK>
    3cb4:	89 83       	std	Y+1, r24	; 0x01
	// send stop
	ret_status = I2C_SendStop();
    3cb6:	0e 94 ae 12 	call	0x255c	; 0x255c <I2C_SendStop>
    3cba:	89 83       	std	Y+1, r24	; 0x01

	time->sec = BCD_to_decimal(time->sec);
    3cbc:	ea 81       	ldd	r30, Y+2	; 0x02
    3cbe:	fb 81       	ldd	r31, Y+3	; 0x03
    3cc0:	82 81       	ldd	r24, Z+2	; 0x02
    3cc2:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <BCD_to_decimal>
    3cc6:	ea 81       	ldd	r30, Y+2	; 0x02
    3cc8:	fb 81       	ldd	r31, Y+3	; 0x03
    3cca:	82 83       	std	Z+2, r24	; 0x02
	time->min = BCD_to_decimal(time->min);
    3ccc:	ea 81       	ldd	r30, Y+2	; 0x02
    3cce:	fb 81       	ldd	r31, Y+3	; 0x03
    3cd0:	81 81       	ldd	r24, Z+1	; 0x01
    3cd2:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <BCD_to_decimal>
    3cd6:	ea 81       	ldd	r30, Y+2	; 0x02
    3cd8:	fb 81       	ldd	r31, Y+3	; 0x03
    3cda:	81 83       	std	Z+1, r24	; 0x01
	time->hour = BCD_to_decimal(time->hour);
    3cdc:	ea 81       	ldd	r30, Y+2	; 0x02
    3cde:	fb 81       	ldd	r31, Y+3	; 0x03
    3ce0:	80 81       	ld	r24, Z
    3ce2:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <BCD_to_decimal>
    3ce6:	ea 81       	ldd	r30, Y+2	; 0x02
    3ce8:	fb 81       	ldd	r31, Y+3	; 0x03
    3cea:	80 83       	st	Z, r24
	else if (time->hour == 0) {
		time->hour= 12;
	}

#endif
}
    3cec:	0f 90       	pop	r0
    3cee:	0f 90       	pop	r0
    3cf0:	0f 90       	pop	r0
    3cf2:	cf 91       	pop	r28
    3cf4:	df 91       	pop	r29
    3cf6:	08 95       	ret

00003cf8 <RTC_SetDate>:




void RTC_SetDate(const RTC_DATE_T *init_date)
{
    3cf8:	df 93       	push	r29
    3cfa:	cf 93       	push	r28
    3cfc:	00 d0       	rcall	.+0      	; 0x3cfe <RTC_SetDate+0x6>
    3cfe:	00 d0       	rcall	.+0      	; 0x3d00 <RTC_SetDate+0x8>
    3d00:	00 d0       	rcall	.+0      	; 0x3d02 <RTC_SetDate+0xa>
    3d02:	cd b7       	in	r28, 0x3d	; 61
    3d04:	de b7       	in	r29, 0x3e	; 62
    3d06:	9e 83       	std	Y+6, r25	; 0x06
    3d08:	8d 83       	std	Y+5, r24	; 0x05
	Error_Status_t ret_status = NO_ERROR;
    3d0a:	1c 82       	std	Y+4, r1	; 0x04
	u8 day_bcd = decimal_to_BCD(init_date->day);
    3d0c:	ed 81       	ldd	r30, Y+5	; 0x05
    3d0e:	fe 81       	ldd	r31, Y+6	; 0x06
    3d10:	82 81       	ldd	r24, Z+2	; 0x02
    3d12:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <decimal_to_BCD>
    3d16:	8b 83       	std	Y+3, r24	; 0x03
	u8 mon_bcd = decimal_to_BCD(init_date->month);
    3d18:	ed 81       	ldd	r30, Y+5	; 0x05
    3d1a:	fe 81       	ldd	r31, Y+6	; 0x06
    3d1c:	81 81       	ldd	r24, Z+1	; 0x01
    3d1e:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <decimal_to_BCD>
    3d22:	8a 83       	std	Y+2, r24	; 0x02
	u8 year_bcd = decimal_to_BCD(init_date->year);
    3d24:	ed 81       	ldd	r30, Y+5	; 0x05
    3d26:	fe 81       	ldd	r31, Y+6	; 0x06
    3d28:	80 81       	ld	r24, Z
    3d2a:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <decimal_to_BCD>
    3d2e:	89 83       	std	Y+1, r24	; 0x01

	// Send start
	ret_status = I2C_SendStart();
    3d30:	0e 94 99 12 	call	0x2532	; 0x2532 <I2C_SendStart>
    3d34:	8c 83       	std	Y+4, r24	; 0x04
	// send address
	ret_status = I2C_SendByte(DS1307_ADDRESS_WRITE);
    3d36:	80 ed       	ldi	r24, 0xD0	; 208
    3d38:	0e 94 7e 12 	call	0x24fc	; 0x24fc <I2C_SendByte>
    3d3c:	8c 83       	std	Y+4, r24	; 0x04
	// Send address that wanted to access
	ret_status = I2C_SendByte(DS1307_BASE_ADDRESS_OF_DATE);
    3d3e:	84 e0       	ldi	r24, 0x04	; 4
    3d40:	0e 94 7e 12 	call	0x24fc	; 0x24fc <I2C_SendByte>
    3d44:	8c 83       	std	Y+4, r24	; 0x04
	// send day
	ret_status = I2C_SendByte(day_bcd);
    3d46:	8b 81       	ldd	r24, Y+3	; 0x03
    3d48:	0e 94 7e 12 	call	0x24fc	; 0x24fc <I2C_SendByte>
    3d4c:	8c 83       	std	Y+4, r24	; 0x04

	// send month
	ret_status = I2C_SendByte(mon_bcd);
    3d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d50:	0e 94 7e 12 	call	0x24fc	; 0x24fc <I2C_SendByte>
    3d54:	8c 83       	std	Y+4, r24	; 0x04

	// send year
	ret_status = I2C_SendByte(year_bcd);
    3d56:	89 81       	ldd	r24, Y+1	; 0x01
    3d58:	0e 94 7e 12 	call	0x24fc	; 0x24fc <I2C_SendByte>
    3d5c:	8c 83       	std	Y+4, r24	; 0x04

	// send stop
	ret_status = I2C_SendStop();
    3d5e:	0e 94 ae 12 	call	0x255c	; 0x255c <I2C_SendStop>
    3d62:	8c 83       	std	Y+4, r24	; 0x04

}
    3d64:	26 96       	adiw	r28, 0x06	; 6
    3d66:	0f b6       	in	r0, 0x3f	; 63
    3d68:	f8 94       	cli
    3d6a:	de bf       	out	0x3e, r29	; 62
    3d6c:	0f be       	out	0x3f, r0	; 63
    3d6e:	cd bf       	out	0x3d, r28	; 61
    3d70:	cf 91       	pop	r28
    3d72:	df 91       	pop	r29
    3d74:	08 95       	ret

00003d76 <RTC_GetDate>:


void RTC_GetDate(RTC_DATE_T *date)
{
    3d76:	df 93       	push	r29
    3d78:	cf 93       	push	r28
    3d7a:	00 d0       	rcall	.+0      	; 0x3d7c <RTC_GetDate+0x6>
    3d7c:	0f 92       	push	r0
    3d7e:	cd b7       	in	r28, 0x3d	; 61
    3d80:	de b7       	in	r29, 0x3e	; 62
    3d82:	9b 83       	std	Y+3, r25	; 0x03
    3d84:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    3d86:	19 82       	std	Y+1, r1	; 0x01
	// Send start
	ret_status = I2C_SendStart();
    3d88:	0e 94 99 12 	call	0x2532	; 0x2532 <I2C_SendStart>
    3d8c:	89 83       	std	Y+1, r24	; 0x01
	// send address
	ret_status = I2C_SendByte(DS1307_ADDRESS_WRITE);
    3d8e:	80 ed       	ldi	r24, 0xD0	; 208
    3d90:	0e 94 7e 12 	call	0x24fc	; 0x24fc <I2C_SendByte>
    3d94:	89 83       	std	Y+1, r24	; 0x01
	// Send address that wanted to access
	ret_status = I2C_SendByte(DS1307_BASE_ADDRESS_OF_DATE);
    3d96:	84 e0       	ldi	r24, 0x04	; 4
    3d98:	0e 94 7e 12 	call	0x24fc	; 0x24fc <I2C_SendByte>
    3d9c:	89 83       	std	Y+1, r24	; 0x01
	// Send start
	ret_status = I2C_SendStart();
    3d9e:	0e 94 99 12 	call	0x2532	; 0x2532 <I2C_SendStart>
    3da2:	89 83       	std	Y+1, r24	; 0x01
	// send address
	ret_status = I2C_SendByte(DS1307_ADDRESS_READ);
    3da4:	81 ed       	ldi	r24, 0xD1	; 209
    3da6:	0e 94 7e 12 	call	0x24fc	; 0x24fc <I2C_SendByte>
    3daa:	89 83       	std	Y+1, r24	; 0x01
	// receive time
	ret_status = I2C_ReceiveByte_ACK(&(date->day));
    3dac:	8a 81       	ldd	r24, Y+2	; 0x02
    3dae:	9b 81       	ldd	r25, Y+3	; 0x03
    3db0:	02 96       	adiw	r24, 0x02	; 2
    3db2:	0e 94 be 12 	call	0x257c	; 0x257c <I2C_ReceiveByte_ACK>
    3db6:	89 83       	std	Y+1, r24	; 0x01
	ret_status = I2C_ReceiveByte_ACK(&(date->month));
    3db8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dba:	9b 81       	ldd	r25, Y+3	; 0x03
    3dbc:	01 96       	adiw	r24, 0x01	; 1
    3dbe:	0e 94 be 12 	call	0x257c	; 0x257c <I2C_ReceiveByte_ACK>
    3dc2:	89 83       	std	Y+1, r24	; 0x01
	ret_status = I2C_ReceiveByte_NoACK(&(date->year));
    3dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc6:	9b 81       	ldd	r25, Y+3	; 0x03
    3dc8:	0e 94 e5 12 	call	0x25ca	; 0x25ca <I2C_ReceiveByte_NoACK>
    3dcc:	89 83       	std	Y+1, r24	; 0x01
	// send stop
	ret_status = I2C_SendStop();
    3dce:	0e 94 ae 12 	call	0x255c	; 0x255c <I2C_SendStop>
    3dd2:	89 83       	std	Y+1, r24	; 0x01

	date->day = BCD_to_decimal(date->day);
    3dd4:	ea 81       	ldd	r30, Y+2	; 0x02
    3dd6:	fb 81       	ldd	r31, Y+3	; 0x03
    3dd8:	82 81       	ldd	r24, Z+2	; 0x02
    3dda:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <BCD_to_decimal>
    3dde:	ea 81       	ldd	r30, Y+2	; 0x02
    3de0:	fb 81       	ldd	r31, Y+3	; 0x03
    3de2:	82 83       	std	Z+2, r24	; 0x02
	date->month = BCD_to_decimal(date->month);
    3de4:	ea 81       	ldd	r30, Y+2	; 0x02
    3de6:	fb 81       	ldd	r31, Y+3	; 0x03
    3de8:	81 81       	ldd	r24, Z+1	; 0x01
    3dea:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <BCD_to_decimal>
    3dee:	ea 81       	ldd	r30, Y+2	; 0x02
    3df0:	fb 81       	ldd	r31, Y+3	; 0x03
    3df2:	81 83       	std	Z+1, r24	; 0x01
	date->year = BCD_to_decimal(date->year);
    3df4:	ea 81       	ldd	r30, Y+2	; 0x02
    3df6:	fb 81       	ldd	r31, Y+3	; 0x03
    3df8:	80 81       	ld	r24, Z
    3dfa:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <BCD_to_decimal>
    3dfe:	ea 81       	ldd	r30, Y+2	; 0x02
    3e00:	fb 81       	ldd	r31, Y+3	; 0x03
    3e02:	80 83       	st	Z, r24
}
    3e04:	0f 90       	pop	r0
    3e06:	0f 90       	pop	r0
    3e08:	0f 90       	pop	r0
    3e0a:	cf 91       	pop	r28
    3e0c:	df 91       	pop	r29
    3e0e:	08 95       	ret

00003e10 <decimal_to_BCD>:


/* -------------------------------------------------- Helper functions ----------------------- */
static u8 decimal_to_BCD(u8 decimal)
{
    3e10:	df 93       	push	r29
    3e12:	cf 93       	push	r28
    3e14:	00 d0       	rcall	.+0      	; 0x3e16 <decimal_to_BCD+0x6>
    3e16:	00 d0       	rcall	.+0      	; 0x3e18 <decimal_to_BCD+0x8>
    3e18:	0f 92       	push	r0
    3e1a:	cd b7       	in	r28, 0x3d	; 61
    3e1c:	de b7       	in	r29, 0x3e	; 62
    3e1e:	8c 83       	std	Y+4, r24	; 0x04
	u8 first_digits = (u8)(decimal % 10); // Extract first digit from decimal
    3e20:	8c 81       	ldd	r24, Y+4	; 0x04
    3e22:	9a e0       	ldi	r25, 0x0A	; 10
    3e24:	69 2f       	mov	r22, r25
    3e26:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <__udivmodqi4>
    3e2a:	89 2f       	mov	r24, r25
    3e2c:	8b 83       	std	Y+3, r24	; 0x03
	u8 seconnd_digits = (u8)(decimal / 10); // Extract second digit from decimal
    3e2e:	8c 81       	ldd	r24, Y+4	; 0x04
    3e30:	9a e0       	ldi	r25, 0x0A	; 10
    3e32:	69 2f       	mov	r22, r25
    3e34:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <__udivmodqi4>
    3e38:	8a 83       	std	Y+2, r24	; 0x02
	u8 result_num = (seconnd_digits << 4) + first_digits;
    3e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e3c:	98 2f       	mov	r25, r24
    3e3e:	92 95       	swap	r25
    3e40:	90 7f       	andi	r25, 0xF0	; 240
    3e42:	8b 81       	ldd	r24, Y+3	; 0x03
    3e44:	89 0f       	add	r24, r25
    3e46:	89 83       	std	Y+1, r24	; 0x01
}
    3e48:	0f 90       	pop	r0
    3e4a:	0f 90       	pop	r0
    3e4c:	0f 90       	pop	r0
    3e4e:	0f 90       	pop	r0
    3e50:	0f 90       	pop	r0
    3e52:	cf 91       	pop	r28
    3e54:	df 91       	pop	r29
    3e56:	08 95       	ret

00003e58 <BCD_to_decimal>:

static u8 BCD_to_decimal(u8 bcd)
{
    3e58:	df 93       	push	r29
    3e5a:	cf 93       	push	r28
    3e5c:	00 d0       	rcall	.+0      	; 0x3e5e <BCD_to_decimal+0x6>
    3e5e:	00 d0       	rcall	.+0      	; 0x3e60 <BCD_to_decimal+0x8>
    3e60:	cd b7       	in	r28, 0x3d	; 61
    3e62:	de b7       	in	r29, 0x3e	; 62
    3e64:	8c 83       	std	Y+4, r24	; 0x04
	u8 first_digits = bcd & 0x0F;  // Extract the lower 4 bits
    3e66:	8c 81       	ldd	r24, Y+4	; 0x04
    3e68:	8f 70       	andi	r24, 0x0F	; 15
    3e6a:	8b 83       	std	Y+3, r24	; 0x03
	u8 second_digits = (bcd >> 4) * 10;  // Extract the higher 4 bits and multiply by 10
    3e6c:	8c 81       	ldd	r24, Y+4	; 0x04
    3e6e:	82 95       	swap	r24
    3e70:	8f 70       	andi	r24, 0x0F	; 15
    3e72:	88 2f       	mov	r24, r24
    3e74:	90 e0       	ldi	r25, 0x00	; 0
    3e76:	9c 01       	movw	r18, r24
    3e78:	22 0f       	add	r18, r18
    3e7a:	33 1f       	adc	r19, r19
    3e7c:	c9 01       	movw	r24, r18
    3e7e:	88 0f       	add	r24, r24
    3e80:	99 1f       	adc	r25, r25
    3e82:	88 0f       	add	r24, r24
    3e84:	99 1f       	adc	r25, r25
    3e86:	82 0f       	add	r24, r18
    3e88:	93 1f       	adc	r25, r19
    3e8a:	8a 83       	std	Y+2, r24	; 0x02
	u8 result_num = second_digits + first_digits;
    3e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e90:	89 0f       	add	r24, r25
    3e92:	89 83       	std	Y+1, r24	; 0x01
	return result_num;
    3e94:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e96:	0f 90       	pop	r0
    3e98:	0f 90       	pop	r0
    3e9a:	0f 90       	pop	r0
    3e9c:	0f 90       	pop	r0
    3e9e:	cf 91       	pop	r28
    3ea0:	df 91       	pop	r29
    3ea2:	08 95       	ret

00003ea4 <Led_Init>:

#include "LED.h"


void Led_Init(u8 Led_Pin_Port, u8 Led_Pin_PinNum)
{
    3ea4:	df 93       	push	r29
    3ea6:	cf 93       	push	r28
    3ea8:	00 d0       	rcall	.+0      	; 0x3eaa <Led_Init+0x6>
    3eaa:	cd b7       	in	r28, 0x3d	; 61
    3eac:	de b7       	in	r29, 0x3e	; 62
    3eae:	89 83       	std	Y+1, r24	; 0x01
    3eb0:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDirection(Led_Pin_Port, Led_Pin_PinNum, GPIO_DIRECTION_OUTPUT);
    3eb2:	89 81       	ldd	r24, Y+1	; 0x01
    3eb4:	6a 81       	ldd	r22, Y+2	; 0x02
    3eb6:	41 e0       	ldi	r20, 0x01	; 1
    3eb8:	0e 94 29 13 	call	0x2652	; 0x2652 <DIO_voidSetPinDirection>
}
    3ebc:	0f 90       	pop	r0
    3ebe:	0f 90       	pop	r0
    3ec0:	cf 91       	pop	r28
    3ec2:	df 91       	pop	r29
    3ec4:	08 95       	ret

00003ec6 <Led_TurnOn>:


void Led_TurnOn(u8 Led_Pin_Port, u8 Led_Pin_PinNum)
{
    3ec6:	df 93       	push	r29
    3ec8:	cf 93       	push	r28
    3eca:	00 d0       	rcall	.+0      	; 0x3ecc <Led_TurnOn+0x6>
    3ecc:	cd b7       	in	r28, 0x3d	; 61
    3ece:	de b7       	in	r29, 0x3e	; 62
    3ed0:	89 83       	std	Y+1, r24	; 0x01
    3ed2:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinValue(Led_Pin_Port, Led_Pin_PinNum, GPIO_HIGH);
    3ed4:	89 81       	ldd	r24, Y+1	; 0x01
    3ed6:	6a 81       	ldd	r22, Y+2	; 0x02
    3ed8:	41 e0       	ldi	r20, 0x01	; 1
    3eda:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
}
    3ede:	0f 90       	pop	r0
    3ee0:	0f 90       	pop	r0
    3ee2:	cf 91       	pop	r28
    3ee4:	df 91       	pop	r29
    3ee6:	08 95       	ret

00003ee8 <Led_TurnOff>:


void Led_TurnOff(u8 Led_Pin_Port, u8 Led_Pin_PinNum)
{
    3ee8:	df 93       	push	r29
    3eea:	cf 93       	push	r28
    3eec:	00 d0       	rcall	.+0      	; 0x3eee <Led_TurnOff+0x6>
    3eee:	cd b7       	in	r28, 0x3d	; 61
    3ef0:	de b7       	in	r29, 0x3e	; 62
    3ef2:	89 83       	std	Y+1, r24	; 0x01
    3ef4:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinValue(Led_Pin_Port, Led_Pin_PinNum, GPIO_LOW);
    3ef6:	89 81       	ldd	r24, Y+1	; 0x01
    3ef8:	6a 81       	ldd	r22, Y+2	; 0x02
    3efa:	40 e0       	ldi	r20, 0x00	; 0
    3efc:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
}
    3f00:	0f 90       	pop	r0
    3f02:	0f 90       	pop	r0
    3f04:	cf 91       	pop	r28
    3f06:	df 91       	pop	r29
    3f08:	08 95       	ret

00003f0a <Led_Toggle>:


void Led_Toggle(u8 Led_Pin_Port, u8 Led_Pin_PinNum)
{
    3f0a:	df 93       	push	r29
    3f0c:	cf 93       	push	r28
    3f0e:	00 d0       	rcall	.+0      	; 0x3f10 <Led_Toggle+0x6>
    3f10:	cd b7       	in	r28, 0x3d	; 61
    3f12:	de b7       	in	r29, 0x3e	; 62
    3f14:	89 83       	std	Y+1, r24	; 0x01
    3f16:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidTogglePinValue(Led_Pin_Port, Led_Pin_PinNum);
    3f18:	89 81       	ldd	r24, Y+1	; 0x01
    3f1a:	6a 81       	ldd	r22, Y+2	; 0x02
    3f1c:	0e 94 17 14 	call	0x282e	; 0x282e <DIO_voidTogglePinValue>
}
    3f20:	0f 90       	pop	r0
    3f22:	0f 90       	pop	r0
    3f24:	cf 91       	pop	r28
    3f26:	df 91       	pop	r29
    3f28:	08 95       	ret

00003f2a <H_KEYPAD_void_Init>:
static u8 rows_ports[4] = {KEYPAD_R1_PORT, KEYPAD_R2_PORT, KEYPAD_R3_PORT, KEYPAD_R4_PORT};
static u8 cols_ports[4] = {KEYPAD_C1_PORT, KEYPAD_C2_PORT, KEYPAD_C3_PORT, KEYPAD_C4_PORT};


void H_KEYPAD_void_Init(void)
{
    3f2a:	df 93       	push	r29
    3f2c:	cf 93       	push	r28
    3f2e:	cd b7       	in	r28, 0x3d	; 61
    3f30:	de b7       	in	r29, 0x3e	; 62
	// initialize rows to be output mode
	DIO_voidSetPinDirection(KEYPAD_R1_PORT, KEYPAD_R1_PIN, GPIO_DIRECTION_OUTPUT);
    3f32:	82 e0       	ldi	r24, 0x02	; 2
    3f34:	65 e0       	ldi	r22, 0x05	; 5
    3f36:	41 e0       	ldi	r20, 0x01	; 1
    3f38:	0e 94 29 13 	call	0x2652	; 0x2652 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_R2_PORT, KEYPAD_R2_PIN, GPIO_DIRECTION_OUTPUT);
    3f3c:	82 e0       	ldi	r24, 0x02	; 2
    3f3e:	64 e0       	ldi	r22, 0x04	; 4
    3f40:	41 e0       	ldi	r20, 0x01	; 1
    3f42:	0e 94 29 13 	call	0x2652	; 0x2652 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_R3_PORT, KEYPAD_R3_PIN, GPIO_DIRECTION_OUTPUT);
    3f46:	82 e0       	ldi	r24, 0x02	; 2
    3f48:	63 e0       	ldi	r22, 0x03	; 3
    3f4a:	41 e0       	ldi	r20, 0x01	; 1
    3f4c:	0e 94 29 13 	call	0x2652	; 0x2652 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_R4_PORT, KEYPAD_R4_PIN, GPIO_DIRECTION_OUTPUT);
    3f50:	82 e0       	ldi	r24, 0x02	; 2
    3f52:	62 e0       	ldi	r22, 0x02	; 2
    3f54:	41 e0       	ldi	r20, 0x01	; 1
    3f56:	0e 94 29 13 	call	0x2652	; 0x2652 <DIO_voidSetPinDirection>

	// initialize columns to be output mode
	DIO_voidSetPinDirection(KEYPAD_C1_PORT, KEYPAD_R1_PIN, GPIO_DIRECTION_INPUT);
    3f5a:	83 e0       	ldi	r24, 0x03	; 3
    3f5c:	65 e0       	ldi	r22, 0x05	; 5
    3f5e:	40 e0       	ldi	r20, 0x00	; 0
    3f60:	0e 94 29 13 	call	0x2652	; 0x2652 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_C2_PORT, KEYPAD_R2_PIN, GPIO_DIRECTION_INPUT);
    3f64:	83 e0       	ldi	r24, 0x03	; 3
    3f66:	64 e0       	ldi	r22, 0x04	; 4
    3f68:	40 e0       	ldi	r20, 0x00	; 0
    3f6a:	0e 94 29 13 	call	0x2652	; 0x2652 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_C3_PORT, KEYPAD_R3_PIN, GPIO_DIRECTION_INPUT);
    3f6e:	83 e0       	ldi	r24, 0x03	; 3
    3f70:	63 e0       	ldi	r22, 0x03	; 3
    3f72:	40 e0       	ldi	r20, 0x00	; 0
    3f74:	0e 94 29 13 	call	0x2652	; 0x2652 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_C4_PORT, KEYPAD_R4_PIN, GPIO_DIRECTION_INPUT);
    3f78:	83 e0       	ldi	r24, 0x03	; 3
    3f7a:	62 e0       	ldi	r22, 0x02	; 2
    3f7c:	40 e0       	ldi	r20, 0x00	; 0
    3f7e:	0e 94 29 13 	call	0x2652	; 0x2652 <DIO_voidSetPinDirection>
}
    3f82:	cf 91       	pop	r28
    3f84:	df 91       	pop	r29
    3f86:	08 95       	ret

00003f88 <H_KEYPAD_u8_getPressedKey>:

void H_KEYPAD_u8_getPressedKey(u8 * pPressedKey)
{
    3f88:	df 93       	push	r29
    3f8a:	cf 93       	push	r28
    3f8c:	cd b7       	in	r28, 0x3d	; 61
    3f8e:	de b7       	in	r29, 0x3e	; 62
    3f90:	64 97       	sbiw	r28, 0x14	; 20
    3f92:	0f b6       	in	r0, 0x3f	; 63
    3f94:	f8 94       	cli
    3f96:	de bf       	out	0x3e, r29	; 62
    3f98:	0f be       	out	0x3f, r0	; 63
    3f9a:	cd bf       	out	0x3d, r28	; 61
    3f9c:	9c 8b       	std	Y+20, r25	; 0x14
    3f9e:	8b 8b       	std	Y+19, r24	; 0x13
	u8 l_row_counter = 0;
    3fa0:	1a 8a       	std	Y+18, r1	; 0x12
	u8 l_column_counter = 0;
    3fa2:	19 8a       	std	Y+17, r1	; 0x11
	u8 l_counter = 0;
    3fa4:	18 8a       	std	Y+16, r1	; 0x10
	u8 row_logic = 1;
    3fa6:	81 e0       	ldi	r24, 0x01	; 1
    3fa8:	8f 87       	std	Y+15, r24	; 0x0f
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
    3faa:	1a 8a       	std	Y+18, r1	; 0x12
    3fac:	d5 c0       	rjmp	.+426    	; 0x4158 <H_KEYPAD_u8_getPressedKey+0x1d0>
	{
		// Set All pins to be low at first
		for(l_counter = 0; l_counter < KEYPAD_ROWS; l_counter++)
    3fae:	18 8a       	std	Y+16, r1	; 0x10
    3fb0:	16 c0       	rjmp	.+44     	; 0x3fde <H_KEYPAD_u8_getPressedKey+0x56>
		{
			DIO_voidSetPinValue(rows_ports[l_counter], rows_pins[l_counter], GPIO_HIGH);
    3fb2:	88 89       	ldd	r24, Y+16	; 0x10
    3fb4:	88 2f       	mov	r24, r24
    3fb6:	90 e0       	ldi	r25, 0x00	; 0
    3fb8:	fc 01       	movw	r30, r24
    3fba:	ec 5d       	subi	r30, 0xDC	; 220
    3fbc:	fd 4f       	sbci	r31, 0xFD	; 253
    3fbe:	20 81       	ld	r18, Z
    3fc0:	88 89       	ldd	r24, Y+16	; 0x10
    3fc2:	88 2f       	mov	r24, r24
    3fc4:	90 e0       	ldi	r25, 0x00	; 0
    3fc6:	fc 01       	movw	r30, r24
    3fc8:	e4 5e       	subi	r30, 0xE4	; 228
    3fca:	fd 4f       	sbci	r31, 0xFD	; 253
    3fcc:	90 81       	ld	r25, Z
    3fce:	82 2f       	mov	r24, r18
    3fd0:	69 2f       	mov	r22, r25
    3fd2:	41 e0       	ldi	r20, 0x01	; 1
    3fd4:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
	u8 l_counter = 0;
	u8 row_logic = 1;
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
	{
		// Set All pins to be low at first
		for(l_counter = 0; l_counter < KEYPAD_ROWS; l_counter++)
    3fd8:	88 89       	ldd	r24, Y+16	; 0x10
    3fda:	8f 5f       	subi	r24, 0xFF	; 255
    3fdc:	88 8b       	std	Y+16, r24	; 0x10
    3fde:	88 89       	ldd	r24, Y+16	; 0x10
    3fe0:	84 30       	cpi	r24, 0x04	; 4
    3fe2:	38 f3       	brcs	.-50     	; 0x3fb2 <H_KEYPAD_u8_getPressedKey+0x2a>
		{
			DIO_voidSetPinValue(rows_ports[l_counter], rows_pins[l_counter], GPIO_HIGH);
		}

		DIO_voidSetPinValue(rows_ports[l_row_counter], rows_pins[l_row_counter], GPIO_LOW);
    3fe4:	8a 89       	ldd	r24, Y+18	; 0x12
    3fe6:	88 2f       	mov	r24, r24
    3fe8:	90 e0       	ldi	r25, 0x00	; 0
    3fea:	fc 01       	movw	r30, r24
    3fec:	ec 5d       	subi	r30, 0xDC	; 220
    3fee:	fd 4f       	sbci	r31, 0xFD	; 253
    3ff0:	20 81       	ld	r18, Z
    3ff2:	8a 89       	ldd	r24, Y+18	; 0x12
    3ff4:	88 2f       	mov	r24, r24
    3ff6:	90 e0       	ldi	r25, 0x00	; 0
    3ff8:	fc 01       	movw	r30, r24
    3ffa:	e4 5e       	subi	r30, 0xE4	; 228
    3ffc:	fd 4f       	sbci	r31, 0xFD	; 253
    3ffe:	90 81       	ld	r25, Z
    4000:	82 2f       	mov	r24, r18
    4002:	69 2f       	mov	r22, r25
    4004:	40 e0       	ldi	r20, 0x00	; 0
    4006:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
    400a:	80 e0       	ldi	r24, 0x00	; 0
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	a0 e2       	ldi	r26, 0x20	; 32
    4010:	b1 e4       	ldi	r27, 0x41	; 65
    4012:	8b 87       	std	Y+11, r24	; 0x0b
    4014:	9c 87       	std	Y+12, r25	; 0x0c
    4016:	ad 87       	std	Y+13, r26	; 0x0d
    4018:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    401a:	6b 85       	ldd	r22, Y+11	; 0x0b
    401c:	7c 85       	ldd	r23, Y+12	; 0x0c
    401e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4020:	9e 85       	ldd	r25, Y+14	; 0x0e
    4022:	20 e0       	ldi	r18, 0x00	; 0
    4024:	30 e0       	ldi	r19, 0x00	; 0
    4026:	4a e7       	ldi	r20, 0x7A	; 122
    4028:	55 e4       	ldi	r21, 0x45	; 69
    402a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    402e:	dc 01       	movw	r26, r24
    4030:	cb 01       	movw	r24, r22
    4032:	8f 83       	std	Y+7, r24	; 0x07
    4034:	98 87       	std	Y+8, r25	; 0x08
    4036:	a9 87       	std	Y+9, r26	; 0x09
    4038:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    403a:	6f 81       	ldd	r22, Y+7	; 0x07
    403c:	78 85       	ldd	r23, Y+8	; 0x08
    403e:	89 85       	ldd	r24, Y+9	; 0x09
    4040:	9a 85       	ldd	r25, Y+10	; 0x0a
    4042:	20 e0       	ldi	r18, 0x00	; 0
    4044:	30 e0       	ldi	r19, 0x00	; 0
    4046:	40 e8       	ldi	r20, 0x80	; 128
    4048:	5f e3       	ldi	r21, 0x3F	; 63
    404a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    404e:	88 23       	and	r24, r24
    4050:	2c f4       	brge	.+10     	; 0x405c <H_KEYPAD_u8_getPressedKey+0xd4>
		__ticks = 1;
    4052:	81 e0       	ldi	r24, 0x01	; 1
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	9e 83       	std	Y+6, r25	; 0x06
    4058:	8d 83       	std	Y+5, r24	; 0x05
    405a:	3f c0       	rjmp	.+126    	; 0x40da <H_KEYPAD_u8_getPressedKey+0x152>
	else if (__tmp > 65535)
    405c:	6f 81       	ldd	r22, Y+7	; 0x07
    405e:	78 85       	ldd	r23, Y+8	; 0x08
    4060:	89 85       	ldd	r24, Y+9	; 0x09
    4062:	9a 85       	ldd	r25, Y+10	; 0x0a
    4064:	20 e0       	ldi	r18, 0x00	; 0
    4066:	3f ef       	ldi	r19, 0xFF	; 255
    4068:	4f e7       	ldi	r20, 0x7F	; 127
    406a:	57 e4       	ldi	r21, 0x47	; 71
    406c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4070:	18 16       	cp	r1, r24
    4072:	4c f5       	brge	.+82     	; 0x40c6 <H_KEYPAD_u8_getPressedKey+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4074:	6b 85       	ldd	r22, Y+11	; 0x0b
    4076:	7c 85       	ldd	r23, Y+12	; 0x0c
    4078:	8d 85       	ldd	r24, Y+13	; 0x0d
    407a:	9e 85       	ldd	r25, Y+14	; 0x0e
    407c:	20 e0       	ldi	r18, 0x00	; 0
    407e:	30 e0       	ldi	r19, 0x00	; 0
    4080:	40 e2       	ldi	r20, 0x20	; 32
    4082:	51 e4       	ldi	r21, 0x41	; 65
    4084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4088:	dc 01       	movw	r26, r24
    408a:	cb 01       	movw	r24, r22
    408c:	bc 01       	movw	r22, r24
    408e:	cd 01       	movw	r24, r26
    4090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4094:	dc 01       	movw	r26, r24
    4096:	cb 01       	movw	r24, r22
    4098:	9e 83       	std	Y+6, r25	; 0x06
    409a:	8d 83       	std	Y+5, r24	; 0x05
    409c:	0f c0       	rjmp	.+30     	; 0x40bc <H_KEYPAD_u8_getPressedKey+0x134>
    409e:	80 e9       	ldi	r24, 0x90	; 144
    40a0:	91 e0       	ldi	r25, 0x01	; 1
    40a2:	9c 83       	std	Y+4, r25	; 0x04
    40a4:	8b 83       	std	Y+3, r24	; 0x03
    40a6:	8b 81       	ldd	r24, Y+3	; 0x03
    40a8:	9c 81       	ldd	r25, Y+4	; 0x04
    40aa:	01 97       	sbiw	r24, 0x01	; 1
    40ac:	f1 f7       	brne	.-4      	; 0x40aa <H_KEYPAD_u8_getPressedKey+0x122>
    40ae:	9c 83       	std	Y+4, r25	; 0x04
    40b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40b2:	8d 81       	ldd	r24, Y+5	; 0x05
    40b4:	9e 81       	ldd	r25, Y+6	; 0x06
    40b6:	01 97       	sbiw	r24, 0x01	; 1
    40b8:	9e 83       	std	Y+6, r25	; 0x06
    40ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40bc:	8d 81       	ldd	r24, Y+5	; 0x05
    40be:	9e 81       	ldd	r25, Y+6	; 0x06
    40c0:	00 97       	sbiw	r24, 0x00	; 0
    40c2:	69 f7       	brne	.-38     	; 0x409e <H_KEYPAD_u8_getPressedKey+0x116>
    40c4:	14 c0       	rjmp	.+40     	; 0x40ee <H_KEYPAD_u8_getPressedKey+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40c6:	6f 81       	ldd	r22, Y+7	; 0x07
    40c8:	78 85       	ldd	r23, Y+8	; 0x08
    40ca:	89 85       	ldd	r24, Y+9	; 0x09
    40cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    40ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40d2:	dc 01       	movw	r26, r24
    40d4:	cb 01       	movw	r24, r22
    40d6:	9e 83       	std	Y+6, r25	; 0x06
    40d8:	8d 83       	std	Y+5, r24	; 0x05
    40da:	8d 81       	ldd	r24, Y+5	; 0x05
    40dc:	9e 81       	ldd	r25, Y+6	; 0x06
    40de:	9a 83       	std	Y+2, r25	; 0x02
    40e0:	89 83       	std	Y+1, r24	; 0x01
    40e2:	89 81       	ldd	r24, Y+1	; 0x01
    40e4:	9a 81       	ldd	r25, Y+2	; 0x02
    40e6:	01 97       	sbiw	r24, 0x01	; 1
    40e8:	f1 f7       	brne	.-4      	; 0x40e6 <H_KEYPAD_u8_getPressedKey+0x15e>
    40ea:	9a 83       	std	Y+2, r25	; 0x02
    40ec:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(10);

		for(l_column_counter = 0; l_column_counter < KEYPAD_COLUMNS; l_column_counter++)
    40ee:	19 8a       	std	Y+17, r1	; 0x11
    40f0:	2d c0       	rjmp	.+90     	; 0x414c <H_KEYPAD_u8_getPressedKey+0x1c4>
		{
			row_logic = DIO_u8GetPinValue(cols_ports[l_column_counter], cols_pins[l_column_counter]);
    40f2:	89 89       	ldd	r24, Y+17	; 0x11
    40f4:	88 2f       	mov	r24, r24
    40f6:	90 e0       	ldi	r25, 0x00	; 0
    40f8:	fc 01       	movw	r30, r24
    40fa:	e8 5d       	subi	r30, 0xD8	; 216
    40fc:	fd 4f       	sbci	r31, 0xFD	; 253
    40fe:	20 81       	ld	r18, Z
    4100:	89 89       	ldd	r24, Y+17	; 0x11
    4102:	88 2f       	mov	r24, r24
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	fc 01       	movw	r30, r24
    4108:	e0 5e       	subi	r30, 0xE0	; 224
    410a:	fd 4f       	sbci	r31, 0xFD	; 253
    410c:	90 81       	ld	r25, Z
    410e:	82 2f       	mov	r24, r18
    4110:	69 2f       	mov	r22, r25
    4112:	0e 94 4f 14 	call	0x289e	; 0x289e <DIO_u8GetPinValue>
    4116:	8f 87       	std	Y+15, r24	; 0x0f

			if(row_logic == GPIO_LOW)
    4118:	8f 85       	ldd	r24, Y+15	; 0x0f
    411a:	88 23       	and	r24, r24
    411c:	a1 f4       	brne	.+40     	; 0x4146 <H_KEYPAD_u8_getPressedKey+0x1be>
			{
				*pPressedKey = btn_values[l_row_counter][l_column_counter];
    411e:	8a 89       	ldd	r24, Y+18	; 0x12
    4120:	48 2f       	mov	r20, r24
    4122:	50 e0       	ldi	r21, 0x00	; 0
    4124:	89 89       	ldd	r24, Y+17	; 0x11
    4126:	28 2f       	mov	r18, r24
    4128:	30 e0       	ldi	r19, 0x00	; 0
    412a:	ca 01       	movw	r24, r20
    412c:	88 0f       	add	r24, r24
    412e:	99 1f       	adc	r25, r25
    4130:	88 0f       	add	r24, r24
    4132:	99 1f       	adc	r25, r25
    4134:	82 0f       	add	r24, r18
    4136:	93 1f       	adc	r25, r19
    4138:	fc 01       	movw	r30, r24
    413a:	ec 5b       	subi	r30, 0xBC	; 188
    413c:	fd 4f       	sbci	r31, 0xFD	; 253
    413e:	80 81       	ld	r24, Z
    4140:	eb 89       	ldd	r30, Y+19	; 0x13
    4142:	fc 89       	ldd	r31, Y+20	; 0x14
    4144:	80 83       	st	Z, r24

		DIO_voidSetPinValue(rows_ports[l_row_counter], rows_pins[l_row_counter], GPIO_LOW);

		_delay_ms(10);

		for(l_column_counter = 0; l_column_counter < KEYPAD_COLUMNS; l_column_counter++)
    4146:	89 89       	ldd	r24, Y+17	; 0x11
    4148:	8f 5f       	subi	r24, 0xFF	; 255
    414a:	89 8b       	std	Y+17, r24	; 0x11
    414c:	89 89       	ldd	r24, Y+17	; 0x11
    414e:	84 30       	cpi	r24, 0x04	; 4
    4150:	80 f2       	brcs	.-96     	; 0x40f2 <H_KEYPAD_u8_getPressedKey+0x16a>
{
	u8 l_row_counter = 0;
	u8 l_column_counter = 0;
	u8 l_counter = 0;
	u8 row_logic = 1;
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
    4152:	8a 89       	ldd	r24, Y+18	; 0x12
    4154:	8f 5f       	subi	r24, 0xFF	; 255
    4156:	8a 8b       	std	Y+18, r24	; 0x12
    4158:	8a 89       	ldd	r24, Y+18	; 0x12
    415a:	84 30       	cpi	r24, 0x04	; 4
    415c:	08 f4       	brcc	.+2      	; 0x4160 <H_KEYPAD_u8_getPressedKey+0x1d8>
    415e:	27 cf       	rjmp	.-434    	; 0x3fae <H_KEYPAD_u8_getPressedKey+0x26>
				*pPressedKey = btn_values[l_row_counter][l_column_counter];
			}
			else{/* Nothing */}
		}
	}
}
    4160:	64 96       	adiw	r28, 0x14	; 20
    4162:	0f b6       	in	r0, 0x3f	; 63
    4164:	f8 94       	cli
    4166:	de bf       	out	0x3e, r29	; 62
    4168:	0f be       	out	0x3f, r0	; 63
    416a:	cd bf       	out	0x3d, r28	; 61
    416c:	cf 91       	pop	r28
    416e:	df 91       	pop	r29
    4170:	08 95       	ret

00004172 <keypad_cursor_init>:

/* -------------------------------------------------------------- Additional functions ----------------------------------------- */

// to initialize digits
void keypad_cursor_init(keypad_digit_t *digits_obj)
{
    4172:	df 93       	push	r29
    4174:	cf 93       	push	r28
    4176:	00 d0       	rcall	.+0      	; 0x4178 <keypad_cursor_init+0x6>
    4178:	0f 92       	push	r0
    417a:	cd b7       	in	r28, 0x3d	; 61
    417c:	de b7       	in	r29, 0x3e	; 62
    417e:	9b 83       	std	Y+3, r25	; 0x03
    4180:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t l_cursor = 0;
    4182:	19 82       	std	Y+1, r1	; 0x01
	if(NULL != digits_obj)
    4184:	8a 81       	ldd	r24, Y+2	; 0x02
    4186:	9b 81       	ldd	r25, Y+3	; 0x03
    4188:	00 97       	sbiw	r24, 0x00	; 0
    418a:	f1 f0       	breq	.+60     	; 0x41c8 <keypad_cursor_init+0x56>
	{
		digits_obj->cursor = 0;
    418c:	ea 81       	ldd	r30, Y+2	; 0x02
    418e:	fb 81       	ldd	r31, Y+3	; 0x03
    4190:	12 86       	std	Z+10, r1	; 0x0a
		for(l_cursor = 0; l_cursor < 5; l_cursor++)
    4192:	19 82       	std	Y+1, r1	; 0x01
    4194:	16 c0       	rjmp	.+44     	; 0x41c2 <keypad_cursor_init+0x50>
		{
			digits_obj->digits[l_cursor] = 0;
    4196:	89 81       	ldd	r24, Y+1	; 0x01
    4198:	28 2f       	mov	r18, r24
    419a:	30 e0       	ldi	r19, 0x00	; 0
    419c:	8a 81       	ldd	r24, Y+2	; 0x02
    419e:	9b 81       	ldd	r25, Y+3	; 0x03
    41a0:	fc 01       	movw	r30, r24
    41a2:	e2 0f       	add	r30, r18
    41a4:	f3 1f       	adc	r31, r19
    41a6:	10 82       	st	Z, r1
			digits_obj->pass_digits[l_cursor] = 0;
    41a8:	89 81       	ldd	r24, Y+1	; 0x01
    41aa:	28 2f       	mov	r18, r24
    41ac:	30 e0       	ldi	r19, 0x00	; 0
    41ae:	8a 81       	ldd	r24, Y+2	; 0x02
    41b0:	9b 81       	ldd	r25, Y+3	; 0x03
    41b2:	82 0f       	add	r24, r18
    41b4:	93 1f       	adc	r25, r19
    41b6:	fc 01       	movw	r30, r24
    41b8:	35 96       	adiw	r30, 0x05	; 5
    41ba:	10 82       	st	Z, r1
{
	uint8_t l_cursor = 0;
	if(NULL != digits_obj)
	{
		digits_obj->cursor = 0;
		for(l_cursor = 0; l_cursor < 5; l_cursor++)
    41bc:	89 81       	ldd	r24, Y+1	; 0x01
    41be:	8f 5f       	subi	r24, 0xFF	; 255
    41c0:	89 83       	std	Y+1, r24	; 0x01
    41c2:	89 81       	ldd	r24, Y+1	; 0x01
    41c4:	85 30       	cpi	r24, 0x05	; 5
    41c6:	38 f3       	brcs	.-50     	; 0x4196 <keypad_cursor_init+0x24>
		{
			digits_obj->digits[l_cursor] = 0;
			digits_obj->pass_digits[l_cursor] = 0;
		}
	}
}
    41c8:	0f 90       	pop	r0
    41ca:	0f 90       	pop	r0
    41cc:	0f 90       	pop	r0
    41ce:	cf 91       	pop	r28
    41d0:	df 91       	pop	r29
    41d2:	08 95       	ret

000041d4 <H_KEYPAD_u8_WriteOnDigits>:


void H_KEYPAD_u8_WriteOnDigits(keypad_digit_t *digits_obj)
{
    41d4:	df 93       	push	r29
    41d6:	cf 93       	push	r28
    41d8:	cd b7       	in	r28, 0x3d	; 61
    41da:	de b7       	in	r29, 0x3e	; 62
    41dc:	64 97       	sbiw	r28, 0x14	; 20
    41de:	0f b6       	in	r0, 0x3f	; 63
    41e0:	f8 94       	cli
    41e2:	de bf       	out	0x3e, r29	; 62
    41e4:	0f be       	out	0x3f, r0	; 63
    41e6:	cd bf       	out	0x3d, r28	; 61
    41e8:	9c 8b       	std	Y+20, r25	; 0x14
    41ea:	8b 8b       	std	Y+19, r24	; 0x13
	u8 l_row_counter = 0;
    41ec:	1a 8a       	std	Y+18, r1	; 0x12
	u8 l_column_counter = 0;
    41ee:	19 8a       	std	Y+17, r1	; 0x11
	u8 l_counter = 0;
    41f0:	18 8a       	std	Y+16, r1	; 0x10
	u8 row_logic = 1;
    41f2:	81 e0       	ldi	r24, 0x01	; 1
    41f4:	8f 87       	std	Y+15, r24	; 0x0f
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
    41f6:	1a 8a       	std	Y+18, r1	; 0x12
    41f8:	1f c1       	rjmp	.+574    	; 0x4438 <H_KEYPAD_u8_WriteOnDigits+0x264>
	{
		// Set All pins to be low at first
		for(l_counter = 0; l_counter < KEYPAD_ROWS; l_counter++)
    41fa:	18 8a       	std	Y+16, r1	; 0x10
    41fc:	16 c0       	rjmp	.+44     	; 0x422a <H_KEYPAD_u8_WriteOnDigits+0x56>
		{
			DIO_voidSetPinValue(rows_ports[l_counter], rows_pins[l_counter], GPIO_HIGH);
    41fe:	88 89       	ldd	r24, Y+16	; 0x10
    4200:	88 2f       	mov	r24, r24
    4202:	90 e0       	ldi	r25, 0x00	; 0
    4204:	fc 01       	movw	r30, r24
    4206:	ec 5d       	subi	r30, 0xDC	; 220
    4208:	fd 4f       	sbci	r31, 0xFD	; 253
    420a:	20 81       	ld	r18, Z
    420c:	88 89       	ldd	r24, Y+16	; 0x10
    420e:	88 2f       	mov	r24, r24
    4210:	90 e0       	ldi	r25, 0x00	; 0
    4212:	fc 01       	movw	r30, r24
    4214:	e4 5e       	subi	r30, 0xE4	; 228
    4216:	fd 4f       	sbci	r31, 0xFD	; 253
    4218:	90 81       	ld	r25, Z
    421a:	82 2f       	mov	r24, r18
    421c:	69 2f       	mov	r22, r25
    421e:	41 e0       	ldi	r20, 0x01	; 1
    4220:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
	u8 l_counter = 0;
	u8 row_logic = 1;
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
	{
		// Set All pins to be low at first
		for(l_counter = 0; l_counter < KEYPAD_ROWS; l_counter++)
    4224:	88 89       	ldd	r24, Y+16	; 0x10
    4226:	8f 5f       	subi	r24, 0xFF	; 255
    4228:	88 8b       	std	Y+16, r24	; 0x10
    422a:	88 89       	ldd	r24, Y+16	; 0x10
    422c:	84 30       	cpi	r24, 0x04	; 4
    422e:	38 f3       	brcs	.-50     	; 0x41fe <H_KEYPAD_u8_WriteOnDigits+0x2a>
		{
			DIO_voidSetPinValue(rows_ports[l_counter], rows_pins[l_counter], GPIO_HIGH);
		}

		DIO_voidSetPinValue(rows_ports[l_row_counter], rows_pins[l_row_counter], GPIO_LOW);
    4230:	8a 89       	ldd	r24, Y+18	; 0x12
    4232:	88 2f       	mov	r24, r24
    4234:	90 e0       	ldi	r25, 0x00	; 0
    4236:	fc 01       	movw	r30, r24
    4238:	ec 5d       	subi	r30, 0xDC	; 220
    423a:	fd 4f       	sbci	r31, 0xFD	; 253
    423c:	20 81       	ld	r18, Z
    423e:	8a 89       	ldd	r24, Y+18	; 0x12
    4240:	88 2f       	mov	r24, r24
    4242:	90 e0       	ldi	r25, 0x00	; 0
    4244:	fc 01       	movw	r30, r24
    4246:	e4 5e       	subi	r30, 0xE4	; 228
    4248:	fd 4f       	sbci	r31, 0xFD	; 253
    424a:	90 81       	ld	r25, Z
    424c:	82 2f       	mov	r24, r18
    424e:	69 2f       	mov	r22, r25
    4250:	40 e0       	ldi	r20, 0x00	; 0
    4252:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_voidSetPinValue>
    4256:	80 e0       	ldi	r24, 0x00	; 0
    4258:	90 e0       	ldi	r25, 0x00	; 0
    425a:	a0 ea       	ldi	r26, 0xA0	; 160
    425c:	b1 e4       	ldi	r27, 0x41	; 65
    425e:	8b 87       	std	Y+11, r24	; 0x0b
    4260:	9c 87       	std	Y+12, r25	; 0x0c
    4262:	ad 87       	std	Y+13, r26	; 0x0d
    4264:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4266:	6b 85       	ldd	r22, Y+11	; 0x0b
    4268:	7c 85       	ldd	r23, Y+12	; 0x0c
    426a:	8d 85       	ldd	r24, Y+13	; 0x0d
    426c:	9e 85       	ldd	r25, Y+14	; 0x0e
    426e:	20 e0       	ldi	r18, 0x00	; 0
    4270:	30 e0       	ldi	r19, 0x00	; 0
    4272:	4a e7       	ldi	r20, 0x7A	; 122
    4274:	55 e4       	ldi	r21, 0x45	; 69
    4276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    427a:	dc 01       	movw	r26, r24
    427c:	cb 01       	movw	r24, r22
    427e:	8f 83       	std	Y+7, r24	; 0x07
    4280:	98 87       	std	Y+8, r25	; 0x08
    4282:	a9 87       	std	Y+9, r26	; 0x09
    4284:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4286:	6f 81       	ldd	r22, Y+7	; 0x07
    4288:	78 85       	ldd	r23, Y+8	; 0x08
    428a:	89 85       	ldd	r24, Y+9	; 0x09
    428c:	9a 85       	ldd	r25, Y+10	; 0x0a
    428e:	20 e0       	ldi	r18, 0x00	; 0
    4290:	30 e0       	ldi	r19, 0x00	; 0
    4292:	40 e8       	ldi	r20, 0x80	; 128
    4294:	5f e3       	ldi	r21, 0x3F	; 63
    4296:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    429a:	88 23       	and	r24, r24
    429c:	2c f4       	brge	.+10     	; 0x42a8 <H_KEYPAD_u8_WriteOnDigits+0xd4>
		__ticks = 1;
    429e:	81 e0       	ldi	r24, 0x01	; 1
    42a0:	90 e0       	ldi	r25, 0x00	; 0
    42a2:	9e 83       	std	Y+6, r25	; 0x06
    42a4:	8d 83       	std	Y+5, r24	; 0x05
    42a6:	3f c0       	rjmp	.+126    	; 0x4326 <H_KEYPAD_u8_WriteOnDigits+0x152>
	else if (__tmp > 65535)
    42a8:	6f 81       	ldd	r22, Y+7	; 0x07
    42aa:	78 85       	ldd	r23, Y+8	; 0x08
    42ac:	89 85       	ldd	r24, Y+9	; 0x09
    42ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    42b0:	20 e0       	ldi	r18, 0x00	; 0
    42b2:	3f ef       	ldi	r19, 0xFF	; 255
    42b4:	4f e7       	ldi	r20, 0x7F	; 127
    42b6:	57 e4       	ldi	r21, 0x47	; 71
    42b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42bc:	18 16       	cp	r1, r24
    42be:	4c f5       	brge	.+82     	; 0x4312 <H_KEYPAD_u8_WriteOnDigits+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    42c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    42c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    42c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    42c8:	20 e0       	ldi	r18, 0x00	; 0
    42ca:	30 e0       	ldi	r19, 0x00	; 0
    42cc:	40 e2       	ldi	r20, 0x20	; 32
    42ce:	51 e4       	ldi	r21, 0x41	; 65
    42d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42d4:	dc 01       	movw	r26, r24
    42d6:	cb 01       	movw	r24, r22
    42d8:	bc 01       	movw	r22, r24
    42da:	cd 01       	movw	r24, r26
    42dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42e0:	dc 01       	movw	r26, r24
    42e2:	cb 01       	movw	r24, r22
    42e4:	9e 83       	std	Y+6, r25	; 0x06
    42e6:	8d 83       	std	Y+5, r24	; 0x05
    42e8:	0f c0       	rjmp	.+30     	; 0x4308 <H_KEYPAD_u8_WriteOnDigits+0x134>
    42ea:	80 e9       	ldi	r24, 0x90	; 144
    42ec:	91 e0       	ldi	r25, 0x01	; 1
    42ee:	9c 83       	std	Y+4, r25	; 0x04
    42f0:	8b 83       	std	Y+3, r24	; 0x03
    42f2:	8b 81       	ldd	r24, Y+3	; 0x03
    42f4:	9c 81       	ldd	r25, Y+4	; 0x04
    42f6:	01 97       	sbiw	r24, 0x01	; 1
    42f8:	f1 f7       	brne	.-4      	; 0x42f6 <H_KEYPAD_u8_WriteOnDigits+0x122>
    42fa:	9c 83       	std	Y+4, r25	; 0x04
    42fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42fe:	8d 81       	ldd	r24, Y+5	; 0x05
    4300:	9e 81       	ldd	r25, Y+6	; 0x06
    4302:	01 97       	sbiw	r24, 0x01	; 1
    4304:	9e 83       	std	Y+6, r25	; 0x06
    4306:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4308:	8d 81       	ldd	r24, Y+5	; 0x05
    430a:	9e 81       	ldd	r25, Y+6	; 0x06
    430c:	00 97       	sbiw	r24, 0x00	; 0
    430e:	69 f7       	brne	.-38     	; 0x42ea <H_KEYPAD_u8_WriteOnDigits+0x116>
    4310:	14 c0       	rjmp	.+40     	; 0x433a <H_KEYPAD_u8_WriteOnDigits+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4312:	6f 81       	ldd	r22, Y+7	; 0x07
    4314:	78 85       	ldd	r23, Y+8	; 0x08
    4316:	89 85       	ldd	r24, Y+9	; 0x09
    4318:	9a 85       	ldd	r25, Y+10	; 0x0a
    431a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    431e:	dc 01       	movw	r26, r24
    4320:	cb 01       	movw	r24, r22
    4322:	9e 83       	std	Y+6, r25	; 0x06
    4324:	8d 83       	std	Y+5, r24	; 0x05
    4326:	8d 81       	ldd	r24, Y+5	; 0x05
    4328:	9e 81       	ldd	r25, Y+6	; 0x06
    432a:	9a 83       	std	Y+2, r25	; 0x02
    432c:	89 83       	std	Y+1, r24	; 0x01
    432e:	89 81       	ldd	r24, Y+1	; 0x01
    4330:	9a 81       	ldd	r25, Y+2	; 0x02
    4332:	01 97       	sbiw	r24, 0x01	; 1
    4334:	f1 f7       	brne	.-4      	; 0x4332 <H_KEYPAD_u8_WriteOnDigits+0x15e>
    4336:	9a 83       	std	Y+2, r25	; 0x02
    4338:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(20);

		for(l_column_counter = 0; l_column_counter < KEYPAD_COLUMNS; l_column_counter++)
    433a:	19 8a       	std	Y+17, r1	; 0x11
    433c:	76 c0       	rjmp	.+236    	; 0x442a <H_KEYPAD_u8_WriteOnDigits+0x256>
		{
			row_logic = DIO_u8GetPinValue(cols_ports[l_column_counter], cols_pins[l_column_counter]);
    433e:	89 89       	ldd	r24, Y+17	; 0x11
    4340:	88 2f       	mov	r24, r24
    4342:	90 e0       	ldi	r25, 0x00	; 0
    4344:	fc 01       	movw	r30, r24
    4346:	e8 5d       	subi	r30, 0xD8	; 216
    4348:	fd 4f       	sbci	r31, 0xFD	; 253
    434a:	20 81       	ld	r18, Z
    434c:	89 89       	ldd	r24, Y+17	; 0x11
    434e:	88 2f       	mov	r24, r24
    4350:	90 e0       	ldi	r25, 0x00	; 0
    4352:	fc 01       	movw	r30, r24
    4354:	e0 5e       	subi	r30, 0xE0	; 224
    4356:	fd 4f       	sbci	r31, 0xFD	; 253
    4358:	90 81       	ld	r25, Z
    435a:	82 2f       	mov	r24, r18
    435c:	69 2f       	mov	r22, r25
    435e:	0e 94 4f 14 	call	0x289e	; 0x289e <DIO_u8GetPinValue>
    4362:	8f 87       	std	Y+15, r24	; 0x0f

			if(row_logic == GPIO_LOW)
    4364:	8f 85       	ldd	r24, Y+15	; 0x0f
    4366:	88 23       	and	r24, r24
    4368:	09 f0       	breq	.+2      	; 0x436c <H_KEYPAD_u8_WriteOnDigits+0x198>
    436a:	5c c0       	rjmp	.+184    	; 0x4424 <H_KEYPAD_u8_WriteOnDigits+0x250>
			{
				if(digits_obj->cursor < 4)
    436c:	eb 89       	ldd	r30, Y+19	; 0x13
    436e:	fc 89       	ldd	r31, Y+20	; 0x14
    4370:	82 85       	ldd	r24, Z+10	; 0x0a
    4372:	84 30       	cpi	r24, 0x04	; 4
    4374:	08 f0       	brcs	.+2      	; 0x4378 <H_KEYPAD_u8_WriteOnDigits+0x1a4>
    4376:	40 c0       	rjmp	.+128    	; 0x43f8 <H_KEYPAD_u8_WriteOnDigits+0x224>
				{
					digits_obj->digits[digits_obj->cursor] = btn_values2[l_row_counter][l_column_counter];
    4378:	eb 89       	ldd	r30, Y+19	; 0x13
    437a:	fc 89       	ldd	r31, Y+20	; 0x14
    437c:	82 85       	ldd	r24, Z+10	; 0x0a
    437e:	68 2f       	mov	r22, r24
    4380:	70 e0       	ldi	r23, 0x00	; 0
    4382:	8a 89       	ldd	r24, Y+18	; 0x12
    4384:	48 2f       	mov	r20, r24
    4386:	50 e0       	ldi	r21, 0x00	; 0
    4388:	89 89       	ldd	r24, Y+17	; 0x11
    438a:	28 2f       	mov	r18, r24
    438c:	30 e0       	ldi	r19, 0x00	; 0
    438e:	ca 01       	movw	r24, r20
    4390:	88 0f       	add	r24, r24
    4392:	99 1f       	adc	r25, r25
    4394:	88 0f       	add	r24, r24
    4396:	99 1f       	adc	r25, r25
    4398:	82 0f       	add	r24, r18
    439a:	93 1f       	adc	r25, r19
    439c:	fc 01       	movw	r30, r24
    439e:	ec 5a       	subi	r30, 0xAC	; 172
    43a0:	fd 4f       	sbci	r31, 0xFD	; 253
    43a2:	20 81       	ld	r18, Z
    43a4:	8b 89       	ldd	r24, Y+19	; 0x13
    43a6:	9c 89       	ldd	r25, Y+20	; 0x14
    43a8:	fc 01       	movw	r30, r24
    43aa:	e6 0f       	add	r30, r22
    43ac:	f7 1f       	adc	r31, r23
    43ae:	20 83       	st	Z, r18
					digits_obj->pass_digits[digits_obj->cursor] = btn_values2_pass[l_row_counter][l_column_counter];
    43b0:	eb 89       	ldd	r30, Y+19	; 0x13
    43b2:	fc 89       	ldd	r31, Y+20	; 0x14
    43b4:	82 85       	ldd	r24, Z+10	; 0x0a
    43b6:	68 2f       	mov	r22, r24
    43b8:	70 e0       	ldi	r23, 0x00	; 0
    43ba:	8a 89       	ldd	r24, Y+18	; 0x12
    43bc:	48 2f       	mov	r20, r24
    43be:	50 e0       	ldi	r21, 0x00	; 0
    43c0:	89 89       	ldd	r24, Y+17	; 0x11
    43c2:	28 2f       	mov	r18, r24
    43c4:	30 e0       	ldi	r19, 0x00	; 0
    43c6:	ca 01       	movw	r24, r20
    43c8:	88 0f       	add	r24, r24
    43ca:	99 1f       	adc	r25, r25
    43cc:	88 0f       	add	r24, r24
    43ce:	99 1f       	adc	r25, r25
    43d0:	82 0f       	add	r24, r18
    43d2:	93 1f       	adc	r25, r19
    43d4:	fc 01       	movw	r30, r24
    43d6:	ec 59       	subi	r30, 0x9C	; 156
    43d8:	fd 4f       	sbci	r31, 0xFD	; 253
    43da:	20 81       	ld	r18, Z
    43dc:	8b 89       	ldd	r24, Y+19	; 0x13
    43de:	9c 89       	ldd	r25, Y+20	; 0x14
    43e0:	86 0f       	add	r24, r22
    43e2:	97 1f       	adc	r25, r23
    43e4:	fc 01       	movw	r30, r24
    43e6:	35 96       	adiw	r30, 0x05	; 5
    43e8:	20 83       	st	Z, r18
					digits_obj->cursor += 1;
    43ea:	eb 89       	ldd	r30, Y+19	; 0x13
    43ec:	fc 89       	ldd	r31, Y+20	; 0x14
    43ee:	82 85       	ldd	r24, Z+10	; 0x0a
    43f0:	8f 5f       	subi	r24, 0xFF	; 255
    43f2:	eb 89       	ldd	r30, Y+19	; 0x13
    43f4:	fc 89       	ldd	r31, Y+20	; 0x14
    43f6:	82 87       	std	Z+10, r24	; 0x0a
				}

				if(btn_values2[l_row_counter][l_column_counter] == '-')
    43f8:	8a 89       	ldd	r24, Y+18	; 0x12
    43fa:	48 2f       	mov	r20, r24
    43fc:	50 e0       	ldi	r21, 0x00	; 0
    43fe:	89 89       	ldd	r24, Y+17	; 0x11
    4400:	28 2f       	mov	r18, r24
    4402:	30 e0       	ldi	r19, 0x00	; 0
    4404:	ca 01       	movw	r24, r20
    4406:	88 0f       	add	r24, r24
    4408:	99 1f       	adc	r25, r25
    440a:	88 0f       	add	r24, r24
    440c:	99 1f       	adc	r25, r25
    440e:	82 0f       	add	r24, r18
    4410:	93 1f       	adc	r25, r19
    4412:	fc 01       	movw	r30, r24
    4414:	ec 5a       	subi	r30, 0xAC	; 172
    4416:	fd 4f       	sbci	r31, 0xFD	; 253
    4418:	80 81       	ld	r24, Z
    441a:	8d 32       	cpi	r24, 0x2D	; 45
    441c:	19 f4       	brne	.+6      	; 0x4424 <H_KEYPAD_u8_WriteOnDigits+0x250>
				{
					digits_obj->cursor = 0;
    441e:	eb 89       	ldd	r30, Y+19	; 0x13
    4420:	fc 89       	ldd	r31, Y+20	; 0x14
    4422:	12 86       	std	Z+10, r1	; 0x0a

		DIO_voidSetPinValue(rows_ports[l_row_counter], rows_pins[l_row_counter], GPIO_LOW);

		_delay_ms(20);

		for(l_column_counter = 0; l_column_counter < KEYPAD_COLUMNS; l_column_counter++)
    4424:	89 89       	ldd	r24, Y+17	; 0x11
    4426:	8f 5f       	subi	r24, 0xFF	; 255
    4428:	89 8b       	std	Y+17, r24	; 0x11
    442a:	89 89       	ldd	r24, Y+17	; 0x11
    442c:	84 30       	cpi	r24, 0x04	; 4
    442e:	08 f4       	brcc	.+2      	; 0x4432 <H_KEYPAD_u8_WriteOnDigits+0x25e>
    4430:	86 cf       	rjmp	.-244    	; 0x433e <H_KEYPAD_u8_WriteOnDigits+0x16a>
{
	u8 l_row_counter = 0;
	u8 l_column_counter = 0;
	u8 l_counter = 0;
	u8 row_logic = 1;
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
    4432:	8a 89       	ldd	r24, Y+18	; 0x12
    4434:	8f 5f       	subi	r24, 0xFF	; 255
    4436:	8a 8b       	std	Y+18, r24	; 0x12
    4438:	8a 89       	ldd	r24, Y+18	; 0x12
    443a:	84 30       	cpi	r24, 0x04	; 4
    443c:	08 f4       	brcc	.+2      	; 0x4440 <H_KEYPAD_u8_WriteOnDigits+0x26c>
    443e:	dd ce       	rjmp	.-582    	; 0x41fa <H_KEYPAD_u8_WriteOnDigits+0x26>

			}
			else{/* Nothing */}
		}
	}
}
    4440:	64 96       	adiw	r28, 0x14	; 20
    4442:	0f b6       	in	r0, 0x3f	; 63
    4444:	f8 94       	cli
    4446:	de bf       	out	0x3e, r29	; 62
    4448:	0f be       	out	0x3f, r0	; 63
    444a:	cd bf       	out	0x3d, r28	; 61
    444c:	cf 91       	pop	r28
    444e:	df 91       	pop	r29
    4450:	08 95       	ret

00004452 <EEPROM_Init>:
#include "EEPROM.h"



void EEPROM_Init(u8 req_speed)
{
    4452:	df 93       	push	r29
    4454:	cf 93       	push	r28
    4456:	00 d0       	rcall	.+0      	; 0x4458 <EEPROM_Init+0x6>
    4458:	00 d0       	rcall	.+0      	; 0x445a <EEPROM_Init+0x8>
    445a:	0f 92       	push	r0
    445c:	cd b7       	in	r28, 0x3d	; 61
    445e:	de b7       	in	r29, 0x3e	; 62
    4460:	8d 83       	std	Y+5, r24	; 0x05
	Error_Status_t ret_status = NO_ERROR;
    4462:	19 82       	std	Y+1, r1	; 0x01
	i2c_t init_i2c = {.master_or_slave = I2C_MASTER_MODE,
					  .frequency = req_speed,
					  .prescaler = 0};
    4464:	1a 82       	std	Y+2, r1	; 0x02
    4466:	8d 81       	ldd	r24, Y+5	; 0x05
    4468:	8b 83       	std	Y+3, r24	; 0x03
    446a:	1c 82       	std	Y+4, r1	; 0x04
	ret_status = I2C_Init(&init_i2c);
    446c:	ce 01       	movw	r24, r28
    446e:	02 96       	adiw	r24, 0x02	; 2
    4470:	0e 94 35 12 	call	0x246a	; 0x246a <I2C_Init>
    4474:	89 83       	std	Y+1, r24	; 0x01
}
    4476:	0f 90       	pop	r0
    4478:	0f 90       	pop	r0
    447a:	0f 90       	pop	r0
    447c:	0f 90       	pop	r0
    447e:	0f 90       	pop	r0
    4480:	cf 91       	pop	r28
    4482:	df 91       	pop	r29
    4484:	08 95       	ret

00004486 <EEPROM_WriteByte>:


void EEPROM_WriteByte(u8 address_in_eeprom, u8 data)
{
    4486:	df 93       	push	r29
    4488:	cf 93       	push	r28
    448a:	00 d0       	rcall	.+0      	; 0x448c <EEPROM_WriteByte+0x6>
    448c:	cd b7       	in	r28, 0x3d	; 61
    448e:	de b7       	in	r29, 0x3e	; 62
    4490:	89 83       	std	Y+1, r24	; 0x01
    4492:	6a 83       	std	Y+2, r22	; 0x02
	// Send start condition
	I2C_SendStart();
    4494:	0e 94 99 12 	call	0x2532	; 0x2532 <I2C_SendStart>

	// Send device address with write bit
	I2C_SendByte(EEPROM_DEVICE_ADDRESS_WRITE);
    4498:	80 ea       	ldi	r24, 0xA0	; 160
    449a:	0e 94 7e 12 	call	0x24fc	; 0x24fc <I2C_SendByte>

	// Send EEPROM internal address
	I2C_SendByte(address_in_eeprom);
    449e:	89 81       	ldd	r24, Y+1	; 0x01
    44a0:	0e 94 7e 12 	call	0x24fc	; 0x24fc <I2C_SendByte>

	// Send data byte
	I2C_SendByte(data);
    44a4:	8a 81       	ldd	r24, Y+2	; 0x02
    44a6:	0e 94 7e 12 	call	0x24fc	; 0x24fc <I2C_SendByte>

	// Send stop condition
	I2C_SendStop();
    44aa:	0e 94 ae 12 	call	0x255c	; 0x255c <I2C_SendStop>
}
    44ae:	0f 90       	pop	r0
    44b0:	0f 90       	pop	r0
    44b2:	cf 91       	pop	r28
    44b4:	df 91       	pop	r29
    44b6:	08 95       	ret

000044b8 <EEPROM_ReadByte>:
u8 EEPROM_ReadByte(u8 address_in_eeprom)
{
    44b8:	df 93       	push	r29
    44ba:	cf 93       	push	r28
    44bc:	00 d0       	rcall	.+0      	; 0x44be <EEPROM_ReadByte+0x6>
    44be:	cd b7       	in	r28, 0x3d	; 61
    44c0:	de b7       	in	r29, 0x3e	; 62
    44c2:	8a 83       	std	Y+2, r24	; 0x02
	u8 data;

	// Send start condition
	I2C_SendStart();
    44c4:	0e 94 99 12 	call	0x2532	; 0x2532 <I2C_SendStart>

	// Send device address with write bit
	I2C_SendByte(EEPROM_DEVICE_ADDRESS_WRITE);
    44c8:	80 ea       	ldi	r24, 0xA0	; 160
    44ca:	0e 94 7e 12 	call	0x24fc	; 0x24fc <I2C_SendByte>

	// Send EEPROM internal address
	I2C_SendByte(address_in_eeprom);
    44ce:	8a 81       	ldd	r24, Y+2	; 0x02
    44d0:	0e 94 7e 12 	call	0x24fc	; 0x24fc <I2C_SendByte>

	// Send repeated start condition
	I2C_SendStart();
    44d4:	0e 94 99 12 	call	0x2532	; 0x2532 <I2C_SendStart>

	// Send device address with read bit
	I2C_SendByte(EEPROM_DEVICE_ADDRESS_READ);
    44d8:	81 ea       	ldi	r24, 0xA1	; 161
    44da:	0e 94 7e 12 	call	0x24fc	; 0x24fc <I2C_SendByte>

	// Receive data byte with ACK
	I2C_ReceiveByte_ACK(&data);
    44de:	ce 01       	movw	r24, r28
    44e0:	01 96       	adiw	r24, 0x01	; 1
    44e2:	0e 94 be 12 	call	0x257c	; 0x257c <I2C_ReceiveByte_ACK>

	// Send stop condition
	I2C_SendStop();
    44e6:	0e 94 ae 12 	call	0x255c	; 0x255c <I2C_SendStop>

	return data;
    44ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    44ec:	0f 90       	pop	r0
    44ee:	0f 90       	pop	r0
    44f0:	cf 91       	pop	r28
    44f2:	df 91       	pop	r29
    44f4:	08 95       	ret

000044f6 <EEPROM_EraseByte>:

void EEPROM_EraseByte(u8 address_in_eeprom)
{
    44f6:	df 93       	push	r29
    44f8:	cf 93       	push	r28
    44fa:	0f 92       	push	r0
    44fc:	cd b7       	in	r28, 0x3d	; 61
    44fe:	de b7       	in	r29, 0x3e	; 62
    4500:	89 83       	std	Y+1, r24	; 0x01
    // Send start condition
    I2C_SendStart();
    4502:	0e 94 99 12 	call	0x2532	; 0x2532 <I2C_SendStart>

    // Send device address with write bit
    I2C_SendByte(EEPROM_DEVICE_ADDRESS_WRITE);
    4506:	80 ea       	ldi	r24, 0xA0	; 160
    4508:	0e 94 7e 12 	call	0x24fc	; 0x24fc <I2C_SendByte>

    // Send EEPROM internal address
    I2C_SendByte(address_in_eeprom);
    450c:	89 81       	ldd	r24, Y+1	; 0x01
    450e:	0e 94 7e 12 	call	0x24fc	; 0x24fc <I2C_SendByte>

    // Send data byte for erasing (e.g., 0xFF)
    I2C_SendByte(0xFF);
    4512:	8f ef       	ldi	r24, 0xFF	; 255
    4514:	0e 94 7e 12 	call	0x24fc	; 0x24fc <I2C_SendByte>

    // Send stop condition
    I2C_SendStop();
    4518:	0e 94 ae 12 	call	0x255c	; 0x255c <I2C_SendStop>
}
    451c:	0f 90       	pop	r0
    451e:	cf 91       	pop	r28
    4520:	df 91       	pop	r29
    4522:	08 95       	ret

00004524 <main>:
/* ------------------------------- distance from Ultra-sound ----------------- */
u32 distance = 30;
/*-----------------------------------------------------------------------------*/

int main()
{
    4524:	0f 93       	push	r16
    4526:	1f 93       	push	r17
    4528:	df 93       	push	r29
    452a:	cf 93       	push	r28
    452c:	cd b7       	in	r28, 0x3d	; 61
    452e:	de b7       	in	r29, 0x3e	; 62
    4530:	c2 5f       	subi	r28, 0xF2	; 242
    4532:	d0 40       	sbci	r29, 0x00	; 0
    4534:	0f b6       	in	r0, 0x3f	; 63
    4536:	f8 94       	cli
    4538:	de bf       	out	0x3e, r29	; 62
    453a:	0f be       	out	0x3f, r0	; 63
    453c:	cd bf       	out	0x3d, r28	; 61
	/* ------------------------------- To Display distance value ------------ */
	char buffer[4];
	buffer[3] = ' ';
    453e:	fe 01       	movw	r30, r28
    4540:	e1 51       	subi	r30, 0x11	; 17
    4542:	ff 4f       	sbci	r31, 0xFF	; 255
    4544:	80 e2       	ldi	r24, 0x20	; 32
    4546:	83 83       	std	Z+3, r24	; 0x03
	/* ----------------------------------------------------------------------- */

	/* ----------------------------------- Keypad Initialize ------------------- */
	H_KEYPAD_void_Init();
    4548:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <H_KEYPAD_void_Init>
	keypad_cursor_init(&keypad_digits);
    454c:	87 ed       	ldi	r24, 0xD7	; 215
    454e:	92 e0       	ldi	r25, 0x02	; 2
    4550:	0e 94 b9 20 	call	0x4172	; 0x4172 <keypad_cursor_init>
	/* ------------------------------------------------------------------------ */

	/* -------------------------------- LCD Initialize ------------------------ */
	H_LCD_void_Init();
    4554:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <H_LCD_void_Init>
	/* ------------------------------------------------------------------------ */

	/* --------------------------- System Start message ----------------------- */
	H_LCD_void_gotoXY(2,4);
    4558:	82 e0       	ldi	r24, 0x02	; 2
    455a:	64 e0       	ldi	r22, 0x04	; 4
    455c:	0e 94 36 1a 	call	0x346c	; 0x346c <H_LCD_void_gotoXY>
	H_LCD_void_SendString(" Login System ");
    4560:	80 e6       	ldi	r24, 0x60	; 96
    4562:	90 e0       	ldi	r25, 0x00	; 0
    4564:	0e 94 15 1a 	call	0x342a	; 0x342a <H_LCD_void_SendString>
    4568:	fe 01       	movw	r30, r28
    456a:	e5 51       	subi	r30, 0x15	; 21
    456c:	ff 4f       	sbci	r31, 0xFF	; 255
    456e:	80 e0       	ldi	r24, 0x00	; 0
    4570:	90 e0       	ldi	r25, 0x00	; 0
    4572:	aa e7       	ldi	r26, 0x7A	; 122
    4574:	b4 e4       	ldi	r27, 0x44	; 68
    4576:	80 83       	st	Z, r24
    4578:	91 83       	std	Z+1, r25	; 0x01
    457a:	a2 83       	std	Z+2, r26	; 0x02
    457c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    457e:	8e 01       	movw	r16, r28
    4580:	09 51       	subi	r16, 0x19	; 25
    4582:	1f 4f       	sbci	r17, 0xFF	; 255
    4584:	fe 01       	movw	r30, r28
    4586:	e5 51       	subi	r30, 0x15	; 21
    4588:	ff 4f       	sbci	r31, 0xFF	; 255
    458a:	60 81       	ld	r22, Z
    458c:	71 81       	ldd	r23, Z+1	; 0x01
    458e:	82 81       	ldd	r24, Z+2	; 0x02
    4590:	93 81       	ldd	r25, Z+3	; 0x03
    4592:	20 e0       	ldi	r18, 0x00	; 0
    4594:	30 e0       	ldi	r19, 0x00	; 0
    4596:	4a e7       	ldi	r20, 0x7A	; 122
    4598:	55 e4       	ldi	r21, 0x45	; 69
    459a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    459e:	dc 01       	movw	r26, r24
    45a0:	cb 01       	movw	r24, r22
    45a2:	f8 01       	movw	r30, r16
    45a4:	80 83       	st	Z, r24
    45a6:	91 83       	std	Z+1, r25	; 0x01
    45a8:	a2 83       	std	Z+2, r26	; 0x02
    45aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    45ac:	fe 01       	movw	r30, r28
    45ae:	e9 51       	subi	r30, 0x19	; 25
    45b0:	ff 4f       	sbci	r31, 0xFF	; 255
    45b2:	60 81       	ld	r22, Z
    45b4:	71 81       	ldd	r23, Z+1	; 0x01
    45b6:	82 81       	ldd	r24, Z+2	; 0x02
    45b8:	93 81       	ldd	r25, Z+3	; 0x03
    45ba:	20 e0       	ldi	r18, 0x00	; 0
    45bc:	30 e0       	ldi	r19, 0x00	; 0
    45be:	40 e8       	ldi	r20, 0x80	; 128
    45c0:	5f e3       	ldi	r21, 0x3F	; 63
    45c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45c6:	88 23       	and	r24, r24
    45c8:	44 f4       	brge	.+16     	; 0x45da <main+0xb6>
		__ticks = 1;
    45ca:	fe 01       	movw	r30, r28
    45cc:	eb 51       	subi	r30, 0x1B	; 27
    45ce:	ff 4f       	sbci	r31, 0xFF	; 255
    45d0:	81 e0       	ldi	r24, 0x01	; 1
    45d2:	90 e0       	ldi	r25, 0x00	; 0
    45d4:	91 83       	std	Z+1, r25	; 0x01
    45d6:	80 83       	st	Z, r24
    45d8:	64 c0       	rjmp	.+200    	; 0x46a2 <main+0x17e>
	else if (__tmp > 65535)
    45da:	fe 01       	movw	r30, r28
    45dc:	e9 51       	subi	r30, 0x19	; 25
    45de:	ff 4f       	sbci	r31, 0xFF	; 255
    45e0:	60 81       	ld	r22, Z
    45e2:	71 81       	ldd	r23, Z+1	; 0x01
    45e4:	82 81       	ldd	r24, Z+2	; 0x02
    45e6:	93 81       	ldd	r25, Z+3	; 0x03
    45e8:	20 e0       	ldi	r18, 0x00	; 0
    45ea:	3f ef       	ldi	r19, 0xFF	; 255
    45ec:	4f e7       	ldi	r20, 0x7F	; 127
    45ee:	57 e4       	ldi	r21, 0x47	; 71
    45f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45f4:	18 16       	cp	r1, r24
    45f6:	0c f0       	brlt	.+2      	; 0x45fa <main+0xd6>
    45f8:	43 c0       	rjmp	.+134    	; 0x4680 <main+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45fa:	fe 01       	movw	r30, r28
    45fc:	e5 51       	subi	r30, 0x15	; 21
    45fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4600:	60 81       	ld	r22, Z
    4602:	71 81       	ldd	r23, Z+1	; 0x01
    4604:	82 81       	ldd	r24, Z+2	; 0x02
    4606:	93 81       	ldd	r25, Z+3	; 0x03
    4608:	20 e0       	ldi	r18, 0x00	; 0
    460a:	30 e0       	ldi	r19, 0x00	; 0
    460c:	40 e2       	ldi	r20, 0x20	; 32
    460e:	51 e4       	ldi	r21, 0x41	; 65
    4610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4614:	dc 01       	movw	r26, r24
    4616:	cb 01       	movw	r24, r22
    4618:	8e 01       	movw	r16, r28
    461a:	0b 51       	subi	r16, 0x1B	; 27
    461c:	1f 4f       	sbci	r17, 0xFF	; 255
    461e:	bc 01       	movw	r22, r24
    4620:	cd 01       	movw	r24, r26
    4622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4626:	dc 01       	movw	r26, r24
    4628:	cb 01       	movw	r24, r22
    462a:	f8 01       	movw	r30, r16
    462c:	91 83       	std	Z+1, r25	; 0x01
    462e:	80 83       	st	Z, r24
    4630:	1f c0       	rjmp	.+62     	; 0x4670 <main+0x14c>
    4632:	fe 01       	movw	r30, r28
    4634:	ed 51       	subi	r30, 0x1D	; 29
    4636:	ff 4f       	sbci	r31, 0xFF	; 255
    4638:	80 e9       	ldi	r24, 0x90	; 144
    463a:	91 e0       	ldi	r25, 0x01	; 1
    463c:	91 83       	std	Z+1, r25	; 0x01
    463e:	80 83       	st	Z, r24
    4640:	fe 01       	movw	r30, r28
    4642:	ed 51       	subi	r30, 0x1D	; 29
    4644:	ff 4f       	sbci	r31, 0xFF	; 255
    4646:	80 81       	ld	r24, Z
    4648:	91 81       	ldd	r25, Z+1	; 0x01
    464a:	01 97       	sbiw	r24, 0x01	; 1
    464c:	f1 f7       	brne	.-4      	; 0x464a <main+0x126>
    464e:	fe 01       	movw	r30, r28
    4650:	ed 51       	subi	r30, 0x1D	; 29
    4652:	ff 4f       	sbci	r31, 0xFF	; 255
    4654:	91 83       	std	Z+1, r25	; 0x01
    4656:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4658:	de 01       	movw	r26, r28
    465a:	ab 51       	subi	r26, 0x1B	; 27
    465c:	bf 4f       	sbci	r27, 0xFF	; 255
    465e:	fe 01       	movw	r30, r28
    4660:	eb 51       	subi	r30, 0x1B	; 27
    4662:	ff 4f       	sbci	r31, 0xFF	; 255
    4664:	80 81       	ld	r24, Z
    4666:	91 81       	ldd	r25, Z+1	; 0x01
    4668:	01 97       	sbiw	r24, 0x01	; 1
    466a:	11 96       	adiw	r26, 0x01	; 1
    466c:	9c 93       	st	X, r25
    466e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4670:	fe 01       	movw	r30, r28
    4672:	eb 51       	subi	r30, 0x1B	; 27
    4674:	ff 4f       	sbci	r31, 0xFF	; 255
    4676:	80 81       	ld	r24, Z
    4678:	91 81       	ldd	r25, Z+1	; 0x01
    467a:	00 97       	sbiw	r24, 0x00	; 0
    467c:	d1 f6       	brne	.-76     	; 0x4632 <main+0x10e>
    467e:	27 c0       	rjmp	.+78     	; 0x46ce <main+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4680:	8e 01       	movw	r16, r28
    4682:	0b 51       	subi	r16, 0x1B	; 27
    4684:	1f 4f       	sbci	r17, 0xFF	; 255
    4686:	fe 01       	movw	r30, r28
    4688:	e9 51       	subi	r30, 0x19	; 25
    468a:	ff 4f       	sbci	r31, 0xFF	; 255
    468c:	60 81       	ld	r22, Z
    468e:	71 81       	ldd	r23, Z+1	; 0x01
    4690:	82 81       	ldd	r24, Z+2	; 0x02
    4692:	93 81       	ldd	r25, Z+3	; 0x03
    4694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4698:	dc 01       	movw	r26, r24
    469a:	cb 01       	movw	r24, r22
    469c:	f8 01       	movw	r30, r16
    469e:	91 83       	std	Z+1, r25	; 0x01
    46a0:	80 83       	st	Z, r24
    46a2:	de 01       	movw	r26, r28
    46a4:	af 51       	subi	r26, 0x1F	; 31
    46a6:	bf 4f       	sbci	r27, 0xFF	; 255
    46a8:	fe 01       	movw	r30, r28
    46aa:	eb 51       	subi	r30, 0x1B	; 27
    46ac:	ff 4f       	sbci	r31, 0xFF	; 255
    46ae:	80 81       	ld	r24, Z
    46b0:	91 81       	ldd	r25, Z+1	; 0x01
    46b2:	8d 93       	st	X+, r24
    46b4:	9c 93       	st	X, r25
    46b6:	fe 01       	movw	r30, r28
    46b8:	ef 51       	subi	r30, 0x1F	; 31
    46ba:	ff 4f       	sbci	r31, 0xFF	; 255
    46bc:	80 81       	ld	r24, Z
    46be:	91 81       	ldd	r25, Z+1	; 0x01
    46c0:	01 97       	sbiw	r24, 0x01	; 1
    46c2:	f1 f7       	brne	.-4      	; 0x46c0 <main+0x19c>
    46c4:	fe 01       	movw	r30, r28
    46c6:	ef 51       	subi	r30, 0x1F	; 31
    46c8:	ff 4f       	sbci	r31, 0xFF	; 255
    46ca:	91 83       	std	Z+1, r25	; 0x01
    46cc:	80 83       	st	Z, r24
	_delay_ms(1000);
	/* ------------------------------------------------------------------------ */

	/* --------------------------- Clear display ------------------------------ */
	H_LCD_void_Clear_Display();
    46ce:	0e 94 a0 1a 	call	0x3540	; 0x3540 <H_LCD_void_Clear_Display>
	/*--------------------------------------------------------------------------*/

	/*------------------------------------- Green Led --------------------------*/
	Led_Init(PORTA_INDEX, PIN4_INDEX);
    46d2:	80 e0       	ldi	r24, 0x00	; 0
    46d4:	64 e0       	ldi	r22, 0x04	; 4
    46d6:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <Led_Init>
	/* ------------------------------------------------------------------------ */
	/*------------------------------------- Blue Led --------------------------*/
	Led_Init(PORTA_INDEX, PIN5_INDEX);
    46da:	80 e0       	ldi	r24, 0x00	; 0
    46dc:	65 e0       	ldi	r22, 0x05	; 5
    46de:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <Led_Init>
	/* ------------------------------------------------------------------------ */

	/* --------------------------------- Initialize Trigger and Echo Pins-------------------- */
	Ultrasonic_Init(PORTD_INDEX, PIN2_INDEX, PORTD_INDEX, PIN6_INDEX);
    46e2:	83 e0       	ldi	r24, 0x03	; 3
    46e4:	62 e0       	ldi	r22, 0x02	; 2
    46e6:	43 e0       	ldi	r20, 0x03	; 3
    46e8:	26 e0       	ldi	r18, 0x06	; 6
    46ea:	0e 94 40 1b 	call	0x3680	; 0x3680 <Ultrasonic_Init>
	/* -------------------------------------------------------------------------------------- */

	/* --------------------------------------- Initialize RTC ---------------------------------*/
	RTC_Init(I2C_FREQ_100HZ);
    46ee:	80 e0       	ldi	r24, 0x00	; 0
    46f0:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <RTC_Init>

	while (1)
	{
		Start_again:
		/* --------------------------------- Set Trigger of Ultra-sound ------------------- */
		Ultrasonic_SetTrigger(PORTD_INDEX, PIN2_INDEX);
    46f4:	83 e0       	ldi	r24, 0x03	; 3
    46f6:	62 e0       	ldi	r22, 0x02	; 2
    46f8:	0e 94 a1 1b 	call	0x3742	; 0x3742 <Ultrasonic_SetTrigger>
		/* -------------------------------------------------------------------------------- */

		/* --------------------------------- Read Distance -------------------------------- */
		Ultrasonic_Read_Distance(&distance);
    46fc:	86 e3       	ldi	r24, 0x36	; 54
    46fe:	92 e0       	ldi	r25, 0x02	; 2
    4700:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <Ultrasonic_Read_Distance>
		/* -------------------------------------------------------------------------------- */

		/* ---------------------------------- Display distance ---------------------------- */
		sprintf(buffer, "%03d", distance);
    4704:	20 91 36 02 	lds	r18, 0x0236
    4708:	30 91 37 02 	lds	r19, 0x0237
    470c:	40 91 38 02 	lds	r20, 0x0238
    4710:	50 91 39 02 	lds	r21, 0x0239
    4714:	8d b7       	in	r24, 0x3d	; 61
    4716:	9e b7       	in	r25, 0x3e	; 62
    4718:	08 97       	sbiw	r24, 0x08	; 8
    471a:	0f b6       	in	r0, 0x3f	; 63
    471c:	f8 94       	cli
    471e:	9e bf       	out	0x3e, r25	; 62
    4720:	0f be       	out	0x3f, r0	; 63
    4722:	8d bf       	out	0x3d, r24	; 61
    4724:	ed b7       	in	r30, 0x3d	; 61
    4726:	fe b7       	in	r31, 0x3e	; 62
    4728:	31 96       	adiw	r30, 0x01	; 1
    472a:	ce 01       	movw	r24, r28
    472c:	81 51       	subi	r24, 0x11	; 17
    472e:	9f 4f       	sbci	r25, 0xFF	; 255
    4730:	91 83       	std	Z+1, r25	; 0x01
    4732:	80 83       	st	Z, r24
    4734:	8f e6       	ldi	r24, 0x6F	; 111
    4736:	90 e0       	ldi	r25, 0x00	; 0
    4738:	93 83       	std	Z+3, r25	; 0x03
    473a:	82 83       	std	Z+2, r24	; 0x02
    473c:	24 83       	std	Z+4, r18	; 0x04
    473e:	35 83       	std	Z+5, r19	; 0x05
    4740:	46 83       	std	Z+6, r20	; 0x06
    4742:	57 83       	std	Z+7, r21	; 0x07
    4744:	0e 94 13 30 	call	0x6026	; 0x6026 <sprintf>
    4748:	ed b7       	in	r30, 0x3d	; 61
    474a:	fe b7       	in	r31, 0x3e	; 62
    474c:	38 96       	adiw	r30, 0x08	; 8
    474e:	0f b6       	in	r0, 0x3f	; 63
    4750:	f8 94       	cli
    4752:	fe bf       	out	0x3e, r31	; 62
    4754:	0f be       	out	0x3f, r0	; 63
    4756:	ed bf       	out	0x3d, r30	; 61
		H_LCD_void_gotoXY(2, 2);
    4758:	82 e0       	ldi	r24, 0x02	; 2
    475a:	62 e0       	ldi	r22, 0x02	; 2
    475c:	0e 94 36 1a 	call	0x346c	; 0x346c <H_LCD_void_gotoXY>
		H_LCD_void_SendString("Distance : ");
    4760:	84 e7       	ldi	r24, 0x74	; 116
    4762:	90 e0       	ldi	r25, 0x00	; 0
    4764:	0e 94 15 1a 	call	0x342a	; 0x342a <H_LCD_void_SendString>
		H_LCD_void_SendString(buffer);
    4768:	ce 01       	movw	r24, r28
    476a:	81 51       	subi	r24, 0x11	; 17
    476c:	9f 4f       	sbci	r25, 0xFF	; 255
    476e:	0e 94 15 1a 	call	0x342a	; 0x342a <H_LCD_void_SendString>
		/* -------------------------------------------------------------------------------------- */

		if(distance <= 15)
    4772:	80 91 36 02 	lds	r24, 0x0236
    4776:	90 91 37 02 	lds	r25, 0x0237
    477a:	a0 91 38 02 	lds	r26, 0x0238
    477e:	b0 91 39 02 	lds	r27, 0x0239
    4782:	80 31       	cpi	r24, 0x10	; 16
    4784:	91 05       	cpc	r25, r1
    4786:	a1 05       	cpc	r26, r1
    4788:	b1 05       	cpc	r27, r1
    478a:	08 f0       	brcs	.+2      	; 0x478e <main+0x26a>
    478c:	b3 cf       	rjmp	.-154    	; 0x46f4 <main+0x1d0>
		{
			/* -------------------------- User Message ---------------------------- */
			H_LCD_void_Clear_Display();
    478e:	0e 94 a0 1a 	call	0x3540	; 0x3540 <H_LCD_void_Clear_Display>
			H_LCD_void_gotoXY(2,4);
    4792:	82 e0       	ldi	r24, 0x02	; 2
    4794:	64 e0       	ldi	r22, 0x04	; 4
    4796:	0e 94 36 1a 	call	0x346c	; 0x346c <H_LCD_void_gotoXY>
			H_LCD_void_SendString("User Detected");
    479a:	80 e8       	ldi	r24, 0x80	; 128
    479c:	90 e0       	ldi	r25, 0x00	; 0
    479e:	0e 94 15 1a 	call	0x342a	; 0x342a <H_LCD_void_SendString>
    47a2:	fe 01       	movw	r30, r28
    47a4:	e3 52       	subi	r30, 0x23	; 35
    47a6:	ff 4f       	sbci	r31, 0xFF	; 255
    47a8:	80 e0       	ldi	r24, 0x00	; 0
    47aa:	90 e0       	ldi	r25, 0x00	; 0
    47ac:	aa ef       	ldi	r26, 0xFA	; 250
    47ae:	b3 e4       	ldi	r27, 0x43	; 67
    47b0:	80 83       	st	Z, r24
    47b2:	91 83       	std	Z+1, r25	; 0x01
    47b4:	a2 83       	std	Z+2, r26	; 0x02
    47b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47b8:	8e 01       	movw	r16, r28
    47ba:	07 52       	subi	r16, 0x27	; 39
    47bc:	1f 4f       	sbci	r17, 0xFF	; 255
    47be:	fe 01       	movw	r30, r28
    47c0:	e3 52       	subi	r30, 0x23	; 35
    47c2:	ff 4f       	sbci	r31, 0xFF	; 255
    47c4:	60 81       	ld	r22, Z
    47c6:	71 81       	ldd	r23, Z+1	; 0x01
    47c8:	82 81       	ldd	r24, Z+2	; 0x02
    47ca:	93 81       	ldd	r25, Z+3	; 0x03
    47cc:	20 e0       	ldi	r18, 0x00	; 0
    47ce:	30 e0       	ldi	r19, 0x00	; 0
    47d0:	4a e7       	ldi	r20, 0x7A	; 122
    47d2:	55 e4       	ldi	r21, 0x45	; 69
    47d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47d8:	dc 01       	movw	r26, r24
    47da:	cb 01       	movw	r24, r22
    47dc:	f8 01       	movw	r30, r16
    47de:	80 83       	st	Z, r24
    47e0:	91 83       	std	Z+1, r25	; 0x01
    47e2:	a2 83       	std	Z+2, r26	; 0x02
    47e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    47e6:	fe 01       	movw	r30, r28
    47e8:	e7 52       	subi	r30, 0x27	; 39
    47ea:	ff 4f       	sbci	r31, 0xFF	; 255
    47ec:	60 81       	ld	r22, Z
    47ee:	71 81       	ldd	r23, Z+1	; 0x01
    47f0:	82 81       	ldd	r24, Z+2	; 0x02
    47f2:	93 81       	ldd	r25, Z+3	; 0x03
    47f4:	20 e0       	ldi	r18, 0x00	; 0
    47f6:	30 e0       	ldi	r19, 0x00	; 0
    47f8:	40 e8       	ldi	r20, 0x80	; 128
    47fa:	5f e3       	ldi	r21, 0x3F	; 63
    47fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4800:	88 23       	and	r24, r24
    4802:	44 f4       	brge	.+16     	; 0x4814 <main+0x2f0>
		__ticks = 1;
    4804:	fe 01       	movw	r30, r28
    4806:	e9 52       	subi	r30, 0x29	; 41
    4808:	ff 4f       	sbci	r31, 0xFF	; 255
    480a:	81 e0       	ldi	r24, 0x01	; 1
    480c:	90 e0       	ldi	r25, 0x00	; 0
    480e:	91 83       	std	Z+1, r25	; 0x01
    4810:	80 83       	st	Z, r24
    4812:	64 c0       	rjmp	.+200    	; 0x48dc <main+0x3b8>
	else if (__tmp > 65535)
    4814:	fe 01       	movw	r30, r28
    4816:	e7 52       	subi	r30, 0x27	; 39
    4818:	ff 4f       	sbci	r31, 0xFF	; 255
    481a:	60 81       	ld	r22, Z
    481c:	71 81       	ldd	r23, Z+1	; 0x01
    481e:	82 81       	ldd	r24, Z+2	; 0x02
    4820:	93 81       	ldd	r25, Z+3	; 0x03
    4822:	20 e0       	ldi	r18, 0x00	; 0
    4824:	3f ef       	ldi	r19, 0xFF	; 255
    4826:	4f e7       	ldi	r20, 0x7F	; 127
    4828:	57 e4       	ldi	r21, 0x47	; 71
    482a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    482e:	18 16       	cp	r1, r24
    4830:	0c f0       	brlt	.+2      	; 0x4834 <main+0x310>
    4832:	43 c0       	rjmp	.+134    	; 0x48ba <main+0x396>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4834:	fe 01       	movw	r30, r28
    4836:	e3 52       	subi	r30, 0x23	; 35
    4838:	ff 4f       	sbci	r31, 0xFF	; 255
    483a:	60 81       	ld	r22, Z
    483c:	71 81       	ldd	r23, Z+1	; 0x01
    483e:	82 81       	ldd	r24, Z+2	; 0x02
    4840:	93 81       	ldd	r25, Z+3	; 0x03
    4842:	20 e0       	ldi	r18, 0x00	; 0
    4844:	30 e0       	ldi	r19, 0x00	; 0
    4846:	40 e2       	ldi	r20, 0x20	; 32
    4848:	51 e4       	ldi	r21, 0x41	; 65
    484a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    484e:	dc 01       	movw	r26, r24
    4850:	cb 01       	movw	r24, r22
    4852:	8e 01       	movw	r16, r28
    4854:	09 52       	subi	r16, 0x29	; 41
    4856:	1f 4f       	sbci	r17, 0xFF	; 255
    4858:	bc 01       	movw	r22, r24
    485a:	cd 01       	movw	r24, r26
    485c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4860:	dc 01       	movw	r26, r24
    4862:	cb 01       	movw	r24, r22
    4864:	f8 01       	movw	r30, r16
    4866:	91 83       	std	Z+1, r25	; 0x01
    4868:	80 83       	st	Z, r24
    486a:	1f c0       	rjmp	.+62     	; 0x48aa <main+0x386>
    486c:	fe 01       	movw	r30, r28
    486e:	eb 52       	subi	r30, 0x2B	; 43
    4870:	ff 4f       	sbci	r31, 0xFF	; 255
    4872:	80 e9       	ldi	r24, 0x90	; 144
    4874:	91 e0       	ldi	r25, 0x01	; 1
    4876:	91 83       	std	Z+1, r25	; 0x01
    4878:	80 83       	st	Z, r24
    487a:	fe 01       	movw	r30, r28
    487c:	eb 52       	subi	r30, 0x2B	; 43
    487e:	ff 4f       	sbci	r31, 0xFF	; 255
    4880:	80 81       	ld	r24, Z
    4882:	91 81       	ldd	r25, Z+1	; 0x01
    4884:	01 97       	sbiw	r24, 0x01	; 1
    4886:	f1 f7       	brne	.-4      	; 0x4884 <main+0x360>
    4888:	fe 01       	movw	r30, r28
    488a:	eb 52       	subi	r30, 0x2B	; 43
    488c:	ff 4f       	sbci	r31, 0xFF	; 255
    488e:	91 83       	std	Z+1, r25	; 0x01
    4890:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4892:	de 01       	movw	r26, r28
    4894:	a9 52       	subi	r26, 0x29	; 41
    4896:	bf 4f       	sbci	r27, 0xFF	; 255
    4898:	fe 01       	movw	r30, r28
    489a:	e9 52       	subi	r30, 0x29	; 41
    489c:	ff 4f       	sbci	r31, 0xFF	; 255
    489e:	80 81       	ld	r24, Z
    48a0:	91 81       	ldd	r25, Z+1	; 0x01
    48a2:	01 97       	sbiw	r24, 0x01	; 1
    48a4:	11 96       	adiw	r26, 0x01	; 1
    48a6:	9c 93       	st	X, r25
    48a8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48aa:	fe 01       	movw	r30, r28
    48ac:	e9 52       	subi	r30, 0x29	; 41
    48ae:	ff 4f       	sbci	r31, 0xFF	; 255
    48b0:	80 81       	ld	r24, Z
    48b2:	91 81       	ldd	r25, Z+1	; 0x01
    48b4:	00 97       	sbiw	r24, 0x00	; 0
    48b6:	d1 f6       	brne	.-76     	; 0x486c <main+0x348>
    48b8:	27 c0       	rjmp	.+78     	; 0x4908 <main+0x3e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48ba:	8e 01       	movw	r16, r28
    48bc:	09 52       	subi	r16, 0x29	; 41
    48be:	1f 4f       	sbci	r17, 0xFF	; 255
    48c0:	fe 01       	movw	r30, r28
    48c2:	e7 52       	subi	r30, 0x27	; 39
    48c4:	ff 4f       	sbci	r31, 0xFF	; 255
    48c6:	60 81       	ld	r22, Z
    48c8:	71 81       	ldd	r23, Z+1	; 0x01
    48ca:	82 81       	ldd	r24, Z+2	; 0x02
    48cc:	93 81       	ldd	r25, Z+3	; 0x03
    48ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48d2:	dc 01       	movw	r26, r24
    48d4:	cb 01       	movw	r24, r22
    48d6:	f8 01       	movw	r30, r16
    48d8:	91 83       	std	Z+1, r25	; 0x01
    48da:	80 83       	st	Z, r24
    48dc:	de 01       	movw	r26, r28
    48de:	ad 52       	subi	r26, 0x2D	; 45
    48e0:	bf 4f       	sbci	r27, 0xFF	; 255
    48e2:	fe 01       	movw	r30, r28
    48e4:	e9 52       	subi	r30, 0x29	; 41
    48e6:	ff 4f       	sbci	r31, 0xFF	; 255
    48e8:	80 81       	ld	r24, Z
    48ea:	91 81       	ldd	r25, Z+1	; 0x01
    48ec:	8d 93       	st	X+, r24
    48ee:	9c 93       	st	X, r25
    48f0:	fe 01       	movw	r30, r28
    48f2:	ed 52       	subi	r30, 0x2D	; 45
    48f4:	ff 4f       	sbci	r31, 0xFF	; 255
    48f6:	80 81       	ld	r24, Z
    48f8:	91 81       	ldd	r25, Z+1	; 0x01
    48fa:	01 97       	sbiw	r24, 0x01	; 1
    48fc:	f1 f7       	brne	.-4      	; 0x48fa <main+0x3d6>
    48fe:	fe 01       	movw	r30, r28
    4900:	ed 52       	subi	r30, 0x2D	; 45
    4902:	ff 4f       	sbci	r31, 0xFF	; 255
    4904:	91 83       	std	Z+1, r25	; 0x01
    4906:	80 83       	st	Z, r24
			_delay_ms(500);
			/* -------------------------------------------------------------------------------------- */
			start_from_id:
			H_LCD_void_Clear_Display();
    4908:	0e 94 a0 1a 	call	0x3540	; 0x3540 <H_LCD_void_Clear_Display>
			H_LCD_void_gotoXY(2,1);
    490c:	82 e0       	ldi	r24, 0x02	; 2
    490e:	61 e0       	ldi	r22, 0x01	; 1
    4910:	0e 94 36 1a 	call	0x346c	; 0x346c <H_LCD_void_gotoXY>
			H_LCD_void_SendString("Enter ID : ");
    4914:	8e e8       	ldi	r24, 0x8E	; 142
    4916:	90 e0       	ldi	r25, 0x00	; 0
    4918:	0e 94 15 1a 	call	0x342a	; 0x342a <H_LCD_void_SendString>
			while(1)
			{
				/*------------------------------ Still read the distance -----------------------*/
				Ultrasonic_SetTrigger(PORTD_INDEX, PIN2_INDEX);
    491c:	83 e0       	ldi	r24, 0x03	; 3
    491e:	62 e0       	ldi	r22, 0x02	; 2
    4920:	0e 94 a1 1b 	call	0x3742	; 0x3742 <Ultrasonic_SetTrigger>
				Ultrasonic_Read_Distance(&distance);
    4924:	86 e3       	ldi	r24, 0x36	; 54
    4926:	92 e0       	ldi	r25, 0x02	; 2
    4928:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <Ultrasonic_Read_Distance>
				/*------------------------------------------------------------------------------*/

				/* ---------------------------- Writing ID digits ----------------------------- */
				H_KEYPAD_u8_WriteOnDigits(&keypad_digits);
    492c:	87 ed       	ldi	r24, 0xD7	; 215
    492e:	92 e0       	ldi	r25, 0x02	; 2
    4930:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <H_KEYPAD_u8_WriteOnDigits>
				H_LCD_void_gotoXY(2,12);
    4934:	82 e0       	ldi	r24, 0x02	; 2
    4936:	6c e0       	ldi	r22, 0x0C	; 12
    4938:	0e 94 36 1a 	call	0x346c	; 0x346c <H_LCD_void_gotoXY>
				H_LCD_void_SendString(keypad_digits.digits);
    493c:	87 ed       	ldi	r24, 0xD7	; 215
    493e:	92 e0       	ldi	r25, 0x02	; 2
    4940:	0e 94 15 1a 	call	0x342a	; 0x342a <H_LCD_void_SendString>
				/* ---------------------------------------------------------------------------- */

				if(strcmp(ID, keypad_digits.digits) == 0)
    4944:	8c e2       	ldi	r24, 0x2C	; 44
    4946:	92 e0       	ldi	r25, 0x02	; 2
    4948:	27 ed       	ldi	r18, 0xD7	; 215
    494a:	32 e0       	ldi	r19, 0x02	; 2
    494c:	b9 01       	movw	r22, r18
    494e:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <strcmp>
    4952:	00 97       	sbiw	r24, 0x00	; 0
    4954:	11 f0       	breq	.+4      	; 0x495a <main+0x436>
    4956:	0c 94 cb 2c 	jmp	0x5996	; 0x5996 <main+0x1472>
				{
					keypad_cursor_init(&keypad_digits);
    495a:	87 ed       	ldi	r24, 0xD7	; 215
    495c:	92 e0       	ldi	r25, 0x02	; 2
    495e:	0e 94 b9 20 	call	0x4172	; 0x4172 <keypad_cursor_init>
					keypad_cursor_init(&keypad_digits_pass); // new
    4962:	82 ee       	ldi	r24, 0xE2	; 226
    4964:	92 e0       	ldi	r25, 0x02	; 2
    4966:	0e 94 b9 20 	call	0x4172	; 0x4172 <keypad_cursor_init>
					H_LCD_void_Clear_Display();
    496a:	0e 94 a0 1a 	call	0x3540	; 0x3540 <H_LCD_void_Clear_Display>
    496e:	fe 01       	movw	r30, r28
    4970:	e1 53       	subi	r30, 0x31	; 49
    4972:	ff 4f       	sbci	r31, 0xFF	; 255
    4974:	80 e0       	ldi	r24, 0x00	; 0
    4976:	90 e0       	ldi	r25, 0x00	; 0
    4978:	aa ef       	ldi	r26, 0xFA	; 250
    497a:	b3 e4       	ldi	r27, 0x43	; 67
    497c:	80 83       	st	Z, r24
    497e:	91 83       	std	Z+1, r25	; 0x01
    4980:	a2 83       	std	Z+2, r26	; 0x02
    4982:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4984:	8e 01       	movw	r16, r28
    4986:	05 53       	subi	r16, 0x35	; 53
    4988:	1f 4f       	sbci	r17, 0xFF	; 255
    498a:	fe 01       	movw	r30, r28
    498c:	e1 53       	subi	r30, 0x31	; 49
    498e:	ff 4f       	sbci	r31, 0xFF	; 255
    4990:	60 81       	ld	r22, Z
    4992:	71 81       	ldd	r23, Z+1	; 0x01
    4994:	82 81       	ldd	r24, Z+2	; 0x02
    4996:	93 81       	ldd	r25, Z+3	; 0x03
    4998:	20 e0       	ldi	r18, 0x00	; 0
    499a:	30 e0       	ldi	r19, 0x00	; 0
    499c:	4a e7       	ldi	r20, 0x7A	; 122
    499e:	55 e4       	ldi	r21, 0x45	; 69
    49a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49a4:	dc 01       	movw	r26, r24
    49a6:	cb 01       	movw	r24, r22
    49a8:	f8 01       	movw	r30, r16
    49aa:	80 83       	st	Z, r24
    49ac:	91 83       	std	Z+1, r25	; 0x01
    49ae:	a2 83       	std	Z+2, r26	; 0x02
    49b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    49b2:	fe 01       	movw	r30, r28
    49b4:	e5 53       	subi	r30, 0x35	; 53
    49b6:	ff 4f       	sbci	r31, 0xFF	; 255
    49b8:	60 81       	ld	r22, Z
    49ba:	71 81       	ldd	r23, Z+1	; 0x01
    49bc:	82 81       	ldd	r24, Z+2	; 0x02
    49be:	93 81       	ldd	r25, Z+3	; 0x03
    49c0:	20 e0       	ldi	r18, 0x00	; 0
    49c2:	30 e0       	ldi	r19, 0x00	; 0
    49c4:	40 e8       	ldi	r20, 0x80	; 128
    49c6:	5f e3       	ldi	r21, 0x3F	; 63
    49c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49cc:	88 23       	and	r24, r24
    49ce:	44 f4       	brge	.+16     	; 0x49e0 <main+0x4bc>
		__ticks = 1;
    49d0:	fe 01       	movw	r30, r28
    49d2:	e7 53       	subi	r30, 0x37	; 55
    49d4:	ff 4f       	sbci	r31, 0xFF	; 255
    49d6:	81 e0       	ldi	r24, 0x01	; 1
    49d8:	90 e0       	ldi	r25, 0x00	; 0
    49da:	91 83       	std	Z+1, r25	; 0x01
    49dc:	80 83       	st	Z, r24
    49de:	64 c0       	rjmp	.+200    	; 0x4aa8 <main+0x584>
	else if (__tmp > 65535)
    49e0:	fe 01       	movw	r30, r28
    49e2:	e5 53       	subi	r30, 0x35	; 53
    49e4:	ff 4f       	sbci	r31, 0xFF	; 255
    49e6:	60 81       	ld	r22, Z
    49e8:	71 81       	ldd	r23, Z+1	; 0x01
    49ea:	82 81       	ldd	r24, Z+2	; 0x02
    49ec:	93 81       	ldd	r25, Z+3	; 0x03
    49ee:	20 e0       	ldi	r18, 0x00	; 0
    49f0:	3f ef       	ldi	r19, 0xFF	; 255
    49f2:	4f e7       	ldi	r20, 0x7F	; 127
    49f4:	57 e4       	ldi	r21, 0x47	; 71
    49f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49fa:	18 16       	cp	r1, r24
    49fc:	0c f0       	brlt	.+2      	; 0x4a00 <main+0x4dc>
    49fe:	43 c0       	rjmp	.+134    	; 0x4a86 <main+0x562>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a00:	fe 01       	movw	r30, r28
    4a02:	e1 53       	subi	r30, 0x31	; 49
    4a04:	ff 4f       	sbci	r31, 0xFF	; 255
    4a06:	60 81       	ld	r22, Z
    4a08:	71 81       	ldd	r23, Z+1	; 0x01
    4a0a:	82 81       	ldd	r24, Z+2	; 0x02
    4a0c:	93 81       	ldd	r25, Z+3	; 0x03
    4a0e:	20 e0       	ldi	r18, 0x00	; 0
    4a10:	30 e0       	ldi	r19, 0x00	; 0
    4a12:	40 e2       	ldi	r20, 0x20	; 32
    4a14:	51 e4       	ldi	r21, 0x41	; 65
    4a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a1a:	dc 01       	movw	r26, r24
    4a1c:	cb 01       	movw	r24, r22
    4a1e:	8e 01       	movw	r16, r28
    4a20:	07 53       	subi	r16, 0x37	; 55
    4a22:	1f 4f       	sbci	r17, 0xFF	; 255
    4a24:	bc 01       	movw	r22, r24
    4a26:	cd 01       	movw	r24, r26
    4a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a2c:	dc 01       	movw	r26, r24
    4a2e:	cb 01       	movw	r24, r22
    4a30:	f8 01       	movw	r30, r16
    4a32:	91 83       	std	Z+1, r25	; 0x01
    4a34:	80 83       	st	Z, r24
    4a36:	1f c0       	rjmp	.+62     	; 0x4a76 <main+0x552>
    4a38:	fe 01       	movw	r30, r28
    4a3a:	e9 53       	subi	r30, 0x39	; 57
    4a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a3e:	80 e9       	ldi	r24, 0x90	; 144
    4a40:	91 e0       	ldi	r25, 0x01	; 1
    4a42:	91 83       	std	Z+1, r25	; 0x01
    4a44:	80 83       	st	Z, r24
    4a46:	fe 01       	movw	r30, r28
    4a48:	e9 53       	subi	r30, 0x39	; 57
    4a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a4c:	80 81       	ld	r24, Z
    4a4e:	91 81       	ldd	r25, Z+1	; 0x01
    4a50:	01 97       	sbiw	r24, 0x01	; 1
    4a52:	f1 f7       	brne	.-4      	; 0x4a50 <main+0x52c>
    4a54:	fe 01       	movw	r30, r28
    4a56:	e9 53       	subi	r30, 0x39	; 57
    4a58:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5a:	91 83       	std	Z+1, r25	; 0x01
    4a5c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a5e:	de 01       	movw	r26, r28
    4a60:	a7 53       	subi	r26, 0x37	; 55
    4a62:	bf 4f       	sbci	r27, 0xFF	; 255
    4a64:	fe 01       	movw	r30, r28
    4a66:	e7 53       	subi	r30, 0x37	; 55
    4a68:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6a:	80 81       	ld	r24, Z
    4a6c:	91 81       	ldd	r25, Z+1	; 0x01
    4a6e:	01 97       	sbiw	r24, 0x01	; 1
    4a70:	11 96       	adiw	r26, 0x01	; 1
    4a72:	9c 93       	st	X, r25
    4a74:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a76:	fe 01       	movw	r30, r28
    4a78:	e7 53       	subi	r30, 0x37	; 55
    4a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a7c:	80 81       	ld	r24, Z
    4a7e:	91 81       	ldd	r25, Z+1	; 0x01
    4a80:	00 97       	sbiw	r24, 0x00	; 0
    4a82:	d1 f6       	brne	.-76     	; 0x4a38 <main+0x514>
    4a84:	27 c0       	rjmp	.+78     	; 0x4ad4 <main+0x5b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a86:	8e 01       	movw	r16, r28
    4a88:	07 53       	subi	r16, 0x37	; 55
    4a8a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a8c:	fe 01       	movw	r30, r28
    4a8e:	e5 53       	subi	r30, 0x35	; 53
    4a90:	ff 4f       	sbci	r31, 0xFF	; 255
    4a92:	60 81       	ld	r22, Z
    4a94:	71 81       	ldd	r23, Z+1	; 0x01
    4a96:	82 81       	ldd	r24, Z+2	; 0x02
    4a98:	93 81       	ldd	r25, Z+3	; 0x03
    4a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a9e:	dc 01       	movw	r26, r24
    4aa0:	cb 01       	movw	r24, r22
    4aa2:	f8 01       	movw	r30, r16
    4aa4:	91 83       	std	Z+1, r25	; 0x01
    4aa6:	80 83       	st	Z, r24
    4aa8:	de 01       	movw	r26, r28
    4aaa:	ab 53       	subi	r26, 0x3B	; 59
    4aac:	bf 4f       	sbci	r27, 0xFF	; 255
    4aae:	fe 01       	movw	r30, r28
    4ab0:	e7 53       	subi	r30, 0x37	; 55
    4ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab4:	80 81       	ld	r24, Z
    4ab6:	91 81       	ldd	r25, Z+1	; 0x01
    4ab8:	8d 93       	st	X+, r24
    4aba:	9c 93       	st	X, r25
    4abc:	fe 01       	movw	r30, r28
    4abe:	eb 53       	subi	r30, 0x3B	; 59
    4ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac2:	80 81       	ld	r24, Z
    4ac4:	91 81       	ldd	r25, Z+1	; 0x01
    4ac6:	01 97       	sbiw	r24, 0x01	; 1
    4ac8:	f1 f7       	brne	.-4      	; 0x4ac6 <main+0x5a2>
    4aca:	fe 01       	movw	r30, r28
    4acc:	eb 53       	subi	r30, 0x3B	; 59
    4ace:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad0:	91 83       	std	Z+1, r25	; 0x01
    4ad2:	80 83       	st	Z, r24
					_delay_ms(500);
					H_LCD_void_gotoXY(2,4);
    4ad4:	82 e0       	ldi	r24, 0x02	; 2
    4ad6:	64 e0       	ldi	r22, 0x04	; 4
    4ad8:	0e 94 36 1a 	call	0x346c	; 0x346c <H_LCD_void_gotoXY>
					H_LCD_void_SendString("Right ID");
    4adc:	8a e9       	ldi	r24, 0x9A	; 154
    4ade:	90 e0       	ldi	r25, 0x00	; 0
    4ae0:	0e 94 15 1a 	call	0x342a	; 0x342a <H_LCD_void_SendString>
    4ae4:	fe 01       	movw	r30, r28
    4ae6:	ef 53       	subi	r30, 0x3F	; 63
    4ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aea:	80 e0       	ldi	r24, 0x00	; 0
    4aec:	90 e0       	ldi	r25, 0x00	; 0
    4aee:	aa ef       	ldi	r26, 0xFA	; 250
    4af0:	b3 e4       	ldi	r27, 0x43	; 67
    4af2:	80 83       	st	Z, r24
    4af4:	91 83       	std	Z+1, r25	; 0x01
    4af6:	a2 83       	std	Z+2, r26	; 0x02
    4af8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4afa:	8e 01       	movw	r16, r28
    4afc:	03 54       	subi	r16, 0x43	; 67
    4afe:	1f 4f       	sbci	r17, 0xFF	; 255
    4b00:	fe 01       	movw	r30, r28
    4b02:	ef 53       	subi	r30, 0x3F	; 63
    4b04:	ff 4f       	sbci	r31, 0xFF	; 255
    4b06:	60 81       	ld	r22, Z
    4b08:	71 81       	ldd	r23, Z+1	; 0x01
    4b0a:	82 81       	ldd	r24, Z+2	; 0x02
    4b0c:	93 81       	ldd	r25, Z+3	; 0x03
    4b0e:	20 e0       	ldi	r18, 0x00	; 0
    4b10:	30 e0       	ldi	r19, 0x00	; 0
    4b12:	4a e7       	ldi	r20, 0x7A	; 122
    4b14:	55 e4       	ldi	r21, 0x45	; 69
    4b16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b1a:	dc 01       	movw	r26, r24
    4b1c:	cb 01       	movw	r24, r22
    4b1e:	f8 01       	movw	r30, r16
    4b20:	80 83       	st	Z, r24
    4b22:	91 83       	std	Z+1, r25	; 0x01
    4b24:	a2 83       	std	Z+2, r26	; 0x02
    4b26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b28:	fe 01       	movw	r30, r28
    4b2a:	e3 54       	subi	r30, 0x43	; 67
    4b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b2e:	60 81       	ld	r22, Z
    4b30:	71 81       	ldd	r23, Z+1	; 0x01
    4b32:	82 81       	ldd	r24, Z+2	; 0x02
    4b34:	93 81       	ldd	r25, Z+3	; 0x03
    4b36:	20 e0       	ldi	r18, 0x00	; 0
    4b38:	30 e0       	ldi	r19, 0x00	; 0
    4b3a:	40 e8       	ldi	r20, 0x80	; 128
    4b3c:	5f e3       	ldi	r21, 0x3F	; 63
    4b3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b42:	88 23       	and	r24, r24
    4b44:	44 f4       	brge	.+16     	; 0x4b56 <main+0x632>
		__ticks = 1;
    4b46:	fe 01       	movw	r30, r28
    4b48:	e5 54       	subi	r30, 0x45	; 69
    4b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b4c:	81 e0       	ldi	r24, 0x01	; 1
    4b4e:	90 e0       	ldi	r25, 0x00	; 0
    4b50:	91 83       	std	Z+1, r25	; 0x01
    4b52:	80 83       	st	Z, r24
    4b54:	64 c0       	rjmp	.+200    	; 0x4c1e <main+0x6fa>
	else if (__tmp > 65535)
    4b56:	fe 01       	movw	r30, r28
    4b58:	e3 54       	subi	r30, 0x43	; 67
    4b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b5c:	60 81       	ld	r22, Z
    4b5e:	71 81       	ldd	r23, Z+1	; 0x01
    4b60:	82 81       	ldd	r24, Z+2	; 0x02
    4b62:	93 81       	ldd	r25, Z+3	; 0x03
    4b64:	20 e0       	ldi	r18, 0x00	; 0
    4b66:	3f ef       	ldi	r19, 0xFF	; 255
    4b68:	4f e7       	ldi	r20, 0x7F	; 127
    4b6a:	57 e4       	ldi	r21, 0x47	; 71
    4b6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b70:	18 16       	cp	r1, r24
    4b72:	0c f0       	brlt	.+2      	; 0x4b76 <main+0x652>
    4b74:	43 c0       	rjmp	.+134    	; 0x4bfc <main+0x6d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b76:	fe 01       	movw	r30, r28
    4b78:	ef 53       	subi	r30, 0x3F	; 63
    4b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b7c:	60 81       	ld	r22, Z
    4b7e:	71 81       	ldd	r23, Z+1	; 0x01
    4b80:	82 81       	ldd	r24, Z+2	; 0x02
    4b82:	93 81       	ldd	r25, Z+3	; 0x03
    4b84:	20 e0       	ldi	r18, 0x00	; 0
    4b86:	30 e0       	ldi	r19, 0x00	; 0
    4b88:	40 e2       	ldi	r20, 0x20	; 32
    4b8a:	51 e4       	ldi	r21, 0x41	; 65
    4b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b90:	dc 01       	movw	r26, r24
    4b92:	cb 01       	movw	r24, r22
    4b94:	8e 01       	movw	r16, r28
    4b96:	05 54       	subi	r16, 0x45	; 69
    4b98:	1f 4f       	sbci	r17, 0xFF	; 255
    4b9a:	bc 01       	movw	r22, r24
    4b9c:	cd 01       	movw	r24, r26
    4b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ba2:	dc 01       	movw	r26, r24
    4ba4:	cb 01       	movw	r24, r22
    4ba6:	f8 01       	movw	r30, r16
    4ba8:	91 83       	std	Z+1, r25	; 0x01
    4baa:	80 83       	st	Z, r24
    4bac:	1f c0       	rjmp	.+62     	; 0x4bec <main+0x6c8>
    4bae:	fe 01       	movw	r30, r28
    4bb0:	e7 54       	subi	r30, 0x47	; 71
    4bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb4:	80 e9       	ldi	r24, 0x90	; 144
    4bb6:	91 e0       	ldi	r25, 0x01	; 1
    4bb8:	91 83       	std	Z+1, r25	; 0x01
    4bba:	80 83       	st	Z, r24
    4bbc:	fe 01       	movw	r30, r28
    4bbe:	e7 54       	subi	r30, 0x47	; 71
    4bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc2:	80 81       	ld	r24, Z
    4bc4:	91 81       	ldd	r25, Z+1	; 0x01
    4bc6:	01 97       	sbiw	r24, 0x01	; 1
    4bc8:	f1 f7       	brne	.-4      	; 0x4bc6 <main+0x6a2>
    4bca:	fe 01       	movw	r30, r28
    4bcc:	e7 54       	subi	r30, 0x47	; 71
    4bce:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd0:	91 83       	std	Z+1, r25	; 0x01
    4bd2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bd4:	de 01       	movw	r26, r28
    4bd6:	a5 54       	subi	r26, 0x45	; 69
    4bd8:	bf 4f       	sbci	r27, 0xFF	; 255
    4bda:	fe 01       	movw	r30, r28
    4bdc:	e5 54       	subi	r30, 0x45	; 69
    4bde:	ff 4f       	sbci	r31, 0xFF	; 255
    4be0:	80 81       	ld	r24, Z
    4be2:	91 81       	ldd	r25, Z+1	; 0x01
    4be4:	01 97       	sbiw	r24, 0x01	; 1
    4be6:	11 96       	adiw	r26, 0x01	; 1
    4be8:	9c 93       	st	X, r25
    4bea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bec:	fe 01       	movw	r30, r28
    4bee:	e5 54       	subi	r30, 0x45	; 69
    4bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf2:	80 81       	ld	r24, Z
    4bf4:	91 81       	ldd	r25, Z+1	; 0x01
    4bf6:	00 97       	sbiw	r24, 0x00	; 0
    4bf8:	d1 f6       	brne	.-76     	; 0x4bae <main+0x68a>
    4bfa:	27 c0       	rjmp	.+78     	; 0x4c4a <main+0x726>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bfc:	8e 01       	movw	r16, r28
    4bfe:	05 54       	subi	r16, 0x45	; 69
    4c00:	1f 4f       	sbci	r17, 0xFF	; 255
    4c02:	fe 01       	movw	r30, r28
    4c04:	e3 54       	subi	r30, 0x43	; 67
    4c06:	ff 4f       	sbci	r31, 0xFF	; 255
    4c08:	60 81       	ld	r22, Z
    4c0a:	71 81       	ldd	r23, Z+1	; 0x01
    4c0c:	82 81       	ldd	r24, Z+2	; 0x02
    4c0e:	93 81       	ldd	r25, Z+3	; 0x03
    4c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c14:	dc 01       	movw	r26, r24
    4c16:	cb 01       	movw	r24, r22
    4c18:	f8 01       	movw	r30, r16
    4c1a:	91 83       	std	Z+1, r25	; 0x01
    4c1c:	80 83       	st	Z, r24
    4c1e:	de 01       	movw	r26, r28
    4c20:	a9 54       	subi	r26, 0x49	; 73
    4c22:	bf 4f       	sbci	r27, 0xFF	; 255
    4c24:	fe 01       	movw	r30, r28
    4c26:	e5 54       	subi	r30, 0x45	; 69
    4c28:	ff 4f       	sbci	r31, 0xFF	; 255
    4c2a:	80 81       	ld	r24, Z
    4c2c:	91 81       	ldd	r25, Z+1	; 0x01
    4c2e:	8d 93       	st	X+, r24
    4c30:	9c 93       	st	X, r25
    4c32:	fe 01       	movw	r30, r28
    4c34:	e9 54       	subi	r30, 0x49	; 73
    4c36:	ff 4f       	sbci	r31, 0xFF	; 255
    4c38:	80 81       	ld	r24, Z
    4c3a:	91 81       	ldd	r25, Z+1	; 0x01
    4c3c:	01 97       	sbiw	r24, 0x01	; 1
    4c3e:	f1 f7       	brne	.-4      	; 0x4c3c <main+0x718>
    4c40:	fe 01       	movw	r30, r28
    4c42:	e9 54       	subi	r30, 0x49	; 73
    4c44:	ff 4f       	sbci	r31, 0xFF	; 255
    4c46:	91 83       	std	Z+1, r25	; 0x01
    4c48:	80 83       	st	Z, r24
					_delay_ms(500);
					H_LCD_void_Clear_Display();
    4c4a:	0e 94 a0 1a 	call	0x3540	; 0x3540 <H_LCD_void_Clear_Display>

					start_from_pass:
					H_LCD_void_gotoXY(2,1);
    4c4e:	82 e0       	ldi	r24, 0x02	; 2
    4c50:	61 e0       	ldi	r22, 0x01	; 1
    4c52:	0e 94 36 1a 	call	0x346c	; 0x346c <H_LCD_void_gotoXY>
					H_LCD_void_SendString("Password : ");
    4c56:	83 ea       	ldi	r24, 0xA3	; 163
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	0e 94 15 1a 	call	0x342a	; 0x342a <H_LCD_void_SendString>
					while(1)
					{
						/*------------------------------ Still read the distance -----------------------*/
						Ultrasonic_SetTrigger(PORTD_INDEX, PIN2_INDEX);
    4c5e:	83 e0       	ldi	r24, 0x03	; 3
    4c60:	62 e0       	ldi	r22, 0x02	; 2
    4c62:	0e 94 a1 1b 	call	0x3742	; 0x3742 <Ultrasonic_SetTrigger>
						Ultrasonic_Read_Distance(&distance);
    4c66:	86 e3       	ldi	r24, 0x36	; 54
    4c68:	92 e0       	ldi	r25, 0x02	; 2
    4c6a:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <Ultrasonic_Read_Distance>
						/*------------------------------------------------------------------------------*/

						/* ---------------------------- Writing Password digits ----------------------- */
						H_KEYPAD_u8_WriteOnDigits(&keypad_digits);
    4c6e:	87 ed       	ldi	r24, 0xD7	; 215
    4c70:	92 e0       	ldi	r25, 0x02	; 2
    4c72:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <H_KEYPAD_u8_WriteOnDigits>
						H_LCD_void_gotoXY(2,12);
    4c76:	82 e0       	ldi	r24, 0x02	; 2
    4c78:	6c e0       	ldi	r22, 0x0C	; 12
    4c7a:	0e 94 36 1a 	call	0x346c	; 0x346c <H_LCD_void_gotoXY>
						H_LCD_void_SendString(keypad_digits.pass_digits);
    4c7e:	8c ed       	ldi	r24, 0xDC	; 220
    4c80:	92 e0       	ldi	r25, 0x02	; 2
    4c82:	0e 94 15 1a 	call	0x342a	; 0x342a <H_LCD_void_SendString>
						/*------------------------------------------------------------------------------*/

						if(strcmp(pass, keypad_digits.digits) == 0)
    4c86:	81 e3       	ldi	r24, 0x31	; 49
    4c88:	92 e0       	ldi	r25, 0x02	; 2
    4c8a:	27 ed       	ldi	r18, 0xD7	; 215
    4c8c:	32 e0       	ldi	r19, 0x02	; 2
    4c8e:	b9 01       	movw	r22, r18
    4c90:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <strcmp>
    4c94:	00 97       	sbiw	r24, 0x00	; 0
    4c96:	09 f0       	breq	.+2      	; 0x4c9a <main+0x776>
    4c98:	9a c1       	rjmp	.+820    	; 0x4fce <main+0xaaa>
						{
							H_LCD_void_Clear_Display();
    4c9a:	0e 94 a0 1a 	call	0x3540	; 0x3540 <H_LCD_void_Clear_Display>
    4c9e:	fe 01       	movw	r30, r28
    4ca0:	ed 54       	subi	r30, 0x4D	; 77
    4ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca4:	80 e0       	ldi	r24, 0x00	; 0
    4ca6:	90 e0       	ldi	r25, 0x00	; 0
    4ca8:	aa e7       	ldi	r26, 0x7A	; 122
    4caa:	b4 e4       	ldi	r27, 0x44	; 68
    4cac:	80 83       	st	Z, r24
    4cae:	91 83       	std	Z+1, r25	; 0x01
    4cb0:	a2 83       	std	Z+2, r26	; 0x02
    4cb2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cb4:	8e 01       	movw	r16, r28
    4cb6:	01 55       	subi	r16, 0x51	; 81
    4cb8:	1f 4f       	sbci	r17, 0xFF	; 255
    4cba:	fe 01       	movw	r30, r28
    4cbc:	ed 54       	subi	r30, 0x4D	; 77
    4cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc0:	60 81       	ld	r22, Z
    4cc2:	71 81       	ldd	r23, Z+1	; 0x01
    4cc4:	82 81       	ldd	r24, Z+2	; 0x02
    4cc6:	93 81       	ldd	r25, Z+3	; 0x03
    4cc8:	20 e0       	ldi	r18, 0x00	; 0
    4cca:	30 e0       	ldi	r19, 0x00	; 0
    4ccc:	4a e7       	ldi	r20, 0x7A	; 122
    4cce:	55 e4       	ldi	r21, 0x45	; 69
    4cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cd4:	dc 01       	movw	r26, r24
    4cd6:	cb 01       	movw	r24, r22
    4cd8:	f8 01       	movw	r30, r16
    4cda:	80 83       	st	Z, r24
    4cdc:	91 83       	std	Z+1, r25	; 0x01
    4cde:	a2 83       	std	Z+2, r26	; 0x02
    4ce0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4ce2:	fe 01       	movw	r30, r28
    4ce4:	e1 55       	subi	r30, 0x51	; 81
    4ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce8:	60 81       	ld	r22, Z
    4cea:	71 81       	ldd	r23, Z+1	; 0x01
    4cec:	82 81       	ldd	r24, Z+2	; 0x02
    4cee:	93 81       	ldd	r25, Z+3	; 0x03
    4cf0:	20 e0       	ldi	r18, 0x00	; 0
    4cf2:	30 e0       	ldi	r19, 0x00	; 0
    4cf4:	40 e8       	ldi	r20, 0x80	; 128
    4cf6:	5f e3       	ldi	r21, 0x3F	; 63
    4cf8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4cfc:	88 23       	and	r24, r24
    4cfe:	44 f4       	brge	.+16     	; 0x4d10 <main+0x7ec>
		__ticks = 1;
    4d00:	fe 01       	movw	r30, r28
    4d02:	e3 55       	subi	r30, 0x53	; 83
    4d04:	ff 4f       	sbci	r31, 0xFF	; 255
    4d06:	81 e0       	ldi	r24, 0x01	; 1
    4d08:	90 e0       	ldi	r25, 0x00	; 0
    4d0a:	91 83       	std	Z+1, r25	; 0x01
    4d0c:	80 83       	st	Z, r24
    4d0e:	64 c0       	rjmp	.+200    	; 0x4dd8 <main+0x8b4>
	else if (__tmp > 65535)
    4d10:	fe 01       	movw	r30, r28
    4d12:	e1 55       	subi	r30, 0x51	; 81
    4d14:	ff 4f       	sbci	r31, 0xFF	; 255
    4d16:	60 81       	ld	r22, Z
    4d18:	71 81       	ldd	r23, Z+1	; 0x01
    4d1a:	82 81       	ldd	r24, Z+2	; 0x02
    4d1c:	93 81       	ldd	r25, Z+3	; 0x03
    4d1e:	20 e0       	ldi	r18, 0x00	; 0
    4d20:	3f ef       	ldi	r19, 0xFF	; 255
    4d22:	4f e7       	ldi	r20, 0x7F	; 127
    4d24:	57 e4       	ldi	r21, 0x47	; 71
    4d26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d2a:	18 16       	cp	r1, r24
    4d2c:	0c f0       	brlt	.+2      	; 0x4d30 <main+0x80c>
    4d2e:	43 c0       	rjmp	.+134    	; 0x4db6 <main+0x892>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d30:	fe 01       	movw	r30, r28
    4d32:	ed 54       	subi	r30, 0x4D	; 77
    4d34:	ff 4f       	sbci	r31, 0xFF	; 255
    4d36:	60 81       	ld	r22, Z
    4d38:	71 81       	ldd	r23, Z+1	; 0x01
    4d3a:	82 81       	ldd	r24, Z+2	; 0x02
    4d3c:	93 81       	ldd	r25, Z+3	; 0x03
    4d3e:	20 e0       	ldi	r18, 0x00	; 0
    4d40:	30 e0       	ldi	r19, 0x00	; 0
    4d42:	40 e2       	ldi	r20, 0x20	; 32
    4d44:	51 e4       	ldi	r21, 0x41	; 65
    4d46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d4a:	dc 01       	movw	r26, r24
    4d4c:	cb 01       	movw	r24, r22
    4d4e:	8e 01       	movw	r16, r28
    4d50:	03 55       	subi	r16, 0x53	; 83
    4d52:	1f 4f       	sbci	r17, 0xFF	; 255
    4d54:	bc 01       	movw	r22, r24
    4d56:	cd 01       	movw	r24, r26
    4d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d5c:	dc 01       	movw	r26, r24
    4d5e:	cb 01       	movw	r24, r22
    4d60:	f8 01       	movw	r30, r16
    4d62:	91 83       	std	Z+1, r25	; 0x01
    4d64:	80 83       	st	Z, r24
    4d66:	1f c0       	rjmp	.+62     	; 0x4da6 <main+0x882>
    4d68:	fe 01       	movw	r30, r28
    4d6a:	e5 55       	subi	r30, 0x55	; 85
    4d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d6e:	80 e9       	ldi	r24, 0x90	; 144
    4d70:	91 e0       	ldi	r25, 0x01	; 1
    4d72:	91 83       	std	Z+1, r25	; 0x01
    4d74:	80 83       	st	Z, r24
    4d76:	fe 01       	movw	r30, r28
    4d78:	e5 55       	subi	r30, 0x55	; 85
    4d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d7c:	80 81       	ld	r24, Z
    4d7e:	91 81       	ldd	r25, Z+1	; 0x01
    4d80:	01 97       	sbiw	r24, 0x01	; 1
    4d82:	f1 f7       	brne	.-4      	; 0x4d80 <main+0x85c>
    4d84:	fe 01       	movw	r30, r28
    4d86:	e5 55       	subi	r30, 0x55	; 85
    4d88:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8a:	91 83       	std	Z+1, r25	; 0x01
    4d8c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d8e:	de 01       	movw	r26, r28
    4d90:	a3 55       	subi	r26, 0x53	; 83
    4d92:	bf 4f       	sbci	r27, 0xFF	; 255
    4d94:	fe 01       	movw	r30, r28
    4d96:	e3 55       	subi	r30, 0x53	; 83
    4d98:	ff 4f       	sbci	r31, 0xFF	; 255
    4d9a:	80 81       	ld	r24, Z
    4d9c:	91 81       	ldd	r25, Z+1	; 0x01
    4d9e:	01 97       	sbiw	r24, 0x01	; 1
    4da0:	11 96       	adiw	r26, 0x01	; 1
    4da2:	9c 93       	st	X, r25
    4da4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4da6:	fe 01       	movw	r30, r28
    4da8:	e3 55       	subi	r30, 0x53	; 83
    4daa:	ff 4f       	sbci	r31, 0xFF	; 255
    4dac:	80 81       	ld	r24, Z
    4dae:	91 81       	ldd	r25, Z+1	; 0x01
    4db0:	00 97       	sbiw	r24, 0x00	; 0
    4db2:	d1 f6       	brne	.-76     	; 0x4d68 <main+0x844>
    4db4:	27 c0       	rjmp	.+78     	; 0x4e04 <main+0x8e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4db6:	8e 01       	movw	r16, r28
    4db8:	03 55       	subi	r16, 0x53	; 83
    4dba:	1f 4f       	sbci	r17, 0xFF	; 255
    4dbc:	fe 01       	movw	r30, r28
    4dbe:	e1 55       	subi	r30, 0x51	; 81
    4dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc2:	60 81       	ld	r22, Z
    4dc4:	71 81       	ldd	r23, Z+1	; 0x01
    4dc6:	82 81       	ldd	r24, Z+2	; 0x02
    4dc8:	93 81       	ldd	r25, Z+3	; 0x03
    4dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dce:	dc 01       	movw	r26, r24
    4dd0:	cb 01       	movw	r24, r22
    4dd2:	f8 01       	movw	r30, r16
    4dd4:	91 83       	std	Z+1, r25	; 0x01
    4dd6:	80 83       	st	Z, r24
    4dd8:	de 01       	movw	r26, r28
    4dda:	a7 55       	subi	r26, 0x57	; 87
    4ddc:	bf 4f       	sbci	r27, 0xFF	; 255
    4dde:	fe 01       	movw	r30, r28
    4de0:	e3 55       	subi	r30, 0x53	; 83
    4de2:	ff 4f       	sbci	r31, 0xFF	; 255
    4de4:	80 81       	ld	r24, Z
    4de6:	91 81       	ldd	r25, Z+1	; 0x01
    4de8:	8d 93       	st	X+, r24
    4dea:	9c 93       	st	X, r25
    4dec:	fe 01       	movw	r30, r28
    4dee:	e7 55       	subi	r30, 0x57	; 87
    4df0:	ff 4f       	sbci	r31, 0xFF	; 255
    4df2:	80 81       	ld	r24, Z
    4df4:	91 81       	ldd	r25, Z+1	; 0x01
    4df6:	01 97       	sbiw	r24, 0x01	; 1
    4df8:	f1 f7       	brne	.-4      	; 0x4df6 <main+0x8d2>
    4dfa:	fe 01       	movw	r30, r28
    4dfc:	e7 55       	subi	r30, 0x57	; 87
    4dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4e00:	91 83       	std	Z+1, r25	; 0x01
    4e02:	80 83       	st	Z, r24
							_delay_ms(1000);
							H_LCD_void_gotoXY(2,2);
    4e04:	82 e0       	ldi	r24, 0x02	; 2
    4e06:	62 e0       	ldi	r22, 0x02	; 2
    4e08:	0e 94 36 1a 	call	0x346c	; 0x346c <H_LCD_void_gotoXY>
							H_LCD_void_SendString("Welcome Mohammed");
    4e0c:	8f ea       	ldi	r24, 0xAF	; 175
    4e0e:	90 e0       	ldi	r25, 0x00	; 0
    4e10:	0e 94 15 1a 	call	0x342a	; 0x342a <H_LCD_void_SendString>
    4e14:	fe 01       	movw	r30, r28
    4e16:	eb 55       	subi	r30, 0x5B	; 91
    4e18:	ff 4f       	sbci	r31, 0xFF	; 255
    4e1a:	80 e0       	ldi	r24, 0x00	; 0
    4e1c:	90 e0       	ldi	r25, 0x00	; 0
    4e1e:	aa ef       	ldi	r26, 0xFA	; 250
    4e20:	b4 e4       	ldi	r27, 0x44	; 68
    4e22:	80 83       	st	Z, r24
    4e24:	91 83       	std	Z+1, r25	; 0x01
    4e26:	a2 83       	std	Z+2, r26	; 0x02
    4e28:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e2a:	8e 01       	movw	r16, r28
    4e2c:	0f 55       	subi	r16, 0x5F	; 95
    4e2e:	1f 4f       	sbci	r17, 0xFF	; 255
    4e30:	fe 01       	movw	r30, r28
    4e32:	eb 55       	subi	r30, 0x5B	; 91
    4e34:	ff 4f       	sbci	r31, 0xFF	; 255
    4e36:	60 81       	ld	r22, Z
    4e38:	71 81       	ldd	r23, Z+1	; 0x01
    4e3a:	82 81       	ldd	r24, Z+2	; 0x02
    4e3c:	93 81       	ldd	r25, Z+3	; 0x03
    4e3e:	20 e0       	ldi	r18, 0x00	; 0
    4e40:	30 e0       	ldi	r19, 0x00	; 0
    4e42:	4a e7       	ldi	r20, 0x7A	; 122
    4e44:	55 e4       	ldi	r21, 0x45	; 69
    4e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e4a:	dc 01       	movw	r26, r24
    4e4c:	cb 01       	movw	r24, r22
    4e4e:	f8 01       	movw	r30, r16
    4e50:	80 83       	st	Z, r24
    4e52:	91 83       	std	Z+1, r25	; 0x01
    4e54:	a2 83       	std	Z+2, r26	; 0x02
    4e56:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e58:	fe 01       	movw	r30, r28
    4e5a:	ef 55       	subi	r30, 0x5F	; 95
    4e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e5e:	60 81       	ld	r22, Z
    4e60:	71 81       	ldd	r23, Z+1	; 0x01
    4e62:	82 81       	ldd	r24, Z+2	; 0x02
    4e64:	93 81       	ldd	r25, Z+3	; 0x03
    4e66:	20 e0       	ldi	r18, 0x00	; 0
    4e68:	30 e0       	ldi	r19, 0x00	; 0
    4e6a:	40 e8       	ldi	r20, 0x80	; 128
    4e6c:	5f e3       	ldi	r21, 0x3F	; 63
    4e6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e72:	88 23       	and	r24, r24
    4e74:	44 f4       	brge	.+16     	; 0x4e86 <main+0x962>
		__ticks = 1;
    4e76:	fe 01       	movw	r30, r28
    4e78:	e1 56       	subi	r30, 0x61	; 97
    4e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e7c:	81 e0       	ldi	r24, 0x01	; 1
    4e7e:	90 e0       	ldi	r25, 0x00	; 0
    4e80:	91 83       	std	Z+1, r25	; 0x01
    4e82:	80 83       	st	Z, r24
    4e84:	64 c0       	rjmp	.+200    	; 0x4f4e <main+0xa2a>
	else if (__tmp > 65535)
    4e86:	fe 01       	movw	r30, r28
    4e88:	ef 55       	subi	r30, 0x5F	; 95
    4e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e8c:	60 81       	ld	r22, Z
    4e8e:	71 81       	ldd	r23, Z+1	; 0x01
    4e90:	82 81       	ldd	r24, Z+2	; 0x02
    4e92:	93 81       	ldd	r25, Z+3	; 0x03
    4e94:	20 e0       	ldi	r18, 0x00	; 0
    4e96:	3f ef       	ldi	r19, 0xFF	; 255
    4e98:	4f e7       	ldi	r20, 0x7F	; 127
    4e9a:	57 e4       	ldi	r21, 0x47	; 71
    4e9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ea0:	18 16       	cp	r1, r24
    4ea2:	0c f0       	brlt	.+2      	; 0x4ea6 <main+0x982>
    4ea4:	43 c0       	rjmp	.+134    	; 0x4f2c <main+0xa08>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ea6:	fe 01       	movw	r30, r28
    4ea8:	eb 55       	subi	r30, 0x5B	; 91
    4eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    4eac:	60 81       	ld	r22, Z
    4eae:	71 81       	ldd	r23, Z+1	; 0x01
    4eb0:	82 81       	ldd	r24, Z+2	; 0x02
    4eb2:	93 81       	ldd	r25, Z+3	; 0x03
    4eb4:	20 e0       	ldi	r18, 0x00	; 0
    4eb6:	30 e0       	ldi	r19, 0x00	; 0
    4eb8:	40 e2       	ldi	r20, 0x20	; 32
    4eba:	51 e4       	ldi	r21, 0x41	; 65
    4ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ec0:	dc 01       	movw	r26, r24
    4ec2:	cb 01       	movw	r24, r22
    4ec4:	8e 01       	movw	r16, r28
    4ec6:	01 56       	subi	r16, 0x61	; 97
    4ec8:	1f 4f       	sbci	r17, 0xFF	; 255
    4eca:	bc 01       	movw	r22, r24
    4ecc:	cd 01       	movw	r24, r26
    4ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ed2:	dc 01       	movw	r26, r24
    4ed4:	cb 01       	movw	r24, r22
    4ed6:	f8 01       	movw	r30, r16
    4ed8:	91 83       	std	Z+1, r25	; 0x01
    4eda:	80 83       	st	Z, r24
    4edc:	1f c0       	rjmp	.+62     	; 0x4f1c <main+0x9f8>
    4ede:	fe 01       	movw	r30, r28
    4ee0:	e3 56       	subi	r30, 0x63	; 99
    4ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee4:	80 e9       	ldi	r24, 0x90	; 144
    4ee6:	91 e0       	ldi	r25, 0x01	; 1
    4ee8:	91 83       	std	Z+1, r25	; 0x01
    4eea:	80 83       	st	Z, r24
    4eec:	fe 01       	movw	r30, r28
    4eee:	e3 56       	subi	r30, 0x63	; 99
    4ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef2:	80 81       	ld	r24, Z
    4ef4:	91 81       	ldd	r25, Z+1	; 0x01
    4ef6:	01 97       	sbiw	r24, 0x01	; 1
    4ef8:	f1 f7       	brne	.-4      	; 0x4ef6 <main+0x9d2>
    4efa:	fe 01       	movw	r30, r28
    4efc:	e3 56       	subi	r30, 0x63	; 99
    4efe:	ff 4f       	sbci	r31, 0xFF	; 255
    4f00:	91 83       	std	Z+1, r25	; 0x01
    4f02:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f04:	de 01       	movw	r26, r28
    4f06:	a1 56       	subi	r26, 0x61	; 97
    4f08:	bf 4f       	sbci	r27, 0xFF	; 255
    4f0a:	fe 01       	movw	r30, r28
    4f0c:	e1 56       	subi	r30, 0x61	; 97
    4f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f10:	80 81       	ld	r24, Z
    4f12:	91 81       	ldd	r25, Z+1	; 0x01
    4f14:	01 97       	sbiw	r24, 0x01	; 1
    4f16:	11 96       	adiw	r26, 0x01	; 1
    4f18:	9c 93       	st	X, r25
    4f1a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f1c:	fe 01       	movw	r30, r28
    4f1e:	e1 56       	subi	r30, 0x61	; 97
    4f20:	ff 4f       	sbci	r31, 0xFF	; 255
    4f22:	80 81       	ld	r24, Z
    4f24:	91 81       	ldd	r25, Z+1	; 0x01
    4f26:	00 97       	sbiw	r24, 0x00	; 0
    4f28:	d1 f6       	brne	.-76     	; 0x4ede <main+0x9ba>
    4f2a:	27 c0       	rjmp	.+78     	; 0x4f7a <main+0xa56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f2c:	8e 01       	movw	r16, r28
    4f2e:	01 56       	subi	r16, 0x61	; 97
    4f30:	1f 4f       	sbci	r17, 0xFF	; 255
    4f32:	fe 01       	movw	r30, r28
    4f34:	ef 55       	subi	r30, 0x5F	; 95
    4f36:	ff 4f       	sbci	r31, 0xFF	; 255
    4f38:	60 81       	ld	r22, Z
    4f3a:	71 81       	ldd	r23, Z+1	; 0x01
    4f3c:	82 81       	ldd	r24, Z+2	; 0x02
    4f3e:	93 81       	ldd	r25, Z+3	; 0x03
    4f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f44:	dc 01       	movw	r26, r24
    4f46:	cb 01       	movw	r24, r22
    4f48:	f8 01       	movw	r30, r16
    4f4a:	91 83       	std	Z+1, r25	; 0x01
    4f4c:	80 83       	st	Z, r24
    4f4e:	de 01       	movw	r26, r28
    4f50:	a5 56       	subi	r26, 0x65	; 101
    4f52:	bf 4f       	sbci	r27, 0xFF	; 255
    4f54:	fe 01       	movw	r30, r28
    4f56:	e1 56       	subi	r30, 0x61	; 97
    4f58:	ff 4f       	sbci	r31, 0xFF	; 255
    4f5a:	80 81       	ld	r24, Z
    4f5c:	91 81       	ldd	r25, Z+1	; 0x01
    4f5e:	8d 93       	st	X+, r24
    4f60:	9c 93       	st	X, r25
    4f62:	fe 01       	movw	r30, r28
    4f64:	e5 56       	subi	r30, 0x65	; 101
    4f66:	ff 4f       	sbci	r31, 0xFF	; 255
    4f68:	80 81       	ld	r24, Z
    4f6a:	91 81       	ldd	r25, Z+1	; 0x01
    4f6c:	01 97       	sbiw	r24, 0x01	; 1
    4f6e:	f1 f7       	brne	.-4      	; 0x4f6c <main+0xa48>
    4f70:	fe 01       	movw	r30, r28
    4f72:	e5 56       	subi	r30, 0x65	; 101
    4f74:	ff 4f       	sbci	r31, 0xFF	; 255
    4f76:	91 83       	std	Z+1, r25	; 0x01
    4f78:	80 83       	st	Z, r24
							_delay_ms(2000);
							H_LCD_void_Clear_Display();
    4f7a:	0e 94 a0 1a 	call	0x3540	; 0x3540 <H_LCD_void_Clear_Display>

							/* ---------------------------------------- Start Our Application ----------------------- */
							while(1)
							{
								/* ------------------------------ Control Your System now ---------------------------- */
								H_KEYPAD_u8_getPressedKey(&pressed_key);
    4f7e:	86 ed       	ldi	r24, 0xD6	; 214
    4f80:	92 e0       	ldi	r25, 0x02	; 2
    4f82:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <H_KEYPAD_u8_getPressedKey>
								if(pressed_key == 1)
    4f86:	80 91 d6 02 	lds	r24, 0x02D6
    4f8a:	81 30       	cpi	r24, 0x01	; 1
    4f8c:	29 f4       	brne	.+10     	; 0x4f98 <main+0xa74>
								{
									Led_TurnOn(PORTA_INDEX, PIN4_INDEX);
    4f8e:	80 e0       	ldi	r24, 0x00	; 0
    4f90:	64 e0       	ldi	r22, 0x04	; 4
    4f92:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <Led_TurnOn>
    4f96:	f3 cf       	rjmp	.-26     	; 0x4f7e <main+0xa5a>
								}
								else if(pressed_key == 2)
    4f98:	80 91 d6 02 	lds	r24, 0x02D6
    4f9c:	82 30       	cpi	r24, 0x02	; 2
    4f9e:	29 f4       	brne	.+10     	; 0x4faa <main+0xa86>
								{
									Led_TurnOff(PORTA_INDEX, PIN4_INDEX);
    4fa0:	80 e0       	ldi	r24, 0x00	; 0
    4fa2:	64 e0       	ldi	r22, 0x04	; 4
    4fa4:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <Led_TurnOff>
    4fa8:	ea cf       	rjmp	.-44     	; 0x4f7e <main+0xa5a>
								}
								else if(pressed_key == 3)
    4faa:	80 91 d6 02 	lds	r24, 0x02D6
    4fae:	83 30       	cpi	r24, 0x03	; 3
    4fb0:	29 f4       	brne	.+10     	; 0x4fbc <main+0xa98>
								{
									Led_TurnOn(PORTA_INDEX, PIN5_INDEX);
    4fb2:	80 e0       	ldi	r24, 0x00	; 0
    4fb4:	65 e0       	ldi	r22, 0x05	; 5
    4fb6:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <Led_TurnOn>
    4fba:	e1 cf       	rjmp	.-62     	; 0x4f7e <main+0xa5a>
								}
								else if(pressed_key == 4)
    4fbc:	80 91 d6 02 	lds	r24, 0x02D6
    4fc0:	84 30       	cpi	r24, 0x04	; 4
    4fc2:	e9 f6       	brne	.-70     	; 0x4f7e <main+0xa5a>
								{
									Led_TurnOff(PORTA_INDEX, PIN5_INDEX);
    4fc4:	80 e0       	ldi	r24, 0x00	; 0
    4fc6:	65 e0       	ldi	r22, 0x05	; 5
    4fc8:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <Led_TurnOff>
    4fcc:	d8 cf       	rjmp	.-80     	; 0x4f7e <main+0xa5a>
								}
							}
							/* ----------------------------------------------------------------------------------- */
						}
						else if((strcmp(pass, keypad_digits.digits) != 0) && (keypad_digits.cursor == 4))
    4fce:	81 e3       	ldi	r24, 0x31	; 49
    4fd0:	92 e0       	ldi	r25, 0x02	; 2
    4fd2:	27 ed       	ldi	r18, 0xD7	; 215
    4fd4:	32 e0       	ldi	r19, 0x02	; 2
    4fd6:	b9 01       	movw	r22, r18
    4fd8:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <strcmp>
    4fdc:	00 97       	sbiw	r24, 0x00	; 0
    4fde:	09 f4       	brne	.+2      	; 0x4fe2 <main+0xabe>
    4fe0:	0b c4       	rjmp	.+2070   	; 0x57f8 <main+0x12d4>
    4fe2:	80 91 e1 02 	lds	r24, 0x02E1
    4fe6:	84 30       	cpi	r24, 0x04	; 4
    4fe8:	09 f0       	breq	.+2      	; 0x4fec <main+0xac8>
    4fea:	06 c4       	rjmp	.+2060   	; 0x57f8 <main+0x12d4>
						{
							repeated_pass++;
    4fec:	80 91 9b 02 	lds	r24, 0x029B
    4ff0:	8f 5f       	subi	r24, 0xFF	; 255
    4ff2:	80 93 9b 02 	sts	0x029B, r24
							if(repeated_pass < 3)
    4ff6:	80 91 9b 02 	lds	r24, 0x029B
    4ffa:	83 30       	cpi	r24, 0x03	; 3
    4ffc:	08 f0       	brcs	.+2      	; 0x5000 <main+0xadc>
    4ffe:	e7 c2       	rjmp	.+1486   	; 0x55ce <main+0x10aa>
							{
								H_LCD_void_Clear_Display();
    5000:	0e 94 a0 1a 	call	0x3540	; 0x3540 <H_LCD_void_Clear_Display>
    5004:	fe 01       	movw	r30, r28
    5006:	e9 56       	subi	r30, 0x69	; 105
    5008:	ff 4f       	sbci	r31, 0xFF	; 255
    500a:	80 e0       	ldi	r24, 0x00	; 0
    500c:	90 e0       	ldi	r25, 0x00	; 0
    500e:	aa ef       	ldi	r26, 0xFA	; 250
    5010:	b3 e4       	ldi	r27, 0x43	; 67
    5012:	80 83       	st	Z, r24
    5014:	91 83       	std	Z+1, r25	; 0x01
    5016:	a2 83       	std	Z+2, r26	; 0x02
    5018:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    501a:	8e 01       	movw	r16, r28
    501c:	0d 56       	subi	r16, 0x6D	; 109
    501e:	1f 4f       	sbci	r17, 0xFF	; 255
    5020:	fe 01       	movw	r30, r28
    5022:	e9 56       	subi	r30, 0x69	; 105
    5024:	ff 4f       	sbci	r31, 0xFF	; 255
    5026:	60 81       	ld	r22, Z
    5028:	71 81       	ldd	r23, Z+1	; 0x01
    502a:	82 81       	ldd	r24, Z+2	; 0x02
    502c:	93 81       	ldd	r25, Z+3	; 0x03
    502e:	20 e0       	ldi	r18, 0x00	; 0
    5030:	30 e0       	ldi	r19, 0x00	; 0
    5032:	4a e7       	ldi	r20, 0x7A	; 122
    5034:	55 e4       	ldi	r21, 0x45	; 69
    5036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    503a:	dc 01       	movw	r26, r24
    503c:	cb 01       	movw	r24, r22
    503e:	f8 01       	movw	r30, r16
    5040:	80 83       	st	Z, r24
    5042:	91 83       	std	Z+1, r25	; 0x01
    5044:	a2 83       	std	Z+2, r26	; 0x02
    5046:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5048:	fe 01       	movw	r30, r28
    504a:	ed 56       	subi	r30, 0x6D	; 109
    504c:	ff 4f       	sbci	r31, 0xFF	; 255
    504e:	60 81       	ld	r22, Z
    5050:	71 81       	ldd	r23, Z+1	; 0x01
    5052:	82 81       	ldd	r24, Z+2	; 0x02
    5054:	93 81       	ldd	r25, Z+3	; 0x03
    5056:	20 e0       	ldi	r18, 0x00	; 0
    5058:	30 e0       	ldi	r19, 0x00	; 0
    505a:	40 e8       	ldi	r20, 0x80	; 128
    505c:	5f e3       	ldi	r21, 0x3F	; 63
    505e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5062:	88 23       	and	r24, r24
    5064:	44 f4       	brge	.+16     	; 0x5076 <main+0xb52>
		__ticks = 1;
    5066:	fe 01       	movw	r30, r28
    5068:	ef 56       	subi	r30, 0x6F	; 111
    506a:	ff 4f       	sbci	r31, 0xFF	; 255
    506c:	81 e0       	ldi	r24, 0x01	; 1
    506e:	90 e0       	ldi	r25, 0x00	; 0
    5070:	91 83       	std	Z+1, r25	; 0x01
    5072:	80 83       	st	Z, r24
    5074:	64 c0       	rjmp	.+200    	; 0x513e <main+0xc1a>
	else if (__tmp > 65535)
    5076:	fe 01       	movw	r30, r28
    5078:	ed 56       	subi	r30, 0x6D	; 109
    507a:	ff 4f       	sbci	r31, 0xFF	; 255
    507c:	60 81       	ld	r22, Z
    507e:	71 81       	ldd	r23, Z+1	; 0x01
    5080:	82 81       	ldd	r24, Z+2	; 0x02
    5082:	93 81       	ldd	r25, Z+3	; 0x03
    5084:	20 e0       	ldi	r18, 0x00	; 0
    5086:	3f ef       	ldi	r19, 0xFF	; 255
    5088:	4f e7       	ldi	r20, 0x7F	; 127
    508a:	57 e4       	ldi	r21, 0x47	; 71
    508c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5090:	18 16       	cp	r1, r24
    5092:	0c f0       	brlt	.+2      	; 0x5096 <main+0xb72>
    5094:	43 c0       	rjmp	.+134    	; 0x511c <main+0xbf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5096:	fe 01       	movw	r30, r28
    5098:	e9 56       	subi	r30, 0x69	; 105
    509a:	ff 4f       	sbci	r31, 0xFF	; 255
    509c:	60 81       	ld	r22, Z
    509e:	71 81       	ldd	r23, Z+1	; 0x01
    50a0:	82 81       	ldd	r24, Z+2	; 0x02
    50a2:	93 81       	ldd	r25, Z+3	; 0x03
    50a4:	20 e0       	ldi	r18, 0x00	; 0
    50a6:	30 e0       	ldi	r19, 0x00	; 0
    50a8:	40 e2       	ldi	r20, 0x20	; 32
    50aa:	51 e4       	ldi	r21, 0x41	; 65
    50ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50b0:	dc 01       	movw	r26, r24
    50b2:	cb 01       	movw	r24, r22
    50b4:	8e 01       	movw	r16, r28
    50b6:	0f 56       	subi	r16, 0x6F	; 111
    50b8:	1f 4f       	sbci	r17, 0xFF	; 255
    50ba:	bc 01       	movw	r22, r24
    50bc:	cd 01       	movw	r24, r26
    50be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50c2:	dc 01       	movw	r26, r24
    50c4:	cb 01       	movw	r24, r22
    50c6:	f8 01       	movw	r30, r16
    50c8:	91 83       	std	Z+1, r25	; 0x01
    50ca:	80 83       	st	Z, r24
    50cc:	1f c0       	rjmp	.+62     	; 0x510c <main+0xbe8>
    50ce:	fe 01       	movw	r30, r28
    50d0:	e1 57       	subi	r30, 0x71	; 113
    50d2:	ff 4f       	sbci	r31, 0xFF	; 255
    50d4:	80 e9       	ldi	r24, 0x90	; 144
    50d6:	91 e0       	ldi	r25, 0x01	; 1
    50d8:	91 83       	std	Z+1, r25	; 0x01
    50da:	80 83       	st	Z, r24
    50dc:	fe 01       	movw	r30, r28
    50de:	e1 57       	subi	r30, 0x71	; 113
    50e0:	ff 4f       	sbci	r31, 0xFF	; 255
    50e2:	80 81       	ld	r24, Z
    50e4:	91 81       	ldd	r25, Z+1	; 0x01
    50e6:	01 97       	sbiw	r24, 0x01	; 1
    50e8:	f1 f7       	brne	.-4      	; 0x50e6 <main+0xbc2>
    50ea:	fe 01       	movw	r30, r28
    50ec:	e1 57       	subi	r30, 0x71	; 113
    50ee:	ff 4f       	sbci	r31, 0xFF	; 255
    50f0:	91 83       	std	Z+1, r25	; 0x01
    50f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50f4:	de 01       	movw	r26, r28
    50f6:	af 56       	subi	r26, 0x6F	; 111
    50f8:	bf 4f       	sbci	r27, 0xFF	; 255
    50fa:	fe 01       	movw	r30, r28
    50fc:	ef 56       	subi	r30, 0x6F	; 111
    50fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5100:	80 81       	ld	r24, Z
    5102:	91 81       	ldd	r25, Z+1	; 0x01
    5104:	01 97       	sbiw	r24, 0x01	; 1
    5106:	11 96       	adiw	r26, 0x01	; 1
    5108:	9c 93       	st	X, r25
    510a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    510c:	fe 01       	movw	r30, r28
    510e:	ef 56       	subi	r30, 0x6F	; 111
    5110:	ff 4f       	sbci	r31, 0xFF	; 255
    5112:	80 81       	ld	r24, Z
    5114:	91 81       	ldd	r25, Z+1	; 0x01
    5116:	00 97       	sbiw	r24, 0x00	; 0
    5118:	d1 f6       	brne	.-76     	; 0x50ce <main+0xbaa>
    511a:	27 c0       	rjmp	.+78     	; 0x516a <main+0xc46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    511c:	8e 01       	movw	r16, r28
    511e:	0f 56       	subi	r16, 0x6F	; 111
    5120:	1f 4f       	sbci	r17, 0xFF	; 255
    5122:	fe 01       	movw	r30, r28
    5124:	ed 56       	subi	r30, 0x6D	; 109
    5126:	ff 4f       	sbci	r31, 0xFF	; 255
    5128:	60 81       	ld	r22, Z
    512a:	71 81       	ldd	r23, Z+1	; 0x01
    512c:	82 81       	ldd	r24, Z+2	; 0x02
    512e:	93 81       	ldd	r25, Z+3	; 0x03
    5130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5134:	dc 01       	movw	r26, r24
    5136:	cb 01       	movw	r24, r22
    5138:	f8 01       	movw	r30, r16
    513a:	91 83       	std	Z+1, r25	; 0x01
    513c:	80 83       	st	Z, r24
    513e:	de 01       	movw	r26, r28
    5140:	a3 57       	subi	r26, 0x73	; 115
    5142:	bf 4f       	sbci	r27, 0xFF	; 255
    5144:	fe 01       	movw	r30, r28
    5146:	ef 56       	subi	r30, 0x6F	; 111
    5148:	ff 4f       	sbci	r31, 0xFF	; 255
    514a:	80 81       	ld	r24, Z
    514c:	91 81       	ldd	r25, Z+1	; 0x01
    514e:	8d 93       	st	X+, r24
    5150:	9c 93       	st	X, r25
    5152:	fe 01       	movw	r30, r28
    5154:	e3 57       	subi	r30, 0x73	; 115
    5156:	ff 4f       	sbci	r31, 0xFF	; 255
    5158:	80 81       	ld	r24, Z
    515a:	91 81       	ldd	r25, Z+1	; 0x01
    515c:	01 97       	sbiw	r24, 0x01	; 1
    515e:	f1 f7       	brne	.-4      	; 0x515c <main+0xc38>
    5160:	fe 01       	movw	r30, r28
    5162:	e3 57       	subi	r30, 0x73	; 115
    5164:	ff 4f       	sbci	r31, 0xFF	; 255
    5166:	91 83       	std	Z+1, r25	; 0x01
    5168:	80 83       	st	Z, r24
								_delay_ms(500);
								H_LCD_void_gotoXY(2,4);
    516a:	82 e0       	ldi	r24, 0x02	; 2
    516c:	64 e0       	ldi	r22, 0x04	; 4
    516e:	0e 94 36 1a 	call	0x346c	; 0x346c <H_LCD_void_gotoXY>
								H_LCD_void_SendString("Wrong Password");
    5172:	80 ec       	ldi	r24, 0xC0	; 192
    5174:	90 e0       	ldi	r25, 0x00	; 0
    5176:	0e 94 15 1a 	call	0x342a	; 0x342a <H_LCD_void_SendString>
    517a:	fe 01       	movw	r30, r28
    517c:	e7 57       	subi	r30, 0x77	; 119
    517e:	ff 4f       	sbci	r31, 0xFF	; 255
    5180:	80 e0       	ldi	r24, 0x00	; 0
    5182:	90 e0       	ldi	r25, 0x00	; 0
    5184:	aa ef       	ldi	r26, 0xFA	; 250
    5186:	b3 e4       	ldi	r27, 0x43	; 67
    5188:	80 83       	st	Z, r24
    518a:	91 83       	std	Z+1, r25	; 0x01
    518c:	a2 83       	std	Z+2, r26	; 0x02
    518e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5190:	8e 01       	movw	r16, r28
    5192:	0b 57       	subi	r16, 0x7B	; 123
    5194:	1f 4f       	sbci	r17, 0xFF	; 255
    5196:	fe 01       	movw	r30, r28
    5198:	e7 57       	subi	r30, 0x77	; 119
    519a:	ff 4f       	sbci	r31, 0xFF	; 255
    519c:	60 81       	ld	r22, Z
    519e:	71 81       	ldd	r23, Z+1	; 0x01
    51a0:	82 81       	ldd	r24, Z+2	; 0x02
    51a2:	93 81       	ldd	r25, Z+3	; 0x03
    51a4:	20 e0       	ldi	r18, 0x00	; 0
    51a6:	30 e0       	ldi	r19, 0x00	; 0
    51a8:	4a e7       	ldi	r20, 0x7A	; 122
    51aa:	55 e4       	ldi	r21, 0x45	; 69
    51ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51b0:	dc 01       	movw	r26, r24
    51b2:	cb 01       	movw	r24, r22
    51b4:	f8 01       	movw	r30, r16
    51b6:	80 83       	st	Z, r24
    51b8:	91 83       	std	Z+1, r25	; 0x01
    51ba:	a2 83       	std	Z+2, r26	; 0x02
    51bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    51be:	fe 01       	movw	r30, r28
    51c0:	eb 57       	subi	r30, 0x7B	; 123
    51c2:	ff 4f       	sbci	r31, 0xFF	; 255
    51c4:	60 81       	ld	r22, Z
    51c6:	71 81       	ldd	r23, Z+1	; 0x01
    51c8:	82 81       	ldd	r24, Z+2	; 0x02
    51ca:	93 81       	ldd	r25, Z+3	; 0x03
    51cc:	20 e0       	ldi	r18, 0x00	; 0
    51ce:	30 e0       	ldi	r19, 0x00	; 0
    51d0:	40 e8       	ldi	r20, 0x80	; 128
    51d2:	5f e3       	ldi	r21, 0x3F	; 63
    51d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    51d8:	88 23       	and	r24, r24
    51da:	44 f4       	brge	.+16     	; 0x51ec <main+0xcc8>
		__ticks = 1;
    51dc:	fe 01       	movw	r30, r28
    51de:	ed 57       	subi	r30, 0x7D	; 125
    51e0:	ff 4f       	sbci	r31, 0xFF	; 255
    51e2:	81 e0       	ldi	r24, 0x01	; 1
    51e4:	90 e0       	ldi	r25, 0x00	; 0
    51e6:	91 83       	std	Z+1, r25	; 0x01
    51e8:	80 83       	st	Z, r24
    51ea:	64 c0       	rjmp	.+200    	; 0x52b4 <main+0xd90>
	else if (__tmp > 65535)
    51ec:	fe 01       	movw	r30, r28
    51ee:	eb 57       	subi	r30, 0x7B	; 123
    51f0:	ff 4f       	sbci	r31, 0xFF	; 255
    51f2:	60 81       	ld	r22, Z
    51f4:	71 81       	ldd	r23, Z+1	; 0x01
    51f6:	82 81       	ldd	r24, Z+2	; 0x02
    51f8:	93 81       	ldd	r25, Z+3	; 0x03
    51fa:	20 e0       	ldi	r18, 0x00	; 0
    51fc:	3f ef       	ldi	r19, 0xFF	; 255
    51fe:	4f e7       	ldi	r20, 0x7F	; 127
    5200:	57 e4       	ldi	r21, 0x47	; 71
    5202:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5206:	18 16       	cp	r1, r24
    5208:	0c f0       	brlt	.+2      	; 0x520c <main+0xce8>
    520a:	43 c0       	rjmp	.+134    	; 0x5292 <main+0xd6e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    520c:	fe 01       	movw	r30, r28
    520e:	e7 57       	subi	r30, 0x77	; 119
    5210:	ff 4f       	sbci	r31, 0xFF	; 255
    5212:	60 81       	ld	r22, Z
    5214:	71 81       	ldd	r23, Z+1	; 0x01
    5216:	82 81       	ldd	r24, Z+2	; 0x02
    5218:	93 81       	ldd	r25, Z+3	; 0x03
    521a:	20 e0       	ldi	r18, 0x00	; 0
    521c:	30 e0       	ldi	r19, 0x00	; 0
    521e:	40 e2       	ldi	r20, 0x20	; 32
    5220:	51 e4       	ldi	r21, 0x41	; 65
    5222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5226:	dc 01       	movw	r26, r24
    5228:	cb 01       	movw	r24, r22
    522a:	8e 01       	movw	r16, r28
    522c:	0d 57       	subi	r16, 0x7D	; 125
    522e:	1f 4f       	sbci	r17, 0xFF	; 255
    5230:	bc 01       	movw	r22, r24
    5232:	cd 01       	movw	r24, r26
    5234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5238:	dc 01       	movw	r26, r24
    523a:	cb 01       	movw	r24, r22
    523c:	f8 01       	movw	r30, r16
    523e:	91 83       	std	Z+1, r25	; 0x01
    5240:	80 83       	st	Z, r24
    5242:	1f c0       	rjmp	.+62     	; 0x5282 <main+0xd5e>
    5244:	fe 01       	movw	r30, r28
    5246:	ef 57       	subi	r30, 0x7F	; 127
    5248:	ff 4f       	sbci	r31, 0xFF	; 255
    524a:	80 e9       	ldi	r24, 0x90	; 144
    524c:	91 e0       	ldi	r25, 0x01	; 1
    524e:	91 83       	std	Z+1, r25	; 0x01
    5250:	80 83       	st	Z, r24
    5252:	fe 01       	movw	r30, r28
    5254:	ef 57       	subi	r30, 0x7F	; 127
    5256:	ff 4f       	sbci	r31, 0xFF	; 255
    5258:	80 81       	ld	r24, Z
    525a:	91 81       	ldd	r25, Z+1	; 0x01
    525c:	01 97       	sbiw	r24, 0x01	; 1
    525e:	f1 f7       	brne	.-4      	; 0x525c <main+0xd38>
    5260:	fe 01       	movw	r30, r28
    5262:	ef 57       	subi	r30, 0x7F	; 127
    5264:	ff 4f       	sbci	r31, 0xFF	; 255
    5266:	91 83       	std	Z+1, r25	; 0x01
    5268:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    526a:	de 01       	movw	r26, r28
    526c:	ad 57       	subi	r26, 0x7D	; 125
    526e:	bf 4f       	sbci	r27, 0xFF	; 255
    5270:	fe 01       	movw	r30, r28
    5272:	ed 57       	subi	r30, 0x7D	; 125
    5274:	ff 4f       	sbci	r31, 0xFF	; 255
    5276:	80 81       	ld	r24, Z
    5278:	91 81       	ldd	r25, Z+1	; 0x01
    527a:	01 97       	sbiw	r24, 0x01	; 1
    527c:	11 96       	adiw	r26, 0x01	; 1
    527e:	9c 93       	st	X, r25
    5280:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5282:	fe 01       	movw	r30, r28
    5284:	ed 57       	subi	r30, 0x7D	; 125
    5286:	ff 4f       	sbci	r31, 0xFF	; 255
    5288:	80 81       	ld	r24, Z
    528a:	91 81       	ldd	r25, Z+1	; 0x01
    528c:	00 97       	sbiw	r24, 0x00	; 0
    528e:	d1 f6       	brne	.-76     	; 0x5244 <main+0xd20>
    5290:	27 c0       	rjmp	.+78     	; 0x52e0 <main+0xdbc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5292:	8e 01       	movw	r16, r28
    5294:	0d 57       	subi	r16, 0x7D	; 125
    5296:	1f 4f       	sbci	r17, 0xFF	; 255
    5298:	fe 01       	movw	r30, r28
    529a:	eb 57       	subi	r30, 0x7B	; 123
    529c:	ff 4f       	sbci	r31, 0xFF	; 255
    529e:	60 81       	ld	r22, Z
    52a0:	71 81       	ldd	r23, Z+1	; 0x01
    52a2:	82 81       	ldd	r24, Z+2	; 0x02
    52a4:	93 81       	ldd	r25, Z+3	; 0x03
    52a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52aa:	dc 01       	movw	r26, r24
    52ac:	cb 01       	movw	r24, r22
    52ae:	f8 01       	movw	r30, r16
    52b0:	91 83       	std	Z+1, r25	; 0x01
    52b2:	80 83       	st	Z, r24
    52b4:	de 01       	movw	r26, r28
    52b6:	a1 58       	subi	r26, 0x81	; 129
    52b8:	bf 4f       	sbci	r27, 0xFF	; 255
    52ba:	fe 01       	movw	r30, r28
    52bc:	ed 57       	subi	r30, 0x7D	; 125
    52be:	ff 4f       	sbci	r31, 0xFF	; 255
    52c0:	80 81       	ld	r24, Z
    52c2:	91 81       	ldd	r25, Z+1	; 0x01
    52c4:	8d 93       	st	X+, r24
    52c6:	9c 93       	st	X, r25
    52c8:	fe 01       	movw	r30, r28
    52ca:	e1 58       	subi	r30, 0x81	; 129
    52cc:	ff 4f       	sbci	r31, 0xFF	; 255
    52ce:	80 81       	ld	r24, Z
    52d0:	91 81       	ldd	r25, Z+1	; 0x01
    52d2:	01 97       	sbiw	r24, 0x01	; 1
    52d4:	f1 f7       	brne	.-4      	; 0x52d2 <main+0xdae>
    52d6:	fe 01       	movw	r30, r28
    52d8:	e1 58       	subi	r30, 0x81	; 129
    52da:	ff 4f       	sbci	r31, 0xFF	; 255
    52dc:	91 83       	std	Z+1, r25	; 0x01
    52de:	80 83       	st	Z, r24
								_delay_ms(500);
								H_LCD_void_Clear_Display();
    52e0:	0e 94 a0 1a 	call	0x3540	; 0x3540 <H_LCD_void_Clear_Display>
    52e4:	fe 01       	movw	r30, r28
    52e6:	e5 58       	subi	r30, 0x85	; 133
    52e8:	ff 4f       	sbci	r31, 0xFF	; 255
    52ea:	80 e0       	ldi	r24, 0x00	; 0
    52ec:	90 e0       	ldi	r25, 0x00	; 0
    52ee:	aa e7       	ldi	r26, 0x7A	; 122
    52f0:	b4 e4       	ldi	r27, 0x44	; 68
    52f2:	80 83       	st	Z, r24
    52f4:	91 83       	std	Z+1, r25	; 0x01
    52f6:	a2 83       	std	Z+2, r26	; 0x02
    52f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52fa:	8e 01       	movw	r16, r28
    52fc:	09 58       	subi	r16, 0x89	; 137
    52fe:	1f 4f       	sbci	r17, 0xFF	; 255
    5300:	fe 01       	movw	r30, r28
    5302:	e5 58       	subi	r30, 0x85	; 133
    5304:	ff 4f       	sbci	r31, 0xFF	; 255
    5306:	60 81       	ld	r22, Z
    5308:	71 81       	ldd	r23, Z+1	; 0x01
    530a:	82 81       	ldd	r24, Z+2	; 0x02
    530c:	93 81       	ldd	r25, Z+3	; 0x03
    530e:	20 e0       	ldi	r18, 0x00	; 0
    5310:	30 e0       	ldi	r19, 0x00	; 0
    5312:	4a e7       	ldi	r20, 0x7A	; 122
    5314:	55 e4       	ldi	r21, 0x45	; 69
    5316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    531a:	dc 01       	movw	r26, r24
    531c:	cb 01       	movw	r24, r22
    531e:	f8 01       	movw	r30, r16
    5320:	80 83       	st	Z, r24
    5322:	91 83       	std	Z+1, r25	; 0x01
    5324:	a2 83       	std	Z+2, r26	; 0x02
    5326:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5328:	fe 01       	movw	r30, r28
    532a:	e9 58       	subi	r30, 0x89	; 137
    532c:	ff 4f       	sbci	r31, 0xFF	; 255
    532e:	60 81       	ld	r22, Z
    5330:	71 81       	ldd	r23, Z+1	; 0x01
    5332:	82 81       	ldd	r24, Z+2	; 0x02
    5334:	93 81       	ldd	r25, Z+3	; 0x03
    5336:	20 e0       	ldi	r18, 0x00	; 0
    5338:	30 e0       	ldi	r19, 0x00	; 0
    533a:	40 e8       	ldi	r20, 0x80	; 128
    533c:	5f e3       	ldi	r21, 0x3F	; 63
    533e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5342:	88 23       	and	r24, r24
    5344:	44 f4       	brge	.+16     	; 0x5356 <main+0xe32>
		__ticks = 1;
    5346:	fe 01       	movw	r30, r28
    5348:	eb 58       	subi	r30, 0x8B	; 139
    534a:	ff 4f       	sbci	r31, 0xFF	; 255
    534c:	81 e0       	ldi	r24, 0x01	; 1
    534e:	90 e0       	ldi	r25, 0x00	; 0
    5350:	91 83       	std	Z+1, r25	; 0x01
    5352:	80 83       	st	Z, r24
    5354:	64 c0       	rjmp	.+200    	; 0x541e <main+0xefa>
	else if (__tmp > 65535)
    5356:	fe 01       	movw	r30, r28
    5358:	e9 58       	subi	r30, 0x89	; 137
    535a:	ff 4f       	sbci	r31, 0xFF	; 255
    535c:	60 81       	ld	r22, Z
    535e:	71 81       	ldd	r23, Z+1	; 0x01
    5360:	82 81       	ldd	r24, Z+2	; 0x02
    5362:	93 81       	ldd	r25, Z+3	; 0x03
    5364:	20 e0       	ldi	r18, 0x00	; 0
    5366:	3f ef       	ldi	r19, 0xFF	; 255
    5368:	4f e7       	ldi	r20, 0x7F	; 127
    536a:	57 e4       	ldi	r21, 0x47	; 71
    536c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5370:	18 16       	cp	r1, r24
    5372:	0c f0       	brlt	.+2      	; 0x5376 <main+0xe52>
    5374:	43 c0       	rjmp	.+134    	; 0x53fc <main+0xed8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5376:	fe 01       	movw	r30, r28
    5378:	e5 58       	subi	r30, 0x85	; 133
    537a:	ff 4f       	sbci	r31, 0xFF	; 255
    537c:	60 81       	ld	r22, Z
    537e:	71 81       	ldd	r23, Z+1	; 0x01
    5380:	82 81       	ldd	r24, Z+2	; 0x02
    5382:	93 81       	ldd	r25, Z+3	; 0x03
    5384:	20 e0       	ldi	r18, 0x00	; 0
    5386:	30 e0       	ldi	r19, 0x00	; 0
    5388:	40 e2       	ldi	r20, 0x20	; 32
    538a:	51 e4       	ldi	r21, 0x41	; 65
    538c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5390:	dc 01       	movw	r26, r24
    5392:	cb 01       	movw	r24, r22
    5394:	8e 01       	movw	r16, r28
    5396:	0b 58       	subi	r16, 0x8B	; 139
    5398:	1f 4f       	sbci	r17, 0xFF	; 255
    539a:	bc 01       	movw	r22, r24
    539c:	cd 01       	movw	r24, r26
    539e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53a2:	dc 01       	movw	r26, r24
    53a4:	cb 01       	movw	r24, r22
    53a6:	f8 01       	movw	r30, r16
    53a8:	91 83       	std	Z+1, r25	; 0x01
    53aa:	80 83       	st	Z, r24
    53ac:	1f c0       	rjmp	.+62     	; 0x53ec <main+0xec8>
    53ae:	fe 01       	movw	r30, r28
    53b0:	ed 58       	subi	r30, 0x8D	; 141
    53b2:	ff 4f       	sbci	r31, 0xFF	; 255
    53b4:	80 e9       	ldi	r24, 0x90	; 144
    53b6:	91 e0       	ldi	r25, 0x01	; 1
    53b8:	91 83       	std	Z+1, r25	; 0x01
    53ba:	80 83       	st	Z, r24
    53bc:	fe 01       	movw	r30, r28
    53be:	ed 58       	subi	r30, 0x8D	; 141
    53c0:	ff 4f       	sbci	r31, 0xFF	; 255
    53c2:	80 81       	ld	r24, Z
    53c4:	91 81       	ldd	r25, Z+1	; 0x01
    53c6:	01 97       	sbiw	r24, 0x01	; 1
    53c8:	f1 f7       	brne	.-4      	; 0x53c6 <main+0xea2>
    53ca:	fe 01       	movw	r30, r28
    53cc:	ed 58       	subi	r30, 0x8D	; 141
    53ce:	ff 4f       	sbci	r31, 0xFF	; 255
    53d0:	91 83       	std	Z+1, r25	; 0x01
    53d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53d4:	de 01       	movw	r26, r28
    53d6:	ab 58       	subi	r26, 0x8B	; 139
    53d8:	bf 4f       	sbci	r27, 0xFF	; 255
    53da:	fe 01       	movw	r30, r28
    53dc:	eb 58       	subi	r30, 0x8B	; 139
    53de:	ff 4f       	sbci	r31, 0xFF	; 255
    53e0:	80 81       	ld	r24, Z
    53e2:	91 81       	ldd	r25, Z+1	; 0x01
    53e4:	01 97       	sbiw	r24, 0x01	; 1
    53e6:	11 96       	adiw	r26, 0x01	; 1
    53e8:	9c 93       	st	X, r25
    53ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53ec:	fe 01       	movw	r30, r28
    53ee:	eb 58       	subi	r30, 0x8B	; 139
    53f0:	ff 4f       	sbci	r31, 0xFF	; 255
    53f2:	80 81       	ld	r24, Z
    53f4:	91 81       	ldd	r25, Z+1	; 0x01
    53f6:	00 97       	sbiw	r24, 0x00	; 0
    53f8:	d1 f6       	brne	.-76     	; 0x53ae <main+0xe8a>
    53fa:	27 c0       	rjmp	.+78     	; 0x544a <main+0xf26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53fc:	8e 01       	movw	r16, r28
    53fe:	0b 58       	subi	r16, 0x8B	; 139
    5400:	1f 4f       	sbci	r17, 0xFF	; 255
    5402:	fe 01       	movw	r30, r28
    5404:	e9 58       	subi	r30, 0x89	; 137
    5406:	ff 4f       	sbci	r31, 0xFF	; 255
    5408:	60 81       	ld	r22, Z
    540a:	71 81       	ldd	r23, Z+1	; 0x01
    540c:	82 81       	ldd	r24, Z+2	; 0x02
    540e:	93 81       	ldd	r25, Z+3	; 0x03
    5410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5414:	dc 01       	movw	r26, r24
    5416:	cb 01       	movw	r24, r22
    5418:	f8 01       	movw	r30, r16
    541a:	91 83       	std	Z+1, r25	; 0x01
    541c:	80 83       	st	Z, r24
    541e:	de 01       	movw	r26, r28
    5420:	af 58       	subi	r26, 0x8F	; 143
    5422:	bf 4f       	sbci	r27, 0xFF	; 255
    5424:	fe 01       	movw	r30, r28
    5426:	eb 58       	subi	r30, 0x8B	; 139
    5428:	ff 4f       	sbci	r31, 0xFF	; 255
    542a:	80 81       	ld	r24, Z
    542c:	91 81       	ldd	r25, Z+1	; 0x01
    542e:	8d 93       	st	X+, r24
    5430:	9c 93       	st	X, r25
    5432:	fe 01       	movw	r30, r28
    5434:	ef 58       	subi	r30, 0x8F	; 143
    5436:	ff 4f       	sbci	r31, 0xFF	; 255
    5438:	80 81       	ld	r24, Z
    543a:	91 81       	ldd	r25, Z+1	; 0x01
    543c:	01 97       	sbiw	r24, 0x01	; 1
    543e:	f1 f7       	brne	.-4      	; 0x543c <main+0xf18>
    5440:	fe 01       	movw	r30, r28
    5442:	ef 58       	subi	r30, 0x8F	; 143
    5444:	ff 4f       	sbci	r31, 0xFF	; 255
    5446:	91 83       	std	Z+1, r25	; 0x01
    5448:	80 83       	st	Z, r24
								_delay_ms(1000);
								H_LCD_void_gotoXY(2,4);
    544a:	82 e0       	ldi	r24, 0x02	; 2
    544c:	64 e0       	ldi	r22, 0x04	; 4
    544e:	0e 94 36 1a 	call	0x346c	; 0x346c <H_LCD_void_gotoXY>
								H_LCD_void_SendString("Try Again");
    5452:	8f ec       	ldi	r24, 0xCF	; 207
    5454:	90 e0       	ldi	r25, 0x00	; 0
    5456:	0e 94 15 1a 	call	0x342a	; 0x342a <H_LCD_void_SendString>
    545a:	fe 01       	movw	r30, r28
    545c:	e3 59       	subi	r30, 0x93	; 147
    545e:	ff 4f       	sbci	r31, 0xFF	; 255
    5460:	80 e0       	ldi	r24, 0x00	; 0
    5462:	90 e0       	ldi	r25, 0x00	; 0
    5464:	aa ef       	ldi	r26, 0xFA	; 250
    5466:	b3 e4       	ldi	r27, 0x43	; 67
    5468:	80 83       	st	Z, r24
    546a:	91 83       	std	Z+1, r25	; 0x01
    546c:	a2 83       	std	Z+2, r26	; 0x02
    546e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5470:	8e 01       	movw	r16, r28
    5472:	07 59       	subi	r16, 0x97	; 151
    5474:	1f 4f       	sbci	r17, 0xFF	; 255
    5476:	fe 01       	movw	r30, r28
    5478:	e3 59       	subi	r30, 0x93	; 147
    547a:	ff 4f       	sbci	r31, 0xFF	; 255
    547c:	60 81       	ld	r22, Z
    547e:	71 81       	ldd	r23, Z+1	; 0x01
    5480:	82 81       	ldd	r24, Z+2	; 0x02
    5482:	93 81       	ldd	r25, Z+3	; 0x03
    5484:	20 e0       	ldi	r18, 0x00	; 0
    5486:	30 e0       	ldi	r19, 0x00	; 0
    5488:	4a e7       	ldi	r20, 0x7A	; 122
    548a:	55 e4       	ldi	r21, 0x45	; 69
    548c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5490:	dc 01       	movw	r26, r24
    5492:	cb 01       	movw	r24, r22
    5494:	f8 01       	movw	r30, r16
    5496:	80 83       	st	Z, r24
    5498:	91 83       	std	Z+1, r25	; 0x01
    549a:	a2 83       	std	Z+2, r26	; 0x02
    549c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    549e:	fe 01       	movw	r30, r28
    54a0:	e7 59       	subi	r30, 0x97	; 151
    54a2:	ff 4f       	sbci	r31, 0xFF	; 255
    54a4:	60 81       	ld	r22, Z
    54a6:	71 81       	ldd	r23, Z+1	; 0x01
    54a8:	82 81       	ldd	r24, Z+2	; 0x02
    54aa:	93 81       	ldd	r25, Z+3	; 0x03
    54ac:	20 e0       	ldi	r18, 0x00	; 0
    54ae:	30 e0       	ldi	r19, 0x00	; 0
    54b0:	40 e8       	ldi	r20, 0x80	; 128
    54b2:	5f e3       	ldi	r21, 0x3F	; 63
    54b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    54b8:	88 23       	and	r24, r24
    54ba:	44 f4       	brge	.+16     	; 0x54cc <main+0xfa8>
		__ticks = 1;
    54bc:	fe 01       	movw	r30, r28
    54be:	e9 59       	subi	r30, 0x99	; 153
    54c0:	ff 4f       	sbci	r31, 0xFF	; 255
    54c2:	81 e0       	ldi	r24, 0x01	; 1
    54c4:	90 e0       	ldi	r25, 0x00	; 0
    54c6:	91 83       	std	Z+1, r25	; 0x01
    54c8:	80 83       	st	Z, r24
    54ca:	64 c0       	rjmp	.+200    	; 0x5594 <main+0x1070>
	else if (__tmp > 65535)
    54cc:	fe 01       	movw	r30, r28
    54ce:	e7 59       	subi	r30, 0x97	; 151
    54d0:	ff 4f       	sbci	r31, 0xFF	; 255
    54d2:	60 81       	ld	r22, Z
    54d4:	71 81       	ldd	r23, Z+1	; 0x01
    54d6:	82 81       	ldd	r24, Z+2	; 0x02
    54d8:	93 81       	ldd	r25, Z+3	; 0x03
    54da:	20 e0       	ldi	r18, 0x00	; 0
    54dc:	3f ef       	ldi	r19, 0xFF	; 255
    54de:	4f e7       	ldi	r20, 0x7F	; 127
    54e0:	57 e4       	ldi	r21, 0x47	; 71
    54e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    54e6:	18 16       	cp	r1, r24
    54e8:	0c f0       	brlt	.+2      	; 0x54ec <main+0xfc8>
    54ea:	43 c0       	rjmp	.+134    	; 0x5572 <main+0x104e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54ec:	fe 01       	movw	r30, r28
    54ee:	e3 59       	subi	r30, 0x93	; 147
    54f0:	ff 4f       	sbci	r31, 0xFF	; 255
    54f2:	60 81       	ld	r22, Z
    54f4:	71 81       	ldd	r23, Z+1	; 0x01
    54f6:	82 81       	ldd	r24, Z+2	; 0x02
    54f8:	93 81       	ldd	r25, Z+3	; 0x03
    54fa:	20 e0       	ldi	r18, 0x00	; 0
    54fc:	30 e0       	ldi	r19, 0x00	; 0
    54fe:	40 e2       	ldi	r20, 0x20	; 32
    5500:	51 e4       	ldi	r21, 0x41	; 65
    5502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5506:	dc 01       	movw	r26, r24
    5508:	cb 01       	movw	r24, r22
    550a:	8e 01       	movw	r16, r28
    550c:	09 59       	subi	r16, 0x99	; 153
    550e:	1f 4f       	sbci	r17, 0xFF	; 255
    5510:	bc 01       	movw	r22, r24
    5512:	cd 01       	movw	r24, r26
    5514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5518:	dc 01       	movw	r26, r24
    551a:	cb 01       	movw	r24, r22
    551c:	f8 01       	movw	r30, r16
    551e:	91 83       	std	Z+1, r25	; 0x01
    5520:	80 83       	st	Z, r24
    5522:	1f c0       	rjmp	.+62     	; 0x5562 <main+0x103e>
    5524:	fe 01       	movw	r30, r28
    5526:	eb 59       	subi	r30, 0x9B	; 155
    5528:	ff 4f       	sbci	r31, 0xFF	; 255
    552a:	80 e9       	ldi	r24, 0x90	; 144
    552c:	91 e0       	ldi	r25, 0x01	; 1
    552e:	91 83       	std	Z+1, r25	; 0x01
    5530:	80 83       	st	Z, r24
    5532:	fe 01       	movw	r30, r28
    5534:	eb 59       	subi	r30, 0x9B	; 155
    5536:	ff 4f       	sbci	r31, 0xFF	; 255
    5538:	80 81       	ld	r24, Z
    553a:	91 81       	ldd	r25, Z+1	; 0x01
    553c:	01 97       	sbiw	r24, 0x01	; 1
    553e:	f1 f7       	brne	.-4      	; 0x553c <main+0x1018>
    5540:	fe 01       	movw	r30, r28
    5542:	eb 59       	subi	r30, 0x9B	; 155
    5544:	ff 4f       	sbci	r31, 0xFF	; 255
    5546:	91 83       	std	Z+1, r25	; 0x01
    5548:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    554a:	de 01       	movw	r26, r28
    554c:	a9 59       	subi	r26, 0x99	; 153
    554e:	bf 4f       	sbci	r27, 0xFF	; 255
    5550:	fe 01       	movw	r30, r28
    5552:	e9 59       	subi	r30, 0x99	; 153
    5554:	ff 4f       	sbci	r31, 0xFF	; 255
    5556:	80 81       	ld	r24, Z
    5558:	91 81       	ldd	r25, Z+1	; 0x01
    555a:	01 97       	sbiw	r24, 0x01	; 1
    555c:	11 96       	adiw	r26, 0x01	; 1
    555e:	9c 93       	st	X, r25
    5560:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5562:	fe 01       	movw	r30, r28
    5564:	e9 59       	subi	r30, 0x99	; 153
    5566:	ff 4f       	sbci	r31, 0xFF	; 255
    5568:	80 81       	ld	r24, Z
    556a:	91 81       	ldd	r25, Z+1	; 0x01
    556c:	00 97       	sbiw	r24, 0x00	; 0
    556e:	d1 f6       	brne	.-76     	; 0x5524 <main+0x1000>
    5570:	27 c0       	rjmp	.+78     	; 0x55c0 <main+0x109c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5572:	8e 01       	movw	r16, r28
    5574:	09 59       	subi	r16, 0x99	; 153
    5576:	1f 4f       	sbci	r17, 0xFF	; 255
    5578:	fe 01       	movw	r30, r28
    557a:	e7 59       	subi	r30, 0x97	; 151
    557c:	ff 4f       	sbci	r31, 0xFF	; 255
    557e:	60 81       	ld	r22, Z
    5580:	71 81       	ldd	r23, Z+1	; 0x01
    5582:	82 81       	ldd	r24, Z+2	; 0x02
    5584:	93 81       	ldd	r25, Z+3	; 0x03
    5586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    558a:	dc 01       	movw	r26, r24
    558c:	cb 01       	movw	r24, r22
    558e:	f8 01       	movw	r30, r16
    5590:	91 83       	std	Z+1, r25	; 0x01
    5592:	80 83       	st	Z, r24
    5594:	de 01       	movw	r26, r28
    5596:	ad 59       	subi	r26, 0x9D	; 157
    5598:	bf 4f       	sbci	r27, 0xFF	; 255
    559a:	fe 01       	movw	r30, r28
    559c:	e9 59       	subi	r30, 0x99	; 153
    559e:	ff 4f       	sbci	r31, 0xFF	; 255
    55a0:	80 81       	ld	r24, Z
    55a2:	91 81       	ldd	r25, Z+1	; 0x01
    55a4:	8d 93       	st	X+, r24
    55a6:	9c 93       	st	X, r25
    55a8:	fe 01       	movw	r30, r28
    55aa:	ed 59       	subi	r30, 0x9D	; 157
    55ac:	ff 4f       	sbci	r31, 0xFF	; 255
    55ae:	80 81       	ld	r24, Z
    55b0:	91 81       	ldd	r25, Z+1	; 0x01
    55b2:	01 97       	sbiw	r24, 0x01	; 1
    55b4:	f1 f7       	brne	.-4      	; 0x55b2 <main+0x108e>
    55b6:	fe 01       	movw	r30, r28
    55b8:	ed 59       	subi	r30, 0x9D	; 157
    55ba:	ff 4f       	sbci	r31, 0xFF	; 255
    55bc:	91 83       	std	Z+1, r25	; 0x01
    55be:	80 83       	st	Z, r24
								_delay_ms(500);
								H_LCD_void_Clear_Display();
    55c0:	0e 94 a0 1a 	call	0x3540	; 0x3540 <H_LCD_void_Clear_Display>
								keypad_cursor_init(&keypad_digits);
    55c4:	87 ed       	ldi	r24, 0xD7	; 215
    55c6:	92 e0       	ldi	r25, 0x02	; 2
    55c8:	0e 94 b9 20 	call	0x4172	; 0x4172 <keypad_cursor_init>
    55cc:	40 cb       	rjmp	.-2432   	; 0x4c4e <main+0x72a>
								goto start_from_pass;
							}
							else
							{
								repeated_pass = 0;
    55ce:	10 92 9b 02 	sts	0x029B, r1
								H_LCD_void_Clear_Display();
    55d2:	0e 94 a0 1a 	call	0x3540	; 0x3540 <H_LCD_void_Clear_Display>
								RTC_SetTime(&my_time);
    55d6:	8c e9       	ldi	r24, 0x9C	; 156
    55d8:	92 e0       	ldi	r25, 0x02	; 2
    55da:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <RTC_SetTime>
    55de:	00 c1       	rjmp	.+512    	; 0x57e0 <main+0x12bc>

								while(rec_time.sec <= 20)
								{
									/*------------------------------ Still read the distance -----------------------*/
									Ultrasonic_SetTrigger(PORTD_INDEX, PIN2_INDEX);
    55e0:	83 e0       	ldi	r24, 0x03	; 3
    55e2:	62 e0       	ldi	r22, 0x02	; 2
    55e4:	0e 94 a1 1b 	call	0x3742	; 0x3742 <Ultrasonic_SetTrigger>
									Ultrasonic_Read_Distance(&distance);
    55e8:	86 e3       	ldi	r24, 0x36	; 54
    55ea:	92 e0       	ldi	r25, 0x02	; 2
    55ec:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <Ultrasonic_Read_Distance>
									/*------------------------------------------------------------------------------*/
									RTC_GetTime(&rec_time);
    55f0:	82 ed       	ldi	r24, 0xD2	; 210
    55f2:	92 e0       	ldi	r25, 0x02	; 2
    55f4:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <RTC_GetTime>
    55f8:	fe 01       	movw	r30, r28
    55fa:	e1 5a       	subi	r30, 0xA1	; 161
    55fc:	ff 4f       	sbci	r31, 0xFF	; 255
    55fe:	80 e0       	ldi	r24, 0x00	; 0
    5600:	90 e0       	ldi	r25, 0x00	; 0
    5602:	a0 e2       	ldi	r26, 0x20	; 32
    5604:	b1 e4       	ldi	r27, 0x41	; 65
    5606:	80 83       	st	Z, r24
    5608:	91 83       	std	Z+1, r25	; 0x01
    560a:	a2 83       	std	Z+2, r26	; 0x02
    560c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    560e:	8e 01       	movw	r16, r28
    5610:	05 5a       	subi	r16, 0xA5	; 165
    5612:	1f 4f       	sbci	r17, 0xFF	; 255
    5614:	fe 01       	movw	r30, r28
    5616:	e1 5a       	subi	r30, 0xA1	; 161
    5618:	ff 4f       	sbci	r31, 0xFF	; 255
    561a:	60 81       	ld	r22, Z
    561c:	71 81       	ldd	r23, Z+1	; 0x01
    561e:	82 81       	ldd	r24, Z+2	; 0x02
    5620:	93 81       	ldd	r25, Z+3	; 0x03
    5622:	20 e0       	ldi	r18, 0x00	; 0
    5624:	30 e0       	ldi	r19, 0x00	; 0
    5626:	4a e7       	ldi	r20, 0x7A	; 122
    5628:	55 e4       	ldi	r21, 0x45	; 69
    562a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    562e:	dc 01       	movw	r26, r24
    5630:	cb 01       	movw	r24, r22
    5632:	f8 01       	movw	r30, r16
    5634:	80 83       	st	Z, r24
    5636:	91 83       	std	Z+1, r25	; 0x01
    5638:	a2 83       	std	Z+2, r26	; 0x02
    563a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    563c:	fe 01       	movw	r30, r28
    563e:	e5 5a       	subi	r30, 0xA5	; 165
    5640:	ff 4f       	sbci	r31, 0xFF	; 255
    5642:	60 81       	ld	r22, Z
    5644:	71 81       	ldd	r23, Z+1	; 0x01
    5646:	82 81       	ldd	r24, Z+2	; 0x02
    5648:	93 81       	ldd	r25, Z+3	; 0x03
    564a:	20 e0       	ldi	r18, 0x00	; 0
    564c:	30 e0       	ldi	r19, 0x00	; 0
    564e:	40 e8       	ldi	r20, 0x80	; 128
    5650:	5f e3       	ldi	r21, 0x3F	; 63
    5652:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5656:	88 23       	and	r24, r24
    5658:	44 f4       	brge	.+16     	; 0x566a <main+0x1146>
		__ticks = 1;
    565a:	fe 01       	movw	r30, r28
    565c:	e7 5a       	subi	r30, 0xA7	; 167
    565e:	ff 4f       	sbci	r31, 0xFF	; 255
    5660:	81 e0       	ldi	r24, 0x01	; 1
    5662:	90 e0       	ldi	r25, 0x00	; 0
    5664:	91 83       	std	Z+1, r25	; 0x01
    5666:	80 83       	st	Z, r24
    5668:	64 c0       	rjmp	.+200    	; 0x5732 <main+0x120e>
	else if (__tmp > 65535)
    566a:	fe 01       	movw	r30, r28
    566c:	e5 5a       	subi	r30, 0xA5	; 165
    566e:	ff 4f       	sbci	r31, 0xFF	; 255
    5670:	60 81       	ld	r22, Z
    5672:	71 81       	ldd	r23, Z+1	; 0x01
    5674:	82 81       	ldd	r24, Z+2	; 0x02
    5676:	93 81       	ldd	r25, Z+3	; 0x03
    5678:	20 e0       	ldi	r18, 0x00	; 0
    567a:	3f ef       	ldi	r19, 0xFF	; 255
    567c:	4f e7       	ldi	r20, 0x7F	; 127
    567e:	57 e4       	ldi	r21, 0x47	; 71
    5680:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5684:	18 16       	cp	r1, r24
    5686:	0c f0       	brlt	.+2      	; 0x568a <main+0x1166>
    5688:	43 c0       	rjmp	.+134    	; 0x5710 <main+0x11ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    568a:	fe 01       	movw	r30, r28
    568c:	e1 5a       	subi	r30, 0xA1	; 161
    568e:	ff 4f       	sbci	r31, 0xFF	; 255
    5690:	60 81       	ld	r22, Z
    5692:	71 81       	ldd	r23, Z+1	; 0x01
    5694:	82 81       	ldd	r24, Z+2	; 0x02
    5696:	93 81       	ldd	r25, Z+3	; 0x03
    5698:	20 e0       	ldi	r18, 0x00	; 0
    569a:	30 e0       	ldi	r19, 0x00	; 0
    569c:	40 e2       	ldi	r20, 0x20	; 32
    569e:	51 e4       	ldi	r21, 0x41	; 65
    56a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56a4:	dc 01       	movw	r26, r24
    56a6:	cb 01       	movw	r24, r22
    56a8:	8e 01       	movw	r16, r28
    56aa:	07 5a       	subi	r16, 0xA7	; 167
    56ac:	1f 4f       	sbci	r17, 0xFF	; 255
    56ae:	bc 01       	movw	r22, r24
    56b0:	cd 01       	movw	r24, r26
    56b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56b6:	dc 01       	movw	r26, r24
    56b8:	cb 01       	movw	r24, r22
    56ba:	f8 01       	movw	r30, r16
    56bc:	91 83       	std	Z+1, r25	; 0x01
    56be:	80 83       	st	Z, r24
    56c0:	1f c0       	rjmp	.+62     	; 0x5700 <main+0x11dc>
    56c2:	fe 01       	movw	r30, r28
    56c4:	e9 5a       	subi	r30, 0xA9	; 169
    56c6:	ff 4f       	sbci	r31, 0xFF	; 255
    56c8:	80 e9       	ldi	r24, 0x90	; 144
    56ca:	91 e0       	ldi	r25, 0x01	; 1
    56cc:	91 83       	std	Z+1, r25	; 0x01
    56ce:	80 83       	st	Z, r24
    56d0:	fe 01       	movw	r30, r28
    56d2:	e9 5a       	subi	r30, 0xA9	; 169
    56d4:	ff 4f       	sbci	r31, 0xFF	; 255
    56d6:	80 81       	ld	r24, Z
    56d8:	91 81       	ldd	r25, Z+1	; 0x01
    56da:	01 97       	sbiw	r24, 0x01	; 1
    56dc:	f1 f7       	brne	.-4      	; 0x56da <main+0x11b6>
    56de:	fe 01       	movw	r30, r28
    56e0:	e9 5a       	subi	r30, 0xA9	; 169
    56e2:	ff 4f       	sbci	r31, 0xFF	; 255
    56e4:	91 83       	std	Z+1, r25	; 0x01
    56e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56e8:	de 01       	movw	r26, r28
    56ea:	a7 5a       	subi	r26, 0xA7	; 167
    56ec:	bf 4f       	sbci	r27, 0xFF	; 255
    56ee:	fe 01       	movw	r30, r28
    56f0:	e7 5a       	subi	r30, 0xA7	; 167
    56f2:	ff 4f       	sbci	r31, 0xFF	; 255
    56f4:	80 81       	ld	r24, Z
    56f6:	91 81       	ldd	r25, Z+1	; 0x01
    56f8:	01 97       	sbiw	r24, 0x01	; 1
    56fa:	11 96       	adiw	r26, 0x01	; 1
    56fc:	9c 93       	st	X, r25
    56fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5700:	fe 01       	movw	r30, r28
    5702:	e7 5a       	subi	r30, 0xA7	; 167
    5704:	ff 4f       	sbci	r31, 0xFF	; 255
    5706:	80 81       	ld	r24, Z
    5708:	91 81       	ldd	r25, Z+1	; 0x01
    570a:	00 97       	sbiw	r24, 0x00	; 0
    570c:	d1 f6       	brne	.-76     	; 0x56c2 <main+0x119e>
    570e:	27 c0       	rjmp	.+78     	; 0x575e <main+0x123a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5710:	8e 01       	movw	r16, r28
    5712:	07 5a       	subi	r16, 0xA7	; 167
    5714:	1f 4f       	sbci	r17, 0xFF	; 255
    5716:	fe 01       	movw	r30, r28
    5718:	e5 5a       	subi	r30, 0xA5	; 165
    571a:	ff 4f       	sbci	r31, 0xFF	; 255
    571c:	60 81       	ld	r22, Z
    571e:	71 81       	ldd	r23, Z+1	; 0x01
    5720:	82 81       	ldd	r24, Z+2	; 0x02
    5722:	93 81       	ldd	r25, Z+3	; 0x03
    5724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5728:	dc 01       	movw	r26, r24
    572a:	cb 01       	movw	r24, r22
    572c:	f8 01       	movw	r30, r16
    572e:	91 83       	std	Z+1, r25	; 0x01
    5730:	80 83       	st	Z, r24
    5732:	de 01       	movw	r26, r28
    5734:	ab 5a       	subi	r26, 0xAB	; 171
    5736:	bf 4f       	sbci	r27, 0xFF	; 255
    5738:	fe 01       	movw	r30, r28
    573a:	e7 5a       	subi	r30, 0xA7	; 167
    573c:	ff 4f       	sbci	r31, 0xFF	; 255
    573e:	80 81       	ld	r24, Z
    5740:	91 81       	ldd	r25, Z+1	; 0x01
    5742:	8d 93       	st	X+, r24
    5744:	9c 93       	st	X, r25
    5746:	fe 01       	movw	r30, r28
    5748:	eb 5a       	subi	r30, 0xAB	; 171
    574a:	ff 4f       	sbci	r31, 0xFF	; 255
    574c:	80 81       	ld	r24, Z
    574e:	91 81       	ldd	r25, Z+1	; 0x01
    5750:	01 97       	sbiw	r24, 0x01	; 1
    5752:	f1 f7       	brne	.-4      	; 0x5750 <main+0x122c>
    5754:	fe 01       	movw	r30, r28
    5756:	eb 5a       	subi	r30, 0xAB	; 171
    5758:	ff 4f       	sbci	r31, 0xFF	; 255
    575a:	91 83       	std	Z+1, r25	; 0x01
    575c:	80 83       	st	Z, r24
									_delay_ms(10);
									sprintf(buffer, "%02d:%02d:%02d", rec_time.hour, rec_time.min, rec_time.sec);
    575e:	80 91 d2 02 	lds	r24, 0x02D2
    5762:	68 2f       	mov	r22, r24
    5764:	70 e0       	ldi	r23, 0x00	; 0
    5766:	80 91 d3 02 	lds	r24, 0x02D3
    576a:	28 2f       	mov	r18, r24
    576c:	30 e0       	ldi	r19, 0x00	; 0
    576e:	80 91 d4 02 	lds	r24, 0x02D4
    5772:	48 2f       	mov	r20, r24
    5774:	50 e0       	ldi	r21, 0x00	; 0
    5776:	8d b7       	in	r24, 0x3d	; 61
    5778:	9e b7       	in	r25, 0x3e	; 62
    577a:	0a 97       	sbiw	r24, 0x0a	; 10
    577c:	0f b6       	in	r0, 0x3f	; 63
    577e:	f8 94       	cli
    5780:	9e bf       	out	0x3e, r25	; 62
    5782:	0f be       	out	0x3f, r0	; 63
    5784:	8d bf       	out	0x3d, r24	; 61
    5786:	ed b7       	in	r30, 0x3d	; 61
    5788:	fe b7       	in	r31, 0x3e	; 62
    578a:	31 96       	adiw	r30, 0x01	; 1
    578c:	ce 01       	movw	r24, r28
    578e:	81 51       	subi	r24, 0x11	; 17
    5790:	9f 4f       	sbci	r25, 0xFF	; 255
    5792:	91 83       	std	Z+1, r25	; 0x01
    5794:	80 83       	st	Z, r24
    5796:	89 ed       	ldi	r24, 0xD9	; 217
    5798:	90 e0       	ldi	r25, 0x00	; 0
    579a:	93 83       	std	Z+3, r25	; 0x03
    579c:	82 83       	std	Z+2, r24	; 0x02
    579e:	75 83       	std	Z+5, r23	; 0x05
    57a0:	64 83       	std	Z+4, r22	; 0x04
    57a2:	37 83       	std	Z+7, r19	; 0x07
    57a4:	26 83       	std	Z+6, r18	; 0x06
    57a6:	51 87       	std	Z+9, r21	; 0x09
    57a8:	40 87       	std	Z+8, r20	; 0x08
    57aa:	0e 94 13 30 	call	0x6026	; 0x6026 <sprintf>
    57ae:	ed b7       	in	r30, 0x3d	; 61
    57b0:	fe b7       	in	r31, 0x3e	; 62
    57b2:	3a 96       	adiw	r30, 0x0a	; 10
    57b4:	0f b6       	in	r0, 0x3f	; 63
    57b6:	f8 94       	cli
    57b8:	fe bf       	out	0x3e, r31	; 62
    57ba:	0f be       	out	0x3f, r0	; 63
    57bc:	ed bf       	out	0x3d, r30	; 61
									H_LCD_void_gotoXY(1, 1);
    57be:	81 e0       	ldi	r24, 0x01	; 1
    57c0:	61 e0       	ldi	r22, 0x01	; 1
    57c2:	0e 94 36 1a 	call	0x346c	; 0x346c <H_LCD_void_gotoXY>
									H_LCD_void_SendString("Wait 20 seconds");
    57c6:	88 ee       	ldi	r24, 0xE8	; 232
    57c8:	90 e0       	ldi	r25, 0x00	; 0
    57ca:	0e 94 15 1a 	call	0x342a	; 0x342a <H_LCD_void_SendString>
									H_LCD_void_gotoXY(2, 2);
    57ce:	82 e0       	ldi	r24, 0x02	; 2
    57d0:	62 e0       	ldi	r22, 0x02	; 2
    57d2:	0e 94 36 1a 	call	0x346c	; 0x346c <H_LCD_void_gotoXY>
									H_LCD_void_SendString(buffer);
    57d6:	ce 01       	movw	r24, r28
    57d8:	81 51       	subi	r24, 0x11	; 17
    57da:	9f 4f       	sbci	r25, 0xFF	; 255
    57dc:	0e 94 15 1a 	call	0x342a	; 0x342a <H_LCD_void_SendString>
							{
								repeated_pass = 0;
								H_LCD_void_Clear_Display();
								RTC_SetTime(&my_time);

								while(rec_time.sec <= 20)
    57e0:	80 91 d4 02 	lds	r24, 0x02D4
    57e4:	85 31       	cpi	r24, 0x15	; 21
    57e6:	08 f4       	brcc	.+2      	; 0x57ea <main+0x12c6>
    57e8:	fb ce       	rjmp	.-522    	; 0x55e0 <main+0x10bc>
									H_LCD_void_gotoXY(1, 1);
									H_LCD_void_SendString("Wait 20 seconds");
									H_LCD_void_gotoXY(2, 2);
									H_LCD_void_SendString(buffer);
								}
								H_LCD_void_Clear_Display();
    57ea:	0e 94 a0 1a 	call	0x3540	; 0x3540 <H_LCD_void_Clear_Display>
								keypad_cursor_init(&keypad_digits);
    57ee:	87 ed       	ldi	r24, 0xD7	; 215
    57f0:	92 e0       	ldi	r25, 0x02	; 2
    57f2:	0e 94 b9 20 	call	0x4172	; 0x4172 <keypad_cursor_init>
    57f6:	2b ca       	rjmp	.-2986   	; 0x4c4e <main+0x72a>
								goto start_from_pass;
							}
						}

						/* To detect there user go out from system and avoid system stucking  */
						if(distance > 17)
    57f8:	80 91 36 02 	lds	r24, 0x0236
    57fc:	90 91 37 02 	lds	r25, 0x0237
    5800:	a0 91 38 02 	lds	r26, 0x0238
    5804:	b0 91 39 02 	lds	r27, 0x0239
    5808:	82 31       	cpi	r24, 0x12	; 18
    580a:	91 05       	cpc	r25, r1
    580c:	a1 05       	cpc	r26, r1
    580e:	b1 05       	cpc	r27, r1
    5810:	08 f4       	brcc	.+2      	; 0x5814 <main+0x12f0>
    5812:	25 ca       	rjmp	.-2998   	; 0x4c5e <main+0x73a>
						{
							H_LCD_void_Clear_Display();
    5814:	0e 94 a0 1a 	call	0x3540	; 0x3540 <H_LCD_void_Clear_Display>
							H_LCD_void_gotoXY(2, 4);
    5818:	82 e0       	ldi	r24, 0x02	; 2
    581a:	64 e0       	ldi	r22, 0x04	; 4
    581c:	0e 94 36 1a 	call	0x346c	; 0x346c <H_LCD_void_gotoXY>
							H_LCD_void_SendString("GOOD Bye !");
    5820:	88 ef       	ldi	r24, 0xF8	; 248
    5822:	90 e0       	ldi	r25, 0x00	; 0
    5824:	0e 94 15 1a 	call	0x342a	; 0x342a <H_LCD_void_SendString>
    5828:	fe 01       	movw	r30, r28
    582a:	ef 5a       	subi	r30, 0xAF	; 175
    582c:	ff 4f       	sbci	r31, 0xFF	; 255
    582e:	80 e0       	ldi	r24, 0x00	; 0
    5830:	90 e0       	ldi	r25, 0x00	; 0
    5832:	a6 e9       	ldi	r26, 0x96	; 150
    5834:	b3 e4       	ldi	r27, 0x43	; 67
    5836:	80 83       	st	Z, r24
    5838:	91 83       	std	Z+1, r25	; 0x01
    583a:	a2 83       	std	Z+2, r26	; 0x02
    583c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    583e:	8e 01       	movw	r16, r28
    5840:	03 5b       	subi	r16, 0xB3	; 179
    5842:	1f 4f       	sbci	r17, 0xFF	; 255
    5844:	fe 01       	movw	r30, r28
    5846:	ef 5a       	subi	r30, 0xAF	; 175
    5848:	ff 4f       	sbci	r31, 0xFF	; 255
    584a:	60 81       	ld	r22, Z
    584c:	71 81       	ldd	r23, Z+1	; 0x01
    584e:	82 81       	ldd	r24, Z+2	; 0x02
    5850:	93 81       	ldd	r25, Z+3	; 0x03
    5852:	20 e0       	ldi	r18, 0x00	; 0
    5854:	30 e0       	ldi	r19, 0x00	; 0
    5856:	4a e7       	ldi	r20, 0x7A	; 122
    5858:	55 e4       	ldi	r21, 0x45	; 69
    585a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    585e:	dc 01       	movw	r26, r24
    5860:	cb 01       	movw	r24, r22
    5862:	f8 01       	movw	r30, r16
    5864:	80 83       	st	Z, r24
    5866:	91 83       	std	Z+1, r25	; 0x01
    5868:	a2 83       	std	Z+2, r26	; 0x02
    586a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    586c:	fe 01       	movw	r30, r28
    586e:	e3 5b       	subi	r30, 0xB3	; 179
    5870:	ff 4f       	sbci	r31, 0xFF	; 255
    5872:	60 81       	ld	r22, Z
    5874:	71 81       	ldd	r23, Z+1	; 0x01
    5876:	82 81       	ldd	r24, Z+2	; 0x02
    5878:	93 81       	ldd	r25, Z+3	; 0x03
    587a:	20 e0       	ldi	r18, 0x00	; 0
    587c:	30 e0       	ldi	r19, 0x00	; 0
    587e:	40 e8       	ldi	r20, 0x80	; 128
    5880:	5f e3       	ldi	r21, 0x3F	; 63
    5882:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5886:	88 23       	and	r24, r24
    5888:	44 f4       	brge	.+16     	; 0x589a <main+0x1376>
		__ticks = 1;
    588a:	fe 01       	movw	r30, r28
    588c:	e5 5b       	subi	r30, 0xB5	; 181
    588e:	ff 4f       	sbci	r31, 0xFF	; 255
    5890:	81 e0       	ldi	r24, 0x01	; 1
    5892:	90 e0       	ldi	r25, 0x00	; 0
    5894:	91 83       	std	Z+1, r25	; 0x01
    5896:	80 83       	st	Z, r24
    5898:	64 c0       	rjmp	.+200    	; 0x5962 <main+0x143e>
	else if (__tmp > 65535)
    589a:	fe 01       	movw	r30, r28
    589c:	e3 5b       	subi	r30, 0xB3	; 179
    589e:	ff 4f       	sbci	r31, 0xFF	; 255
    58a0:	60 81       	ld	r22, Z
    58a2:	71 81       	ldd	r23, Z+1	; 0x01
    58a4:	82 81       	ldd	r24, Z+2	; 0x02
    58a6:	93 81       	ldd	r25, Z+3	; 0x03
    58a8:	20 e0       	ldi	r18, 0x00	; 0
    58aa:	3f ef       	ldi	r19, 0xFF	; 255
    58ac:	4f e7       	ldi	r20, 0x7F	; 127
    58ae:	57 e4       	ldi	r21, 0x47	; 71
    58b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    58b4:	18 16       	cp	r1, r24
    58b6:	0c f0       	brlt	.+2      	; 0x58ba <main+0x1396>
    58b8:	43 c0       	rjmp	.+134    	; 0x5940 <main+0x141c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58ba:	fe 01       	movw	r30, r28
    58bc:	ef 5a       	subi	r30, 0xAF	; 175
    58be:	ff 4f       	sbci	r31, 0xFF	; 255
    58c0:	60 81       	ld	r22, Z
    58c2:	71 81       	ldd	r23, Z+1	; 0x01
    58c4:	82 81       	ldd	r24, Z+2	; 0x02
    58c6:	93 81       	ldd	r25, Z+3	; 0x03
    58c8:	20 e0       	ldi	r18, 0x00	; 0
    58ca:	30 e0       	ldi	r19, 0x00	; 0
    58cc:	40 e2       	ldi	r20, 0x20	; 32
    58ce:	51 e4       	ldi	r21, 0x41	; 65
    58d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58d4:	dc 01       	movw	r26, r24
    58d6:	cb 01       	movw	r24, r22
    58d8:	8e 01       	movw	r16, r28
    58da:	05 5b       	subi	r16, 0xB5	; 181
    58dc:	1f 4f       	sbci	r17, 0xFF	; 255
    58de:	bc 01       	movw	r22, r24
    58e0:	cd 01       	movw	r24, r26
    58e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58e6:	dc 01       	movw	r26, r24
    58e8:	cb 01       	movw	r24, r22
    58ea:	f8 01       	movw	r30, r16
    58ec:	91 83       	std	Z+1, r25	; 0x01
    58ee:	80 83       	st	Z, r24
    58f0:	1f c0       	rjmp	.+62     	; 0x5930 <main+0x140c>
    58f2:	fe 01       	movw	r30, r28
    58f4:	e7 5b       	subi	r30, 0xB7	; 183
    58f6:	ff 4f       	sbci	r31, 0xFF	; 255
    58f8:	80 e9       	ldi	r24, 0x90	; 144
    58fa:	91 e0       	ldi	r25, 0x01	; 1
    58fc:	91 83       	std	Z+1, r25	; 0x01
    58fe:	80 83       	st	Z, r24
    5900:	fe 01       	movw	r30, r28
    5902:	e7 5b       	subi	r30, 0xB7	; 183
    5904:	ff 4f       	sbci	r31, 0xFF	; 255
    5906:	80 81       	ld	r24, Z
    5908:	91 81       	ldd	r25, Z+1	; 0x01
    590a:	01 97       	sbiw	r24, 0x01	; 1
    590c:	f1 f7       	brne	.-4      	; 0x590a <main+0x13e6>
    590e:	fe 01       	movw	r30, r28
    5910:	e7 5b       	subi	r30, 0xB7	; 183
    5912:	ff 4f       	sbci	r31, 0xFF	; 255
    5914:	91 83       	std	Z+1, r25	; 0x01
    5916:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5918:	de 01       	movw	r26, r28
    591a:	a5 5b       	subi	r26, 0xB5	; 181
    591c:	bf 4f       	sbci	r27, 0xFF	; 255
    591e:	fe 01       	movw	r30, r28
    5920:	e5 5b       	subi	r30, 0xB5	; 181
    5922:	ff 4f       	sbci	r31, 0xFF	; 255
    5924:	80 81       	ld	r24, Z
    5926:	91 81       	ldd	r25, Z+1	; 0x01
    5928:	01 97       	sbiw	r24, 0x01	; 1
    592a:	11 96       	adiw	r26, 0x01	; 1
    592c:	9c 93       	st	X, r25
    592e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5930:	fe 01       	movw	r30, r28
    5932:	e5 5b       	subi	r30, 0xB5	; 181
    5934:	ff 4f       	sbci	r31, 0xFF	; 255
    5936:	80 81       	ld	r24, Z
    5938:	91 81       	ldd	r25, Z+1	; 0x01
    593a:	00 97       	sbiw	r24, 0x00	; 0
    593c:	d1 f6       	brne	.-76     	; 0x58f2 <main+0x13ce>
    593e:	27 c0       	rjmp	.+78     	; 0x598e <main+0x146a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5940:	8e 01       	movw	r16, r28
    5942:	05 5b       	subi	r16, 0xB5	; 181
    5944:	1f 4f       	sbci	r17, 0xFF	; 255
    5946:	fe 01       	movw	r30, r28
    5948:	e3 5b       	subi	r30, 0xB3	; 179
    594a:	ff 4f       	sbci	r31, 0xFF	; 255
    594c:	60 81       	ld	r22, Z
    594e:	71 81       	ldd	r23, Z+1	; 0x01
    5950:	82 81       	ldd	r24, Z+2	; 0x02
    5952:	93 81       	ldd	r25, Z+3	; 0x03
    5954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5958:	dc 01       	movw	r26, r24
    595a:	cb 01       	movw	r24, r22
    595c:	f8 01       	movw	r30, r16
    595e:	91 83       	std	Z+1, r25	; 0x01
    5960:	80 83       	st	Z, r24
    5962:	de 01       	movw	r26, r28
    5964:	a9 5b       	subi	r26, 0xB9	; 185
    5966:	bf 4f       	sbci	r27, 0xFF	; 255
    5968:	fe 01       	movw	r30, r28
    596a:	e5 5b       	subi	r30, 0xB5	; 181
    596c:	ff 4f       	sbci	r31, 0xFF	; 255
    596e:	80 81       	ld	r24, Z
    5970:	91 81       	ldd	r25, Z+1	; 0x01
    5972:	8d 93       	st	X+, r24
    5974:	9c 93       	st	X, r25
    5976:	fe 01       	movw	r30, r28
    5978:	e9 5b       	subi	r30, 0xB9	; 185
    597a:	ff 4f       	sbci	r31, 0xFF	; 255
    597c:	80 81       	ld	r24, Z
    597e:	91 81       	ldd	r25, Z+1	; 0x01
    5980:	01 97       	sbiw	r24, 0x01	; 1
    5982:	f1 f7       	brne	.-4      	; 0x5980 <main+0x145c>
    5984:	fe 01       	movw	r30, r28
    5986:	e9 5b       	subi	r30, 0xB9	; 185
    5988:	ff 4f       	sbci	r31, 0xFF	; 255
    598a:	91 83       	std	Z+1, r25	; 0x01
    598c:	80 83       	st	Z, r24
							_delay_ms(300);
							H_LCD_void_Clear_Display();
    598e:	0e 94 a0 1a 	call	0x3540	; 0x3540 <H_LCD_void_Clear_Display>
    5992:	0c 94 7a 23 	jmp	0x46f4	; 0x46f4 <main+0x1d0>
							goto Start_again;
						}
						/*---------------------------------------------------------------------*/
					}
				}
				else if((strcmp(ID, keypad_digits.digits) != 0) && (keypad_digits.cursor == 4))
    5996:	8c e2       	ldi	r24, 0x2C	; 44
    5998:	92 e0       	ldi	r25, 0x02	; 2
    599a:	27 ed       	ldi	r18, 0xD7	; 215
    599c:	32 e0       	ldi	r19, 0x02	; 2
    599e:	b9 01       	movw	r22, r18
    59a0:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <strcmp>
    59a4:	00 97       	sbiw	r24, 0x00	; 0
    59a6:	09 f4       	brne	.+2      	; 0x59aa <main+0x1486>
    59a8:	fc c1       	rjmp	.+1016   	; 0x5da2 <main+0x187e>
    59aa:	80 91 e1 02 	lds	r24, 0x02E1
    59ae:	84 30       	cpi	r24, 0x04	; 4
    59b0:	09 f0       	breq	.+2      	; 0x59b4 <main+0x1490>
    59b2:	f7 c1       	rjmp	.+1006   	; 0x5da2 <main+0x187e>
				{
					H_LCD_void_Clear_Display();
    59b4:	0e 94 a0 1a 	call	0x3540	; 0x3540 <H_LCD_void_Clear_Display>
    59b8:	fe 01       	movw	r30, r28
    59ba:	ed 5b       	subi	r30, 0xBD	; 189
    59bc:	ff 4f       	sbci	r31, 0xFF	; 255
    59be:	80 e0       	ldi	r24, 0x00	; 0
    59c0:	90 e0       	ldi	r25, 0x00	; 0
    59c2:	aa e7       	ldi	r26, 0x7A	; 122
    59c4:	b4 e4       	ldi	r27, 0x44	; 68
    59c6:	80 83       	st	Z, r24
    59c8:	91 83       	std	Z+1, r25	; 0x01
    59ca:	a2 83       	std	Z+2, r26	; 0x02
    59cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59ce:	8e 01       	movw	r16, r28
    59d0:	01 5c       	subi	r16, 0xC1	; 193
    59d2:	1f 4f       	sbci	r17, 0xFF	; 255
    59d4:	fe 01       	movw	r30, r28
    59d6:	ed 5b       	subi	r30, 0xBD	; 189
    59d8:	ff 4f       	sbci	r31, 0xFF	; 255
    59da:	60 81       	ld	r22, Z
    59dc:	71 81       	ldd	r23, Z+1	; 0x01
    59de:	82 81       	ldd	r24, Z+2	; 0x02
    59e0:	93 81       	ldd	r25, Z+3	; 0x03
    59e2:	20 e0       	ldi	r18, 0x00	; 0
    59e4:	30 e0       	ldi	r19, 0x00	; 0
    59e6:	4a e7       	ldi	r20, 0x7A	; 122
    59e8:	55 e4       	ldi	r21, 0x45	; 69
    59ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59ee:	dc 01       	movw	r26, r24
    59f0:	cb 01       	movw	r24, r22
    59f2:	f8 01       	movw	r30, r16
    59f4:	80 83       	st	Z, r24
    59f6:	91 83       	std	Z+1, r25	; 0x01
    59f8:	a2 83       	std	Z+2, r26	; 0x02
    59fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    59fc:	fe 01       	movw	r30, r28
    59fe:	ff 96       	adiw	r30, 0x3f	; 63
    5a00:	60 81       	ld	r22, Z
    5a02:	71 81       	ldd	r23, Z+1	; 0x01
    5a04:	82 81       	ldd	r24, Z+2	; 0x02
    5a06:	93 81       	ldd	r25, Z+3	; 0x03
    5a08:	20 e0       	ldi	r18, 0x00	; 0
    5a0a:	30 e0       	ldi	r19, 0x00	; 0
    5a0c:	40 e8       	ldi	r20, 0x80	; 128
    5a0e:	5f e3       	ldi	r21, 0x3F	; 63
    5a10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5a14:	88 23       	and	r24, r24
    5a16:	2c f4       	brge	.+10     	; 0x5a22 <main+0x14fe>
		__ticks = 1;
    5a18:	81 e0       	ldi	r24, 0x01	; 1
    5a1a:	90 e0       	ldi	r25, 0x00	; 0
    5a1c:	9e af       	std	Y+62, r25	; 0x3e
    5a1e:	8d af       	std	Y+61, r24	; 0x3d
    5a20:	46 c0       	rjmp	.+140    	; 0x5aae <main+0x158a>
	else if (__tmp > 65535)
    5a22:	fe 01       	movw	r30, r28
    5a24:	ff 96       	adiw	r30, 0x3f	; 63
    5a26:	60 81       	ld	r22, Z
    5a28:	71 81       	ldd	r23, Z+1	; 0x01
    5a2a:	82 81       	ldd	r24, Z+2	; 0x02
    5a2c:	93 81       	ldd	r25, Z+3	; 0x03
    5a2e:	20 e0       	ldi	r18, 0x00	; 0
    5a30:	3f ef       	ldi	r19, 0xFF	; 255
    5a32:	4f e7       	ldi	r20, 0x7F	; 127
    5a34:	57 e4       	ldi	r21, 0x47	; 71
    5a36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5a3a:	18 16       	cp	r1, r24
    5a3c:	64 f5       	brge	.+88     	; 0x5a96 <main+0x1572>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a3e:	fe 01       	movw	r30, r28
    5a40:	ed 5b       	subi	r30, 0xBD	; 189
    5a42:	ff 4f       	sbci	r31, 0xFF	; 255
    5a44:	60 81       	ld	r22, Z
    5a46:	71 81       	ldd	r23, Z+1	; 0x01
    5a48:	82 81       	ldd	r24, Z+2	; 0x02
    5a4a:	93 81       	ldd	r25, Z+3	; 0x03
    5a4c:	20 e0       	ldi	r18, 0x00	; 0
    5a4e:	30 e0       	ldi	r19, 0x00	; 0
    5a50:	40 e2       	ldi	r20, 0x20	; 32
    5a52:	51 e4       	ldi	r21, 0x41	; 65
    5a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a58:	dc 01       	movw	r26, r24
    5a5a:	cb 01       	movw	r24, r22
    5a5c:	bc 01       	movw	r22, r24
    5a5e:	cd 01       	movw	r24, r26
    5a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a64:	dc 01       	movw	r26, r24
    5a66:	cb 01       	movw	r24, r22
    5a68:	9e af       	std	Y+62, r25	; 0x3e
    5a6a:	8d af       	std	Y+61, r24	; 0x3d
    5a6c:	0f c0       	rjmp	.+30     	; 0x5a8c <main+0x1568>
    5a6e:	80 e9       	ldi	r24, 0x90	; 144
    5a70:	91 e0       	ldi	r25, 0x01	; 1
    5a72:	9c af       	std	Y+60, r25	; 0x3c
    5a74:	8b af       	std	Y+59, r24	; 0x3b
    5a76:	8b ad       	ldd	r24, Y+59	; 0x3b
    5a78:	9c ad       	ldd	r25, Y+60	; 0x3c
    5a7a:	01 97       	sbiw	r24, 0x01	; 1
    5a7c:	f1 f7       	brne	.-4      	; 0x5a7a <main+0x1556>
    5a7e:	9c af       	std	Y+60, r25	; 0x3c
    5a80:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a82:	8d ad       	ldd	r24, Y+61	; 0x3d
    5a84:	9e ad       	ldd	r25, Y+62	; 0x3e
    5a86:	01 97       	sbiw	r24, 0x01	; 1
    5a88:	9e af       	std	Y+62, r25	; 0x3e
    5a8a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a8c:	8d ad       	ldd	r24, Y+61	; 0x3d
    5a8e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5a90:	00 97       	sbiw	r24, 0x00	; 0
    5a92:	69 f7       	brne	.-38     	; 0x5a6e <main+0x154a>
    5a94:	16 c0       	rjmp	.+44     	; 0x5ac2 <main+0x159e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a96:	fe 01       	movw	r30, r28
    5a98:	ff 96       	adiw	r30, 0x3f	; 63
    5a9a:	60 81       	ld	r22, Z
    5a9c:	71 81       	ldd	r23, Z+1	; 0x01
    5a9e:	82 81       	ldd	r24, Z+2	; 0x02
    5aa0:	93 81       	ldd	r25, Z+3	; 0x03
    5aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5aa6:	dc 01       	movw	r26, r24
    5aa8:	cb 01       	movw	r24, r22
    5aaa:	9e af       	std	Y+62, r25	; 0x3e
    5aac:	8d af       	std	Y+61, r24	; 0x3d
    5aae:	8d ad       	ldd	r24, Y+61	; 0x3d
    5ab0:	9e ad       	ldd	r25, Y+62	; 0x3e
    5ab2:	9a af       	std	Y+58, r25	; 0x3a
    5ab4:	89 af       	std	Y+57, r24	; 0x39
    5ab6:	89 ad       	ldd	r24, Y+57	; 0x39
    5ab8:	9a ad       	ldd	r25, Y+58	; 0x3a
    5aba:	01 97       	sbiw	r24, 0x01	; 1
    5abc:	f1 f7       	brne	.-4      	; 0x5aba <main+0x1596>
    5abe:	9a af       	std	Y+58, r25	; 0x3a
    5ac0:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(1000);
					H_LCD_void_gotoXY(2,4);
    5ac2:	82 e0       	ldi	r24, 0x02	; 2
    5ac4:	64 e0       	ldi	r22, 0x04	; 4
    5ac6:	0e 94 36 1a 	call	0x346c	; 0x346c <H_LCD_void_gotoXY>
					H_LCD_void_SendString("Wrong ID");
    5aca:	83 e0       	ldi	r24, 0x03	; 3
    5acc:	91 e0       	ldi	r25, 0x01	; 1
    5ace:	0e 94 15 1a 	call	0x342a	; 0x342a <H_LCD_void_SendString>
    5ad2:	80 e0       	ldi	r24, 0x00	; 0
    5ad4:	90 e0       	ldi	r25, 0x00	; 0
    5ad6:	aa e7       	ldi	r26, 0x7A	; 122
    5ad8:	b4 e4       	ldi	r27, 0x44	; 68
    5ada:	8d ab       	std	Y+53, r24	; 0x35
    5adc:	9e ab       	std	Y+54, r25	; 0x36
    5ade:	af ab       	std	Y+55, r26	; 0x37
    5ae0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ae2:	6d a9       	ldd	r22, Y+53	; 0x35
    5ae4:	7e a9       	ldd	r23, Y+54	; 0x36
    5ae6:	8f a9       	ldd	r24, Y+55	; 0x37
    5ae8:	98 ad       	ldd	r25, Y+56	; 0x38
    5aea:	20 e0       	ldi	r18, 0x00	; 0
    5aec:	30 e0       	ldi	r19, 0x00	; 0
    5aee:	4a e7       	ldi	r20, 0x7A	; 122
    5af0:	55 e4       	ldi	r21, 0x45	; 69
    5af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5af6:	dc 01       	movw	r26, r24
    5af8:	cb 01       	movw	r24, r22
    5afa:	89 ab       	std	Y+49, r24	; 0x31
    5afc:	9a ab       	std	Y+50, r25	; 0x32
    5afe:	ab ab       	std	Y+51, r26	; 0x33
    5b00:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5b02:	69 a9       	ldd	r22, Y+49	; 0x31
    5b04:	7a a9       	ldd	r23, Y+50	; 0x32
    5b06:	8b a9       	ldd	r24, Y+51	; 0x33
    5b08:	9c a9       	ldd	r25, Y+52	; 0x34
    5b0a:	20 e0       	ldi	r18, 0x00	; 0
    5b0c:	30 e0       	ldi	r19, 0x00	; 0
    5b0e:	40 e8       	ldi	r20, 0x80	; 128
    5b10:	5f e3       	ldi	r21, 0x3F	; 63
    5b12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b16:	88 23       	and	r24, r24
    5b18:	2c f4       	brge	.+10     	; 0x5b24 <main+0x1600>
		__ticks = 1;
    5b1a:	81 e0       	ldi	r24, 0x01	; 1
    5b1c:	90 e0       	ldi	r25, 0x00	; 0
    5b1e:	98 ab       	std	Y+48, r25	; 0x30
    5b20:	8f a7       	std	Y+47, r24	; 0x2f
    5b22:	3f c0       	rjmp	.+126    	; 0x5ba2 <main+0x167e>
	else if (__tmp > 65535)
    5b24:	69 a9       	ldd	r22, Y+49	; 0x31
    5b26:	7a a9       	ldd	r23, Y+50	; 0x32
    5b28:	8b a9       	ldd	r24, Y+51	; 0x33
    5b2a:	9c a9       	ldd	r25, Y+52	; 0x34
    5b2c:	20 e0       	ldi	r18, 0x00	; 0
    5b2e:	3f ef       	ldi	r19, 0xFF	; 255
    5b30:	4f e7       	ldi	r20, 0x7F	; 127
    5b32:	57 e4       	ldi	r21, 0x47	; 71
    5b34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b38:	18 16       	cp	r1, r24
    5b3a:	4c f5       	brge	.+82     	; 0x5b8e <main+0x166a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b3c:	6d a9       	ldd	r22, Y+53	; 0x35
    5b3e:	7e a9       	ldd	r23, Y+54	; 0x36
    5b40:	8f a9       	ldd	r24, Y+55	; 0x37
    5b42:	98 ad       	ldd	r25, Y+56	; 0x38
    5b44:	20 e0       	ldi	r18, 0x00	; 0
    5b46:	30 e0       	ldi	r19, 0x00	; 0
    5b48:	40 e2       	ldi	r20, 0x20	; 32
    5b4a:	51 e4       	ldi	r21, 0x41	; 65
    5b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b50:	dc 01       	movw	r26, r24
    5b52:	cb 01       	movw	r24, r22
    5b54:	bc 01       	movw	r22, r24
    5b56:	cd 01       	movw	r24, r26
    5b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b5c:	dc 01       	movw	r26, r24
    5b5e:	cb 01       	movw	r24, r22
    5b60:	98 ab       	std	Y+48, r25	; 0x30
    5b62:	8f a7       	std	Y+47, r24	; 0x2f
    5b64:	0f c0       	rjmp	.+30     	; 0x5b84 <main+0x1660>
    5b66:	80 e9       	ldi	r24, 0x90	; 144
    5b68:	91 e0       	ldi	r25, 0x01	; 1
    5b6a:	9e a7       	std	Y+46, r25	; 0x2e
    5b6c:	8d a7       	std	Y+45, r24	; 0x2d
    5b6e:	8d a5       	ldd	r24, Y+45	; 0x2d
    5b70:	9e a5       	ldd	r25, Y+46	; 0x2e
    5b72:	01 97       	sbiw	r24, 0x01	; 1
    5b74:	f1 f7       	brne	.-4      	; 0x5b72 <main+0x164e>
    5b76:	9e a7       	std	Y+46, r25	; 0x2e
    5b78:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    5b7c:	98 a9       	ldd	r25, Y+48	; 0x30
    5b7e:	01 97       	sbiw	r24, 0x01	; 1
    5b80:	98 ab       	std	Y+48, r25	; 0x30
    5b82:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b84:	8f a5       	ldd	r24, Y+47	; 0x2f
    5b86:	98 a9       	ldd	r25, Y+48	; 0x30
    5b88:	00 97       	sbiw	r24, 0x00	; 0
    5b8a:	69 f7       	brne	.-38     	; 0x5b66 <main+0x1642>
    5b8c:	14 c0       	rjmp	.+40     	; 0x5bb6 <main+0x1692>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b8e:	69 a9       	ldd	r22, Y+49	; 0x31
    5b90:	7a a9       	ldd	r23, Y+50	; 0x32
    5b92:	8b a9       	ldd	r24, Y+51	; 0x33
    5b94:	9c a9       	ldd	r25, Y+52	; 0x34
    5b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b9a:	dc 01       	movw	r26, r24
    5b9c:	cb 01       	movw	r24, r22
    5b9e:	98 ab       	std	Y+48, r25	; 0x30
    5ba0:	8f a7       	std	Y+47, r24	; 0x2f
    5ba2:	8f a5       	ldd	r24, Y+47	; 0x2f
    5ba4:	98 a9       	ldd	r25, Y+48	; 0x30
    5ba6:	9c a7       	std	Y+44, r25	; 0x2c
    5ba8:	8b a7       	std	Y+43, r24	; 0x2b
    5baa:	8b a5       	ldd	r24, Y+43	; 0x2b
    5bac:	9c a5       	ldd	r25, Y+44	; 0x2c
    5bae:	01 97       	sbiw	r24, 0x01	; 1
    5bb0:	f1 f7       	brne	.-4      	; 0x5bae <main+0x168a>
    5bb2:	9c a7       	std	Y+44, r25	; 0x2c
    5bb4:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(1000);
					H_LCD_void_Clear_Display();
    5bb6:	0e 94 a0 1a 	call	0x3540	; 0x3540 <H_LCD_void_Clear_Display>
    5bba:	80 e0       	ldi	r24, 0x00	; 0
    5bbc:	90 e0       	ldi	r25, 0x00	; 0
    5bbe:	aa e7       	ldi	r26, 0x7A	; 122
    5bc0:	b4 e4       	ldi	r27, 0x44	; 68
    5bc2:	8f a3       	std	Y+39, r24	; 0x27
    5bc4:	98 a7       	std	Y+40, r25	; 0x28
    5bc6:	a9 a7       	std	Y+41, r26	; 0x29
    5bc8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5bca:	6f a1       	ldd	r22, Y+39	; 0x27
    5bcc:	78 a5       	ldd	r23, Y+40	; 0x28
    5bce:	89 a5       	ldd	r24, Y+41	; 0x29
    5bd0:	9a a5       	ldd	r25, Y+42	; 0x2a
    5bd2:	20 e0       	ldi	r18, 0x00	; 0
    5bd4:	30 e0       	ldi	r19, 0x00	; 0
    5bd6:	4a e7       	ldi	r20, 0x7A	; 122
    5bd8:	55 e4       	ldi	r21, 0x45	; 69
    5bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bde:	dc 01       	movw	r26, r24
    5be0:	cb 01       	movw	r24, r22
    5be2:	8b a3       	std	Y+35, r24	; 0x23
    5be4:	9c a3       	std	Y+36, r25	; 0x24
    5be6:	ad a3       	std	Y+37, r26	; 0x25
    5be8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5bea:	6b a1       	ldd	r22, Y+35	; 0x23
    5bec:	7c a1       	ldd	r23, Y+36	; 0x24
    5bee:	8d a1       	ldd	r24, Y+37	; 0x25
    5bf0:	9e a1       	ldd	r25, Y+38	; 0x26
    5bf2:	20 e0       	ldi	r18, 0x00	; 0
    5bf4:	30 e0       	ldi	r19, 0x00	; 0
    5bf6:	40 e8       	ldi	r20, 0x80	; 128
    5bf8:	5f e3       	ldi	r21, 0x3F	; 63
    5bfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5bfe:	88 23       	and	r24, r24
    5c00:	2c f4       	brge	.+10     	; 0x5c0c <main+0x16e8>
		__ticks = 1;
    5c02:	81 e0       	ldi	r24, 0x01	; 1
    5c04:	90 e0       	ldi	r25, 0x00	; 0
    5c06:	9a a3       	std	Y+34, r25	; 0x22
    5c08:	89 a3       	std	Y+33, r24	; 0x21
    5c0a:	3f c0       	rjmp	.+126    	; 0x5c8a <main+0x1766>
	else if (__tmp > 65535)
    5c0c:	6b a1       	ldd	r22, Y+35	; 0x23
    5c0e:	7c a1       	ldd	r23, Y+36	; 0x24
    5c10:	8d a1       	ldd	r24, Y+37	; 0x25
    5c12:	9e a1       	ldd	r25, Y+38	; 0x26
    5c14:	20 e0       	ldi	r18, 0x00	; 0
    5c16:	3f ef       	ldi	r19, 0xFF	; 255
    5c18:	4f e7       	ldi	r20, 0x7F	; 127
    5c1a:	57 e4       	ldi	r21, 0x47	; 71
    5c1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5c20:	18 16       	cp	r1, r24
    5c22:	4c f5       	brge	.+82     	; 0x5c76 <main+0x1752>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c24:	6f a1       	ldd	r22, Y+39	; 0x27
    5c26:	78 a5       	ldd	r23, Y+40	; 0x28
    5c28:	89 a5       	ldd	r24, Y+41	; 0x29
    5c2a:	9a a5       	ldd	r25, Y+42	; 0x2a
    5c2c:	20 e0       	ldi	r18, 0x00	; 0
    5c2e:	30 e0       	ldi	r19, 0x00	; 0
    5c30:	40 e2       	ldi	r20, 0x20	; 32
    5c32:	51 e4       	ldi	r21, 0x41	; 65
    5c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c38:	dc 01       	movw	r26, r24
    5c3a:	cb 01       	movw	r24, r22
    5c3c:	bc 01       	movw	r22, r24
    5c3e:	cd 01       	movw	r24, r26
    5c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c44:	dc 01       	movw	r26, r24
    5c46:	cb 01       	movw	r24, r22
    5c48:	9a a3       	std	Y+34, r25	; 0x22
    5c4a:	89 a3       	std	Y+33, r24	; 0x21
    5c4c:	0f c0       	rjmp	.+30     	; 0x5c6c <main+0x1748>
    5c4e:	80 e9       	ldi	r24, 0x90	; 144
    5c50:	91 e0       	ldi	r25, 0x01	; 1
    5c52:	98 a3       	std	Y+32, r25	; 0x20
    5c54:	8f 8f       	std	Y+31, r24	; 0x1f
    5c56:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5c58:	98 a1       	ldd	r25, Y+32	; 0x20
    5c5a:	01 97       	sbiw	r24, 0x01	; 1
    5c5c:	f1 f7       	brne	.-4      	; 0x5c5a <main+0x1736>
    5c5e:	98 a3       	std	Y+32, r25	; 0x20
    5c60:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c62:	89 a1       	ldd	r24, Y+33	; 0x21
    5c64:	9a a1       	ldd	r25, Y+34	; 0x22
    5c66:	01 97       	sbiw	r24, 0x01	; 1
    5c68:	9a a3       	std	Y+34, r25	; 0x22
    5c6a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c6c:	89 a1       	ldd	r24, Y+33	; 0x21
    5c6e:	9a a1       	ldd	r25, Y+34	; 0x22
    5c70:	00 97       	sbiw	r24, 0x00	; 0
    5c72:	69 f7       	brne	.-38     	; 0x5c4e <main+0x172a>
    5c74:	14 c0       	rjmp	.+40     	; 0x5c9e <main+0x177a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c76:	6b a1       	ldd	r22, Y+35	; 0x23
    5c78:	7c a1       	ldd	r23, Y+36	; 0x24
    5c7a:	8d a1       	ldd	r24, Y+37	; 0x25
    5c7c:	9e a1       	ldd	r25, Y+38	; 0x26
    5c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c82:	dc 01       	movw	r26, r24
    5c84:	cb 01       	movw	r24, r22
    5c86:	9a a3       	std	Y+34, r25	; 0x22
    5c88:	89 a3       	std	Y+33, r24	; 0x21
    5c8a:	89 a1       	ldd	r24, Y+33	; 0x21
    5c8c:	9a a1       	ldd	r25, Y+34	; 0x22
    5c8e:	9e 8f       	std	Y+30, r25	; 0x1e
    5c90:	8d 8f       	std	Y+29, r24	; 0x1d
    5c92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5c94:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5c96:	01 97       	sbiw	r24, 0x01	; 1
    5c98:	f1 f7       	brne	.-4      	; 0x5c96 <main+0x1772>
    5c9a:	9e 8f       	std	Y+30, r25	; 0x1e
    5c9c:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(1000);
					H_LCD_void_gotoXY(2,4);
    5c9e:	82 e0       	ldi	r24, 0x02	; 2
    5ca0:	64 e0       	ldi	r22, 0x04	; 4
    5ca2:	0e 94 36 1a 	call	0x346c	; 0x346c <H_LCD_void_gotoXY>
					H_LCD_void_SendString("Try Again");
    5ca6:	8f ec       	ldi	r24, 0xCF	; 207
    5ca8:	90 e0       	ldi	r25, 0x00	; 0
    5caa:	0e 94 15 1a 	call	0x342a	; 0x342a <H_LCD_void_SendString>
    5cae:	80 e0       	ldi	r24, 0x00	; 0
    5cb0:	90 e0       	ldi	r25, 0x00	; 0
    5cb2:	aa e7       	ldi	r26, 0x7A	; 122
    5cb4:	b4 e4       	ldi	r27, 0x44	; 68
    5cb6:	89 8f       	std	Y+25, r24	; 0x19
    5cb8:	9a 8f       	std	Y+26, r25	; 0x1a
    5cba:	ab 8f       	std	Y+27, r26	; 0x1b
    5cbc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5cbe:	69 8d       	ldd	r22, Y+25	; 0x19
    5cc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5cc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5cc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5cc6:	20 e0       	ldi	r18, 0x00	; 0
    5cc8:	30 e0       	ldi	r19, 0x00	; 0
    5cca:	4a e7       	ldi	r20, 0x7A	; 122
    5ccc:	55 e4       	ldi	r21, 0x45	; 69
    5cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cd2:	dc 01       	movw	r26, r24
    5cd4:	cb 01       	movw	r24, r22
    5cd6:	8d 8b       	std	Y+21, r24	; 0x15
    5cd8:	9e 8b       	std	Y+22, r25	; 0x16
    5cda:	af 8b       	std	Y+23, r26	; 0x17
    5cdc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5cde:	6d 89       	ldd	r22, Y+21	; 0x15
    5ce0:	7e 89       	ldd	r23, Y+22	; 0x16
    5ce2:	8f 89       	ldd	r24, Y+23	; 0x17
    5ce4:	98 8d       	ldd	r25, Y+24	; 0x18
    5ce6:	20 e0       	ldi	r18, 0x00	; 0
    5ce8:	30 e0       	ldi	r19, 0x00	; 0
    5cea:	40 e8       	ldi	r20, 0x80	; 128
    5cec:	5f e3       	ldi	r21, 0x3F	; 63
    5cee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5cf2:	88 23       	and	r24, r24
    5cf4:	2c f4       	brge	.+10     	; 0x5d00 <main+0x17dc>
		__ticks = 1;
    5cf6:	81 e0       	ldi	r24, 0x01	; 1
    5cf8:	90 e0       	ldi	r25, 0x00	; 0
    5cfa:	9c 8b       	std	Y+20, r25	; 0x14
    5cfc:	8b 8b       	std	Y+19, r24	; 0x13
    5cfe:	3f c0       	rjmp	.+126    	; 0x5d7e <main+0x185a>
	else if (__tmp > 65535)
    5d00:	6d 89       	ldd	r22, Y+21	; 0x15
    5d02:	7e 89       	ldd	r23, Y+22	; 0x16
    5d04:	8f 89       	ldd	r24, Y+23	; 0x17
    5d06:	98 8d       	ldd	r25, Y+24	; 0x18
    5d08:	20 e0       	ldi	r18, 0x00	; 0
    5d0a:	3f ef       	ldi	r19, 0xFF	; 255
    5d0c:	4f e7       	ldi	r20, 0x7F	; 127
    5d0e:	57 e4       	ldi	r21, 0x47	; 71
    5d10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5d14:	18 16       	cp	r1, r24
    5d16:	4c f5       	brge	.+82     	; 0x5d6a <main+0x1846>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d18:	69 8d       	ldd	r22, Y+25	; 0x19
    5d1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5d1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5d1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5d20:	20 e0       	ldi	r18, 0x00	; 0
    5d22:	30 e0       	ldi	r19, 0x00	; 0
    5d24:	40 e2       	ldi	r20, 0x20	; 32
    5d26:	51 e4       	ldi	r21, 0x41	; 65
    5d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d2c:	dc 01       	movw	r26, r24
    5d2e:	cb 01       	movw	r24, r22
    5d30:	bc 01       	movw	r22, r24
    5d32:	cd 01       	movw	r24, r26
    5d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d38:	dc 01       	movw	r26, r24
    5d3a:	cb 01       	movw	r24, r22
    5d3c:	9c 8b       	std	Y+20, r25	; 0x14
    5d3e:	8b 8b       	std	Y+19, r24	; 0x13
    5d40:	0f c0       	rjmp	.+30     	; 0x5d60 <main+0x183c>
    5d42:	80 e9       	ldi	r24, 0x90	; 144
    5d44:	91 e0       	ldi	r25, 0x01	; 1
    5d46:	9a 8b       	std	Y+18, r25	; 0x12
    5d48:	89 8b       	std	Y+17, r24	; 0x11
    5d4a:	89 89       	ldd	r24, Y+17	; 0x11
    5d4c:	9a 89       	ldd	r25, Y+18	; 0x12
    5d4e:	01 97       	sbiw	r24, 0x01	; 1
    5d50:	f1 f7       	brne	.-4      	; 0x5d4e <main+0x182a>
    5d52:	9a 8b       	std	Y+18, r25	; 0x12
    5d54:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d56:	8b 89       	ldd	r24, Y+19	; 0x13
    5d58:	9c 89       	ldd	r25, Y+20	; 0x14
    5d5a:	01 97       	sbiw	r24, 0x01	; 1
    5d5c:	9c 8b       	std	Y+20, r25	; 0x14
    5d5e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d60:	8b 89       	ldd	r24, Y+19	; 0x13
    5d62:	9c 89       	ldd	r25, Y+20	; 0x14
    5d64:	00 97       	sbiw	r24, 0x00	; 0
    5d66:	69 f7       	brne	.-38     	; 0x5d42 <main+0x181e>
    5d68:	14 c0       	rjmp	.+40     	; 0x5d92 <main+0x186e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d6a:	6d 89       	ldd	r22, Y+21	; 0x15
    5d6c:	7e 89       	ldd	r23, Y+22	; 0x16
    5d6e:	8f 89       	ldd	r24, Y+23	; 0x17
    5d70:	98 8d       	ldd	r25, Y+24	; 0x18
    5d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d76:	dc 01       	movw	r26, r24
    5d78:	cb 01       	movw	r24, r22
    5d7a:	9c 8b       	std	Y+20, r25	; 0x14
    5d7c:	8b 8b       	std	Y+19, r24	; 0x13
    5d7e:	8b 89       	ldd	r24, Y+19	; 0x13
    5d80:	9c 89       	ldd	r25, Y+20	; 0x14
    5d82:	98 8b       	std	Y+16, r25	; 0x10
    5d84:	8f 87       	std	Y+15, r24	; 0x0f
    5d86:	8f 85       	ldd	r24, Y+15	; 0x0f
    5d88:	98 89       	ldd	r25, Y+16	; 0x10
    5d8a:	01 97       	sbiw	r24, 0x01	; 1
    5d8c:	f1 f7       	brne	.-4      	; 0x5d8a <main+0x1866>
    5d8e:	98 8b       	std	Y+16, r25	; 0x10
    5d90:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1000);
					H_LCD_void_Clear_Display();
    5d92:	0e 94 a0 1a 	call	0x3540	; 0x3540 <H_LCD_void_Clear_Display>
					keypad_cursor_init(&keypad_digits);
    5d96:	87 ed       	ldi	r24, 0xD7	; 215
    5d98:	92 e0       	ldi	r25, 0x02	; 2
    5d9a:	0e 94 b9 20 	call	0x4172	; 0x4172 <keypad_cursor_init>
    5d9e:	0c 94 84 24 	jmp	0x4908	; 0x4908 <main+0x3e4>
					goto start_from_id;
				}

				/* To detect there user go out from system and avoid system stucking  */
				if(distance > 17)
    5da2:	80 91 36 02 	lds	r24, 0x0236
    5da6:	90 91 37 02 	lds	r25, 0x0237
    5daa:	a0 91 38 02 	lds	r26, 0x0238
    5dae:	b0 91 39 02 	lds	r27, 0x0239
    5db2:	82 31       	cpi	r24, 0x12	; 18
    5db4:	91 05       	cpc	r25, r1
    5db6:	a1 05       	cpc	r26, r1
    5db8:	b1 05       	cpc	r27, r1
    5dba:	10 f4       	brcc	.+4      	; 0x5dc0 <main+0x189c>
    5dbc:	0c 94 8e 24 	jmp	0x491c	; 0x491c <main+0x3f8>
				{
					H_LCD_void_Clear_Display();
    5dc0:	0e 94 a0 1a 	call	0x3540	; 0x3540 <H_LCD_void_Clear_Display>
					H_LCD_void_gotoXY(2, 4);
    5dc4:	82 e0       	ldi	r24, 0x02	; 2
    5dc6:	64 e0       	ldi	r22, 0x04	; 4
    5dc8:	0e 94 36 1a 	call	0x346c	; 0x346c <H_LCD_void_gotoXY>
					H_LCD_void_SendString("GOOD Bye !");
    5dcc:	88 ef       	ldi	r24, 0xF8	; 248
    5dce:	90 e0       	ldi	r25, 0x00	; 0
    5dd0:	0e 94 15 1a 	call	0x342a	; 0x342a <H_LCD_void_SendString>
    5dd4:	80 e0       	ldi	r24, 0x00	; 0
    5dd6:	90 e0       	ldi	r25, 0x00	; 0
    5dd8:	a6 e9       	ldi	r26, 0x96	; 150
    5dda:	b3 e4       	ldi	r27, 0x43	; 67
    5ddc:	8b 87       	std	Y+11, r24	; 0x0b
    5dde:	9c 87       	std	Y+12, r25	; 0x0c
    5de0:	ad 87       	std	Y+13, r26	; 0x0d
    5de2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5de4:	6b 85       	ldd	r22, Y+11	; 0x0b
    5de6:	7c 85       	ldd	r23, Y+12	; 0x0c
    5de8:	8d 85       	ldd	r24, Y+13	; 0x0d
    5dea:	9e 85       	ldd	r25, Y+14	; 0x0e
    5dec:	20 e0       	ldi	r18, 0x00	; 0
    5dee:	30 e0       	ldi	r19, 0x00	; 0
    5df0:	4a e7       	ldi	r20, 0x7A	; 122
    5df2:	55 e4       	ldi	r21, 0x45	; 69
    5df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5df8:	dc 01       	movw	r26, r24
    5dfa:	cb 01       	movw	r24, r22
    5dfc:	8f 83       	std	Y+7, r24	; 0x07
    5dfe:	98 87       	std	Y+8, r25	; 0x08
    5e00:	a9 87       	std	Y+9, r26	; 0x09
    5e02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5e04:	6f 81       	ldd	r22, Y+7	; 0x07
    5e06:	78 85       	ldd	r23, Y+8	; 0x08
    5e08:	89 85       	ldd	r24, Y+9	; 0x09
    5e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e0c:	20 e0       	ldi	r18, 0x00	; 0
    5e0e:	30 e0       	ldi	r19, 0x00	; 0
    5e10:	40 e8       	ldi	r20, 0x80	; 128
    5e12:	5f e3       	ldi	r21, 0x3F	; 63
    5e14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5e18:	88 23       	and	r24, r24
    5e1a:	2c f4       	brge	.+10     	; 0x5e26 <main+0x1902>
		__ticks = 1;
    5e1c:	81 e0       	ldi	r24, 0x01	; 1
    5e1e:	90 e0       	ldi	r25, 0x00	; 0
    5e20:	9e 83       	std	Y+6, r25	; 0x06
    5e22:	8d 83       	std	Y+5, r24	; 0x05
    5e24:	3f c0       	rjmp	.+126    	; 0x5ea4 <main+0x1980>
	else if (__tmp > 65535)
    5e26:	6f 81       	ldd	r22, Y+7	; 0x07
    5e28:	78 85       	ldd	r23, Y+8	; 0x08
    5e2a:	89 85       	ldd	r24, Y+9	; 0x09
    5e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e2e:	20 e0       	ldi	r18, 0x00	; 0
    5e30:	3f ef       	ldi	r19, 0xFF	; 255
    5e32:	4f e7       	ldi	r20, 0x7F	; 127
    5e34:	57 e4       	ldi	r21, 0x47	; 71
    5e36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5e3a:	18 16       	cp	r1, r24
    5e3c:	4c f5       	brge	.+82     	; 0x5e90 <main+0x196c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5e40:	7c 85       	ldd	r23, Y+12	; 0x0c
    5e42:	8d 85       	ldd	r24, Y+13	; 0x0d
    5e44:	9e 85       	ldd	r25, Y+14	; 0x0e
    5e46:	20 e0       	ldi	r18, 0x00	; 0
    5e48:	30 e0       	ldi	r19, 0x00	; 0
    5e4a:	40 e2       	ldi	r20, 0x20	; 32
    5e4c:	51 e4       	ldi	r21, 0x41	; 65
    5e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e52:	dc 01       	movw	r26, r24
    5e54:	cb 01       	movw	r24, r22
    5e56:	bc 01       	movw	r22, r24
    5e58:	cd 01       	movw	r24, r26
    5e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e5e:	dc 01       	movw	r26, r24
    5e60:	cb 01       	movw	r24, r22
    5e62:	9e 83       	std	Y+6, r25	; 0x06
    5e64:	8d 83       	std	Y+5, r24	; 0x05
    5e66:	0f c0       	rjmp	.+30     	; 0x5e86 <main+0x1962>
    5e68:	80 e9       	ldi	r24, 0x90	; 144
    5e6a:	91 e0       	ldi	r25, 0x01	; 1
    5e6c:	9c 83       	std	Y+4, r25	; 0x04
    5e6e:	8b 83       	std	Y+3, r24	; 0x03
    5e70:	8b 81       	ldd	r24, Y+3	; 0x03
    5e72:	9c 81       	ldd	r25, Y+4	; 0x04
    5e74:	01 97       	sbiw	r24, 0x01	; 1
    5e76:	f1 f7       	brne	.-4      	; 0x5e74 <main+0x1950>
    5e78:	9c 83       	std	Y+4, r25	; 0x04
    5e7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    5e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    5e80:	01 97       	sbiw	r24, 0x01	; 1
    5e82:	9e 83       	std	Y+6, r25	; 0x06
    5e84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e86:	8d 81       	ldd	r24, Y+5	; 0x05
    5e88:	9e 81       	ldd	r25, Y+6	; 0x06
    5e8a:	00 97       	sbiw	r24, 0x00	; 0
    5e8c:	69 f7       	brne	.-38     	; 0x5e68 <main+0x1944>
    5e8e:	14 c0       	rjmp	.+40     	; 0x5eb8 <main+0x1994>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e90:	6f 81       	ldd	r22, Y+7	; 0x07
    5e92:	78 85       	ldd	r23, Y+8	; 0x08
    5e94:	89 85       	ldd	r24, Y+9	; 0x09
    5e96:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e9c:	dc 01       	movw	r26, r24
    5e9e:	cb 01       	movw	r24, r22
    5ea0:	9e 83       	std	Y+6, r25	; 0x06
    5ea2:	8d 83       	std	Y+5, r24	; 0x05
    5ea4:	8d 81       	ldd	r24, Y+5	; 0x05
    5ea6:	9e 81       	ldd	r25, Y+6	; 0x06
    5ea8:	9a 83       	std	Y+2, r25	; 0x02
    5eaa:	89 83       	std	Y+1, r24	; 0x01
    5eac:	89 81       	ldd	r24, Y+1	; 0x01
    5eae:	9a 81       	ldd	r25, Y+2	; 0x02
    5eb0:	01 97       	sbiw	r24, 0x01	; 1
    5eb2:	f1 f7       	brne	.-4      	; 0x5eb0 <main+0x198c>
    5eb4:	9a 83       	std	Y+2, r25	; 0x02
    5eb6:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(300);
					H_LCD_void_Clear_Display();
    5eb8:	0e 94 a0 1a 	call	0x3540	; 0x3540 <H_LCD_void_Clear_Display>
    5ebc:	0c 94 7a 23 	jmp	0x46f4	; 0x46f4 <main+0x1d0>

00005ec0 <__mulsi3>:
    5ec0:	62 9f       	mul	r22, r18
    5ec2:	d0 01       	movw	r26, r0
    5ec4:	73 9f       	mul	r23, r19
    5ec6:	f0 01       	movw	r30, r0
    5ec8:	82 9f       	mul	r24, r18
    5eca:	e0 0d       	add	r30, r0
    5ecc:	f1 1d       	adc	r31, r1
    5ece:	64 9f       	mul	r22, r20
    5ed0:	e0 0d       	add	r30, r0
    5ed2:	f1 1d       	adc	r31, r1
    5ed4:	92 9f       	mul	r25, r18
    5ed6:	f0 0d       	add	r31, r0
    5ed8:	83 9f       	mul	r24, r19
    5eda:	f0 0d       	add	r31, r0
    5edc:	74 9f       	mul	r23, r20
    5ede:	f0 0d       	add	r31, r0
    5ee0:	65 9f       	mul	r22, r21
    5ee2:	f0 0d       	add	r31, r0
    5ee4:	99 27       	eor	r25, r25
    5ee6:	72 9f       	mul	r23, r18
    5ee8:	b0 0d       	add	r27, r0
    5eea:	e1 1d       	adc	r30, r1
    5eec:	f9 1f       	adc	r31, r25
    5eee:	63 9f       	mul	r22, r19
    5ef0:	b0 0d       	add	r27, r0
    5ef2:	e1 1d       	adc	r30, r1
    5ef4:	f9 1f       	adc	r31, r25
    5ef6:	bd 01       	movw	r22, r26
    5ef8:	cf 01       	movw	r24, r30
    5efa:	11 24       	eor	r1, r1
    5efc:	08 95       	ret

00005efe <__udivmodqi4>:
    5efe:	99 1b       	sub	r25, r25
    5f00:	79 e0       	ldi	r23, 0x09	; 9
    5f02:	04 c0       	rjmp	.+8      	; 0x5f0c <__udivmodqi4_ep>

00005f04 <__udivmodqi4_loop>:
    5f04:	99 1f       	adc	r25, r25
    5f06:	96 17       	cp	r25, r22
    5f08:	08 f0       	brcs	.+2      	; 0x5f0c <__udivmodqi4_ep>
    5f0a:	96 1b       	sub	r25, r22

00005f0c <__udivmodqi4_ep>:
    5f0c:	88 1f       	adc	r24, r24
    5f0e:	7a 95       	dec	r23
    5f10:	c9 f7       	brne	.-14     	; 0x5f04 <__udivmodqi4_loop>
    5f12:	80 95       	com	r24
    5f14:	08 95       	ret

00005f16 <__divmodhi4>:
    5f16:	97 fb       	bst	r25, 7
    5f18:	09 2e       	mov	r0, r25
    5f1a:	07 26       	eor	r0, r23
    5f1c:	0a d0       	rcall	.+20     	; 0x5f32 <__divmodhi4_neg1>
    5f1e:	77 fd       	sbrc	r23, 7
    5f20:	04 d0       	rcall	.+8      	; 0x5f2a <__divmodhi4_neg2>
    5f22:	0c d0       	rcall	.+24     	; 0x5f3c <__udivmodhi4>
    5f24:	06 d0       	rcall	.+12     	; 0x5f32 <__divmodhi4_neg1>
    5f26:	00 20       	and	r0, r0
    5f28:	1a f4       	brpl	.+6      	; 0x5f30 <__divmodhi4_exit>

00005f2a <__divmodhi4_neg2>:
    5f2a:	70 95       	com	r23
    5f2c:	61 95       	neg	r22
    5f2e:	7f 4f       	sbci	r23, 0xFF	; 255

00005f30 <__divmodhi4_exit>:
    5f30:	08 95       	ret

00005f32 <__divmodhi4_neg1>:
    5f32:	f6 f7       	brtc	.-4      	; 0x5f30 <__divmodhi4_exit>
    5f34:	90 95       	com	r25
    5f36:	81 95       	neg	r24
    5f38:	9f 4f       	sbci	r25, 0xFF	; 255
    5f3a:	08 95       	ret

00005f3c <__udivmodhi4>:
    5f3c:	aa 1b       	sub	r26, r26
    5f3e:	bb 1b       	sub	r27, r27
    5f40:	51 e1       	ldi	r21, 0x11	; 17
    5f42:	07 c0       	rjmp	.+14     	; 0x5f52 <__udivmodhi4_ep>

00005f44 <__udivmodhi4_loop>:
    5f44:	aa 1f       	adc	r26, r26
    5f46:	bb 1f       	adc	r27, r27
    5f48:	a6 17       	cp	r26, r22
    5f4a:	b7 07       	cpc	r27, r23
    5f4c:	10 f0       	brcs	.+4      	; 0x5f52 <__udivmodhi4_ep>
    5f4e:	a6 1b       	sub	r26, r22
    5f50:	b7 0b       	sbc	r27, r23

00005f52 <__udivmodhi4_ep>:
    5f52:	88 1f       	adc	r24, r24
    5f54:	99 1f       	adc	r25, r25
    5f56:	5a 95       	dec	r21
    5f58:	a9 f7       	brne	.-22     	; 0x5f44 <__udivmodhi4_loop>
    5f5a:	80 95       	com	r24
    5f5c:	90 95       	com	r25
    5f5e:	bc 01       	movw	r22, r24
    5f60:	cd 01       	movw	r24, r26
    5f62:	08 95       	ret

00005f64 <__prologue_saves__>:
    5f64:	2f 92       	push	r2
    5f66:	3f 92       	push	r3
    5f68:	4f 92       	push	r4
    5f6a:	5f 92       	push	r5
    5f6c:	6f 92       	push	r6
    5f6e:	7f 92       	push	r7
    5f70:	8f 92       	push	r8
    5f72:	9f 92       	push	r9
    5f74:	af 92       	push	r10
    5f76:	bf 92       	push	r11
    5f78:	cf 92       	push	r12
    5f7a:	df 92       	push	r13
    5f7c:	ef 92       	push	r14
    5f7e:	ff 92       	push	r15
    5f80:	0f 93       	push	r16
    5f82:	1f 93       	push	r17
    5f84:	cf 93       	push	r28
    5f86:	df 93       	push	r29
    5f88:	cd b7       	in	r28, 0x3d	; 61
    5f8a:	de b7       	in	r29, 0x3e	; 62
    5f8c:	ca 1b       	sub	r28, r26
    5f8e:	db 0b       	sbc	r29, r27
    5f90:	0f b6       	in	r0, 0x3f	; 63
    5f92:	f8 94       	cli
    5f94:	de bf       	out	0x3e, r29	; 62
    5f96:	0f be       	out	0x3f, r0	; 63
    5f98:	cd bf       	out	0x3d, r28	; 61
    5f9a:	09 94       	ijmp

00005f9c <__epilogue_restores__>:
    5f9c:	2a 88       	ldd	r2, Y+18	; 0x12
    5f9e:	39 88       	ldd	r3, Y+17	; 0x11
    5fa0:	48 88       	ldd	r4, Y+16	; 0x10
    5fa2:	5f 84       	ldd	r5, Y+15	; 0x0f
    5fa4:	6e 84       	ldd	r6, Y+14	; 0x0e
    5fa6:	7d 84       	ldd	r7, Y+13	; 0x0d
    5fa8:	8c 84       	ldd	r8, Y+12	; 0x0c
    5faa:	9b 84       	ldd	r9, Y+11	; 0x0b
    5fac:	aa 84       	ldd	r10, Y+10	; 0x0a
    5fae:	b9 84       	ldd	r11, Y+9	; 0x09
    5fb0:	c8 84       	ldd	r12, Y+8	; 0x08
    5fb2:	df 80       	ldd	r13, Y+7	; 0x07
    5fb4:	ee 80       	ldd	r14, Y+6	; 0x06
    5fb6:	fd 80       	ldd	r15, Y+5	; 0x05
    5fb8:	0c 81       	ldd	r16, Y+4	; 0x04
    5fba:	1b 81       	ldd	r17, Y+3	; 0x03
    5fbc:	aa 81       	ldd	r26, Y+2	; 0x02
    5fbe:	b9 81       	ldd	r27, Y+1	; 0x01
    5fc0:	ce 0f       	add	r28, r30
    5fc2:	d1 1d       	adc	r29, r1
    5fc4:	0f b6       	in	r0, 0x3f	; 63
    5fc6:	f8 94       	cli
    5fc8:	de bf       	out	0x3e, r29	; 62
    5fca:	0f be       	out	0x3f, r0	; 63
    5fcc:	cd bf       	out	0x3d, r28	; 61
    5fce:	ed 01       	movw	r28, r26
    5fd0:	08 95       	ret

00005fd2 <strcmp>:
    5fd2:	fb 01       	movw	r30, r22
    5fd4:	dc 01       	movw	r26, r24
    5fd6:	8d 91       	ld	r24, X+
    5fd8:	01 90       	ld	r0, Z+
    5fda:	80 19       	sub	r24, r0
    5fdc:	01 10       	cpse	r0, r1
    5fde:	d9 f3       	breq	.-10     	; 0x5fd6 <strcmp+0x4>
    5fe0:	99 0b       	sbc	r25, r25
    5fe2:	08 95       	ret

00005fe4 <itoa>:
    5fe4:	fb 01       	movw	r30, r22
    5fe6:	9f 01       	movw	r18, r30
    5fe8:	e8 94       	clt
    5fea:	42 30       	cpi	r20, 0x02	; 2
    5fec:	c4 f0       	brlt	.+48     	; 0x601e <itoa+0x3a>
    5fee:	45 32       	cpi	r20, 0x25	; 37
    5ff0:	b4 f4       	brge	.+44     	; 0x601e <itoa+0x3a>
    5ff2:	4a 30       	cpi	r20, 0x0A	; 10
    5ff4:	29 f4       	brne	.+10     	; 0x6000 <itoa+0x1c>
    5ff6:	97 fb       	bst	r25, 7
    5ff8:	1e f4       	brtc	.+6      	; 0x6000 <itoa+0x1c>
    5ffa:	90 95       	com	r25
    5ffc:	81 95       	neg	r24
    5ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    6000:	64 2f       	mov	r22, r20
    6002:	77 27       	eor	r23, r23
    6004:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__udivmodhi4>
    6008:	80 5d       	subi	r24, 0xD0	; 208
    600a:	8a 33       	cpi	r24, 0x3A	; 58
    600c:	0c f0       	brlt	.+2      	; 0x6010 <itoa+0x2c>
    600e:	89 5d       	subi	r24, 0xD9	; 217
    6010:	81 93       	st	Z+, r24
    6012:	cb 01       	movw	r24, r22
    6014:	00 97       	sbiw	r24, 0x00	; 0
    6016:	a1 f7       	brne	.-24     	; 0x6000 <itoa+0x1c>
    6018:	16 f4       	brtc	.+4      	; 0x601e <itoa+0x3a>
    601a:	5d e2       	ldi	r21, 0x2D	; 45
    601c:	51 93       	st	Z+, r21
    601e:	10 82       	st	Z, r1
    6020:	c9 01       	movw	r24, r18
    6022:	0c 94 2a 32 	jmp	0x6454	; 0x6454 <strrev>

00006026 <sprintf>:
    6026:	ae e0       	ldi	r26, 0x0E	; 14
    6028:	b0 e0       	ldi	r27, 0x00	; 0
    602a:	e9 e1       	ldi	r30, 0x19	; 25
    602c:	f0 e3       	ldi	r31, 0x30	; 48
    602e:	0c 94 c0 2f 	jmp	0x5f80	; 0x5f80 <__prologue_saves__+0x1c>
    6032:	0d 89       	ldd	r16, Y+21	; 0x15
    6034:	1e 89       	ldd	r17, Y+22	; 0x16
    6036:	86 e0       	ldi	r24, 0x06	; 6
    6038:	8c 83       	std	Y+4, r24	; 0x04
    603a:	1a 83       	std	Y+2, r17	; 0x02
    603c:	09 83       	std	Y+1, r16	; 0x01
    603e:	8f ef       	ldi	r24, 0xFF	; 255
    6040:	9f e7       	ldi	r25, 0x7F	; 127
    6042:	9e 83       	std	Y+6, r25	; 0x06
    6044:	8d 83       	std	Y+5, r24	; 0x05
    6046:	9e 01       	movw	r18, r28
    6048:	27 5e       	subi	r18, 0xE7	; 231
    604a:	3f 4f       	sbci	r19, 0xFF	; 255
    604c:	ce 01       	movw	r24, r28
    604e:	01 96       	adiw	r24, 0x01	; 1
    6050:	6f 89       	ldd	r22, Y+23	; 0x17
    6052:	78 8d       	ldd	r23, Y+24	; 0x18
    6054:	a9 01       	movw	r20, r18
    6056:	0e 94 37 30 	call	0x606e	; 0x606e <vfprintf>
    605a:	2f 81       	ldd	r18, Y+7	; 0x07
    605c:	38 85       	ldd	r19, Y+8	; 0x08
    605e:	02 0f       	add	r16, r18
    6060:	13 1f       	adc	r17, r19
    6062:	f8 01       	movw	r30, r16
    6064:	10 82       	st	Z, r1
    6066:	2e 96       	adiw	r28, 0x0e	; 14
    6068:	e4 e0       	ldi	r30, 0x04	; 4
    606a:	0c 94 dc 2f 	jmp	0x5fb8	; 0x5fb8 <__epilogue_restores__+0x1c>

0000606e <vfprintf>:
    606e:	ab e0       	ldi	r26, 0x0B	; 11
    6070:	b0 e0       	ldi	r27, 0x00	; 0
    6072:	ed e3       	ldi	r30, 0x3D	; 61
    6074:	f0 e3       	ldi	r31, 0x30	; 48
    6076:	0c 94 b2 2f 	jmp	0x5f64	; 0x5f64 <__prologue_saves__>
    607a:	3c 01       	movw	r6, r24
    607c:	2b 01       	movw	r4, r22
    607e:	5a 01       	movw	r10, r20
    6080:	fc 01       	movw	r30, r24
    6082:	17 82       	std	Z+7, r1	; 0x07
    6084:	16 82       	std	Z+6, r1	; 0x06
    6086:	83 81       	ldd	r24, Z+3	; 0x03
    6088:	81 fd       	sbrc	r24, 1
    608a:	03 c0       	rjmp	.+6      	; 0x6092 <vfprintf+0x24>
    608c:	6f ef       	ldi	r22, 0xFF	; 255
    608e:	7f ef       	ldi	r23, 0xFF	; 255
    6090:	c6 c1       	rjmp	.+908    	; 0x641e <vfprintf+0x3b0>
    6092:	9a e0       	ldi	r25, 0x0A	; 10
    6094:	89 2e       	mov	r8, r25
    6096:	1e 01       	movw	r2, r28
    6098:	08 94       	sec
    609a:	21 1c       	adc	r2, r1
    609c:	31 1c       	adc	r3, r1
    609e:	f3 01       	movw	r30, r6
    60a0:	23 81       	ldd	r18, Z+3	; 0x03
    60a2:	f2 01       	movw	r30, r4
    60a4:	23 fd       	sbrc	r18, 3
    60a6:	85 91       	lpm	r24, Z+
    60a8:	23 ff       	sbrs	r18, 3
    60aa:	81 91       	ld	r24, Z+
    60ac:	2f 01       	movw	r4, r30
    60ae:	88 23       	and	r24, r24
    60b0:	09 f4       	brne	.+2      	; 0x60b4 <vfprintf+0x46>
    60b2:	b2 c1       	rjmp	.+868    	; 0x6418 <vfprintf+0x3aa>
    60b4:	85 32       	cpi	r24, 0x25	; 37
    60b6:	39 f4       	brne	.+14     	; 0x60c6 <vfprintf+0x58>
    60b8:	23 fd       	sbrc	r18, 3
    60ba:	85 91       	lpm	r24, Z+
    60bc:	23 ff       	sbrs	r18, 3
    60be:	81 91       	ld	r24, Z+
    60c0:	2f 01       	movw	r4, r30
    60c2:	85 32       	cpi	r24, 0x25	; 37
    60c4:	29 f4       	brne	.+10     	; 0x60d0 <vfprintf+0x62>
    60c6:	90 e0       	ldi	r25, 0x00	; 0
    60c8:	b3 01       	movw	r22, r6
    60ca:	0e 94 3a 32 	call	0x6474	; 0x6474 <fputc>
    60ce:	e7 cf       	rjmp	.-50     	; 0x609e <vfprintf+0x30>
    60d0:	98 2f       	mov	r25, r24
    60d2:	ff 24       	eor	r15, r15
    60d4:	ee 24       	eor	r14, r14
    60d6:	99 24       	eor	r9, r9
    60d8:	ff e1       	ldi	r31, 0x1F	; 31
    60da:	ff 15       	cp	r31, r15
    60dc:	d0 f0       	brcs	.+52     	; 0x6112 <vfprintf+0xa4>
    60de:	9b 32       	cpi	r25, 0x2B	; 43
    60e0:	69 f0       	breq	.+26     	; 0x60fc <vfprintf+0x8e>
    60e2:	9c 32       	cpi	r25, 0x2C	; 44
    60e4:	28 f4       	brcc	.+10     	; 0x60f0 <vfprintf+0x82>
    60e6:	90 32       	cpi	r25, 0x20	; 32
    60e8:	59 f0       	breq	.+22     	; 0x6100 <vfprintf+0x92>
    60ea:	93 32       	cpi	r25, 0x23	; 35
    60ec:	91 f4       	brne	.+36     	; 0x6112 <vfprintf+0xa4>
    60ee:	0e c0       	rjmp	.+28     	; 0x610c <vfprintf+0x9e>
    60f0:	9d 32       	cpi	r25, 0x2D	; 45
    60f2:	49 f0       	breq	.+18     	; 0x6106 <vfprintf+0x98>
    60f4:	90 33       	cpi	r25, 0x30	; 48
    60f6:	69 f4       	brne	.+26     	; 0x6112 <vfprintf+0xa4>
    60f8:	41 e0       	ldi	r20, 0x01	; 1
    60fa:	24 c0       	rjmp	.+72     	; 0x6144 <vfprintf+0xd6>
    60fc:	52 e0       	ldi	r21, 0x02	; 2
    60fe:	f5 2a       	or	r15, r21
    6100:	84 e0       	ldi	r24, 0x04	; 4
    6102:	f8 2a       	or	r15, r24
    6104:	28 c0       	rjmp	.+80     	; 0x6156 <vfprintf+0xe8>
    6106:	98 e0       	ldi	r25, 0x08	; 8
    6108:	f9 2a       	or	r15, r25
    610a:	25 c0       	rjmp	.+74     	; 0x6156 <vfprintf+0xe8>
    610c:	e0 e1       	ldi	r30, 0x10	; 16
    610e:	fe 2a       	or	r15, r30
    6110:	22 c0       	rjmp	.+68     	; 0x6156 <vfprintf+0xe8>
    6112:	f7 fc       	sbrc	r15, 7
    6114:	29 c0       	rjmp	.+82     	; 0x6168 <vfprintf+0xfa>
    6116:	89 2f       	mov	r24, r25
    6118:	80 53       	subi	r24, 0x30	; 48
    611a:	8a 30       	cpi	r24, 0x0A	; 10
    611c:	70 f4       	brcc	.+28     	; 0x613a <vfprintf+0xcc>
    611e:	f6 fe       	sbrs	r15, 6
    6120:	05 c0       	rjmp	.+10     	; 0x612c <vfprintf+0xbe>
    6122:	98 9c       	mul	r9, r8
    6124:	90 2c       	mov	r9, r0
    6126:	11 24       	eor	r1, r1
    6128:	98 0e       	add	r9, r24
    612a:	15 c0       	rjmp	.+42     	; 0x6156 <vfprintf+0xe8>
    612c:	e8 9c       	mul	r14, r8
    612e:	e0 2c       	mov	r14, r0
    6130:	11 24       	eor	r1, r1
    6132:	e8 0e       	add	r14, r24
    6134:	f0 e2       	ldi	r31, 0x20	; 32
    6136:	ff 2a       	or	r15, r31
    6138:	0e c0       	rjmp	.+28     	; 0x6156 <vfprintf+0xe8>
    613a:	9e 32       	cpi	r25, 0x2E	; 46
    613c:	29 f4       	brne	.+10     	; 0x6148 <vfprintf+0xda>
    613e:	f6 fc       	sbrc	r15, 6
    6140:	6b c1       	rjmp	.+726    	; 0x6418 <vfprintf+0x3aa>
    6142:	40 e4       	ldi	r20, 0x40	; 64
    6144:	f4 2a       	or	r15, r20
    6146:	07 c0       	rjmp	.+14     	; 0x6156 <vfprintf+0xe8>
    6148:	9c 36       	cpi	r25, 0x6C	; 108
    614a:	19 f4       	brne	.+6      	; 0x6152 <vfprintf+0xe4>
    614c:	50 e8       	ldi	r21, 0x80	; 128
    614e:	f5 2a       	or	r15, r21
    6150:	02 c0       	rjmp	.+4      	; 0x6156 <vfprintf+0xe8>
    6152:	98 36       	cpi	r25, 0x68	; 104
    6154:	49 f4       	brne	.+18     	; 0x6168 <vfprintf+0xfa>
    6156:	f2 01       	movw	r30, r4
    6158:	23 fd       	sbrc	r18, 3
    615a:	95 91       	lpm	r25, Z+
    615c:	23 ff       	sbrs	r18, 3
    615e:	91 91       	ld	r25, Z+
    6160:	2f 01       	movw	r4, r30
    6162:	99 23       	and	r25, r25
    6164:	09 f0       	breq	.+2      	; 0x6168 <vfprintf+0xfa>
    6166:	b8 cf       	rjmp	.-144    	; 0x60d8 <vfprintf+0x6a>
    6168:	89 2f       	mov	r24, r25
    616a:	85 54       	subi	r24, 0x45	; 69
    616c:	83 30       	cpi	r24, 0x03	; 3
    616e:	18 f0       	brcs	.+6      	; 0x6176 <vfprintf+0x108>
    6170:	80 52       	subi	r24, 0x20	; 32
    6172:	83 30       	cpi	r24, 0x03	; 3
    6174:	38 f4       	brcc	.+14     	; 0x6184 <vfprintf+0x116>
    6176:	44 e0       	ldi	r20, 0x04	; 4
    6178:	50 e0       	ldi	r21, 0x00	; 0
    617a:	a4 0e       	add	r10, r20
    617c:	b5 1e       	adc	r11, r21
    617e:	5f e3       	ldi	r21, 0x3F	; 63
    6180:	59 83       	std	Y+1, r21	; 0x01
    6182:	0f c0       	rjmp	.+30     	; 0x61a2 <vfprintf+0x134>
    6184:	93 36       	cpi	r25, 0x63	; 99
    6186:	31 f0       	breq	.+12     	; 0x6194 <vfprintf+0x126>
    6188:	93 37       	cpi	r25, 0x73	; 115
    618a:	79 f0       	breq	.+30     	; 0x61aa <vfprintf+0x13c>
    618c:	93 35       	cpi	r25, 0x53	; 83
    618e:	09 f0       	breq	.+2      	; 0x6192 <vfprintf+0x124>
    6190:	56 c0       	rjmp	.+172    	; 0x623e <vfprintf+0x1d0>
    6192:	20 c0       	rjmp	.+64     	; 0x61d4 <vfprintf+0x166>
    6194:	f5 01       	movw	r30, r10
    6196:	80 81       	ld	r24, Z
    6198:	89 83       	std	Y+1, r24	; 0x01
    619a:	42 e0       	ldi	r20, 0x02	; 2
    619c:	50 e0       	ldi	r21, 0x00	; 0
    619e:	a4 0e       	add	r10, r20
    61a0:	b5 1e       	adc	r11, r21
    61a2:	61 01       	movw	r12, r2
    61a4:	01 e0       	ldi	r16, 0x01	; 1
    61a6:	10 e0       	ldi	r17, 0x00	; 0
    61a8:	12 c0       	rjmp	.+36     	; 0x61ce <vfprintf+0x160>
    61aa:	f5 01       	movw	r30, r10
    61ac:	c0 80       	ld	r12, Z
    61ae:	d1 80       	ldd	r13, Z+1	; 0x01
    61b0:	f6 fc       	sbrc	r15, 6
    61b2:	03 c0       	rjmp	.+6      	; 0x61ba <vfprintf+0x14c>
    61b4:	6f ef       	ldi	r22, 0xFF	; 255
    61b6:	7f ef       	ldi	r23, 0xFF	; 255
    61b8:	02 c0       	rjmp	.+4      	; 0x61be <vfprintf+0x150>
    61ba:	69 2d       	mov	r22, r9
    61bc:	70 e0       	ldi	r23, 0x00	; 0
    61be:	42 e0       	ldi	r20, 0x02	; 2
    61c0:	50 e0       	ldi	r21, 0x00	; 0
    61c2:	a4 0e       	add	r10, r20
    61c4:	b5 1e       	adc	r11, r21
    61c6:	c6 01       	movw	r24, r12
    61c8:	0e 94 1f 32 	call	0x643e	; 0x643e <strnlen>
    61cc:	8c 01       	movw	r16, r24
    61ce:	5f e7       	ldi	r21, 0x7F	; 127
    61d0:	f5 22       	and	r15, r21
    61d2:	14 c0       	rjmp	.+40     	; 0x61fc <vfprintf+0x18e>
    61d4:	f5 01       	movw	r30, r10
    61d6:	c0 80       	ld	r12, Z
    61d8:	d1 80       	ldd	r13, Z+1	; 0x01
    61da:	f6 fc       	sbrc	r15, 6
    61dc:	03 c0       	rjmp	.+6      	; 0x61e4 <vfprintf+0x176>
    61de:	6f ef       	ldi	r22, 0xFF	; 255
    61e0:	7f ef       	ldi	r23, 0xFF	; 255
    61e2:	02 c0       	rjmp	.+4      	; 0x61e8 <vfprintf+0x17a>
    61e4:	69 2d       	mov	r22, r9
    61e6:	70 e0       	ldi	r23, 0x00	; 0
    61e8:	42 e0       	ldi	r20, 0x02	; 2
    61ea:	50 e0       	ldi	r21, 0x00	; 0
    61ec:	a4 0e       	add	r10, r20
    61ee:	b5 1e       	adc	r11, r21
    61f0:	c6 01       	movw	r24, r12
    61f2:	0e 94 14 32 	call	0x6428	; 0x6428 <strnlen_P>
    61f6:	8c 01       	movw	r16, r24
    61f8:	50 e8       	ldi	r21, 0x80	; 128
    61fa:	f5 2a       	or	r15, r21
    61fc:	f3 fe       	sbrs	r15, 3
    61fe:	07 c0       	rjmp	.+14     	; 0x620e <vfprintf+0x1a0>
    6200:	1a c0       	rjmp	.+52     	; 0x6236 <vfprintf+0x1c8>
    6202:	80 e2       	ldi	r24, 0x20	; 32
    6204:	90 e0       	ldi	r25, 0x00	; 0
    6206:	b3 01       	movw	r22, r6
    6208:	0e 94 3a 32 	call	0x6474	; 0x6474 <fputc>
    620c:	ea 94       	dec	r14
    620e:	8e 2d       	mov	r24, r14
    6210:	90 e0       	ldi	r25, 0x00	; 0
    6212:	08 17       	cp	r16, r24
    6214:	19 07       	cpc	r17, r25
    6216:	a8 f3       	brcs	.-22     	; 0x6202 <vfprintf+0x194>
    6218:	0e c0       	rjmp	.+28     	; 0x6236 <vfprintf+0x1c8>
    621a:	f6 01       	movw	r30, r12
    621c:	f7 fc       	sbrc	r15, 7
    621e:	85 91       	lpm	r24, Z+
    6220:	f7 fe       	sbrs	r15, 7
    6222:	81 91       	ld	r24, Z+
    6224:	6f 01       	movw	r12, r30
    6226:	90 e0       	ldi	r25, 0x00	; 0
    6228:	b3 01       	movw	r22, r6
    622a:	0e 94 3a 32 	call	0x6474	; 0x6474 <fputc>
    622e:	e1 10       	cpse	r14, r1
    6230:	ea 94       	dec	r14
    6232:	01 50       	subi	r16, 0x01	; 1
    6234:	10 40       	sbci	r17, 0x00	; 0
    6236:	01 15       	cp	r16, r1
    6238:	11 05       	cpc	r17, r1
    623a:	79 f7       	brne	.-34     	; 0x621a <vfprintf+0x1ac>
    623c:	ea c0       	rjmp	.+468    	; 0x6412 <vfprintf+0x3a4>
    623e:	94 36       	cpi	r25, 0x64	; 100
    6240:	11 f0       	breq	.+4      	; 0x6246 <vfprintf+0x1d8>
    6242:	99 36       	cpi	r25, 0x69	; 105
    6244:	69 f5       	brne	.+90     	; 0x62a0 <vfprintf+0x232>
    6246:	f7 fe       	sbrs	r15, 7
    6248:	08 c0       	rjmp	.+16     	; 0x625a <vfprintf+0x1ec>
    624a:	f5 01       	movw	r30, r10
    624c:	20 81       	ld	r18, Z
    624e:	31 81       	ldd	r19, Z+1	; 0x01
    6250:	42 81       	ldd	r20, Z+2	; 0x02
    6252:	53 81       	ldd	r21, Z+3	; 0x03
    6254:	84 e0       	ldi	r24, 0x04	; 4
    6256:	90 e0       	ldi	r25, 0x00	; 0
    6258:	0a c0       	rjmp	.+20     	; 0x626e <vfprintf+0x200>
    625a:	f5 01       	movw	r30, r10
    625c:	80 81       	ld	r24, Z
    625e:	91 81       	ldd	r25, Z+1	; 0x01
    6260:	9c 01       	movw	r18, r24
    6262:	44 27       	eor	r20, r20
    6264:	37 fd       	sbrc	r19, 7
    6266:	40 95       	com	r20
    6268:	54 2f       	mov	r21, r20
    626a:	82 e0       	ldi	r24, 0x02	; 2
    626c:	90 e0       	ldi	r25, 0x00	; 0
    626e:	a8 0e       	add	r10, r24
    6270:	b9 1e       	adc	r11, r25
    6272:	9f e6       	ldi	r25, 0x6F	; 111
    6274:	f9 22       	and	r15, r25
    6276:	57 ff       	sbrs	r21, 7
    6278:	09 c0       	rjmp	.+18     	; 0x628c <vfprintf+0x21e>
    627a:	50 95       	com	r21
    627c:	40 95       	com	r20
    627e:	30 95       	com	r19
    6280:	21 95       	neg	r18
    6282:	3f 4f       	sbci	r19, 0xFF	; 255
    6284:	4f 4f       	sbci	r20, 0xFF	; 255
    6286:	5f 4f       	sbci	r21, 0xFF	; 255
    6288:	e0 e8       	ldi	r30, 0x80	; 128
    628a:	fe 2a       	or	r15, r30
    628c:	ca 01       	movw	r24, r20
    628e:	b9 01       	movw	r22, r18
    6290:	a1 01       	movw	r20, r2
    6292:	2a e0       	ldi	r18, 0x0A	; 10
    6294:	30 e0       	ldi	r19, 0x00	; 0
    6296:	0e 94 66 32 	call	0x64cc	; 0x64cc <__ultoa_invert>
    629a:	d8 2e       	mov	r13, r24
    629c:	d2 18       	sub	r13, r2
    629e:	40 c0       	rjmp	.+128    	; 0x6320 <vfprintf+0x2b2>
    62a0:	95 37       	cpi	r25, 0x75	; 117
    62a2:	29 f4       	brne	.+10     	; 0x62ae <vfprintf+0x240>
    62a4:	1f 2d       	mov	r17, r15
    62a6:	1f 7e       	andi	r17, 0xEF	; 239
    62a8:	2a e0       	ldi	r18, 0x0A	; 10
    62aa:	30 e0       	ldi	r19, 0x00	; 0
    62ac:	1d c0       	rjmp	.+58     	; 0x62e8 <vfprintf+0x27a>
    62ae:	1f 2d       	mov	r17, r15
    62b0:	19 7f       	andi	r17, 0xF9	; 249
    62b2:	9f 36       	cpi	r25, 0x6F	; 111
    62b4:	61 f0       	breq	.+24     	; 0x62ce <vfprintf+0x260>
    62b6:	90 37       	cpi	r25, 0x70	; 112
    62b8:	20 f4       	brcc	.+8      	; 0x62c2 <vfprintf+0x254>
    62ba:	98 35       	cpi	r25, 0x58	; 88
    62bc:	09 f0       	breq	.+2      	; 0x62c0 <vfprintf+0x252>
    62be:	ac c0       	rjmp	.+344    	; 0x6418 <vfprintf+0x3aa>
    62c0:	0f c0       	rjmp	.+30     	; 0x62e0 <vfprintf+0x272>
    62c2:	90 37       	cpi	r25, 0x70	; 112
    62c4:	39 f0       	breq	.+14     	; 0x62d4 <vfprintf+0x266>
    62c6:	98 37       	cpi	r25, 0x78	; 120
    62c8:	09 f0       	breq	.+2      	; 0x62cc <vfprintf+0x25e>
    62ca:	a6 c0       	rjmp	.+332    	; 0x6418 <vfprintf+0x3aa>
    62cc:	04 c0       	rjmp	.+8      	; 0x62d6 <vfprintf+0x268>
    62ce:	28 e0       	ldi	r18, 0x08	; 8
    62d0:	30 e0       	ldi	r19, 0x00	; 0
    62d2:	0a c0       	rjmp	.+20     	; 0x62e8 <vfprintf+0x27a>
    62d4:	10 61       	ori	r17, 0x10	; 16
    62d6:	14 fd       	sbrc	r17, 4
    62d8:	14 60       	ori	r17, 0x04	; 4
    62da:	20 e1       	ldi	r18, 0x10	; 16
    62dc:	30 e0       	ldi	r19, 0x00	; 0
    62de:	04 c0       	rjmp	.+8      	; 0x62e8 <vfprintf+0x27a>
    62e0:	14 fd       	sbrc	r17, 4
    62e2:	16 60       	ori	r17, 0x06	; 6
    62e4:	20 e1       	ldi	r18, 0x10	; 16
    62e6:	32 e0       	ldi	r19, 0x02	; 2
    62e8:	17 ff       	sbrs	r17, 7
    62ea:	08 c0       	rjmp	.+16     	; 0x62fc <vfprintf+0x28e>
    62ec:	f5 01       	movw	r30, r10
    62ee:	60 81       	ld	r22, Z
    62f0:	71 81       	ldd	r23, Z+1	; 0x01
    62f2:	82 81       	ldd	r24, Z+2	; 0x02
    62f4:	93 81       	ldd	r25, Z+3	; 0x03
    62f6:	44 e0       	ldi	r20, 0x04	; 4
    62f8:	50 e0       	ldi	r21, 0x00	; 0
    62fa:	08 c0       	rjmp	.+16     	; 0x630c <vfprintf+0x29e>
    62fc:	f5 01       	movw	r30, r10
    62fe:	80 81       	ld	r24, Z
    6300:	91 81       	ldd	r25, Z+1	; 0x01
    6302:	bc 01       	movw	r22, r24
    6304:	80 e0       	ldi	r24, 0x00	; 0
    6306:	90 e0       	ldi	r25, 0x00	; 0
    6308:	42 e0       	ldi	r20, 0x02	; 2
    630a:	50 e0       	ldi	r21, 0x00	; 0
    630c:	a4 0e       	add	r10, r20
    630e:	b5 1e       	adc	r11, r21
    6310:	a1 01       	movw	r20, r2
    6312:	0e 94 66 32 	call	0x64cc	; 0x64cc <__ultoa_invert>
    6316:	d8 2e       	mov	r13, r24
    6318:	d2 18       	sub	r13, r2
    631a:	8f e7       	ldi	r24, 0x7F	; 127
    631c:	f8 2e       	mov	r15, r24
    631e:	f1 22       	and	r15, r17
    6320:	f6 fe       	sbrs	r15, 6
    6322:	0b c0       	rjmp	.+22     	; 0x633a <vfprintf+0x2cc>
    6324:	5e ef       	ldi	r21, 0xFE	; 254
    6326:	f5 22       	and	r15, r21
    6328:	d9 14       	cp	r13, r9
    632a:	38 f4       	brcc	.+14     	; 0x633a <vfprintf+0x2cc>
    632c:	f4 fe       	sbrs	r15, 4
    632e:	07 c0       	rjmp	.+14     	; 0x633e <vfprintf+0x2d0>
    6330:	f2 fc       	sbrc	r15, 2
    6332:	05 c0       	rjmp	.+10     	; 0x633e <vfprintf+0x2d0>
    6334:	8f ee       	ldi	r24, 0xEF	; 239
    6336:	f8 22       	and	r15, r24
    6338:	02 c0       	rjmp	.+4      	; 0x633e <vfprintf+0x2d0>
    633a:	1d 2d       	mov	r17, r13
    633c:	01 c0       	rjmp	.+2      	; 0x6340 <vfprintf+0x2d2>
    633e:	19 2d       	mov	r17, r9
    6340:	f4 fe       	sbrs	r15, 4
    6342:	0d c0       	rjmp	.+26     	; 0x635e <vfprintf+0x2f0>
    6344:	fe 01       	movw	r30, r28
    6346:	ed 0d       	add	r30, r13
    6348:	f1 1d       	adc	r31, r1
    634a:	80 81       	ld	r24, Z
    634c:	80 33       	cpi	r24, 0x30	; 48
    634e:	19 f4       	brne	.+6      	; 0x6356 <vfprintf+0x2e8>
    6350:	99 ee       	ldi	r25, 0xE9	; 233
    6352:	f9 22       	and	r15, r25
    6354:	08 c0       	rjmp	.+16     	; 0x6366 <vfprintf+0x2f8>
    6356:	1f 5f       	subi	r17, 0xFF	; 255
    6358:	f2 fe       	sbrs	r15, 2
    635a:	05 c0       	rjmp	.+10     	; 0x6366 <vfprintf+0x2f8>
    635c:	03 c0       	rjmp	.+6      	; 0x6364 <vfprintf+0x2f6>
    635e:	8f 2d       	mov	r24, r15
    6360:	86 78       	andi	r24, 0x86	; 134
    6362:	09 f0       	breq	.+2      	; 0x6366 <vfprintf+0x2f8>
    6364:	1f 5f       	subi	r17, 0xFF	; 255
    6366:	0f 2d       	mov	r16, r15
    6368:	f3 fc       	sbrc	r15, 3
    636a:	14 c0       	rjmp	.+40     	; 0x6394 <vfprintf+0x326>
    636c:	f0 fe       	sbrs	r15, 0
    636e:	0f c0       	rjmp	.+30     	; 0x638e <vfprintf+0x320>
    6370:	1e 15       	cp	r17, r14
    6372:	10 f0       	brcs	.+4      	; 0x6378 <vfprintf+0x30a>
    6374:	9d 2c       	mov	r9, r13
    6376:	0b c0       	rjmp	.+22     	; 0x638e <vfprintf+0x320>
    6378:	9d 2c       	mov	r9, r13
    637a:	9e 0c       	add	r9, r14
    637c:	91 1a       	sub	r9, r17
    637e:	1e 2d       	mov	r17, r14
    6380:	06 c0       	rjmp	.+12     	; 0x638e <vfprintf+0x320>
    6382:	80 e2       	ldi	r24, 0x20	; 32
    6384:	90 e0       	ldi	r25, 0x00	; 0
    6386:	b3 01       	movw	r22, r6
    6388:	0e 94 3a 32 	call	0x6474	; 0x6474 <fputc>
    638c:	1f 5f       	subi	r17, 0xFF	; 255
    638e:	1e 15       	cp	r17, r14
    6390:	c0 f3       	brcs	.-16     	; 0x6382 <vfprintf+0x314>
    6392:	04 c0       	rjmp	.+8      	; 0x639c <vfprintf+0x32e>
    6394:	1e 15       	cp	r17, r14
    6396:	10 f4       	brcc	.+4      	; 0x639c <vfprintf+0x32e>
    6398:	e1 1a       	sub	r14, r17
    639a:	01 c0       	rjmp	.+2      	; 0x639e <vfprintf+0x330>
    639c:	ee 24       	eor	r14, r14
    639e:	04 ff       	sbrs	r16, 4
    63a0:	0f c0       	rjmp	.+30     	; 0x63c0 <vfprintf+0x352>
    63a2:	80 e3       	ldi	r24, 0x30	; 48
    63a4:	90 e0       	ldi	r25, 0x00	; 0
    63a6:	b3 01       	movw	r22, r6
    63a8:	0e 94 3a 32 	call	0x6474	; 0x6474 <fputc>
    63ac:	02 ff       	sbrs	r16, 2
    63ae:	1d c0       	rjmp	.+58     	; 0x63ea <vfprintf+0x37c>
    63b0:	01 fd       	sbrc	r16, 1
    63b2:	03 c0       	rjmp	.+6      	; 0x63ba <vfprintf+0x34c>
    63b4:	88 e7       	ldi	r24, 0x78	; 120
    63b6:	90 e0       	ldi	r25, 0x00	; 0
    63b8:	0e c0       	rjmp	.+28     	; 0x63d6 <vfprintf+0x368>
    63ba:	88 e5       	ldi	r24, 0x58	; 88
    63bc:	90 e0       	ldi	r25, 0x00	; 0
    63be:	0b c0       	rjmp	.+22     	; 0x63d6 <vfprintf+0x368>
    63c0:	80 2f       	mov	r24, r16
    63c2:	86 78       	andi	r24, 0x86	; 134
    63c4:	91 f0       	breq	.+36     	; 0x63ea <vfprintf+0x37c>
    63c6:	01 ff       	sbrs	r16, 1
    63c8:	02 c0       	rjmp	.+4      	; 0x63ce <vfprintf+0x360>
    63ca:	8b e2       	ldi	r24, 0x2B	; 43
    63cc:	01 c0       	rjmp	.+2      	; 0x63d0 <vfprintf+0x362>
    63ce:	80 e2       	ldi	r24, 0x20	; 32
    63d0:	f7 fc       	sbrc	r15, 7
    63d2:	8d e2       	ldi	r24, 0x2D	; 45
    63d4:	90 e0       	ldi	r25, 0x00	; 0
    63d6:	b3 01       	movw	r22, r6
    63d8:	0e 94 3a 32 	call	0x6474	; 0x6474 <fputc>
    63dc:	06 c0       	rjmp	.+12     	; 0x63ea <vfprintf+0x37c>
    63de:	80 e3       	ldi	r24, 0x30	; 48
    63e0:	90 e0       	ldi	r25, 0x00	; 0
    63e2:	b3 01       	movw	r22, r6
    63e4:	0e 94 3a 32 	call	0x6474	; 0x6474 <fputc>
    63e8:	9a 94       	dec	r9
    63ea:	d9 14       	cp	r13, r9
    63ec:	c0 f3       	brcs	.-16     	; 0x63de <vfprintf+0x370>
    63ee:	da 94       	dec	r13
    63f0:	f1 01       	movw	r30, r2
    63f2:	ed 0d       	add	r30, r13
    63f4:	f1 1d       	adc	r31, r1
    63f6:	80 81       	ld	r24, Z
    63f8:	90 e0       	ldi	r25, 0x00	; 0
    63fa:	b3 01       	movw	r22, r6
    63fc:	0e 94 3a 32 	call	0x6474	; 0x6474 <fputc>
    6400:	dd 20       	and	r13, r13
    6402:	a9 f7       	brne	.-22     	; 0x63ee <vfprintf+0x380>
    6404:	06 c0       	rjmp	.+12     	; 0x6412 <vfprintf+0x3a4>
    6406:	80 e2       	ldi	r24, 0x20	; 32
    6408:	90 e0       	ldi	r25, 0x00	; 0
    640a:	b3 01       	movw	r22, r6
    640c:	0e 94 3a 32 	call	0x6474	; 0x6474 <fputc>
    6410:	ea 94       	dec	r14
    6412:	ee 20       	and	r14, r14
    6414:	c1 f7       	brne	.-16     	; 0x6406 <vfprintf+0x398>
    6416:	43 ce       	rjmp	.-890    	; 0x609e <vfprintf+0x30>
    6418:	f3 01       	movw	r30, r6
    641a:	66 81       	ldd	r22, Z+6	; 0x06
    641c:	77 81       	ldd	r23, Z+7	; 0x07
    641e:	cb 01       	movw	r24, r22
    6420:	2b 96       	adiw	r28, 0x0b	; 11
    6422:	e2 e1       	ldi	r30, 0x12	; 18
    6424:	0c 94 ce 2f 	jmp	0x5f9c	; 0x5f9c <__epilogue_restores__>

00006428 <strnlen_P>:
    6428:	fc 01       	movw	r30, r24
    642a:	05 90       	lpm	r0, Z+
    642c:	61 50       	subi	r22, 0x01	; 1
    642e:	70 40       	sbci	r23, 0x00	; 0
    6430:	01 10       	cpse	r0, r1
    6432:	d8 f7       	brcc	.-10     	; 0x642a <strnlen_P+0x2>
    6434:	80 95       	com	r24
    6436:	90 95       	com	r25
    6438:	8e 0f       	add	r24, r30
    643a:	9f 1f       	adc	r25, r31
    643c:	08 95       	ret

0000643e <strnlen>:
    643e:	fc 01       	movw	r30, r24
    6440:	61 50       	subi	r22, 0x01	; 1
    6442:	70 40       	sbci	r23, 0x00	; 0
    6444:	01 90       	ld	r0, Z+
    6446:	01 10       	cpse	r0, r1
    6448:	d8 f7       	brcc	.-10     	; 0x6440 <strnlen+0x2>
    644a:	80 95       	com	r24
    644c:	90 95       	com	r25
    644e:	8e 0f       	add	r24, r30
    6450:	9f 1f       	adc	r25, r31
    6452:	08 95       	ret

00006454 <strrev>:
    6454:	dc 01       	movw	r26, r24
    6456:	fc 01       	movw	r30, r24
    6458:	67 2f       	mov	r22, r23
    645a:	71 91       	ld	r23, Z+
    645c:	77 23       	and	r23, r23
    645e:	e1 f7       	brne	.-8      	; 0x6458 <strrev+0x4>
    6460:	32 97       	sbiw	r30, 0x02	; 2
    6462:	04 c0       	rjmp	.+8      	; 0x646c <strrev+0x18>
    6464:	7c 91       	ld	r23, X
    6466:	6d 93       	st	X+, r22
    6468:	70 83       	st	Z, r23
    646a:	62 91       	ld	r22, -Z
    646c:	ae 17       	cp	r26, r30
    646e:	bf 07       	cpc	r27, r31
    6470:	c8 f3       	brcs	.-14     	; 0x6464 <strrev+0x10>
    6472:	08 95       	ret

00006474 <fputc>:
    6474:	0f 93       	push	r16
    6476:	1f 93       	push	r17
    6478:	cf 93       	push	r28
    647a:	df 93       	push	r29
    647c:	8c 01       	movw	r16, r24
    647e:	eb 01       	movw	r28, r22
    6480:	8b 81       	ldd	r24, Y+3	; 0x03
    6482:	81 ff       	sbrs	r24, 1
    6484:	1b c0       	rjmp	.+54     	; 0x64bc <fputc+0x48>
    6486:	82 ff       	sbrs	r24, 2
    6488:	0d c0       	rjmp	.+26     	; 0x64a4 <fputc+0x30>
    648a:	2e 81       	ldd	r18, Y+6	; 0x06
    648c:	3f 81       	ldd	r19, Y+7	; 0x07
    648e:	8c 81       	ldd	r24, Y+4	; 0x04
    6490:	9d 81       	ldd	r25, Y+5	; 0x05
    6492:	28 17       	cp	r18, r24
    6494:	39 07       	cpc	r19, r25
    6496:	64 f4       	brge	.+24     	; 0x64b0 <fputc+0x3c>
    6498:	e8 81       	ld	r30, Y
    649a:	f9 81       	ldd	r31, Y+1	; 0x01
    649c:	01 93       	st	Z+, r16
    649e:	f9 83       	std	Y+1, r31	; 0x01
    64a0:	e8 83       	st	Y, r30
    64a2:	06 c0       	rjmp	.+12     	; 0x64b0 <fputc+0x3c>
    64a4:	e8 85       	ldd	r30, Y+8	; 0x08
    64a6:	f9 85       	ldd	r31, Y+9	; 0x09
    64a8:	80 2f       	mov	r24, r16
    64aa:	09 95       	icall
    64ac:	89 2b       	or	r24, r25
    64ae:	31 f4       	brne	.+12     	; 0x64bc <fputc+0x48>
    64b0:	8e 81       	ldd	r24, Y+6	; 0x06
    64b2:	9f 81       	ldd	r25, Y+7	; 0x07
    64b4:	01 96       	adiw	r24, 0x01	; 1
    64b6:	9f 83       	std	Y+7, r25	; 0x07
    64b8:	8e 83       	std	Y+6, r24	; 0x06
    64ba:	02 c0       	rjmp	.+4      	; 0x64c0 <fputc+0x4c>
    64bc:	0f ef       	ldi	r16, 0xFF	; 255
    64be:	1f ef       	ldi	r17, 0xFF	; 255
    64c0:	c8 01       	movw	r24, r16
    64c2:	df 91       	pop	r29
    64c4:	cf 91       	pop	r28
    64c6:	1f 91       	pop	r17
    64c8:	0f 91       	pop	r16
    64ca:	08 95       	ret

000064cc <__ultoa_invert>:
    64cc:	fa 01       	movw	r30, r20
    64ce:	aa 27       	eor	r26, r26
    64d0:	28 30       	cpi	r18, 0x08	; 8
    64d2:	51 f1       	breq	.+84     	; 0x6528 <__ultoa_invert+0x5c>
    64d4:	20 31       	cpi	r18, 0x10	; 16
    64d6:	81 f1       	breq	.+96     	; 0x6538 <__ultoa_invert+0x6c>
    64d8:	e8 94       	clt
    64da:	6f 93       	push	r22
    64dc:	6e 7f       	andi	r22, 0xFE	; 254
    64de:	6e 5f       	subi	r22, 0xFE	; 254
    64e0:	7f 4f       	sbci	r23, 0xFF	; 255
    64e2:	8f 4f       	sbci	r24, 0xFF	; 255
    64e4:	9f 4f       	sbci	r25, 0xFF	; 255
    64e6:	af 4f       	sbci	r26, 0xFF	; 255
    64e8:	b1 e0       	ldi	r27, 0x01	; 1
    64ea:	3e d0       	rcall	.+124    	; 0x6568 <__ultoa_invert+0x9c>
    64ec:	b4 e0       	ldi	r27, 0x04	; 4
    64ee:	3c d0       	rcall	.+120    	; 0x6568 <__ultoa_invert+0x9c>
    64f0:	67 0f       	add	r22, r23
    64f2:	78 1f       	adc	r23, r24
    64f4:	89 1f       	adc	r24, r25
    64f6:	9a 1f       	adc	r25, r26
    64f8:	a1 1d       	adc	r26, r1
    64fa:	68 0f       	add	r22, r24
    64fc:	79 1f       	adc	r23, r25
    64fe:	8a 1f       	adc	r24, r26
    6500:	91 1d       	adc	r25, r1
    6502:	a1 1d       	adc	r26, r1
    6504:	6a 0f       	add	r22, r26
    6506:	71 1d       	adc	r23, r1
    6508:	81 1d       	adc	r24, r1
    650a:	91 1d       	adc	r25, r1
    650c:	a1 1d       	adc	r26, r1
    650e:	20 d0       	rcall	.+64     	; 0x6550 <__ultoa_invert+0x84>
    6510:	09 f4       	brne	.+2      	; 0x6514 <__ultoa_invert+0x48>
    6512:	68 94       	set
    6514:	3f 91       	pop	r19
    6516:	2a e0       	ldi	r18, 0x0A	; 10
    6518:	26 9f       	mul	r18, r22
    651a:	11 24       	eor	r1, r1
    651c:	30 19       	sub	r19, r0
    651e:	30 5d       	subi	r19, 0xD0	; 208
    6520:	31 93       	st	Z+, r19
    6522:	de f6       	brtc	.-74     	; 0x64da <__ultoa_invert+0xe>
    6524:	cf 01       	movw	r24, r30
    6526:	08 95       	ret
    6528:	46 2f       	mov	r20, r22
    652a:	47 70       	andi	r20, 0x07	; 7
    652c:	40 5d       	subi	r20, 0xD0	; 208
    652e:	41 93       	st	Z+, r20
    6530:	b3 e0       	ldi	r27, 0x03	; 3
    6532:	0f d0       	rcall	.+30     	; 0x6552 <__ultoa_invert+0x86>
    6534:	c9 f7       	brne	.-14     	; 0x6528 <__ultoa_invert+0x5c>
    6536:	f6 cf       	rjmp	.-20     	; 0x6524 <__ultoa_invert+0x58>
    6538:	46 2f       	mov	r20, r22
    653a:	4f 70       	andi	r20, 0x0F	; 15
    653c:	40 5d       	subi	r20, 0xD0	; 208
    653e:	4a 33       	cpi	r20, 0x3A	; 58
    6540:	18 f0       	brcs	.+6      	; 0x6548 <__ultoa_invert+0x7c>
    6542:	49 5d       	subi	r20, 0xD9	; 217
    6544:	31 fd       	sbrc	r19, 1
    6546:	40 52       	subi	r20, 0x20	; 32
    6548:	41 93       	st	Z+, r20
    654a:	02 d0       	rcall	.+4      	; 0x6550 <__ultoa_invert+0x84>
    654c:	a9 f7       	brne	.-22     	; 0x6538 <__ultoa_invert+0x6c>
    654e:	ea cf       	rjmp	.-44     	; 0x6524 <__ultoa_invert+0x58>
    6550:	b4 e0       	ldi	r27, 0x04	; 4
    6552:	a6 95       	lsr	r26
    6554:	97 95       	ror	r25
    6556:	87 95       	ror	r24
    6558:	77 95       	ror	r23
    655a:	67 95       	ror	r22
    655c:	ba 95       	dec	r27
    655e:	c9 f7       	brne	.-14     	; 0x6552 <__ultoa_invert+0x86>
    6560:	00 97       	sbiw	r24, 0x00	; 0
    6562:	61 05       	cpc	r22, r1
    6564:	71 05       	cpc	r23, r1
    6566:	08 95       	ret
    6568:	9b 01       	movw	r18, r22
    656a:	ac 01       	movw	r20, r24
    656c:	0a 2e       	mov	r0, r26
    656e:	06 94       	lsr	r0
    6570:	57 95       	ror	r21
    6572:	47 95       	ror	r20
    6574:	37 95       	ror	r19
    6576:	27 95       	ror	r18
    6578:	ba 95       	dec	r27
    657a:	c9 f7       	brne	.-14     	; 0x656e <__ultoa_invert+0xa2>
    657c:	62 0f       	add	r22, r18
    657e:	73 1f       	adc	r23, r19
    6580:	84 1f       	adc	r24, r20
    6582:	95 1f       	adc	r25, r21
    6584:	a0 1d       	adc	r26, r0
    6586:	08 95       	ret

00006588 <_exit>:
    6588:	f8 94       	cli

0000658a <__stop_program>:
    658a:	ff cf       	rjmp	.-2      	; 0x658a <__stop_program>
