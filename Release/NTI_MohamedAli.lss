
NTI_MohamedAli.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000398c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  0000398c  00003a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  008000aa  008000aa  00003a6a  2**0
                  ALLOC
  3 .stab         00005124  00000000  00000000  00003a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004d0f  00000000  00000000  00008b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000d89f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000d9df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000db4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000f798  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00010683  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00011430  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00011590  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0001181d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011feb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 eb 0c 	jmp	0x19d6	; 0x19d6 <__vector_1>
       8:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <__vector_2>
       c:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__vector_6>
      1c:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <__vector_7>
      20:	0c 94 99 08 	jmp	0x1132	; 0x1132 <__vector_8>
      24:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <__vector_9>
      28:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <__vector_10>
      2c:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <__vector_11>
      30:	0c 94 d5 0e 	jmp	0x1daa	; 0x1daa <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3a       	cpi	r26, 0xAA	; 170
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ea       	ldi	r26, 0xAA	; 170
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3c       	cpi	r26, 0xC8	; 200
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 83 19 	call	0x3306	; 0x3306 <main>
      8a:	0c 94 c4 1c 	jmp	0x3988	; 0x3988 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e5 19 	jmp	0x33ca	; 0x33ca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e6       	ldi	r26, 0x63	; 99
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f1 19 	jmp	0x33e2	; 0x33e2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0d 1a 	jmp	0x341a	; 0x341a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f1 19 	jmp	0x33e2	; 0x33e2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0d 1a 	jmp	0x341a	; 0x341a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e5 19 	jmp	0x33ca	; 0x33ca <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e6       	ldi	r24, 0x63	; 99
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f1 19 	jmp	0x33e2	; 0x33e2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0d 1a 	jmp	0x341a	; 0x341a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f1 19 	jmp	0x33e2	; 0x33e2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0d 1a 	jmp	0x341a	; 0x341a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f1 19 	jmp	0x33e2	; 0x33e2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0d 1a 	jmp	0x341a	; 0x341a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f5 19 	jmp	0x33ea	; 0x33ea <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer1_Init>:
void(*Timer1_CompB_isr)(void) = NULL;
void(*Timer1_CompA_isr)(void) = NULL;
void(*Timer1_Capt_isr)(void) = NULL;

Error_Status_t Timer1_Init(const timer1_t *timer1_obj)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Timer1_Init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <Timer1_Init+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	9b 83       	std	Y+3, r25	; 0x03
     b56:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
     b58:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	9b 81       	ldd	r25, Y+3	; 0x03
     b5e:	00 97       	sbiw	r24, 0x00	; 0
     b60:	19 f4       	brne	.+6      	; 0xb68 <Timer1_Init+0x22>
	{
		ret_status = NULL_POINTER;
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	89 83       	std	Y+1, r24	; 0x01
     b66:	ab c0       	rjmp	.+342    	; 0xcbe <Timer1_Init+0x178>
	}
	else
	{
		// To initialize mode
		TIMER1_CONTROL->TCCR1A_CFG.WGM1_0_BIT = (((timer1_obj->mode) >> 0) & 0x01);
     b68:	a6 e4       	ldi	r26, 0x46	; 70
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	ea 81       	ldd	r30, Y+2	; 0x02
     b6e:	fb 81       	ldd	r31, Y+3	; 0x03
     b70:	80 85       	ldd	r24, Z+8	; 0x08
     b72:	8f 70       	andi	r24, 0x0F	; 15
     b74:	81 70       	andi	r24, 0x01	; 1
     b76:	81 70       	andi	r24, 0x01	; 1
     b78:	81 70       	andi	r24, 0x01	; 1
     b7a:	98 2f       	mov	r25, r24
     b7c:	91 70       	andi	r25, 0x01	; 1
     b7e:	19 96       	adiw	r26, 0x09	; 9
     b80:	8c 91       	ld	r24, X
     b82:	19 97       	sbiw	r26, 0x09	; 9
     b84:	8e 7f       	andi	r24, 0xFE	; 254
     b86:	89 2b       	or	r24, r25
     b88:	19 96       	adiw	r26, 0x09	; 9
     b8a:	8c 93       	st	X, r24
		TIMER1_CONTROL->TCCR1A_CFG.WGM1_1_BIT = (((timer1_obj->mode) >> 1) & 0x01);
     b8c:	a6 e4       	ldi	r26, 0x46	; 70
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	ea 81       	ldd	r30, Y+2	; 0x02
     b92:	fb 81       	ldd	r31, Y+3	; 0x03
     b94:	80 85       	ldd	r24, Z+8	; 0x08
     b96:	8f 70       	andi	r24, 0x0F	; 15
     b98:	88 2f       	mov	r24, r24
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	95 95       	asr	r25
     b9e:	87 95       	ror	r24
     ba0:	81 70       	andi	r24, 0x01	; 1
     ba2:	81 70       	andi	r24, 0x01	; 1
     ba4:	81 70       	andi	r24, 0x01	; 1
     ba6:	81 70       	andi	r24, 0x01	; 1
     ba8:	98 2f       	mov	r25, r24
     baa:	99 0f       	add	r25, r25
     bac:	19 96       	adiw	r26, 0x09	; 9
     bae:	8c 91       	ld	r24, X
     bb0:	19 97       	sbiw	r26, 0x09	; 9
     bb2:	8d 7f       	andi	r24, 0xFD	; 253
     bb4:	89 2b       	or	r24, r25
     bb6:	19 96       	adiw	r26, 0x09	; 9
     bb8:	8c 93       	st	X, r24
		TIMER1_CONTROL->TCCR1B_CFG.WGM1_2_BIT = (((timer1_obj->mode) >> 2) & 0x01);
     bba:	a6 e4       	ldi	r26, 0x46	; 70
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	ea 81       	ldd	r30, Y+2	; 0x02
     bc0:	fb 81       	ldd	r31, Y+3	; 0x03
     bc2:	80 85       	ldd	r24, Z+8	; 0x08
     bc4:	8f 70       	andi	r24, 0x0F	; 15
     bc6:	88 2f       	mov	r24, r24
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	95 95       	asr	r25
     bcc:	87 95       	ror	r24
     bce:	95 95       	asr	r25
     bd0:	87 95       	ror	r24
     bd2:	81 70       	andi	r24, 0x01	; 1
     bd4:	81 70       	andi	r24, 0x01	; 1
     bd6:	81 70       	andi	r24, 0x01	; 1
     bd8:	81 70       	andi	r24, 0x01	; 1
     bda:	98 2f       	mov	r25, r24
     bdc:	99 0f       	add	r25, r25
     bde:	99 0f       	add	r25, r25
     be0:	99 0f       	add	r25, r25
     be2:	18 96       	adiw	r26, 0x08	; 8
     be4:	8c 91       	ld	r24, X
     be6:	18 97       	sbiw	r26, 0x08	; 8
     be8:	87 7f       	andi	r24, 0xF7	; 247
     bea:	89 2b       	or	r24, r25
     bec:	18 96       	adiw	r26, 0x08	; 8
     bee:	8c 93       	st	X, r24
		TIMER1_CONTROL->TCCR1B_CFG.WGM1_3_BIT = (((timer1_obj->mode) >> 3) & 0x01);
     bf0:	a6 e4       	ldi	r26, 0x46	; 70
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	ea 81       	ldd	r30, Y+2	; 0x02
     bf6:	fb 81       	ldd	r31, Y+3	; 0x03
     bf8:	80 85       	ldd	r24, Z+8	; 0x08
     bfa:	8f 70       	andi	r24, 0x0F	; 15
     bfc:	88 2f       	mov	r24, r24
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	95 95       	asr	r25
     c02:	87 95       	ror	r24
     c04:	95 95       	asr	r25
     c06:	87 95       	ror	r24
     c08:	95 95       	asr	r25
     c0a:	87 95       	ror	r24
     c0c:	81 70       	andi	r24, 0x01	; 1
     c0e:	81 70       	andi	r24, 0x01	; 1
     c10:	81 70       	andi	r24, 0x01	; 1
     c12:	81 70       	andi	r24, 0x01	; 1
     c14:	98 2f       	mov	r25, r24
     c16:	92 95       	swap	r25
     c18:	90 7f       	andi	r25, 0xF0	; 240
     c1a:	18 96       	adiw	r26, 0x08	; 8
     c1c:	8c 91       	ld	r24, X
     c1e:	18 97       	sbiw	r26, 0x08	; 8
     c20:	8f 7e       	andi	r24, 0xEF	; 239
     c22:	89 2b       	or	r24, r25
     c24:	18 96       	adiw	r26, 0x08	; 8
     c26:	8c 93       	st	X, r24


		// To select the output compare match pin
		TIMER1_CONTROL->TCCR1A_CFG.COM1A_BITS = timer1_obj->ctc_mode_A_cfg;
     c28:	a6 e4       	ldi	r26, 0x46	; 70
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	ea 81       	ldd	r30, Y+2	; 0x02
     c2e:	fb 81       	ldd	r31, Y+3	; 0x03
     c30:	80 85       	ldd	r24, Z+8	; 0x08
     c32:	98 2f       	mov	r25, r24
     c34:	99 1f       	adc	r25, r25
     c36:	99 27       	eor	r25, r25
     c38:	99 1f       	adc	r25, r25
     c3a:	81 85       	ldd	r24, Z+9	; 0x09
     c3c:	81 70       	andi	r24, 0x01	; 1
     c3e:	88 0f       	add	r24, r24
     c40:	89 2b       	or	r24, r25
     c42:	98 2f       	mov	r25, r24
     c44:	92 95       	swap	r25
     c46:	99 0f       	add	r25, r25
     c48:	99 0f       	add	r25, r25
     c4a:	90 7c       	andi	r25, 0xC0	; 192
     c4c:	19 96       	adiw	r26, 0x09	; 9
     c4e:	8c 91       	ld	r24, X
     c50:	19 97       	sbiw	r26, 0x09	; 9
     c52:	8f 73       	andi	r24, 0x3F	; 63
     c54:	89 2b       	or	r24, r25
     c56:	19 96       	adiw	r26, 0x09	; 9
     c58:	8c 93       	st	X, r24
		TIMER1_CONTROL->TCCR1A_CFG.COM1B_BITS = timer1_obj->ctc_mode_B_cfg;
     c5a:	a6 e4       	ldi	r26, 0x46	; 70
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	ea 81       	ldd	r30, Y+2	; 0x02
     c60:	fb 81       	ldd	r31, Y+3	; 0x03
     c62:	81 85       	ldd	r24, Z+9	; 0x09
     c64:	86 95       	lsr	r24
     c66:	83 70       	andi	r24, 0x03	; 3
     c68:	83 70       	andi	r24, 0x03	; 3
     c6a:	98 2f       	mov	r25, r24
     c6c:	92 95       	swap	r25
     c6e:	90 7f       	andi	r25, 0xF0	; 240
     c70:	19 96       	adiw	r26, 0x09	; 9
     c72:	8c 91       	ld	r24, X
     c74:	19 97       	sbiw	r26, 0x09	; 9
     c76:	8f 7c       	andi	r24, 0xCF	; 207
     c78:	89 2b       	or	r24, r25
     c7a:	19 96       	adiw	r26, 0x09	; 9
     c7c:	8c 93       	st	X, r24
     c7e:	19 97       	sbiw	r26, 0x09	; 9


		// Set trigger of ICU
		switch(timer1_obj->icu_trigger) {
     c80:	ea 81       	ldd	r30, Y+2	; 0x02
     c82:	fb 81       	ldd	r31, Y+3	; 0x03
     c84:	81 85       	ldd	r24, Z+9	; 0x09
     c86:	86 95       	lsr	r24
     c88:	86 95       	lsr	r24
     c8a:	86 95       	lsr	r24
     c8c:	81 70       	andi	r24, 0x01	; 1
     c8e:	28 2f       	mov	r18, r24
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	3d 83       	std	Y+5, r19	; 0x05
     c94:	2c 83       	std	Y+4, r18	; 0x04
     c96:	8c 81       	ldd	r24, Y+4	; 0x04
     c98:	9d 81       	ldd	r25, Y+5	; 0x05
     c9a:	00 97       	sbiw	r24, 0x00	; 0
     c9c:	59 f0       	breq	.+22     	; 0xcb4 <Timer1_Init+0x16e>
     c9e:	2c 81       	ldd	r18, Y+4	; 0x04
     ca0:	3d 81       	ldd	r19, Y+5	; 0x05
     ca2:	21 30       	cpi	r18, 0x01	; 1
     ca4:	31 05       	cpc	r19, r1
     ca6:	59 f4       	brne	.+22     	; 0xcbe <Timer1_Init+0x178>
			case TIMER1_INPUT_CAPTURE_RISING_EDGE:
				TIMER1_ICU_TRIGGER_RISING_EDGE();
     ca8:	e6 e4       	ldi	r30, 0x46	; 70
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 85       	ldd	r24, Z+8	; 0x08
     cae:	80 64       	ori	r24, 0x40	; 64
     cb0:	80 87       	std	Z+8, r24	; 0x08
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <Timer1_Init+0x178>
				break;
			case TIMER1_INPUT_CAPTURE_FALLING_EDGE:
				TIMER1_ICU_TRIGGER_FALLING_EDGE();
     cb4:	e6 e4       	ldi	r30, 0x46	; 70
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 85       	ldd	r24, Z+8	; 0x08
     cba:	8f 7b       	andi	r24, 0xBF	; 191
     cbc:	80 87       	std	Z+8, r24	; 0x08
				break;
		}
	}
	return ret_status;
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
}
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	08 95       	ret

00000cd0 <Timer1_start>:


Error_Status_t Timer1_start(const timer1_t *timer1_obj)
{
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	00 d0       	rcall	.+0      	; 0xcd6 <Timer1_start+0x6>
     cd6:	0f 92       	push	r0
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	9b 83       	std	Y+3, r25	; 0x03
     cde:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
     ce0:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	9b 81       	ldd	r25, Y+3	; 0x03
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	19 f4       	brne	.+6      	; 0xcf0 <Timer1_start+0x20>
	{
		ret_status = NULL_POINTER;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	89 83       	std	Y+1, r24	; 0x01
     cee:	43 c0       	rjmp	.+134    	; 0xd76 <Timer1_start+0xa6>
	}
	else
	{
		if(TIMER1_NORMAL_MODE == timer1_obj)
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	9b 81       	ldd	r25, Y+3	; 0x03
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	99 f4       	brne	.+38     	; 0xd1e <Timer1_start+0x4e>
		{
			TIMER1_CONTROL->TCCR1B_CFG.CS1_BITS = timer1_obj->prescaler_select;
     cf8:	a6 e4       	ldi	r26, 0x46	; 70
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	ea 81       	ldd	r30, Y+2	; 0x02
     cfe:	fb 81       	ldd	r31, Y+3	; 0x03
     d00:	80 85       	ldd	r24, Z+8	; 0x08
     d02:	82 95       	swap	r24
     d04:	8f 70       	andi	r24, 0x0F	; 15
     d06:	87 70       	andi	r24, 0x07	; 7
     d08:	98 2f       	mov	r25, r24
     d0a:	97 70       	andi	r25, 0x07	; 7
     d0c:	18 96       	adiw	r26, 0x08	; 8
     d0e:	8c 91       	ld	r24, X
     d10:	18 97       	sbiw	r26, 0x08	; 8
     d12:	88 7f       	andi	r24, 0xF8	; 248
     d14:	89 2b       	or	r24, r25
     d16:	18 96       	adiw	r26, 0x08	; 8
     d18:	8c 93       	st	X, r24
     d1a:	18 97       	sbiw	r26, 0x08	; 8
     d1c:	2c c0       	rjmp	.+88     	; 0xd76 <Timer1_start+0xa6>
		}
		else
		{
			TIMER1_CONTROL->TCCR1B_CFG.CS1_BITS = timer1_obj->prescaler_select;
     d1e:	a6 e4       	ldi	r26, 0x46	; 70
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	ea 81       	ldd	r30, Y+2	; 0x02
     d24:	fb 81       	ldd	r31, Y+3	; 0x03
     d26:	80 85       	ldd	r24, Z+8	; 0x08
     d28:	82 95       	swap	r24
     d2a:	8f 70       	andi	r24, 0x0F	; 15
     d2c:	87 70       	andi	r24, 0x07	; 7
     d2e:	98 2f       	mov	r25, r24
     d30:	97 70       	andi	r25, 0x07	; 7
     d32:	18 96       	adiw	r26, 0x08	; 8
     d34:	8c 91       	ld	r24, X
     d36:	18 97       	sbiw	r26, 0x08	; 8
     d38:	88 7f       	andi	r24, 0xF8	; 248
     d3a:	89 2b       	or	r24, r25
     d3c:	18 96       	adiw	r26, 0x08	; 8
     d3e:	8c 93       	st	X, r24
			DIO_voidSetPinDirection(PORTD_INDEX, PIN4_INDEX, GPIO_DIRECTION_OUTPUT);
     d40:	83 e0       	ldi	r24, 0x03	; 3
     d42:	64 e0       	ldi	r22, 0x04	; 4
     d44:	41 e0       	ldi	r20, 0x01	; 1
     d46:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DIO_voidSetPinDirection>
			DIO_voidSetPinDirection(PORTD_INDEX, PIN5_INDEX, GPIO_DIRECTION_OUTPUT);
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	65 e0       	ldi	r22, 0x05	; 5
     d4e:	41 e0       	ldi	r20, 0x01	; 1
     d50:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DIO_voidSetPinDirection>
			DIO_voidSetPinDirection(PORTD_INDEX, PIN6_INDEX, GPIO_DIRECTION_INPUT);
     d54:	83 e0       	ldi	r24, 0x03	; 3
     d56:	66 e0       	ldi	r22, 0x06	; 6
     d58:	40 e0       	ldi	r20, 0x00	; 0
     d5a:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DIO_voidSetPinDirection>
			TIMER1_CONTROL->OCR1AL_CFG = 0;
     d5e:	e6 e4       	ldi	r30, 0x46	; 70
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	14 82       	std	Z+4, r1	; 0x04
			TIMER1_CONTROL->OCR1AH_CFG = 0;
     d64:	e6 e4       	ldi	r30, 0x46	; 70
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	15 82       	std	Z+5, r1	; 0x05
			TIMER1_CONTROL->OCR1BL_CFG = 0;
     d6a:	e6 e4       	ldi	r30, 0x46	; 70
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	12 82       	std	Z+2, r1	; 0x02
			TIMER1_CONTROL->OCR1BH_CFG = 0;
     d70:	e6 e4       	ldi	r30, 0x46	; 70
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	13 82       	std	Z+3, r1	; 0x03
		}
	}
	return ret_status;
     d76:	89 81       	ldd	r24, Y+1	; 0x01
}
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	08 95       	ret

00000d84 <Timer1_stop>:


Error_Status_t Timer1_stop(const timer1_t *timer1_obj)
{
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	00 d0       	rcall	.+0      	; 0xd8a <Timer1_stop+0x6>
     d8a:	0f 92       	push	r0
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	9b 83       	std	Y+3, r25	; 0x03
     d92:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
     d94:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	9b 81       	ldd	r25, Y+3	; 0x03
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	19 f4       	brne	.+6      	; 0xda4 <Timer1_stop+0x20>
	{
		ret_status = NULL_POINTER;
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	89 83       	std	Y+1, r24	; 0x01
     da2:	05 c0       	rjmp	.+10     	; 0xdae <Timer1_stop+0x2a>
	}
	else
	{
		TIMER1_CONTROL->TCCR1B_CFG.CS1_BITS = TIMER1_STOP_TIMER;
     da4:	e6 e4       	ldi	r30, 0x46	; 70
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 85       	ldd	r24, Z+8	; 0x08
     daa:	88 7f       	andi	r24, 0xF8	; 248
     dac:	80 87       	std	Z+8, r24	; 0x08
	}
	return ret_status;
     dae:	89 81       	ldd	r24, Y+1	; 0x01
}
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	cf 91       	pop	r28
     db8:	df 91       	pop	r29
     dba:	08 95       	ret

00000dbc <Timer1_GetCounts>:


Error_Status_t Timer1_GetCounts(const timer1_t *timer1_obj, u16 *Num_of_count)
{
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	00 d0       	rcall	.+0      	; 0xdc2 <Timer1_GetCounts+0x6>
     dc2:	00 d0       	rcall	.+0      	; 0xdc4 <Timer1_GetCounts+0x8>
     dc4:	0f 92       	push	r0
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	9b 83       	std	Y+3, r25	; 0x03
     dcc:	8a 83       	std	Y+2, r24	; 0x02
     dce:	7d 83       	std	Y+5, r23	; 0x05
     dd0:	6c 83       	std	Y+4, r22	; 0x04
	Error_Status_t ret_status = NO_ERROR;
     dd2:	19 82       	std	Y+1, r1	; 0x01
	if((NULL == timer1_obj) || (NULL == Num_of_count))
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	9b 81       	ldd	r25, Y+3	; 0x03
     dd8:	00 97       	sbiw	r24, 0x00	; 0
     dda:	21 f0       	breq	.+8      	; 0xde4 <Timer1_GetCounts+0x28>
     ddc:	8c 81       	ldd	r24, Y+4	; 0x04
     dde:	9d 81       	ldd	r25, Y+5	; 0x05
     de0:	00 97       	sbiw	r24, 0x00	; 0
     de2:	19 f4       	brne	.+6      	; 0xdea <Timer1_GetCounts+0x2e>
	{
		ret_status = NULL_POINTER;
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	89 83       	std	Y+1, r24	; 0x01
     de8:	12 c0       	rjmp	.+36     	; 0xe0e <Timer1_GetCounts+0x52>
	}
	else
	{
		*Num_of_count = (u16)(((TIMER1_CONTROL->TCNT1H_CFG) << 8) + (TIMER1_CONTROL->TCNT1L_CFG));
     dea:	e6 e4       	ldi	r30, 0x46	; 70
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	87 81       	ldd	r24, Z+7	; 0x07
     df0:	88 2f       	mov	r24, r24
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	38 2f       	mov	r19, r24
     df6:	22 27       	eor	r18, r18
     df8:	e6 e4       	ldi	r30, 0x46	; 70
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	86 81       	ldd	r24, Z+6	; 0x06
     dfe:	88 2f       	mov	r24, r24
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	82 0f       	add	r24, r18
     e04:	93 1f       	adc	r25, r19
     e06:	ec 81       	ldd	r30, Y+4	; 0x04
     e08:	fd 81       	ldd	r31, Y+5	; 0x05
     e0a:	91 83       	std	Z+1, r25	; 0x01
     e0c:	80 83       	st	Z, r24
	}
	return ret_status;
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	0f 90       	pop	r0
     e1a:	cf 91       	pop	r28
     e1c:	df 91       	pop	r29
     e1e:	08 95       	ret

00000e20 <Timer1_OVF_IntEnable>:

Error_Status_t Timer1_setDelayTimeMilliSec(const timer1_t *timer1_obj, u8 Time_ms);


Error_Status_t Timer1_OVF_IntEnable(void)
{
     e20:	df 93       	push	r29
     e22:	cf 93       	push	r28
     e24:	0f 92       	push	r0
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
     e2a:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.TOIE1_BIT = 1;
     e2c:	e6 e4       	ldi	r30, 0x46	; 70
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	84 89       	ldd	r24, Z+20	; 0x14
     e32:	84 60       	ori	r24, 0x04	; 4
     e34:	84 8b       	std	Z+20, r24	; 0x14
	return ret_status;
     e36:	89 81       	ldd	r24, Y+1	; 0x01
}
     e38:	0f 90       	pop	r0
     e3a:	cf 91       	pop	r28
     e3c:	df 91       	pop	r29
     e3e:	08 95       	ret

00000e40 <Timer1_OCA_IntEnable>:


Error_Status_t Timer1_OCA_IntEnable(void)
{
     e40:	df 93       	push	r29
     e42:	cf 93       	push	r28
     e44:	0f 92       	push	r0
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
     e4a:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.OCIE1A_BIT = 1;
     e4c:	e6 e4       	ldi	r30, 0x46	; 70
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	84 89       	ldd	r24, Z+20	; 0x14
     e52:	80 61       	ori	r24, 0x10	; 16
     e54:	84 8b       	std	Z+20, r24	; 0x14
	return ret_status;
     e56:	89 81       	ldd	r24, Y+1	; 0x01
}
     e58:	0f 90       	pop	r0
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	08 95       	ret

00000e60 <Timer1_OCB_IntEnable>:


Error_Status_t Timer1_OCB_IntEnable(void)
{
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	0f 92       	push	r0
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
     e6a:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.OCIE1B_BIT = 1;
     e6c:	e6 e4       	ldi	r30, 0x46	; 70
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	84 89       	ldd	r24, Z+20	; 0x14
     e72:	88 60       	ori	r24, 0x08	; 8
     e74:	84 8b       	std	Z+20, r24	; 0x14
	return ret_status;
     e76:	89 81       	ldd	r24, Y+1	; 0x01
}
     e78:	0f 90       	pop	r0
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <Timer1_ICU_IntEnable>:


Error_Status_t Timer1_ICU_IntEnable(void)
{
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	0f 92       	push	r0
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
     e8a:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.TICIE1_BIT = 1;
     e8c:	e6 e4       	ldi	r30, 0x46	; 70
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	84 89       	ldd	r24, Z+20	; 0x14
     e92:	80 62       	ori	r24, 0x20	; 32
     e94:	84 8b       	std	Z+20, r24	; 0x14
	return ret_status;
     e96:	89 81       	ldd	r24, Y+1	; 0x01
}
     e98:	0f 90       	pop	r0
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <Timer1_OVF_IntDisable>:


Error_Status_t Timer1_OVF_IntDisable(void)
{
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	0f 92       	push	r0
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
     eaa:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.TOIE1_BIT = 0;
     eac:	e6 e4       	ldi	r30, 0x46	; 70
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	84 89       	ldd	r24, Z+20	; 0x14
     eb2:	8b 7f       	andi	r24, 0xFB	; 251
     eb4:	84 8b       	std	Z+20, r24	; 0x14
	return ret_status;
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb8:	0f 90       	pop	r0
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <Timer1_OCA_IntDisable>:


Error_Status_t Timer1_OCA_IntDisable(void)
{
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	0f 92       	push	r0
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
     eca:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.OCIE1A_BIT = 0;
     ecc:	e6 e4       	ldi	r30, 0x46	; 70
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	84 89       	ldd	r24, Z+20	; 0x14
     ed2:	8f 7e       	andi	r24, 0xEF	; 239
     ed4:	84 8b       	std	Z+20, r24	; 0x14
	return ret_status;
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ed8:	0f 90       	pop	r0
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	08 95       	ret

00000ee0 <Timer1_OCB_IntDisable>:


Error_Status_t Timer1_OCB_IntDisable(void)
{
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	0f 92       	push	r0
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
     eea:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.OCIE1B_BIT = 0;
     eec:	e6 e4       	ldi	r30, 0x46	; 70
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	84 89       	ldd	r24, Z+20	; 0x14
     ef2:	87 7f       	andi	r24, 0xF7	; 247
     ef4:	84 8b       	std	Z+20, r24	; 0x14
	return ret_status;
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ef8:	0f 90       	pop	r0
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <Timer1_ICU_IntDisable>:


Error_Status_t Timer1_ICU_IntDisable(void)
{
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	0f 92       	push	r0
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
     f0a:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.TICIE1_BIT = 0;
     f0c:	e6 e4       	ldi	r30, 0x46	; 70
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	84 89       	ldd	r24, Z+20	; 0x14
     f12:	8f 7d       	andi	r24, 0xDF	; 223
     f14:	84 8b       	std	Z+20, r24	; 0x14
	return ret_status;
     f16:	89 81       	ldd	r24, Y+1	; 0x01
}
     f18:	0f 90       	pop	r0
     f1a:	cf 91       	pop	r28
     f1c:	df 91       	pop	r29
     f1e:	08 95       	ret

00000f20 <Timer1_OVF_setCallBack>:


Error_Status_t Timer1_OVF_setCallBack(const timer1_t *timer1_obj)
{
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	00 d0       	rcall	.+0      	; 0xf26 <Timer1_OVF_setCallBack+0x6>
     f26:	0f 92       	push	r0
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	9b 83       	std	Y+3, r25	; 0x03
     f2e:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
     f30:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	9b 81       	ldd	r25, Y+3	; 0x03
     f36:	00 97       	sbiw	r24, 0x00	; 0
     f38:	19 f4       	brne	.+6      	; 0xf40 <Timer1_OVF_setCallBack+0x20>
	{
		ret_status = NULL_POINTER;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	89 83       	std	Y+1, r24	; 0x01
     f3e:	08 c0       	rjmp	.+16     	; 0xf50 <Timer1_OVF_setCallBack+0x30>
	}
	else
	{
		Timer1_Over_Flow_isr = timer1_obj->timer1_ovf_isr;
     f40:	ea 81       	ldd	r30, Y+2	; 0x02
     f42:	fb 81       	ldd	r31, Y+3	; 0x03
     f44:	80 81       	ld	r24, Z
     f46:	91 81       	ldd	r25, Z+1	; 0x01
     f48:	90 93 ab 00 	sts	0x00AB, r25
     f4c:	80 93 aa 00 	sts	0x00AA, r24
	}
	return ret_status;
     f50:	89 81       	ldd	r24, Y+1	; 0x01
}
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <Timer1_OCA_setCallBack>:


Error_Status_t Timer1_OCA_setCallBack(const timer1_t *timer1_obj)
{
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	00 d0       	rcall	.+0      	; 0xf64 <Timer1_OCA_setCallBack+0x6>
     f64:	0f 92       	push	r0
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	9b 83       	std	Y+3, r25	; 0x03
     f6c:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
     f6e:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	9b 81       	ldd	r25, Y+3	; 0x03
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	19 f4       	brne	.+6      	; 0xf7e <Timer1_OCA_setCallBack+0x20>
	{
		ret_status = NULL_POINTER;
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	89 83       	std	Y+1, r24	; 0x01
     f7c:	08 c0       	rjmp	.+16     	; 0xf8e <Timer1_OCA_setCallBack+0x30>
	}
	else
	{
		Timer1_CompA_isr = timer1_obj->timer1_compA_isr;
     f7e:	ea 81       	ldd	r30, Y+2	; 0x02
     f80:	fb 81       	ldd	r31, Y+3	; 0x03
     f82:	82 81       	ldd	r24, Z+2	; 0x02
     f84:	93 81       	ldd	r25, Z+3	; 0x03
     f86:	90 93 af 00 	sts	0x00AF, r25
     f8a:	80 93 ae 00 	sts	0x00AE, r24
	}
	return ret_status;
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	08 95       	ret

00000f9c <Timer1_OCB_setCallBack>:
Error_Status_t Timer1_OCB_setCallBack(const timer1_t *timer1_obj)
{
     f9c:	df 93       	push	r29
     f9e:	cf 93       	push	r28
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <Timer1_OCB_setCallBack+0x6>
     fa2:	0f 92       	push	r0
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
     fa8:	9b 83       	std	Y+3, r25	; 0x03
     faa:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
     fac:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	9b 81       	ldd	r25, Y+3	; 0x03
     fb2:	00 97       	sbiw	r24, 0x00	; 0
     fb4:	19 f4       	brne	.+6      	; 0xfbc <Timer1_OCB_setCallBack+0x20>
	{
		ret_status = NULL_POINTER;
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	08 c0       	rjmp	.+16     	; 0xfcc <Timer1_OCB_setCallBack+0x30>
	}
	else
	{
		Timer1_CompB_isr = timer1_obj->timer1_compB_isr;
     fbc:	ea 81       	ldd	r30, Y+2	; 0x02
     fbe:	fb 81       	ldd	r31, Y+3	; 0x03
     fc0:	84 81       	ldd	r24, Z+4	; 0x04
     fc2:	95 81       	ldd	r25, Z+5	; 0x05
     fc4:	90 93 ad 00 	sts	0x00AD, r25
     fc8:	80 93 ac 00 	sts	0x00AC, r24
	}
	return ret_status;
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
}
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <Timer1_ICU_setCallBack>:
Error_Status_t Timer1_ICU_setCallBack(const timer1_t *timer1_obj)
{
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <Timer1_ICU_setCallBack+0x6>
     fe0:	0f 92       	push	r0
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	9b 83       	std	Y+3, r25	; 0x03
     fe8:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
     fea:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	9b 81       	ldd	r25, Y+3	; 0x03
     ff0:	00 97       	sbiw	r24, 0x00	; 0
     ff2:	19 f4       	brne	.+6      	; 0xffa <Timer1_ICU_setCallBack+0x20>
	{
		ret_status = NULL_POINTER;
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	89 83       	std	Y+1, r24	; 0x01
     ff8:	08 c0       	rjmp	.+16     	; 0x100a <Timer1_ICU_setCallBack+0x30>
	}
	else
	{
		Timer1_Capt_isr = timer1_obj->timer1_capt_isr;
     ffa:	ea 81       	ldd	r30, Y+2	; 0x02
     ffc:	fb 81       	ldd	r31, Y+3	; 0x03
     ffe:	86 81       	ldd	r24, Z+6	; 0x06
    1000:	97 81       	ldd	r25, Z+7	; 0x07
    1002:	90 93 b1 00 	sts	0x00B1, r25
    1006:	80 93 b0 00 	sts	0x00B0, r24
	}
	return ret_status;
    100a:	89 81       	ldd	r24, Y+1	; 0x01
}
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <Timer1_ICU_SetTrigger>:
Error_Status_t Timer1_setFastPWM(const timer1_t *timer1_obj, u8 frequency ,u8 duty);
Error_Status_t Timer1_setphaseCorrectPWM(const timer1_t *timer1_obj,u8 frequency , u8 duty);


Error_Status_t Timer1_ICU_SetTrigger(u8 trigger)
{
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	00 d0       	rcall	.+0      	; 0x101e <Timer1_ICU_SetTrigger+0x6>
    101e:	00 d0       	rcall	.+0      	; 0x1020 <Timer1_ICU_SetTrigger+0x8>
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1026:	19 82       	std	Y+1, r1	; 0x01
	switch(trigger){
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	3c 83       	std	Y+4, r19	; 0x04
    1030:	2b 83       	std	Y+3, r18	; 0x03
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	9c 81       	ldd	r25, Y+4	; 0x04
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	59 f0       	breq	.+22     	; 0x1050 <Timer1_ICU_SetTrigger+0x38>
    103a:	2b 81       	ldd	r18, Y+3	; 0x03
    103c:	3c 81       	ldd	r19, Y+4	; 0x04
    103e:	21 30       	cpi	r18, 0x01	; 1
    1040:	31 05       	cpc	r19, r1
    1042:	61 f4       	brne	.+24     	; 0x105c <Timer1_ICU_SetTrigger+0x44>
	case TIMER1_INPUT_CAPTURE_RISING_EDGE:
		TIMER1_ICU_TRIGGER_RISING_EDGE();
    1044:	e6 e4       	ldi	r30, 0x46	; 70
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 85       	ldd	r24, Z+8	; 0x08
    104a:	80 64       	ori	r24, 0x40	; 64
    104c:	80 87       	std	Z+8, r24	; 0x08
    104e:	08 c0       	rjmp	.+16     	; 0x1060 <Timer1_ICU_SetTrigger+0x48>
		break;
	case TIMER1_INPUT_CAPTURE_FALLING_EDGE:
		TIMER1_ICU_TRIGGER_FALLING_EDGE();
    1050:	e6 e4       	ldi	r30, 0x46	; 70
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 85       	ldd	r24, Z+8	; 0x08
    1056:	8f 7b       	andi	r24, 0xBF	; 191
    1058:	80 87       	std	Z+8, r24	; 0x08
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <Timer1_ICU_SetTrigger+0x48>
		break;
	default:
		ret_status = OUT_OF_RANGE_VALUE;
    105c:	82 e0       	ldi	r24, 0x02	; 2
    105e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return ret_status;
    1060:	89 81       	ldd	r24, Y+1	; 0x01
}
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <Timer1_ICU_takeReading>:


Error_Status_t Timer1_ICU_takeReading(u16 *icr_reading)
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	00 d0       	rcall	.+0      	; 0x1076 <Timer1_ICU_takeReading+0x6>
    1076:	0f 92       	push	r0
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
    107c:	9b 83       	std	Y+3, r25	; 0x03
    107e:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1080:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == icr_reading)
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	9b 81       	ldd	r25, Y+3	; 0x03
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	19 f4       	brne	.+6      	; 0x1090 <Timer1_ICU_takeReading+0x20>
	{
		ret_status = NULL_POINTER;
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	89 83       	std	Y+1, r24	; 0x01
    108e:	12 c0       	rjmp	.+36     	; 0x10b4 <Timer1_ICU_takeReading+0x44>
	}
	else
	{
		*icr_reading = (u16)(((TIMER1_CONTROL->ICR1H_CFG) << 8) + TIMER1_CONTROL->ICR1L_CFG);
    1090:	e6 e4       	ldi	r30, 0x46	; 70
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	81 81       	ldd	r24, Z+1	; 0x01
    1096:	88 2f       	mov	r24, r24
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	38 2f       	mov	r19, r24
    109c:	22 27       	eor	r18, r18
    109e:	e6 e4       	ldi	r30, 0x46	; 70
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	88 2f       	mov	r24, r24
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	82 0f       	add	r24, r18
    10aa:	93 1f       	adc	r25, r19
    10ac:	ea 81       	ldd	r30, Y+2	; 0x02
    10ae:	fb 81       	ldd	r31, Y+3	; 0x03
    10b0:	91 83       	std	Z+1, r25	; 0x01
    10b2:	80 83       	st	Z, r24
	}
	return ret_status;
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	08 95       	ret

000010c2 <__vector_9>:

/* ---------------------------------------- ISRs ---------------------------- */
// Define the ISR function with attribute
void TIMER1_OVF_VECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER1_OVF_VECTOR(void)
{
    10c2:	1f 92       	push	r1
    10c4:	0f 92       	push	r0
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	0f 92       	push	r0
    10ca:	11 24       	eor	r1, r1
    10cc:	2f 93       	push	r18
    10ce:	3f 93       	push	r19
    10d0:	4f 93       	push	r20
    10d2:	5f 93       	push	r21
    10d4:	6f 93       	push	r22
    10d6:	7f 93       	push	r23
    10d8:	8f 93       	push	r24
    10da:	9f 93       	push	r25
    10dc:	af 93       	push	r26
    10de:	bf 93       	push	r27
    10e0:	ef 93       	push	r30
    10e2:	ff 93       	push	r31
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	TIMER1_CONTROL->TIFR1_CFG.TOV1_BIT = 0;
    10ec:	e6 e4       	ldi	r30, 0x46	; 70
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	83 89       	ldd	r24, Z+19	; 0x13
    10f2:	8b 7f       	andi	r24, 0xFB	; 251
    10f4:	83 8b       	std	Z+19, r24	; 0x13

	// execute ISR if it existed
	if(Timer1_Over_Flow_isr)
    10f6:	80 91 aa 00 	lds	r24, 0x00AA
    10fa:	90 91 ab 00 	lds	r25, 0x00AB
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	29 f0       	breq	.+10     	; 0x110c <__vector_9+0x4a>
	{
		Timer1_Over_Flow_isr();
    1102:	e0 91 aa 00 	lds	r30, 0x00AA
    1106:	f0 91 ab 00 	lds	r31, 0x00AB
    110a:	09 95       	icall
	}
}
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	ff 91       	pop	r31
    1112:	ef 91       	pop	r30
    1114:	bf 91       	pop	r27
    1116:	af 91       	pop	r26
    1118:	9f 91       	pop	r25
    111a:	8f 91       	pop	r24
    111c:	7f 91       	pop	r23
    111e:	6f 91       	pop	r22
    1120:	5f 91       	pop	r21
    1122:	4f 91       	pop	r20
    1124:	3f 91       	pop	r19
    1126:	2f 91       	pop	r18
    1128:	0f 90       	pop	r0
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	0f 90       	pop	r0
    112e:	1f 90       	pop	r1
    1130:	18 95       	reti

00001132 <__vector_8>:


// Define the ISR function with attribute
void TIMER1_COMPBVECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER1_COMPBVECTOR(void)
{
    1132:	1f 92       	push	r1
    1134:	0f 92       	push	r0
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	0f 92       	push	r0
    113a:	11 24       	eor	r1, r1
    113c:	2f 93       	push	r18
    113e:	3f 93       	push	r19
    1140:	4f 93       	push	r20
    1142:	5f 93       	push	r21
    1144:	6f 93       	push	r22
    1146:	7f 93       	push	r23
    1148:	8f 93       	push	r24
    114a:	9f 93       	push	r25
    114c:	af 93       	push	r26
    114e:	bf 93       	push	r27
    1150:	ef 93       	push	r30
    1152:	ff 93       	push	r31
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	TIMER1_CONTROL->TIFR1_CFG.OCF1B_BIT = 0;
    115c:	e6 e4       	ldi	r30, 0x46	; 70
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	83 89       	ldd	r24, Z+19	; 0x13
    1162:	87 7f       	andi	r24, 0xF7	; 247
    1164:	83 8b       	std	Z+19, r24	; 0x13

	// execute ISR if it existed
	if(Timer1_CompB_isr)
    1166:	80 91 ac 00 	lds	r24, 0x00AC
    116a:	90 91 ad 00 	lds	r25, 0x00AD
    116e:	00 97       	sbiw	r24, 0x00	; 0
    1170:	29 f0       	breq	.+10     	; 0x117c <__vector_8+0x4a>
	{
		Timer1_CompB_isr();
    1172:	e0 91 ac 00 	lds	r30, 0x00AC
    1176:	f0 91 ad 00 	lds	r31, 0x00AD
    117a:	09 95       	icall
	}
}
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	ff 91       	pop	r31
    1182:	ef 91       	pop	r30
    1184:	bf 91       	pop	r27
    1186:	af 91       	pop	r26
    1188:	9f 91       	pop	r25
    118a:	8f 91       	pop	r24
    118c:	7f 91       	pop	r23
    118e:	6f 91       	pop	r22
    1190:	5f 91       	pop	r21
    1192:	4f 91       	pop	r20
    1194:	3f 91       	pop	r19
    1196:	2f 91       	pop	r18
    1198:	0f 90       	pop	r0
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	0f 90       	pop	r0
    119e:	1f 90       	pop	r1
    11a0:	18 95       	reti

000011a2 <__vector_7>:


// Define the ISR function with attribute
void TIMER1_COMPAVECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER1_COMPAVECTOR(void)
{
    11a2:	1f 92       	push	r1
    11a4:	0f 92       	push	r0
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	0f 92       	push	r0
    11aa:	11 24       	eor	r1, r1
    11ac:	2f 93       	push	r18
    11ae:	3f 93       	push	r19
    11b0:	4f 93       	push	r20
    11b2:	5f 93       	push	r21
    11b4:	6f 93       	push	r22
    11b6:	7f 93       	push	r23
    11b8:	8f 93       	push	r24
    11ba:	9f 93       	push	r25
    11bc:	af 93       	push	r26
    11be:	bf 93       	push	r27
    11c0:	ef 93       	push	r30
    11c2:	ff 93       	push	r31
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	TIMER1_CONTROL->TIFR1_CFG.OCF1A_BIT = 0;
    11cc:	e6 e4       	ldi	r30, 0x46	; 70
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	83 89       	ldd	r24, Z+19	; 0x13
    11d2:	8f 7e       	andi	r24, 0xEF	; 239
    11d4:	83 8b       	std	Z+19, r24	; 0x13

	// execute ISR if it existed
	if(Timer1_CompA_isr)
    11d6:	80 91 ae 00 	lds	r24, 0x00AE
    11da:	90 91 af 00 	lds	r25, 0x00AF
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	29 f0       	breq	.+10     	; 0x11ec <__vector_7+0x4a>
	{
		Timer1_CompA_isr();
    11e2:	e0 91 ae 00 	lds	r30, 0x00AE
    11e6:	f0 91 af 00 	lds	r31, 0x00AF
    11ea:	09 95       	icall
	}
}
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	ff 91       	pop	r31
    11f2:	ef 91       	pop	r30
    11f4:	bf 91       	pop	r27
    11f6:	af 91       	pop	r26
    11f8:	9f 91       	pop	r25
    11fa:	8f 91       	pop	r24
    11fc:	7f 91       	pop	r23
    11fe:	6f 91       	pop	r22
    1200:	5f 91       	pop	r21
    1202:	4f 91       	pop	r20
    1204:	3f 91       	pop	r19
    1206:	2f 91       	pop	r18
    1208:	0f 90       	pop	r0
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	0f 90       	pop	r0
    120e:	1f 90       	pop	r1
    1210:	18 95       	reti

00001212 <__vector_6>:


// Define the ISR function with attribute
void TIMER1_CAPTVECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER1_CAPTVECTOR(void)
{
    1212:	1f 92       	push	r1
    1214:	0f 92       	push	r0
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	0f 92       	push	r0
    121a:	11 24       	eor	r1, r1
    121c:	2f 93       	push	r18
    121e:	3f 93       	push	r19
    1220:	4f 93       	push	r20
    1222:	5f 93       	push	r21
    1224:	6f 93       	push	r22
    1226:	7f 93       	push	r23
    1228:	8f 93       	push	r24
    122a:	9f 93       	push	r25
    122c:	af 93       	push	r26
    122e:	bf 93       	push	r27
    1230:	ef 93       	push	r30
    1232:	ff 93       	push	r31
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	TIMER1_CONTROL->TIFR1_CFG.ICF1_BIT = 0;
    123c:	e6 e4       	ldi	r30, 0x46	; 70
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	83 89       	ldd	r24, Z+19	; 0x13
    1242:	8f 7d       	andi	r24, 0xDF	; 223
    1244:	83 8b       	std	Z+19, r24	; 0x13

	// execute ISR if it existed
	if(Timer1_Capt_isr)
    1246:	80 91 b0 00 	lds	r24, 0x00B0
    124a:	90 91 b1 00 	lds	r25, 0x00B1
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	29 f0       	breq	.+10     	; 0x125c <__vector_6+0x4a>
	{
		Timer1_Capt_isr();
    1252:	e0 91 b0 00 	lds	r30, 0x00B0
    1256:	f0 91 b1 00 	lds	r31, 0x00B1
    125a:	09 95       	icall
	}
}
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	ff 91       	pop	r31
    1262:	ef 91       	pop	r30
    1264:	bf 91       	pop	r27
    1266:	af 91       	pop	r26
    1268:	9f 91       	pop	r25
    126a:	8f 91       	pop	r24
    126c:	7f 91       	pop	r23
    126e:	6f 91       	pop	r22
    1270:	5f 91       	pop	r21
    1272:	4f 91       	pop	r20
    1274:	3f 91       	pop	r19
    1276:	2f 91       	pop	r18
    1278:	0f 90       	pop	r0
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	0f 90       	pop	r0
    127e:	1f 90       	pop	r1
    1280:	18 95       	reti

00001282 <Timer0_Init>:
void (*Timer0_Over_Flow_isr)(void) = NULL;
void(*Timer0_Comp_isr)(void) = NULL;


Error_Status_t Timer0_Init(const timer0_t *timer0_obj)
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	00 d0       	rcall	.+0      	; 0x1288 <Timer0_Init+0x6>
    1288:	0f 92       	push	r0
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	9b 83       	std	Y+3, r25	; 0x03
    1290:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1292:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	9b 81       	ldd	r25, Y+3	; 0x03
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	19 f4       	brne	.+6      	; 0x12a2 <Timer0_Init+0x20>
	{
		ret_status = NULL_POINTER;
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	4a c0       	rjmp	.+148    	; 0x1336 <Timer0_Init+0xb4>
	}
	else
	{
		// To select mode
		TIMER0_CONTROL->TCCR0_CFG.WGM00_BIT = (((timer0_obj->mode) >> 0) & 0x01);
    12a2:	a2 e5       	ldi	r26, 0x52	; 82
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	ea 81       	ldd	r30, Y+2	; 0x02
    12a8:	fb 81       	ldd	r31, Y+3	; 0x03
    12aa:	84 81       	ldd	r24, Z+4	; 0x04
    12ac:	86 95       	lsr	r24
    12ae:	86 95       	lsr	r24
    12b0:	86 95       	lsr	r24
    12b2:	83 70       	andi	r24, 0x03	; 3
    12b4:	81 70       	andi	r24, 0x01	; 1
    12b6:	81 70       	andi	r24, 0x01	; 1
    12b8:	81 70       	andi	r24, 0x01	; 1
    12ba:	81 70       	andi	r24, 0x01	; 1
    12bc:	98 2f       	mov	r25, r24
    12be:	92 95       	swap	r25
    12c0:	99 0f       	add	r25, r25
    12c2:	99 0f       	add	r25, r25
    12c4:	90 7c       	andi	r25, 0xC0	; 192
    12c6:	11 96       	adiw	r26, 0x01	; 1
    12c8:	8c 91       	ld	r24, X
    12ca:	11 97       	sbiw	r26, 0x01	; 1
    12cc:	8f 7b       	andi	r24, 0xBF	; 191
    12ce:	89 2b       	or	r24, r25
    12d0:	11 96       	adiw	r26, 0x01	; 1
    12d2:	8c 93       	st	X, r24
		TIMER0_CONTROL->TCCR0_CFG.WGM01_BIT = (((timer0_obj->mode) >> 1) & 0x01);
    12d4:	a2 e5       	ldi	r26, 0x52	; 82
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	ea 81       	ldd	r30, Y+2	; 0x02
    12da:	fb 81       	ldd	r31, Y+3	; 0x03
    12dc:	84 81       	ldd	r24, Z+4	; 0x04
    12de:	86 95       	lsr	r24
    12e0:	86 95       	lsr	r24
    12e2:	86 95       	lsr	r24
    12e4:	83 70       	andi	r24, 0x03	; 3
    12e6:	88 2f       	mov	r24, r24
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	95 95       	asr	r25
    12ec:	87 95       	ror	r24
    12ee:	81 70       	andi	r24, 0x01	; 1
    12f0:	81 70       	andi	r24, 0x01	; 1
    12f2:	81 70       	andi	r24, 0x01	; 1
    12f4:	81 70       	andi	r24, 0x01	; 1
    12f6:	98 2f       	mov	r25, r24
    12f8:	99 0f       	add	r25, r25
    12fa:	99 0f       	add	r25, r25
    12fc:	99 0f       	add	r25, r25
    12fe:	11 96       	adiw	r26, 0x01	; 1
    1300:	8c 91       	ld	r24, X
    1302:	11 97       	sbiw	r26, 0x01	; 1
    1304:	87 7f       	andi	r24, 0xF7	; 247
    1306:	89 2b       	or	r24, r25
    1308:	11 96       	adiw	r26, 0x01	; 1
    130a:	8c 93       	st	X, r24

		// To select the output compare match pin
		TIMER0_CONTROL->TCCR0_CFG.COM0_BITS = timer0_obj->ctc_mode_cfg;
    130c:	a2 e5       	ldi	r26, 0x52	; 82
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	ea 81       	ldd	r30, Y+2	; 0x02
    1312:	fb 81       	ldd	r31, Y+3	; 0x03
    1314:	84 81       	ldd	r24, Z+4	; 0x04
    1316:	82 95       	swap	r24
    1318:	86 95       	lsr	r24
    131a:	87 70       	andi	r24, 0x07	; 7
    131c:	83 70       	andi	r24, 0x03	; 3
    131e:	83 70       	andi	r24, 0x03	; 3
    1320:	98 2f       	mov	r25, r24
    1322:	92 95       	swap	r25
    1324:	90 7f       	andi	r25, 0xF0	; 240
    1326:	11 96       	adiw	r26, 0x01	; 1
    1328:	8c 91       	ld	r24, X
    132a:	11 97       	sbiw	r26, 0x01	; 1
    132c:	8f 7c       	andi	r24, 0xCF	; 207
    132e:	89 2b       	or	r24, r25
    1330:	11 96       	adiw	r26, 0x01	; 1
    1332:	8c 93       	st	X, r24
    1334:	11 97       	sbiw	r26, 0x01	; 1
		}
	return ret_status;
    1336:	89 81       	ldd	r24, Y+1	; 0x01
}
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <Timer0_start>:


Error_Status_t Timer0_start(const timer0_t *timer0_obj)
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	00 d0       	rcall	.+0      	; 0x134a <Timer0_start+0x6>
    134a:	0f 92       	push	r0
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	9b 83       	std	Y+3, r25	; 0x03
    1352:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1354:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	9b 81       	ldd	r25, Y+3	; 0x03
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	19 f4       	brne	.+6      	; 0x1364 <Timer0_start+0x20>
	{
		ret_status = NULL_POINTER;
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	89 83       	std	Y+1, r24	; 0x01
    1362:	2e c0       	rjmp	.+92     	; 0x13c0 <Timer0_start+0x7c>
	}
	else
	{
		if(TIMER0_NORMAL_MODE == timer0_obj->mode){
    1364:	ea 81       	ldd	r30, Y+2	; 0x02
    1366:	fb 81       	ldd	r31, Y+3	; 0x03
    1368:	84 81       	ldd	r24, Z+4	; 0x04
    136a:	88 71       	andi	r24, 0x18	; 24
    136c:	88 23       	and	r24, r24
    136e:	89 f4       	brne	.+34     	; 0x1392 <Timer0_start+0x4e>
			TIMER0_CONTROL->TCCR0_CFG.CS0_BITS = timer0_obj->prescaler_select;
    1370:	a2 e5       	ldi	r26, 0x52	; 82
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	ea 81       	ldd	r30, Y+2	; 0x02
    1376:	fb 81       	ldd	r31, Y+3	; 0x03
    1378:	84 81       	ldd	r24, Z+4	; 0x04
    137a:	87 70       	andi	r24, 0x07	; 7
    137c:	98 2f       	mov	r25, r24
    137e:	97 70       	andi	r25, 0x07	; 7
    1380:	11 96       	adiw	r26, 0x01	; 1
    1382:	8c 91       	ld	r24, X
    1384:	11 97       	sbiw	r26, 0x01	; 1
    1386:	88 7f       	andi	r24, 0xF8	; 248
    1388:	89 2b       	or	r24, r25
    138a:	11 96       	adiw	r26, 0x01	; 1
    138c:	8c 93       	st	X, r24
    138e:	11 97       	sbiw	r26, 0x01	; 1
    1390:	17 c0       	rjmp	.+46     	; 0x13c0 <Timer0_start+0x7c>
		}
		else
		{
			TIMER0_CONTROL->TCCR0_CFG.CS0_BITS = timer0_obj->prescaler_select;
    1392:	a2 e5       	ldi	r26, 0x52	; 82
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	ea 81       	ldd	r30, Y+2	; 0x02
    1398:	fb 81       	ldd	r31, Y+3	; 0x03
    139a:	84 81       	ldd	r24, Z+4	; 0x04
    139c:	87 70       	andi	r24, 0x07	; 7
    139e:	98 2f       	mov	r25, r24
    13a0:	97 70       	andi	r25, 0x07	; 7
    13a2:	11 96       	adiw	r26, 0x01	; 1
    13a4:	8c 91       	ld	r24, X
    13a6:	11 97       	sbiw	r26, 0x01	; 1
    13a8:	88 7f       	andi	r24, 0xF8	; 248
    13aa:	89 2b       	or	r24, r25
    13ac:	11 96       	adiw	r26, 0x01	; 1
    13ae:	8c 93       	st	X, r24
			DIO_voidSetPinDirection(PORTB_INDEX, PIN3_INDEX, GPIO_DIRECTION_OUTPUT);
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	63 e0       	ldi	r22, 0x03	; 3
    13b4:	41 e0       	ldi	r20, 0x01	; 1
    13b6:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DIO_voidSetPinDirection>
			TIMER0_CONTROL->OCR0_CFG = 0;
    13ba:	e2 e5       	ldi	r30, 0x52	; 82
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	12 86       	std	Z+10, r1	; 0x0a
		}

	}
	return ret_status;
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	08 95       	ret

000013ce <Timer0_stop>:
Error_Status_t Timer0_stop(const timer0_t *timer0_obj)
{
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	00 d0       	rcall	.+0      	; 0x13d4 <Timer0_stop+0x6>
    13d4:	0f 92       	push	r0
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	9b 83       	std	Y+3, r25	; 0x03
    13dc:	8a 83       	std	Y+2, r24	; 0x02

	Error_Status_t ret_status = NO_ERROR;
    13de:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	9b 81       	ldd	r25, Y+3	; 0x03
    13e4:	00 97       	sbiw	r24, 0x00	; 0
    13e6:	19 f4       	brne	.+6      	; 0x13ee <Timer0_stop+0x20>
	{
		ret_status = NULL_POINTER;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	89 83       	std	Y+1, r24	; 0x01
    13ec:	05 c0       	rjmp	.+10     	; 0x13f8 <Timer0_stop+0x2a>
	}
	else
	{
		TIMER0_CONTROL->TCCR0_CFG.CS0_BITS = TIMER0_STOP_TIMER;
    13ee:	e2 e5       	ldi	r30, 0x52	; 82
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	81 81       	ldd	r24, Z+1	; 0x01
    13f4:	88 7f       	andi	r24, 0xF8	; 248
    13f6:	81 83       	std	Z+1, r24	; 0x01
	}
	return ret_status;
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	08 95       	ret

00001406 <Timer0_GetCounts>:
Error_Status_t Timer0_GetCounts(const timer0_t *timer0_obj, u8 *Num_of_count)
{
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	00 d0       	rcall	.+0      	; 0x140c <Timer0_GetCounts+0x6>
    140c:	00 d0       	rcall	.+0      	; 0x140e <Timer0_GetCounts+0x8>
    140e:	0f 92       	push	r0
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
    1414:	9b 83       	std	Y+3, r25	; 0x03
    1416:	8a 83       	std	Y+2, r24	; 0x02
    1418:	7d 83       	std	Y+5, r23	; 0x05
    141a:	6c 83       	std	Y+4, r22	; 0x04
	Error_Status_t ret_status = NO_ERROR;
    141c:	19 82       	std	Y+1, r1	; 0x01
	if((NULL == timer0_obj) || (NULL == Num_of_count))
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	9b 81       	ldd	r25, Y+3	; 0x03
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	21 f0       	breq	.+8      	; 0x142e <Timer0_GetCounts+0x28>
    1426:	8c 81       	ldd	r24, Y+4	; 0x04
    1428:	9d 81       	ldd	r25, Y+5	; 0x05
    142a:	00 97       	sbiw	r24, 0x00	; 0
    142c:	19 f4       	brne	.+6      	; 0x1434 <Timer0_GetCounts+0x2e>
	{
		ret_status = NULL_POINTER;
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	89 83       	std	Y+1, r24	; 0x01
    1432:	06 c0       	rjmp	.+12     	; 0x1440 <Timer0_GetCounts+0x3a>
	}
	else
	{
		*Num_of_count = TIMER0_CONTROL->TCNT0_CFG;
    1434:	e2 e5       	ldi	r30, 0x52	; 82
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	ec 81       	ldd	r30, Y+4	; 0x04
    143c:	fd 81       	ldd	r31, Y+5	; 0x05
    143e:	80 83       	st	Z, r24
	}
	return ret_status;
    1440:	89 81       	ldd	r24, Y+1	; 0x01
}
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <Timer0_setDelayTimeMilliSec>:



Error_Status_t Timer0_setDelayTimeMilliSec(const timer0_t *timer0_obj, u8 Time_ms)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	00 d0       	rcall	.+0      	; 0x1458 <Timer0_setDelayTimeMilliSec+0x6>
    1458:	00 d0       	rcall	.+0      	; 0x145a <Timer0_setDelayTimeMilliSec+0x8>
    145a:	0f 92       	push	r0
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	9b 83       	std	Y+3, r25	; 0x03
    1462:	8a 83       	std	Y+2, r24	; 0x02
    1464:	6c 83       	std	Y+4, r22	; 0x04
	Error_Status_t ret_status = NO_ERROR;
    1466:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	9b 81       	ldd	r25, Y+3	; 0x03
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	19 f4       	brne	.+6      	; 0x1476 <Timer0_setDelayTimeMilliSec+0x24>
	{
		ret_status = NULL_POINTER;
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	89 83       	std	Y+1, r24	; 0x01
    1474:	05 c0       	rjmp	.+10     	; 0x1480 <Timer0_setDelayTimeMilliSec+0x2e>
	}
	else
	{
		if(TIMER0_NORMAL_MODE == timer0_obj->mode)
    1476:	ea 81       	ldd	r30, Y+2	; 0x02
    1478:	fb 81       	ldd	r31, Y+3	; 0x03
    147a:	84 81       	ldd	r24, Z+4	; 0x04
    147c:	98 2f       	mov	r25, r24
    147e:	98 71       	andi	r25, 0x18	; 24
		{

		}
		else{/* Nothing */}
	}
	return ret_status;
    1480:	89 81       	ldd	r24, Y+1	; 0x01
}
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	cf 91       	pop	r28
    148e:	df 91       	pop	r29
    1490:	08 95       	ret

00001492 <Timer0_EnableInt>:




Error_Status_t Timer0_EnableInt(void)
{
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
	// Enable global interrupts
	GIE_Enable();
    149a:	ef e5       	ldi	r30, 0x5F	; 95
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	80 68       	ori	r24, 0x80	; 128
    14a2:	80 83       	st	Z, r24
	// Enable timer0 overflow interrupt and compare match interrupt
	TIMER0_CONTROL->TIMSK_CFG.TOIE0_BIT = 1;
    14a4:	e2 e5       	ldi	r30, 0x52	; 82
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	87 81       	ldd	r24, Z+7	; 0x07
    14aa:	81 60       	ori	r24, 0x01	; 1
    14ac:	87 83       	std	Z+7, r24	; 0x07
	TIMER0_CONTROL->TIMSK_CFG.OCIE0_BIT = 1;
    14ae:	e2 e5       	ldi	r30, 0x52	; 82
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	87 81       	ldd	r24, Z+7	; 0x07
    14b4:	82 60       	ori	r24, 0x02	; 2
    14b6:	87 83       	std	Z+7, r24	; 0x07

	return NO_ERROR;
    14b8:	80 e0       	ldi	r24, 0x00	; 0
}
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <Timer0_DisableInt>:




Error_Status_t Timer0_DisableInt(void)
{
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
	// Disable timer0 overflow interrupt and compare match interrupt
	GIE_Disable();
    14c8:	ef e5       	ldi	r30, 0x5F	; 95
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	8f 77       	andi	r24, 0x7F	; 127
    14d0:	80 83       	st	Z, r24
	TIMER0_CONTROL->TIMSK_CFG.OCIE0_BIT = 0;
    14d2:	e2 e5       	ldi	r30, 0x52	; 82
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	87 81       	ldd	r24, Z+7	; 0x07
    14d8:	8d 7f       	andi	r24, 0xFD	; 253
    14da:	87 83       	std	Z+7, r24	; 0x07

	return NO_ERROR;
    14dc:	80 e0       	ldi	r24, 0x00	; 0
}
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <Timer0_setCallBack>:



Error_Status_t Timer0_setCallBack(const timer0_t *timer0_obj)
{
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <Timer0_setCallBack+0x6>
    14ea:	0f 92       	push	r0
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	9b 83       	std	Y+3, r25	; 0x03
    14f2:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    14f4:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	9b 81       	ldd	r25, Y+3	; 0x03
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	19 f4       	brne	.+6      	; 0x1504 <Timer0_setCallBack+0x20>
	{
		ret_status = NULL_POINTER;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	10 c0       	rjmp	.+32     	; 0x1524 <Timer0_setCallBack+0x40>
	}
	else
	{
		Timer0_Over_Flow_isr = timer0_obj->timer0_over_flow_isr;
    1504:	ea 81       	ldd	r30, Y+2	; 0x02
    1506:	fb 81       	ldd	r31, Y+3	; 0x03
    1508:	80 81       	ld	r24, Z
    150a:	91 81       	ldd	r25, Z+1	; 0x01
    150c:	90 93 b3 00 	sts	0x00B3, r25
    1510:	80 93 b2 00 	sts	0x00B2, r24
		Timer0_Comp_isr = timer0_obj->timer0_comp_isr;
    1514:	ea 81       	ldd	r30, Y+2	; 0x02
    1516:	fb 81       	ldd	r31, Y+3	; 0x03
    1518:	82 81       	ldd	r24, Z+2	; 0x02
    151a:	93 81       	ldd	r25, Z+3	; 0x03
    151c:	90 93 b5 00 	sts	0x00B5, r25
    1520:	80 93 b4 00 	sts	0x00B4, r24
	}
	return ret_status;
    1524:	89 81       	ldd	r24, Y+1	; 0x01
}
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	cf 91       	pop	r28
    152e:	df 91       	pop	r29
    1530:	08 95       	ret

00001532 <Timer0_setFastPWM>:
Error_Status_t Timer0_setFastPWM(const timer0_t *timer0_obj, u8 frequency ,u8 duty)
{
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	00 d0       	rcall	.+0      	; 0x1538 <Timer0_setFastPWM+0x6>
    1538:	00 d0       	rcall	.+0      	; 0x153a <Timer0_setFastPWM+0x8>
    153a:	0f 92       	push	r0
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	9b 83       	std	Y+3, r25	; 0x03
    1542:	8a 83       	std	Y+2, r24	; 0x02
    1544:	6c 83       	std	Y+4, r22	; 0x04
    1546:	4d 83       	std	Y+5, r20	; 0x05
	Error_Status_t ret_status = NO_ERROR;
    1548:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	9b 81       	ldd	r25, Y+3	; 0x03
    154e:	00 97       	sbiw	r24, 0x00	; 0
    1550:	19 f4       	brne	.+6      	; 0x1558 <Timer0_setFastPWM+0x26>
	{
		ret_status = NULL_POINTER;
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	89 83       	std	Y+1, r24	; 0x01
    1556:	49 c0       	rjmp	.+146    	; 0x15ea <Timer0_setFastPWM+0xb8>
	}
	else
	{
		if(TIMER0_FAST_PWM_MODE == timer0_obj->mode)
    1558:	ea 81       	ldd	r30, Y+2	; 0x02
    155a:	fb 81       	ldd	r31, Y+3	; 0x03
    155c:	84 81       	ldd	r24, Z+4	; 0x04
    155e:	88 71       	andi	r24, 0x18	; 24
    1560:	88 31       	cpi	r24, 0x18	; 24
    1562:	09 f0       	breq	.+2      	; 0x1566 <Timer0_setFastPWM+0x34>
    1564:	42 c0       	rjmp	.+132    	; 0x15ea <Timer0_setFastPWM+0xb8>
		{
			if(TIMER0_FAST_PWM_CLEAR_OC0_ON_COMPARE_MATCH == timer0_obj->ctc_mode_cfg)
    1566:	ea 81       	ldd	r30, Y+2	; 0x02
    1568:	fb 81       	ldd	r31, Y+3	; 0x03
    156a:	84 81       	ldd	r24, Z+4	; 0x04
    156c:	80 76       	andi	r24, 0x60	; 96
    156e:	80 34       	cpi	r24, 0x40	; 64
    1570:	d9 f4       	brne	.+54     	; 0x15a8 <Timer0_setFastPWM+0x76>
			{
				TIMER0_CONTROL->OCR0_CFG = (duty * 255) / 100;
    1572:	e2 e5       	ldi	r30, 0x52	; 82
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	8d 81       	ldd	r24, Y+5	; 0x05
    1578:	48 2f       	mov	r20, r24
    157a:	50 e0       	ldi	r21, 0x00	; 0
    157c:	ca 01       	movw	r24, r20
    157e:	9c 01       	movw	r18, r24
    1580:	22 0f       	add	r18, r18
    1582:	33 1f       	adc	r19, r19
    1584:	c9 01       	movw	r24, r18
    1586:	96 95       	lsr	r25
    1588:	98 2f       	mov	r25, r24
    158a:	88 27       	eor	r24, r24
    158c:	97 95       	ror	r25
    158e:	87 95       	ror	r24
    1590:	82 1b       	sub	r24, r18
    1592:	93 0b       	sbc	r25, r19
    1594:	84 0f       	add	r24, r20
    1596:	95 1f       	adc	r25, r21
    1598:	24 e6       	ldi	r18, 0x64	; 100
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	b9 01       	movw	r22, r18
    159e:	0e 94 be 19 	call	0x337c	; 0x337c <__divmodhi4>
    15a2:	cb 01       	movw	r24, r22
    15a4:	82 87       	std	Z+10, r24	; 0x0a
    15a6:	21 c0       	rjmp	.+66     	; 0x15ea <Timer0_setFastPWM+0xb8>
			}
			else if(TIMER0_FAST_PWM_SET_OC0_ON_COMPARE_MATCH == timer0_obj->ctc_mode_cfg)
    15a8:	ea 81       	ldd	r30, Y+2	; 0x02
    15aa:	fb 81       	ldd	r31, Y+3	; 0x03
    15ac:	84 81       	ldd	r24, Z+4	; 0x04
    15ae:	80 76       	andi	r24, 0x60	; 96
    15b0:	80 36       	cpi	r24, 0x60	; 96
    15b2:	d9 f4       	brne	.+54     	; 0x15ea <Timer0_setFastPWM+0xb8>
			{
				//TIMER0_CONTROL->TCNT0_CFG =
				TIMER0_CONTROL->OCR0_CFG = 255 - ((duty * 255) / 100);
    15b4:	e2 e5       	ldi	r30, 0x52	; 82
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ba:	48 2f       	mov	r20, r24
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	ca 01       	movw	r24, r20
    15c0:	9c 01       	movw	r18, r24
    15c2:	22 0f       	add	r18, r18
    15c4:	33 1f       	adc	r19, r19
    15c6:	c9 01       	movw	r24, r18
    15c8:	96 95       	lsr	r25
    15ca:	98 2f       	mov	r25, r24
    15cc:	88 27       	eor	r24, r24
    15ce:	97 95       	ror	r25
    15d0:	87 95       	ror	r24
    15d2:	82 1b       	sub	r24, r18
    15d4:	93 0b       	sbc	r25, r19
    15d6:	84 0f       	add	r24, r20
    15d8:	95 1f       	adc	r25, r21
    15da:	24 e6       	ldi	r18, 0x64	; 100
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	b9 01       	movw	r22, r18
    15e0:	0e 94 be 19 	call	0x337c	; 0x337c <__divmodhi4>
    15e4:	cb 01       	movw	r24, r22
    15e6:	80 95       	com	r24
    15e8:	82 87       	std	Z+10, r24	; 0x0a
			}
			else{/* Nothing */}
		}
		else{/* Nothing */}
	}
	return ret_status;
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	cf 91       	pop	r28
    15f8:	df 91       	pop	r29
    15fa:	08 95       	ret

000015fc <Timer0_setphaseCorrectPWM>:


Error_Status_t Timer0_setphaseCorrectPWM(const timer0_t *timer0_obj, u8 frequency , u8 duty)
{
    15fc:	df 93       	push	r29
    15fe:	cf 93       	push	r28
    1600:	00 d0       	rcall	.+0      	; 0x1602 <Timer0_setphaseCorrectPWM+0x6>
    1602:	00 d0       	rcall	.+0      	; 0x1604 <Timer0_setphaseCorrectPWM+0x8>
    1604:	0f 92       	push	r0
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	9b 83       	std	Y+3, r25	; 0x03
    160c:	8a 83       	std	Y+2, r24	; 0x02
    160e:	6c 83       	std	Y+4, r22	; 0x04
    1610:	4d 83       	std	Y+5, r20	; 0x05
	Error_Status_t ret_status = NO_ERROR;
    1612:	19 82       	std	Y+1, r1	; 0x01
		if(NULL == timer0_obj)
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	9b 81       	ldd	r25, Y+3	; 0x03
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	19 f4       	brne	.+6      	; 0x1622 <Timer0_setphaseCorrectPWM+0x26>
		{
			ret_status = NULL_POINTER;
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	89 83       	std	Y+1, r24	; 0x01
    1620:	48 c0       	rjmp	.+144    	; 0x16b2 <Timer0_setphaseCorrectPWM+0xb6>
		}
		else
		{
			if(TIMER0_PWM_PHASE_CORRECT_MODE == timer0_obj->mode)
    1622:	ea 81       	ldd	r30, Y+2	; 0x02
    1624:	fb 81       	ldd	r31, Y+3	; 0x03
    1626:	84 81       	ldd	r24, Z+4	; 0x04
    1628:	88 71       	andi	r24, 0x18	; 24
    162a:	88 30       	cpi	r24, 0x08	; 8
    162c:	09 f0       	breq	.+2      	; 0x1630 <Timer0_setphaseCorrectPWM+0x34>
    162e:	41 c0       	rjmp	.+130    	; 0x16b2 <Timer0_setphaseCorrectPWM+0xb6>
			{
				if(TIMER0_PHASE_CORRECT_PWM_CLEAR_OC0_ON_COMPARE_MATCH == timer0_obj->ctc_mode_cfg)
    1630:	ea 81       	ldd	r30, Y+2	; 0x02
    1632:	fb 81       	ldd	r31, Y+3	; 0x03
    1634:	84 81       	ldd	r24, Z+4	; 0x04
    1636:	80 76       	andi	r24, 0x60	; 96
    1638:	80 34       	cpi	r24, 0x40	; 64
    163a:	c9 f4       	brne	.+50     	; 0x166e <Timer0_setphaseCorrectPWM+0x72>
				{
					TIMER0_CONTROL->OCR0_CFG = (u8)(((u8)(duty * 255) / 100) / 2);
    163c:	e2 e5       	ldi	r30, 0x52	; 82
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	8d 81       	ldd	r24, Y+5	; 0x05
    1642:	48 2f       	mov	r20, r24
    1644:	50 e0       	ldi	r21, 0x00	; 0
    1646:	ca 01       	movw	r24, r20
    1648:	9c 01       	movw	r18, r24
    164a:	22 0f       	add	r18, r18
    164c:	33 1f       	adc	r19, r19
    164e:	c9 01       	movw	r24, r18
    1650:	96 95       	lsr	r25
    1652:	98 2f       	mov	r25, r24
    1654:	88 27       	eor	r24, r24
    1656:	97 95       	ror	r25
    1658:	87 95       	ror	r24
    165a:	82 1b       	sub	r24, r18
    165c:	93 0b       	sbc	r25, r19
    165e:	84 0f       	add	r24, r20
    1660:	95 1f       	adc	r25, r21
    1662:	98 ec       	ldi	r25, 0xC8	; 200
    1664:	69 2f       	mov	r22, r25
    1666:	0e 94 b2 19 	call	0x3364	; 0x3364 <__udivmodqi4>
    166a:	82 87       	std	Z+10, r24	; 0x0a
    166c:	22 c0       	rjmp	.+68     	; 0x16b2 <Timer0_setphaseCorrectPWM+0xb6>
				}
				else if(TIMER0_PHASE_CORRECT_PWM_SET_OC0_ON_COMPARE_MATCH == timer0_obj->ctc_mode_cfg)
    166e:	ea 81       	ldd	r30, Y+2	; 0x02
    1670:	fb 81       	ldd	r31, Y+3	; 0x03
    1672:	84 81       	ldd	r24, Z+4	; 0x04
    1674:	80 76       	andi	r24, 0x60	; 96
    1676:	80 36       	cpi	r24, 0x60	; 96
    1678:	e1 f4       	brne	.+56     	; 0x16b2 <Timer0_setphaseCorrectPWM+0xb6>
				{
					TIMER0_CONTROL->OCR0_CFG = (u8)(255 - ((u8)((duty * 255) / 100) / 2));
    167a:	e2 e5       	ldi	r30, 0x52	; 82
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	8d 81       	ldd	r24, Y+5	; 0x05
    1680:	48 2f       	mov	r20, r24
    1682:	50 e0       	ldi	r21, 0x00	; 0
    1684:	ca 01       	movw	r24, r20
    1686:	9c 01       	movw	r18, r24
    1688:	22 0f       	add	r18, r18
    168a:	33 1f       	adc	r19, r19
    168c:	c9 01       	movw	r24, r18
    168e:	96 95       	lsr	r25
    1690:	98 2f       	mov	r25, r24
    1692:	88 27       	eor	r24, r24
    1694:	97 95       	ror	r25
    1696:	87 95       	ror	r24
    1698:	82 1b       	sub	r24, r18
    169a:	93 0b       	sbc	r25, r19
    169c:	84 0f       	add	r24, r20
    169e:	95 1f       	adc	r25, r21
    16a0:	24 e6       	ldi	r18, 0x64	; 100
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	b9 01       	movw	r22, r18
    16a6:	0e 94 be 19 	call	0x337c	; 0x337c <__divmodhi4>
    16aa:	cb 01       	movw	r24, r22
    16ac:	86 95       	lsr	r24
    16ae:	80 95       	com	r24
    16b0:	82 87       	std	Z+10, r24	; 0x0a
				}
				else{/* Nothing */}
			}
			else{/* Nothing */}
		}
		return ret_status;
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	cf 91       	pop	r28
    16c0:	df 91       	pop	r29
    16c2:	08 95       	ret

000016c4 <__vector_11>:
/* ------------------------------------------------ Timer0 ISRs -------------------------------*/

// Define the ISR function with attribute
void TIMER0_OVF_VECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER0_OVF_VECTOR(void)
{
    16c4:	1f 92       	push	r1
    16c6:	0f 92       	push	r0
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	0f 92       	push	r0
    16cc:	11 24       	eor	r1, r1
    16ce:	2f 93       	push	r18
    16d0:	3f 93       	push	r19
    16d2:	4f 93       	push	r20
    16d4:	5f 93       	push	r21
    16d6:	6f 93       	push	r22
    16d8:	7f 93       	push	r23
    16da:	8f 93       	push	r24
    16dc:	9f 93       	push	r25
    16de:	af 93       	push	r26
    16e0:	bf 93       	push	r27
    16e2:	ef 93       	push	r30
    16e4:	ff 93       	push	r31
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	TIMER0_CONTROL->TIFR_CFG.TOF0_BIT = 0;
    16ee:	e2 e5       	ldi	r30, 0x52	; 82
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	86 81       	ldd	r24, Z+6	; 0x06
    16f4:	8e 7f       	andi	r24, 0xFE	; 254
    16f6:	86 83       	std	Z+6, r24	; 0x06

	// execute ISR if it existed
	if(Timer0_Over_Flow_isr)
    16f8:	80 91 b2 00 	lds	r24, 0x00B2
    16fc:	90 91 b3 00 	lds	r25, 0x00B3
    1700:	00 97       	sbiw	r24, 0x00	; 0
    1702:	29 f0       	breq	.+10     	; 0x170e <__vector_11+0x4a>
	{
		Timer0_Over_Flow_isr();
    1704:	e0 91 b2 00 	lds	r30, 0x00B2
    1708:	f0 91 b3 00 	lds	r31, 0x00B3
    170c:	09 95       	icall
	}
}
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	ff 91       	pop	r31
    1714:	ef 91       	pop	r30
    1716:	bf 91       	pop	r27
    1718:	af 91       	pop	r26
    171a:	9f 91       	pop	r25
    171c:	8f 91       	pop	r24
    171e:	7f 91       	pop	r23
    1720:	6f 91       	pop	r22
    1722:	5f 91       	pop	r21
    1724:	4f 91       	pop	r20
    1726:	3f 91       	pop	r19
    1728:	2f 91       	pop	r18
    172a:	0f 90       	pop	r0
    172c:	0f be       	out	0x3f, r0	; 63
    172e:	0f 90       	pop	r0
    1730:	1f 90       	pop	r1
    1732:	18 95       	reti

00001734 <__vector_10>:


// Define the ISR function with attribute
void TIMER0_COMPA_VECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER0_COMPA_VECTOR(void)
{
    1734:	1f 92       	push	r1
    1736:	0f 92       	push	r0
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	0f 92       	push	r0
    173c:	11 24       	eor	r1, r1
    173e:	2f 93       	push	r18
    1740:	3f 93       	push	r19
    1742:	4f 93       	push	r20
    1744:	5f 93       	push	r21
    1746:	6f 93       	push	r22
    1748:	7f 93       	push	r23
    174a:	8f 93       	push	r24
    174c:	9f 93       	push	r25
    174e:	af 93       	push	r26
    1750:	bf 93       	push	r27
    1752:	ef 93       	push	r30
    1754:	ff 93       	push	r31
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
	// clear flag
	TIMER0_CONTROL->TIFR_CFG.OCF0_BIT = 0;
    175e:	e2 e5       	ldi	r30, 0x52	; 82
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	86 81       	ldd	r24, Z+6	; 0x06
    1764:	8d 7f       	andi	r24, 0xFD	; 253
    1766:	86 83       	std	Z+6, r24	; 0x06

	// execute ISR if it existed
	if(Timer0_Comp_isr)
    1768:	80 91 b4 00 	lds	r24, 0x00B4
    176c:	90 91 b5 00 	lds	r25, 0x00B5
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	29 f0       	breq	.+10     	; 0x177e <__vector_10+0x4a>
	{
			Timer0_Comp_isr();
    1774:	e0 91 b4 00 	lds	r30, 0x00B4
    1778:	f0 91 b5 00 	lds	r31, 0x00B5
    177c:	09 95       	icall
	}
}
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	ff 91       	pop	r31
    1784:	ef 91       	pop	r30
    1786:	bf 91       	pop	r27
    1788:	af 91       	pop	r26
    178a:	9f 91       	pop	r25
    178c:	8f 91       	pop	r24
    178e:	7f 91       	pop	r23
    1790:	6f 91       	pop	r22
    1792:	5f 91       	pop	r21
    1794:	4f 91       	pop	r20
    1796:	3f 91       	pop	r19
    1798:	2f 91       	pop	r18
    179a:	0f 90       	pop	r0
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	0f 90       	pop	r0
    17a0:	1f 90       	pop	r1
    17a2:	18 95       	reti

000017a4 <M_EXTI_voidEnable>:
void (*INT0_ISR)(void) = NULL;
void (*INT1_ISR)(void) = NULL;
void (*INT2_ISR)(void) = NULL;

Error_Status_t M_EXTI_voidEnable(const EXT_INTERRUPT_T *exti_obj)
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <M_EXTI_voidEnable+0x6>
    17aa:	00 d0       	rcall	.+0      	; 0x17ac <M_EXTI_voidEnable+0x8>
    17ac:	0f 92       	push	r0
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    17b2:	9b 83       	std	Y+3, r25	; 0x03
    17b4:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    17b6:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == exti_obj)
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	9b 81       	ldd	r25, Y+3	; 0x03
    17bc:	00 97       	sbiw	r24, 0x00	; 0
    17be:	19 f4       	brne	.+6      	; 0x17c6 <M_EXTI_voidEnable+0x22>
	{
		ret_status = NULL_POINTER;
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	89 83       	std	Y+1, r24	; 0x01
    17c4:	69 c0       	rjmp	.+210    	; 0x1898 <M_EXTI_voidEnable+0xf4>
	}
	else
	{
		GIE_Enable();
    17c6:	ef e5       	ldi	r30, 0x5F	; 95
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	80 68       	ori	r24, 0x80	; 128
    17ce:	80 83       	st	Z, r24
		switch (exti_obj->INTx_select) {
    17d0:	ea 81       	ldd	r30, Y+2	; 0x02
    17d2:	fb 81       	ldd	r31, Y+3	; 0x03
    17d4:	82 81       	ldd	r24, Z+2	; 0x02
    17d6:	83 70       	andi	r24, 0x03	; 3
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	3d 83       	std	Y+5, r19	; 0x05
    17de:	2c 83       	std	Y+4, r18	; 0x04
    17e0:	8c 81       	ldd	r24, Y+4	; 0x04
    17e2:	9d 81       	ldd	r25, Y+5	; 0x05
    17e4:	81 30       	cpi	r24, 0x01	; 1
    17e6:	91 05       	cpc	r25, r1
    17e8:	11 f1       	breq	.+68     	; 0x182e <M_EXTI_voidEnable+0x8a>
    17ea:	2c 81       	ldd	r18, Y+4	; 0x04
    17ec:	3d 81       	ldd	r19, Y+5	; 0x05
    17ee:	22 30       	cpi	r18, 0x02	; 2
    17f0:	31 05       	cpc	r19, r1
    17f2:	b9 f1       	breq	.+110    	; 0x1862 <M_EXTI_voidEnable+0xbe>
    17f4:	8c 81       	ldd	r24, Y+4	; 0x04
    17f6:	9d 81       	ldd	r25, Y+5	; 0x05
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	09 f0       	breq	.+2      	; 0x17fe <M_EXTI_voidEnable+0x5a>
    17fc:	4b c0       	rjmp	.+150    	; 0x1894 <M_EXTI_voidEnable+0xf0>
			case EXTI_INT0_ID:
				EXT_INT_CONTROL->GICR_CFG.INT0_BIT = EXTI0_ENABLE;
    17fe:	e4 e5       	ldi	r30, 0x54	; 84
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	87 81       	ldd	r24, Z+7	; 0x07
    1804:	80 64       	ori	r24, 0x40	; 64
    1806:	87 83       	std	Z+7, r24	; 0x07
				EXT_INT_CONTROL->MCUCR_CFG.ISC0_BITS = exti_obj->INTx_sense;
    1808:	a4 e5       	ldi	r26, 0x54	; 84
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	ea 81       	ldd	r30, Y+2	; 0x02
    180e:	fb 81       	ldd	r31, Y+3	; 0x03
    1810:	82 81       	ldd	r24, Z+2	; 0x02
    1812:	86 95       	lsr	r24
    1814:	86 95       	lsr	r24
    1816:	83 70       	andi	r24, 0x03	; 3
    1818:	98 2f       	mov	r25, r24
    181a:	93 70       	andi	r25, 0x03	; 3
    181c:	11 96       	adiw	r26, 0x01	; 1
    181e:	8c 91       	ld	r24, X
    1820:	11 97       	sbiw	r26, 0x01	; 1
    1822:	8c 7f       	andi	r24, 0xFC	; 252
    1824:	89 2b       	or	r24, r25
    1826:	11 96       	adiw	r26, 0x01	; 1
    1828:	8c 93       	st	X, r24
    182a:	11 97       	sbiw	r26, 0x01	; 1
    182c:	35 c0       	rjmp	.+106    	; 0x1898 <M_EXTI_voidEnable+0xf4>
				break;
			case EXTI_INT1_ID:
				EXT_INT_CONTROL->GICR_CFG.INT1_BIT = EXTI1_ENABLE;
    182e:	e4 e5       	ldi	r30, 0x54	; 84
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	87 81       	ldd	r24, Z+7	; 0x07
    1834:	80 68       	ori	r24, 0x80	; 128
    1836:	87 83       	std	Z+7, r24	; 0x07
				EXT_INT_CONTROL->MCUCR_CFG.ISC1_BITS = exti_obj->INTx_sense;
    1838:	a4 e5       	ldi	r26, 0x54	; 84
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	ea 81       	ldd	r30, Y+2	; 0x02
    183e:	fb 81       	ldd	r31, Y+3	; 0x03
    1840:	82 81       	ldd	r24, Z+2	; 0x02
    1842:	86 95       	lsr	r24
    1844:	86 95       	lsr	r24
    1846:	83 70       	andi	r24, 0x03	; 3
    1848:	83 70       	andi	r24, 0x03	; 3
    184a:	98 2f       	mov	r25, r24
    184c:	99 0f       	add	r25, r25
    184e:	99 0f       	add	r25, r25
    1850:	11 96       	adiw	r26, 0x01	; 1
    1852:	8c 91       	ld	r24, X
    1854:	11 97       	sbiw	r26, 0x01	; 1
    1856:	83 7f       	andi	r24, 0xF3	; 243
    1858:	89 2b       	or	r24, r25
    185a:	11 96       	adiw	r26, 0x01	; 1
    185c:	8c 93       	st	X, r24
    185e:	11 97       	sbiw	r26, 0x01	; 1
    1860:	1b c0       	rjmp	.+54     	; 0x1898 <M_EXTI_voidEnable+0xf4>
				break;
			case EXTI_INT2_ID:
				EXT_INT_CONTROL->GICR_CFG.INT2_BIT = EXTI2_ENABLE;
    1862:	e4 e5       	ldi	r30, 0x54	; 84
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	87 81       	ldd	r24, Z+7	; 0x07
    1868:	80 62       	ori	r24, 0x20	; 32
    186a:	87 83       	std	Z+7, r24	; 0x07
				EXT_INT_CONTROL->MCUCSR_CFG.ISC2_BIT = exti_obj->INTx_sense;
    186c:	a4 e5       	ldi	r26, 0x54	; 84
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	ea 81       	ldd	r30, Y+2	; 0x02
    1872:	fb 81       	ldd	r31, Y+3	; 0x03
    1874:	82 81       	ldd	r24, Z+2	; 0x02
    1876:	86 95       	lsr	r24
    1878:	86 95       	lsr	r24
    187a:	83 70       	andi	r24, 0x03	; 3
    187c:	81 70       	andi	r24, 0x01	; 1
    187e:	81 70       	andi	r24, 0x01	; 1
    1880:	98 2f       	mov	r25, r24
    1882:	92 95       	swap	r25
    1884:	99 0f       	add	r25, r25
    1886:	99 0f       	add	r25, r25
    1888:	90 7c       	andi	r25, 0xC0	; 192
    188a:	8c 91       	ld	r24, X
    188c:	8f 7b       	andi	r24, 0xBF	; 191
    188e:	89 2b       	or	r24, r25
    1890:	8c 93       	st	X, r24
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <M_EXTI_voidEnable+0xf4>
				break;
			default:
				ret_status = OUT_OF_RANGE_VALUE;
    1894:	82 e0       	ldi	r24, 0x02	; 2
    1896:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}
	return ret_status;
    1898:	89 81       	ldd	r24, Y+1	; 0x01
}
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	cf 91       	pop	r28
    18a6:	df 91       	pop	r29
    18a8:	08 95       	ret

000018aa <M_EXTI_voidDisable>:
Error_Status_t M_EXTI_voidDisable(const EXT_INTERRUPT_T *exti_obj)
{
    18aa:	df 93       	push	r29
    18ac:	cf 93       	push	r28
    18ae:	00 d0       	rcall	.+0      	; 0x18b0 <M_EXTI_voidDisable+0x6>
    18b0:	00 d0       	rcall	.+0      	; 0x18b2 <M_EXTI_voidDisable+0x8>
    18b2:	0f 92       	push	r0
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
    18b8:	9b 83       	std	Y+3, r25	; 0x03
    18ba:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    18bc:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == exti_obj)
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	9b 81       	ldd	r25, Y+3	; 0x03
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	19 f4       	brne	.+6      	; 0x18cc <M_EXTI_voidDisable+0x22>
	{
		ret_status = NULL_POINTER;
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	89 83       	std	Y+1, r24	; 0x01
    18ca:	2f c0       	rjmp	.+94     	; 0x192a <M_EXTI_voidDisable+0x80>
	}
	else
	{
		GIE_Disable();
    18cc:	ef e5       	ldi	r30, 0x5F	; 95
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	8f 77       	andi	r24, 0x7F	; 127
    18d4:	80 83       	st	Z, r24
		switch (exti_obj->INTx_select) {
    18d6:	ea 81       	ldd	r30, Y+2	; 0x02
    18d8:	fb 81       	ldd	r31, Y+3	; 0x03
    18da:	82 81       	ldd	r24, Z+2	; 0x02
    18dc:	83 70       	andi	r24, 0x03	; 3
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	3d 83       	std	Y+5, r19	; 0x05
    18e4:	2c 83       	std	Y+4, r18	; 0x04
    18e6:	8c 81       	ldd	r24, Y+4	; 0x04
    18e8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ea:	81 30       	cpi	r24, 0x01	; 1
    18ec:	91 05       	cpc	r25, r1
    18ee:	79 f0       	breq	.+30     	; 0x190e <M_EXTI_voidDisable+0x64>
    18f0:	2c 81       	ldd	r18, Y+4	; 0x04
    18f2:	3d 81       	ldd	r19, Y+5	; 0x05
    18f4:	22 30       	cpi	r18, 0x02	; 2
    18f6:	31 05       	cpc	r19, r1
    18f8:	81 f0       	breq	.+32     	; 0x191a <M_EXTI_voidDisable+0x70>
    18fa:	8c 81       	ldd	r24, Y+4	; 0x04
    18fc:	9d 81       	ldd	r25, Y+5	; 0x05
    18fe:	00 97       	sbiw	r24, 0x00	; 0
    1900:	91 f4       	brne	.+36     	; 0x1926 <M_EXTI_voidDisable+0x7c>
			case EXTI_INT0_ID:
				EXT_INT_CONTROL->GICR_CFG.INT0_BIT = EXTI0_DISABLE;
    1902:	e4 e5       	ldi	r30, 0x54	; 84
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	87 81       	ldd	r24, Z+7	; 0x07
    1908:	8f 7b       	andi	r24, 0xBF	; 191
    190a:	87 83       	std	Z+7, r24	; 0x07
    190c:	0e c0       	rjmp	.+28     	; 0x192a <M_EXTI_voidDisable+0x80>
				break;
			case EXTI_INT1_ID:
				EXT_INT_CONTROL->GICR_CFG.INT1_BIT = EXTI1_DISABLE;
    190e:	e4 e5       	ldi	r30, 0x54	; 84
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	87 81       	ldd	r24, Z+7	; 0x07
    1914:	8f 77       	andi	r24, 0x7F	; 127
    1916:	87 83       	std	Z+7, r24	; 0x07
    1918:	08 c0       	rjmp	.+16     	; 0x192a <M_EXTI_voidDisable+0x80>
				break;
			case EXTI_INT2_ID:
				EXT_INT_CONTROL->GICR_CFG.INT2_BIT = EXTI2_DISABLE;
    191a:	e4 e5       	ldi	r30, 0x54	; 84
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	87 81       	ldd	r24, Z+7	; 0x07
    1920:	8f 7d       	andi	r24, 0xDF	; 223
    1922:	87 83       	std	Z+7, r24	; 0x07
    1924:	02 c0       	rjmp	.+4      	; 0x192a <M_EXTI_voidDisable+0x80>
				break;
			default:
				ret_status = OUT_OF_RANGE_VALUE;
    1926:	82 e0       	ldi	r24, 0x02	; 2
    1928:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}
	return ret_status;
    192a:	89 81       	ldd	r24, Y+1	; 0x01
}
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <M_EXTI_voidSet_CallBack>:
Error_Status_t M_EXTI_voidSet_CallBack(const EXT_INTERRUPT_T *exti_obj)
{
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	00 d0       	rcall	.+0      	; 0x1942 <M_EXTI_voidSet_CallBack+0x6>
    1942:	00 d0       	rcall	.+0      	; 0x1944 <M_EXTI_voidSet_CallBack+0x8>
    1944:	0f 92       	push	r0
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    194a:	9b 83       	std	Y+3, r25	; 0x03
    194c:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    194e:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == exti_obj)
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	9b 81       	ldd	r25, Y+3	; 0x03
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	19 f4       	brne	.+6      	; 0x195e <M_EXTI_voidSet_CallBack+0x22>
	{
		ret_status = NULL_POINTER;
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	89 83       	std	Y+1, r24	; 0x01
    195c:	33 c0       	rjmp	.+102    	; 0x19c4 <M_EXTI_voidSet_CallBack+0x88>
	}
	else
	{
		switch (exti_obj->INTx_select) {
    195e:	ea 81       	ldd	r30, Y+2	; 0x02
    1960:	fb 81       	ldd	r31, Y+3	; 0x03
    1962:	82 81       	ldd	r24, Z+2	; 0x02
    1964:	83 70       	andi	r24, 0x03	; 3
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	3d 83       	std	Y+5, r19	; 0x05
    196c:	2c 83       	std	Y+4, r18	; 0x04
    196e:	8c 81       	ldd	r24, Y+4	; 0x04
    1970:	9d 81       	ldd	r25, Y+5	; 0x05
    1972:	81 30       	cpi	r24, 0x01	; 1
    1974:	91 05       	cpc	r25, r1
    1976:	91 f0       	breq	.+36     	; 0x199c <M_EXTI_voidSet_CallBack+0x60>
    1978:	2c 81       	ldd	r18, Y+4	; 0x04
    197a:	3d 81       	ldd	r19, Y+5	; 0x05
    197c:	22 30       	cpi	r18, 0x02	; 2
    197e:	31 05       	cpc	r19, r1
    1980:	b1 f0       	breq	.+44     	; 0x19ae <M_EXTI_voidSet_CallBack+0x72>
    1982:	8c 81       	ldd	r24, Y+4	; 0x04
    1984:	9d 81       	ldd	r25, Y+5	; 0x05
    1986:	00 97       	sbiw	r24, 0x00	; 0
    1988:	d9 f4       	brne	.+54     	; 0x19c0 <M_EXTI_voidSet_CallBack+0x84>
			case EXTI_INT0_ID:
				INT0_ISR = exti_obj->EXT_INT_ISR;
    198a:	ea 81       	ldd	r30, Y+2	; 0x02
    198c:	fb 81       	ldd	r31, Y+3	; 0x03
    198e:	80 81       	ld	r24, Z
    1990:	91 81       	ldd	r25, Z+1	; 0x01
    1992:	90 93 b7 00 	sts	0x00B7, r25
    1996:	80 93 b6 00 	sts	0x00B6, r24
    199a:	14 c0       	rjmp	.+40     	; 0x19c4 <M_EXTI_voidSet_CallBack+0x88>
				break;
			case EXTI_INT1_ID:
				INT1_ISR = exti_obj->EXT_INT_ISR;
    199c:	ea 81       	ldd	r30, Y+2	; 0x02
    199e:	fb 81       	ldd	r31, Y+3	; 0x03
    19a0:	80 81       	ld	r24, Z
    19a2:	91 81       	ldd	r25, Z+1	; 0x01
    19a4:	90 93 b9 00 	sts	0x00B9, r25
    19a8:	80 93 b8 00 	sts	0x00B8, r24
    19ac:	0b c0       	rjmp	.+22     	; 0x19c4 <M_EXTI_voidSet_CallBack+0x88>
				break;
			case EXTI_INT2_ID:
				INT2_ISR = exti_obj->EXT_INT_ISR;
    19ae:	ea 81       	ldd	r30, Y+2	; 0x02
    19b0:	fb 81       	ldd	r31, Y+3	; 0x03
    19b2:	80 81       	ld	r24, Z
    19b4:	91 81       	ldd	r25, Z+1	; 0x01
    19b6:	90 93 bb 00 	sts	0x00BB, r25
    19ba:	80 93 ba 00 	sts	0x00BA, r24
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <M_EXTI_voidSet_CallBack+0x88>
				break;
			default:
				ret_status = OUT_OF_RANGE_VALUE;
    19c0:	82 e0       	ldi	r24, 0x02	; 2
    19c2:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}
	return ret_status;
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	cf 91       	pop	r28
    19d2:	df 91       	pop	r29
    19d4:	08 95       	ret

000019d6 <__vector_1>:

/* ----------------------------------------- External Interrupt ISRs -------------------------- */
// Define the ISR function with attribute
void INT0_VECTOR(void) __attribute__((signal));
void INT0_VECTOR(void)
{
    19d6:	1f 92       	push	r1
    19d8:	0f 92       	push	r0
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	0f 92       	push	r0
    19de:	11 24       	eor	r1, r1
    19e0:	2f 93       	push	r18
    19e2:	3f 93       	push	r19
    19e4:	4f 93       	push	r20
    19e6:	5f 93       	push	r21
    19e8:	6f 93       	push	r22
    19ea:	7f 93       	push	r23
    19ec:	8f 93       	push	r24
    19ee:	9f 93       	push	r25
    19f0:	af 93       	push	r26
    19f2:	bf 93       	push	r27
    19f4:	ef 93       	push	r30
    19f6:	ff 93       	push	r31
    19f8:	df 93       	push	r29
    19fa:	cf 93       	push	r28
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	EXT_INT_CONTROL->GIFR_CFG.INTF0_BIT = 0;
    1a00:	e4 e5       	ldi	r30, 0x54	; 84
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	86 81       	ldd	r24, Z+6	; 0x06
    1a06:	8f 7b       	andi	r24, 0xBF	; 191
    1a08:	86 83       	std	Z+6, r24	; 0x06
	// execute ISR if it existed
	if(INT0_ISR)
    1a0a:	80 91 b6 00 	lds	r24, 0x00B6
    1a0e:	90 91 b7 00 	lds	r25, 0x00B7
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	29 f0       	breq	.+10     	; 0x1a20 <__vector_1+0x4a>
	{
		INT0_ISR();
    1a16:	e0 91 b6 00 	lds	r30, 0x00B6
    1a1a:	f0 91 b7 00 	lds	r31, 0x00B7
    1a1e:	09 95       	icall
	}
}
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	ff 91       	pop	r31
    1a26:	ef 91       	pop	r30
    1a28:	bf 91       	pop	r27
    1a2a:	af 91       	pop	r26
    1a2c:	9f 91       	pop	r25
    1a2e:	8f 91       	pop	r24
    1a30:	7f 91       	pop	r23
    1a32:	6f 91       	pop	r22
    1a34:	5f 91       	pop	r21
    1a36:	4f 91       	pop	r20
    1a38:	3f 91       	pop	r19
    1a3a:	2f 91       	pop	r18
    1a3c:	0f 90       	pop	r0
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	0f 90       	pop	r0
    1a42:	1f 90       	pop	r1
    1a44:	18 95       	reti

00001a46 <__vector_2>:


// Define the ISR function with attribute
void INT1_VECTOR(void) __attribute__((signal));
void INT1_VECTOR(void)
{
    1a46:	1f 92       	push	r1
    1a48:	0f 92       	push	r0
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	0f 92       	push	r0
    1a4e:	11 24       	eor	r1, r1
    1a50:	2f 93       	push	r18
    1a52:	3f 93       	push	r19
    1a54:	4f 93       	push	r20
    1a56:	5f 93       	push	r21
    1a58:	6f 93       	push	r22
    1a5a:	7f 93       	push	r23
    1a5c:	8f 93       	push	r24
    1a5e:	9f 93       	push	r25
    1a60:	af 93       	push	r26
    1a62:	bf 93       	push	r27
    1a64:	ef 93       	push	r30
    1a66:	ff 93       	push	r31
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
	// clear flag
	EXT_INT_CONTROL->GIFR_CFG.INTF1_BIT = 0;
    1a70:	e4 e5       	ldi	r30, 0x54	; 84
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	86 81       	ldd	r24, Z+6	; 0x06
    1a76:	8f 77       	andi	r24, 0x7F	; 127
    1a78:	86 83       	std	Z+6, r24	; 0x06
	// execute ISR if it existed
	if(INT1_ISR)
    1a7a:	80 91 b8 00 	lds	r24, 0x00B8
    1a7e:	90 91 b9 00 	lds	r25, 0x00B9
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	29 f0       	breq	.+10     	; 0x1a90 <__vector_2+0x4a>
	{
		INT1_ISR();
    1a86:	e0 91 b8 00 	lds	r30, 0x00B8
    1a8a:	f0 91 b9 00 	lds	r31, 0x00B9
    1a8e:	09 95       	icall
	}
}
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	ff 91       	pop	r31
    1a96:	ef 91       	pop	r30
    1a98:	bf 91       	pop	r27
    1a9a:	af 91       	pop	r26
    1a9c:	9f 91       	pop	r25
    1a9e:	8f 91       	pop	r24
    1aa0:	7f 91       	pop	r23
    1aa2:	6f 91       	pop	r22
    1aa4:	5f 91       	pop	r21
    1aa6:	4f 91       	pop	r20
    1aa8:	3f 91       	pop	r19
    1aaa:	2f 91       	pop	r18
    1aac:	0f 90       	pop	r0
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	0f 90       	pop	r0
    1ab2:	1f 90       	pop	r1
    1ab4:	18 95       	reti

00001ab6 <__vector_3>:


// Define the ISR function with attribute
void INT2_VECTOR(void) __attribute__((signal));
void INT2_VECTOR(void)
{
    1ab6:	1f 92       	push	r1
    1ab8:	0f 92       	push	r0
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	0f 92       	push	r0
    1abe:	11 24       	eor	r1, r1
    1ac0:	2f 93       	push	r18
    1ac2:	3f 93       	push	r19
    1ac4:	4f 93       	push	r20
    1ac6:	5f 93       	push	r21
    1ac8:	6f 93       	push	r22
    1aca:	7f 93       	push	r23
    1acc:	8f 93       	push	r24
    1ace:	9f 93       	push	r25
    1ad0:	af 93       	push	r26
    1ad2:	bf 93       	push	r27
    1ad4:	ef 93       	push	r30
    1ad6:	ff 93       	push	r31
    1ad8:	df 93       	push	r29
    1ada:	cf 93       	push	r28
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
	// clear flag
	EXT_INT_CONTROL->GIFR_CFG.INTF2_BIT = 1;
    1ae0:	e4 e5       	ldi	r30, 0x54	; 84
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	86 81       	ldd	r24, Z+6	; 0x06
    1ae6:	80 62       	ori	r24, 0x20	; 32
    1ae8:	86 83       	std	Z+6, r24	; 0x06
	// execute ISR if it existed
	if(INT2_ISR)
    1aea:	80 91 ba 00 	lds	r24, 0x00BA
    1aee:	90 91 bb 00 	lds	r25, 0x00BB
    1af2:	00 97       	sbiw	r24, 0x00	; 0
    1af4:	29 f0       	breq	.+10     	; 0x1b00 <__vector_3+0x4a>
	{
		INT2_ISR();
    1af6:	e0 91 ba 00 	lds	r30, 0x00BA
    1afa:	f0 91 bb 00 	lds	r31, 0x00BB
    1afe:	09 95       	icall
	}
}
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	ff 91       	pop	r31
    1b06:	ef 91       	pop	r30
    1b08:	bf 91       	pop	r27
    1b0a:	af 91       	pop	r26
    1b0c:	9f 91       	pop	r25
    1b0e:	8f 91       	pop	r24
    1b10:	7f 91       	pop	r23
    1b12:	6f 91       	pop	r22
    1b14:	5f 91       	pop	r21
    1b16:	4f 91       	pop	r20
    1b18:	3f 91       	pop	r19
    1b1a:	2f 91       	pop	r18
    1b1c:	0f 90       	pop	r0
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	0f 90       	pop	r0
    1b22:	1f 90       	pop	r1
    1b24:	18 95       	reti

00001b26 <UART_Init>:

#include "UART.h"


Error_Status_t UART_Init(void)
{
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	00 d0       	rcall	.+0      	; 0x1b2c <UART_Init+0x6>
    1b2c:	00 d0       	rcall	.+0      	; 0x1b2e <UART_Init+0x8>
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
    1b32:	1c 82       	std	Y+4, r1	; 0x04

	u8 baud = 51;
    1b34:	83 e3       	ldi	r24, 0x33	; 51
    1b36:	8b 83       	std	Y+3, r24	; 0x03

	// set baud rate
	UART_CONTROL->UBRRH_UCSRC_CFG = (u8)(baud >> 8);
    1b38:	e9 e2       	ldi	r30, 0x29	; 41
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3e:	88 2f       	mov	r24, r24
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	89 2f       	mov	r24, r25
    1b44:	99 0f       	add	r25, r25
    1b46:	99 0b       	sbc	r25, r25
    1b48:	87 8b       	std	Z+23, r24	; 0x17
	UART_CONTROL->UBRRL_CFG = (u8)(baud);
    1b4a:	e9 e2       	ldi	r30, 0x29	; 41
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	80 83       	st	Z, r24

	// Enable transmtter and receiver
	u8 rx_tx = (0x01<<4) | (0x01<<3);
    1b52:	88 e1       	ldi	r24, 0x18	; 24
    1b54:	8a 83       	std	Y+2, r24	; 0x02
	UART_CONTROL->UCSRB_CFG = rx_tx;
    1b56:	e9 e2       	ldi	r30, 0x29	; 41
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	81 83       	std	Z+1, r24	; 0x01

	// set frame format
	u8 frame_form = (0x01<<7) | (0x01<<3) | (0x03<<1);
    1b5e:	8e e8       	ldi	r24, 0x8E	; 142
    1b60:	89 83       	std	Y+1, r24	; 0x01
	UART_CONTROL->UBRRH_UCSRC_CFG = frame_form;
    1b62:	e9 e2       	ldi	r30, 0x29	; 41
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	87 8b       	std	Z+23, r24	; 0x17

	return ret_status;
    1b6a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
    1b74:	cf 91       	pop	r28
    1b76:	df 91       	pop	r29
    1b78:	08 95       	ret

00001b7a <UART_SendByte>:


Error_Status_t UART_SendByte(u8 ch)
{
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <UART_SendByte+0x6>
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
    1b84:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1b86:	19 82       	std	Y+1, r1	; 0x01
	while(!(UART_CONTROL->UCSRA_CFG & (0x01 << 5)));
    1b88:	e9 e2       	ldi	r30, 0x29	; 41
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	82 81       	ldd	r24, Z+2	; 0x02
    1b8e:	88 2f       	mov	r24, r24
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	80 72       	andi	r24, 0x20	; 32
    1b94:	90 70       	andi	r25, 0x00	; 0
    1b96:	00 97       	sbiw	r24, 0x00	; 0
    1b98:	b9 f3       	breq	.-18     	; 0x1b88 <UART_SendByte+0xe>
	UART_CONTROL->UDR_CFG = ch;
    1b9a:	e9 e2       	ldi	r30, 0x29	; 41
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	83 83       	std	Z+3, r24	; 0x03
	return ret_status;
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	08 95       	ret

00001bae <UART_ReceiveByte>:
Error_Status_t UART_ReceiveByte(u8 *RecByte)
{
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	00 d0       	rcall	.+0      	; 0x1bb4 <UART_ReceiveByte+0x6>
    1bb4:	0f 92       	push	r0
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	9b 83       	std	Y+3, r25	; 0x03
    1bbc:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1bbe:	19 82       	std	Y+1, r1	; 0x01
	while(!(UART_CONTROL->UCSRA_CFG & (0x01 << 7)));
    1bc0:	e9 e2       	ldi	r30, 0x29	; 41
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	82 81       	ldd	r24, Z+2	; 0x02
    1bc6:	88 23       	and	r24, r24
    1bc8:	dc f7       	brge	.-10     	; 0x1bc0 <UART_ReceiveByte+0x12>
	*RecByte = UART_CONTROL->UDR_CFG;
    1bca:	e9 e2       	ldi	r30, 0x29	; 41
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	83 81       	ldd	r24, Z+3	; 0x03
    1bd0:	ea 81       	ldd	r30, Y+2	; 0x02
    1bd2:	fb 81       	ldd	r31, Y+3	; 0x03
    1bd4:	80 83       	st	Z, r24
	return ret_status;
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <UART_SendString>:
Error_Status_t UART_SendString(u8 *Str)
{
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <UART_SendString+0x6>
    1bea:	0f 92       	push	r0
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	9b 83       	std	Y+3, r25	; 0x03
    1bf2:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1bf4:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Str)
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bfa:	00 97       	sbiw	r24, 0x00	; 0
    1bfc:	71 f4       	brne	.+28     	; 0x1c1a <UART_SendString+0x36>
	{
		ret_status = NULL_POINTER;
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	89 83       	std	Y+1, r24	; 0x01
    1c02:	10 c0       	rjmp	.+32     	; 0x1c24 <UART_SendString+0x40>
	}
	else
	{
		while(*Str)
		{
			ret_status = UART_SendByte(*Str);
    1c04:	ea 81       	ldd	r30, Y+2	; 0x02
    1c06:	fb 81       	ldd	r31, Y+3	; 0x03
    1c08:	80 81       	ld	r24, Z
    1c0a:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <UART_SendByte>
    1c0e:	89 83       	std	Y+1, r24	; 0x01
			Str++;
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	9b 81       	ldd	r25, Y+3	; 0x03
    1c14:	01 96       	adiw	r24, 0x01	; 1
    1c16:	9b 83       	std	Y+3, r25	; 0x03
    1c18:	8a 83       	std	Y+2, r24	; 0x02
	{
		ret_status = NULL_POINTER;
	}
	else
	{
		while(*Str)
    1c1a:	ea 81       	ldd	r30, Y+2	; 0x02
    1c1c:	fb 81       	ldd	r31, Y+3	; 0x03
    1c1e:	80 81       	ld	r24, Z
    1c20:	88 23       	and	r24, r24
    1c22:	81 f7       	brne	.-32     	; 0x1c04 <UART_SendString+0x20>
		{
			ret_status = UART_SendByte(*Str);
			Str++;
		}
	}
	return ret_status;
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c26:	0f 90       	pop	r0
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	cf 91       	pop	r28
    1c2e:	df 91       	pop	r29
    1c30:	08 95       	ret

00001c32 <SPI_Init>:

// SPI callback
void (*spi_callbackfun)() = NULL;

Error_Status_t SPI_Init(const SPI_T *spi_obj)
{
    1c32:	df 93       	push	r29
    1c34:	cf 93       	push	r28
    1c36:	00 d0       	rcall	.+0      	; 0x1c38 <SPI_Init+0x6>
    1c38:	0f 92       	push	r0
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	9b 83       	std	Y+3, r25	; 0x03
    1c40:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1c42:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == spi_obj)
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	9b 81       	ldd	r25, Y+3	; 0x03
    1c48:	00 97       	sbiw	r24, 0x00	; 0
    1c4a:	19 f4       	brne	.+6      	; 0x1c52 <SPI_Init+0x20>
	{
		ret_status = NULL_POINTER;
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	89 83       	std	Y+1, r24	; 0x01
    1c50:	22 c0       	rjmp	.+68     	; 0x1c96 <SPI_Init+0x64>
	}
	else
	{
		if(MASTER_CONFIG == spi_obj->MasterSlaveSelect)
    1c52:	ea 81       	ldd	r30, Y+2	; 0x02
    1c54:	fb 81       	ldd	r31, Y+3	; 0x03
    1c56:	82 81       	ldd	r24, Z+2	; 0x02
    1c58:	88 23       	and	r24, r24
    1c5a:	79 f4       	brne	.+30     	; 0x1c7a <SPI_Init+0x48>
		{
			DIO_voidSetPinDirection(PORTB_INDEX, PIN5_INDEX, GPIO_DIRECTION_OUTPUT);
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	65 e0       	ldi	r22, 0x05	; 5
    1c60:	41 e0       	ldi	r20, 0x01	; 1
    1c62:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DIO_voidSetPinDirection>
			DIO_voidSetPinDirection(PORTB_INDEX, PIN7_INDEX, GPIO_DIRECTION_OUTPUT);
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	67 e0       	ldi	r22, 0x07	; 7
    1c6a:	41 e0       	ldi	r20, 0x01	; 1
    1c6c:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DIO_voidSetPinDirection>
			SPI_MAP->SPCR_CFG = (0x01 << 6) | (0x01 << 4) | (0x01 << 0);
    1c70:	ed e2       	ldi	r30, 0x2D	; 45
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	81 e5       	ldi	r24, 0x51	; 81
    1c76:	80 83       	st	Z, r24
    1c78:	0e c0       	rjmp	.+28     	; 0x1c96 <SPI_Init+0x64>
		}
		else if(SLAVE_CONFIG == spi_obj->MasterSlaveSelect)
    1c7a:	ea 81       	ldd	r30, Y+2	; 0x02
    1c7c:	fb 81       	ldd	r31, Y+3	; 0x03
    1c7e:	82 81       	ldd	r24, Z+2	; 0x02
    1c80:	81 30       	cpi	r24, 0x01	; 1
    1c82:	49 f4       	brne	.+18     	; 0x1c96 <SPI_Init+0x64>
		{
			DIO_voidSetPinDirection(PORTB_INDEX, PIN6_INDEX, GPIO_DIRECTION_OUTPUT);
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	66 e0       	ldi	r22, 0x06	; 6
    1c88:	41 e0       	ldi	r20, 0x01	; 1
    1c8a:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DIO_voidSetPinDirection>
			SPI_MAP->SPCR_CFG = (0x01 <<6);
    1c8e:	ed e2       	ldi	r30, 0x2D	; 45
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 e4       	ldi	r24, 0x40	; 64
    1c94:	80 83       	st	Z, r24
		}
	}
	return ret_status;
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	cf 91       	pop	r28
    1ca0:	df 91       	pop	r29
    1ca2:	08 95       	ret

00001ca4 <SPI_Transfere>:
Error_Status_t SPI_Transfere(u8 Copy_u8Ch, u8 *pch)
{
    1ca4:	df 93       	push	r29
    1ca6:	cf 93       	push	r28
    1ca8:	00 d0       	rcall	.+0      	; 0x1caa <SPI_Transfere+0x6>
    1caa:	00 d0       	rcall	.+0      	; 0x1cac <SPI_Transfere+0x8>
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	8a 83       	std	Y+2, r24	; 0x02
    1cb2:	7c 83       	std	Y+4, r23	; 0x04
    1cb4:	6b 83       	std	Y+3, r22	; 0x03
	Error_Status_t ret_status = NO_ERROR;
    1cb6:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == pch)
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbc:	00 97       	sbiw	r24, 0x00	; 0
    1cbe:	19 f4       	brne	.+6      	; 0x1cc6 <SPI_Transfere+0x22>
	{
		ret_status = NULL_POINTER;
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	89 83       	std	Y+1, r24	; 0x01
    1cc4:	0f c0       	rjmp	.+30     	; 0x1ce4 <SPI_Transfere+0x40>
	}
	else
	{
		SPI_MAP->SPDR_CFG = Copy_u8Ch;
    1cc6:	ed e2       	ldi	r30, 0x2D	; 45
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	82 83       	std	Z+2, r24	; 0x02
		while(!(SPI_MAP->SPSR_CFG & (0x01<<7)));
    1cce:	ed e2       	ldi	r30, 0x2D	; 45
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	81 81       	ldd	r24, Z+1	; 0x01
    1cd4:	88 23       	and	r24, r24
    1cd6:	dc f7       	brge	.-10     	; 0x1cce <SPI_Transfere+0x2a>
		*pch = SPI_MAP->SPDR_CFG;
    1cd8:	ed e2       	ldi	r30, 0x2D	; 45
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	82 81       	ldd	r24, Z+2	; 0x02
    1cde:	eb 81       	ldd	r30, Y+3	; 0x03
    1ce0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ce2:	80 83       	st	Z, r24
	}
	return ret_status;
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ce6:	0f 90       	pop	r0
    1ce8:	0f 90       	pop	r0
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	cf 91       	pop	r28
    1cf0:	df 91       	pop	r29
    1cf2:	08 95       	ret

00001cf4 <SPI_AsynchCallBack>:

Error_Status_t SPI_AsynchCallBack(void (*spi_callback)(void), u8 ch)
{
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	00 d0       	rcall	.+0      	; 0x1cfa <SPI_AsynchCallBack+0x6>
    1cfa:	00 d0       	rcall	.+0      	; 0x1cfc <SPI_AsynchCallBack+0x8>
    1cfc:	cd b7       	in	r28, 0x3d	; 61
    1cfe:	de b7       	in	r29, 0x3e	; 62
    1d00:	9b 83       	std	Y+3, r25	; 0x03
    1d02:	8a 83       	std	Y+2, r24	; 0x02
    1d04:	6c 83       	std	Y+4, r22	; 0x04
	Error_Status_t ret_status = NO_ERROR;
    1d06:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == spi_callback)
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	19 f4       	brne	.+6      	; 0x1d16 <SPI_AsynchCallBack+0x22>
	{
		ret_status = NULL_POINTER;
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	89 83       	std	Y+1, r24	; 0x01
    1d14:	16 c0       	rjmp	.+44     	; 0x1d42 <SPI_AsynchCallBack+0x4e>
	}
	else
	{
		GIE_Enable();
    1d16:	ef e5       	ldi	r30, 0x5F	; 95
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	80 68       	ori	r24, 0x80	; 128
    1d1e:	80 83       	st	Z, r24
		SPI_MAP->SPCR_CFG |= (0x01<<7);
    1d20:	ad e2       	ldi	r26, 0x2D	; 45
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	ed e2       	ldi	r30, 0x2D	; 45
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	80 68       	ori	r24, 0x80	; 128
    1d2c:	8c 93       	st	X, r24
		spi_callbackfun = spi_callback;
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	9b 81       	ldd	r25, Y+3	; 0x03
    1d32:	90 93 bd 00 	sts	0x00BD, r25
    1d36:	80 93 bc 00 	sts	0x00BC, r24
		SPI_MAP->SPDR_CFG = ch;
    1d3a:	ed e2       	ldi	r30, 0x2D	; 45
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d40:	82 83       	std	Z+2, r24	; 0x02
	}
	return ret_status;
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	08 95       	ret

00001d52 <SPI_Send_String>:

Error_Status_t SPI_Send_String(u8 *Str)
{
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	00 d0       	rcall	.+0      	; 0x1d58 <SPI_Send_String+0x6>
    1d58:	00 d0       	rcall	.+0      	; 0x1d5a <SPI_Send_String+0x8>
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
    1d5e:	9c 83       	std	Y+4, r25	; 0x04
    1d60:	8b 83       	std	Y+3, r24	; 0x03
	Error_Status_t ret_status = NO_ERROR;
    1d62:	19 82       	std	Y+1, r1	; 0x01
	u8 dummy_var;
	if(NULL == Str)
    1d64:	8b 81       	ldd	r24, Y+3	; 0x03
    1d66:	9c 81       	ldd	r25, Y+4	; 0x04
    1d68:	00 97       	sbiw	r24, 0x00	; 0
    1d6a:	91 f4       	brne	.+36     	; 0x1d90 <SPI_Send_String+0x3e>
	{
		ret_status = NULL_POINTER;
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	89 83       	std	Y+1, r24	; 0x01
    1d70:	14 c0       	rjmp	.+40     	; 0x1d9a <SPI_Send_String+0x48>
	}
	else
	{
		while(*Str)
		{
			ret_status = SPI_Transfere(*Str, &dummy_var);
    1d72:	eb 81       	ldd	r30, Y+3	; 0x03
    1d74:	fc 81       	ldd	r31, Y+4	; 0x04
    1d76:	80 81       	ld	r24, Z
    1d78:	9e 01       	movw	r18, r28
    1d7a:	2e 5f       	subi	r18, 0xFE	; 254
    1d7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d7e:	b9 01       	movw	r22, r18
    1d80:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <SPI_Transfere>
    1d84:	89 83       	std	Y+1, r24	; 0x01
			Str++;
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8a:	01 96       	adiw	r24, 0x01	; 1
    1d8c:	9c 83       	std	Y+4, r25	; 0x04
    1d8e:	8b 83       	std	Y+3, r24	; 0x03
	{
		ret_status = NULL_POINTER;
	}
	else
	{
		while(*Str)
    1d90:	eb 81       	ldd	r30, Y+3	; 0x03
    1d92:	fc 81       	ldd	r31, Y+4	; 0x04
    1d94:	80 81       	ld	r24, Z
    1d96:	88 23       	and	r24, r24
    1d98:	61 f7       	brne	.-40     	; 0x1d72 <SPI_Send_String+0x20>
		{
			ret_status = SPI_Transfere(*Str, &dummy_var);
			Str++;
		}
	}
	return ret_status;
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d9c:	0f 90       	pop	r0
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	08 95       	ret

00001daa <__vector_12>:


// Define the ISR function with attribute
void SPI_VECTOR(void) __attribute__((signal));
void SPI_VECTOR(void)
{
    1daa:	1f 92       	push	r1
    1dac:	0f 92       	push	r0
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	0f 92       	push	r0
    1db2:	11 24       	eor	r1, r1
    1db4:	2f 93       	push	r18
    1db6:	3f 93       	push	r19
    1db8:	4f 93       	push	r20
    1dba:	5f 93       	push	r21
    1dbc:	6f 93       	push	r22
    1dbe:	7f 93       	push	r23
    1dc0:	8f 93       	push	r24
    1dc2:	9f 93       	push	r25
    1dc4:	af 93       	push	r26
    1dc6:	bf 93       	push	r27
    1dc8:	ef 93       	push	r30
    1dca:	ff 93       	push	r31
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62

	// execute ISR if it existed
	//dum = SPI_MAP->SPDR_CFG;
//	CLEAR_BIT(SPI_MAP->SPCR_CFG, 7);

	if(spi_callbackfun)
    1dd4:	80 91 bc 00 	lds	r24, 0x00BC
    1dd8:	90 91 bd 00 	lds	r25, 0x00BD
    1ddc:	00 97       	sbiw	r24, 0x00	; 0
    1dde:	29 f0       	breq	.+10     	; 0x1dea <__vector_12+0x40>
	{
		spi_callbackfun();
    1de0:	e0 91 bc 00 	lds	r30, 0x00BC
    1de4:	f0 91 bd 00 	lds	r31, 0x00BD
    1de8:	09 95       	icall
	}
}
    1dea:	cf 91       	pop	r28
    1dec:	df 91       	pop	r29
    1dee:	ff 91       	pop	r31
    1df0:	ef 91       	pop	r30
    1df2:	bf 91       	pop	r27
    1df4:	af 91       	pop	r26
    1df6:	9f 91       	pop	r25
    1df8:	8f 91       	pop	r24
    1dfa:	7f 91       	pop	r23
    1dfc:	6f 91       	pop	r22
    1dfe:	5f 91       	pop	r21
    1e00:	4f 91       	pop	r20
    1e02:	3f 91       	pop	r19
    1e04:	2f 91       	pop	r18
    1e06:	0f 90       	pop	r0
    1e08:	0f be       	out	0x3f, r0	; 63
    1e0a:	0f 90       	pop	r0
    1e0c:	1f 90       	pop	r1
    1e0e:	18 95       	reti

00001e10 <DIO_voidSetPinDirection>:

volatile DIO_t *Ports_index[NUM_PORTS] = {GPIO_PINS_A, GPIO_PINS_B, GPIO_PINS_C, GPIO_PINS_D};


void DIO_voidSetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId,  u8 Copy_u8Direction)
{
    1e10:	df 93       	push	r29
    1e12:	cf 93       	push	r28
    1e14:	00 d0       	rcall	.+0      	; 0x1e16 <DIO_voidSetPinDirection+0x6>
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <DIO_voidSetPinDirection+0x8>
    1e18:	0f 92       	push	r0
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
    1e1e:	89 83       	std	Y+1, r24	; 0x01
    1e20:	6a 83       	std	Y+2, r22	; 0x02
    1e22:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_u8PortId <= NUM_PORTS-1) && Copy_u8PinId <= NUM_PINS-1)
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	84 30       	cpi	r24, 0x04	; 4
    1e28:	08 f0       	brcs	.+2      	; 0x1e2c <DIO_voidSetPinDirection+0x1c>
    1e2a:	61 c0       	rjmp	.+194    	; 0x1eee <DIO_voidSetPinDirection+0xde>
    1e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2e:	88 30       	cpi	r24, 0x08	; 8
    1e30:	08 f0       	brcs	.+2      	; 0x1e34 <DIO_voidSetPinDirection+0x24>
    1e32:	5d c0       	rjmp	.+186    	; 0x1eee <DIO_voidSetPinDirection+0xde>
	{
		switch(Copy_u8Direction){
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	3d 83       	std	Y+5, r19	; 0x05
    1e3c:	2c 83       	std	Y+4, r18	; 0x04
    1e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e40:	9d 81       	ldd	r25, Y+5	; 0x05
    1e42:	00 97       	sbiw	r24, 0x00	; 0
    1e44:	69 f1       	breq	.+90     	; 0x1ea0 <DIO_voidSetPinDirection+0x90>
    1e46:	2c 81       	ldd	r18, Y+4	; 0x04
    1e48:	3d 81       	ldd	r19, Y+5	; 0x05
    1e4a:	21 30       	cpi	r18, 0x01	; 1
    1e4c:	31 05       	cpc	r19, r1
    1e4e:	09 f0       	breq	.+2      	; 0x1e52 <DIO_voidSetPinDirection+0x42>
    1e50:	4e c0       	rjmp	.+156    	; 0x1eee <DIO_voidSetPinDirection+0xde>
			case(GPIO_DIRECTION_OUTPUT):
				SET_BIT(Ports_index[Copy_u8PortId]->DDRx, Copy_u8PinId);
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	88 2f       	mov	r24, r24
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	88 0f       	add	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	e5 59       	subi	r30, 0x95	; 149
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	a0 81       	ld	r26, Z
    1e64:	b1 81       	ldd	r27, Z+1	; 0x01
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	88 2f       	mov	r24, r24
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	88 0f       	add	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	fc 01       	movw	r30, r24
    1e72:	e5 59       	subi	r30, 0x95	; 149
    1e74:	ff 4f       	sbci	r31, 0xFF	; 255
    1e76:	01 90       	ld	r0, Z+
    1e78:	f0 81       	ld	r31, Z
    1e7a:	e0 2d       	mov	r30, r0
    1e7c:	81 81       	ldd	r24, Z+1	; 0x01
    1e7e:	48 2f       	mov	r20, r24
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	02 2e       	mov	r0, r18
    1e8c:	02 c0       	rjmp	.+4      	; 0x1e92 <DIO_voidSetPinDirection+0x82>
    1e8e:	88 0f       	add	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	0a 94       	dec	r0
    1e94:	e2 f7       	brpl	.-8      	; 0x1e8e <DIO_voidSetPinDirection+0x7e>
    1e96:	84 2b       	or	r24, r20
    1e98:	11 96       	adiw	r26, 0x01	; 1
    1e9a:	8c 93       	st	X, r24
    1e9c:	11 97       	sbiw	r26, 0x01	; 1
    1e9e:	27 c0       	rjmp	.+78     	; 0x1eee <DIO_voidSetPinDirection+0xde>
			break;
			case(GPIO_DIRECTION_INPUT):
				CLEAR_BIT(Ports_index[Copy_u8PortId]->DDRx, Copy_u8PinId);
    1ea0:	89 81       	ldd	r24, Y+1	; 0x01
    1ea2:	88 2f       	mov	r24, r24
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	88 0f       	add	r24, r24
    1ea8:	99 1f       	adc	r25, r25
    1eaa:	fc 01       	movw	r30, r24
    1eac:	e5 59       	subi	r30, 0x95	; 149
    1eae:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb0:	a0 81       	ld	r26, Z
    1eb2:	b1 81       	ldd	r27, Z+1	; 0x01
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	88 2f       	mov	r24, r24
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	fc 01       	movw	r30, r24
    1ec0:	e5 59       	subi	r30, 0x95	; 149
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	01 90       	ld	r0, Z+
    1ec6:	f0 81       	ld	r31, Z
    1ec8:	e0 2d       	mov	r30, r0
    1eca:	81 81       	ldd	r24, Z+1	; 0x01
    1ecc:	48 2f       	mov	r20, r24
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	02 2e       	mov	r0, r18
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <DIO_voidSetPinDirection+0xd0>
    1edc:	88 0f       	add	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	0a 94       	dec	r0
    1ee2:	e2 f7       	brpl	.-8      	; 0x1edc <DIO_voidSetPinDirection+0xcc>
    1ee4:	80 95       	com	r24
    1ee6:	84 23       	and	r24, r20
    1ee8:	11 96       	adiw	r26, 0x01	; 1
    1eea:	8c 93       	st	X, r24
    1eec:	11 97       	sbiw	r26, 0x01	; 1
			break;
		}
	}
	else{/* Nothing */}
}
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	cf 91       	pop	r28
    1efa:	df 91       	pop	r29
    1efc:	08 95       	ret

00001efe <DIO_voidSetPinValue>:


void DIO_voidSetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8Value)
{
    1efe:	df 93       	push	r29
    1f00:	cf 93       	push	r28
    1f02:	00 d0       	rcall	.+0      	; 0x1f04 <DIO_voidSetPinValue+0x6>
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <DIO_voidSetPinValue+0x8>
    1f06:	0f 92       	push	r0
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	89 83       	std	Y+1, r24	; 0x01
    1f0e:	6a 83       	std	Y+2, r22	; 0x02
    1f10:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_u8PortId <= NUM_PORTS-1) && (Copy_u8PinId <= NUM_PINS-1))
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
    1f14:	84 30       	cpi	r24, 0x04	; 4
    1f16:	08 f0       	brcs	.+2      	; 0x1f1a <DIO_voidSetPinValue+0x1c>
    1f18:	61 c0       	rjmp	.+194    	; 0x1fdc <DIO_voidSetPinValue+0xde>
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	88 30       	cpi	r24, 0x08	; 8
    1f1e:	08 f0       	brcs	.+2      	; 0x1f22 <DIO_voidSetPinValue+0x24>
    1f20:	5d c0       	rjmp	.+186    	; 0x1fdc <DIO_voidSetPinValue+0xde>
	{
		switch(Copy_u8Value){
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	28 2f       	mov	r18, r24
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	3d 83       	std	Y+5, r19	; 0x05
    1f2a:	2c 83       	std	Y+4, r18	; 0x04
    1f2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	69 f1       	breq	.+90     	; 0x1f8e <DIO_voidSetPinValue+0x90>
    1f34:	2c 81       	ldd	r18, Y+4	; 0x04
    1f36:	3d 81       	ldd	r19, Y+5	; 0x05
    1f38:	21 30       	cpi	r18, 0x01	; 1
    1f3a:	31 05       	cpc	r19, r1
    1f3c:	09 f0       	breq	.+2      	; 0x1f40 <DIO_voidSetPinValue+0x42>
    1f3e:	4e c0       	rjmp	.+156    	; 0x1fdc <DIO_voidSetPinValue+0xde>
		case(GPIO_HIGH):
		SET_BIT(Ports_index[Copy_u8PortId]->PORTx, Copy_u8PinId);
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	88 2f       	mov	r24, r24
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	88 0f       	add	r24, r24
    1f48:	99 1f       	adc	r25, r25
    1f4a:	fc 01       	movw	r30, r24
    1f4c:	e5 59       	subi	r30, 0x95	; 149
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	a0 81       	ld	r26, Z
    1f52:	b1 81       	ldd	r27, Z+1	; 0x01
    1f54:	89 81       	ldd	r24, Y+1	; 0x01
    1f56:	88 2f       	mov	r24, r24
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	88 0f       	add	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	fc 01       	movw	r30, r24
    1f60:	e5 59       	subi	r30, 0x95	; 149
    1f62:	ff 4f       	sbci	r31, 0xFF	; 255
    1f64:	01 90       	ld	r0, Z+
    1f66:	f0 81       	ld	r31, Z
    1f68:	e0 2d       	mov	r30, r0
    1f6a:	82 81       	ldd	r24, Z+2	; 0x02
    1f6c:	48 2f       	mov	r20, r24
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f70:	28 2f       	mov	r18, r24
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	02 2e       	mov	r0, r18
    1f7a:	02 c0       	rjmp	.+4      	; 0x1f80 <DIO_voidSetPinValue+0x82>
    1f7c:	88 0f       	add	r24, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	0a 94       	dec	r0
    1f82:	e2 f7       	brpl	.-8      	; 0x1f7c <DIO_voidSetPinValue+0x7e>
    1f84:	84 2b       	or	r24, r20
    1f86:	12 96       	adiw	r26, 0x02	; 2
    1f88:	8c 93       	st	X, r24
    1f8a:	12 97       	sbiw	r26, 0x02	; 2
    1f8c:	27 c0       	rjmp	.+78     	; 0x1fdc <DIO_voidSetPinValue+0xde>
		break;
		case(GPIO_LOW):
		CLEAR_BIT(Ports_index[Copy_u8PortId]->PORTx, Copy_u8PinId);
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
    1f90:	88 2f       	mov	r24, r24
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	88 0f       	add	r24, r24
    1f96:	99 1f       	adc	r25, r25
    1f98:	fc 01       	movw	r30, r24
    1f9a:	e5 59       	subi	r30, 0x95	; 149
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	a0 81       	ld	r26, Z
    1fa0:	b1 81       	ldd	r27, Z+1	; 0x01
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	88 2f       	mov	r24, r24
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	88 0f       	add	r24, r24
    1faa:	99 1f       	adc	r25, r25
    1fac:	fc 01       	movw	r30, r24
    1fae:	e5 59       	subi	r30, 0x95	; 149
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	01 90       	ld	r0, Z+
    1fb4:	f0 81       	ld	r31, Z
    1fb6:	e0 2d       	mov	r30, r0
    1fb8:	82 81       	ldd	r24, Z+2	; 0x02
    1fba:	48 2f       	mov	r20, r24
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	02 2e       	mov	r0, r18
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <DIO_voidSetPinValue+0xd0>
    1fca:	88 0f       	add	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	0a 94       	dec	r0
    1fd0:	e2 f7       	brpl	.-8      	; 0x1fca <DIO_voidSetPinValue+0xcc>
    1fd2:	80 95       	com	r24
    1fd4:	84 23       	and	r24, r20
    1fd6:	12 96       	adiw	r26, 0x02	; 2
    1fd8:	8c 93       	st	X, r24
    1fda:	12 97       	sbiw	r26, 0x02	; 2
		break;
		}
	}
	else{/* Nothing */}
}
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	08 95       	ret

00001fec <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId)
{
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	00 d0       	rcall	.+0      	; 0x1ff2 <DIO_u8GetPinValue+0x6>
    1ff2:	0f 92       	push	r0
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	8a 83       	std	Y+2, r24	; 0x02
    1ffa:	6b 83       	std	Y+3, r22	; 0x03
	u8 ret_val = 0;
    1ffc:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8PortId <= NUM_PORTS-1) && (Copy_u8PinId <= NUM_PINS-1)){
    1ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    2000:	84 30       	cpi	r24, 0x04	; 4
    2002:	e8 f4       	brcc	.+58     	; 0x203e <DIO_u8GetPinValue+0x52>
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	88 30       	cpi	r24, 0x08	; 8
    2008:	d0 f4       	brcc	.+52     	; 0x203e <DIO_u8GetPinValue+0x52>
		ret_val = READ_BIT(Ports_index[Copy_u8PortId]->PINx, Copy_u8PinId);
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	88 2f       	mov	r24, r24
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	88 0f       	add	r24, r24
    2012:	99 1f       	adc	r25, r25
    2014:	fc 01       	movw	r30, r24
    2016:	e5 59       	subi	r30, 0x95	; 149
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	01 90       	ld	r0, Z+
    201c:	f0 81       	ld	r31, Z
    201e:	e0 2d       	mov	r30, r0
    2020:	80 81       	ld	r24, Z
    2022:	28 2f       	mov	r18, r24
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	88 2f       	mov	r24, r24
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	a9 01       	movw	r20, r18
    202e:	02 c0       	rjmp	.+4      	; 0x2034 <DIO_u8GetPinValue+0x48>
    2030:	55 95       	asr	r21
    2032:	47 95       	ror	r20
    2034:	8a 95       	dec	r24
    2036:	e2 f7       	brpl	.-8      	; 0x2030 <DIO_u8GetPinValue+0x44>
    2038:	ca 01       	movw	r24, r20
    203a:	81 70       	andi	r24, 0x01	; 1
    203c:	89 83       	std	Y+1, r24	; 0x01
	}else{/* Nothing */}
	return ret_val;
    203e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	cf 91       	pop	r28
    2048:	df 91       	pop	r29
    204a:	08 95       	ret

0000204c <DIO_voidSetPortDirection>:


void DIO_voidSetPortDirection(u8 Copy_u8PortId,  u8 Copy_u8Direction)
{
    204c:	df 93       	push	r29
    204e:	cf 93       	push	r28
    2050:	00 d0       	rcall	.+0      	; 0x2052 <DIO_voidSetPortDirection+0x6>
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
    2056:	89 83       	std	Y+1, r24	; 0x01
    2058:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortId <= NUM_PORTS-1){
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	84 30       	cpi	r24, 0x04	; 4
    205e:	68 f4       	brcc	.+26     	; 0x207a <DIO_voidSetPortDirection+0x2e>
		Ports_index[Copy_u8PortId]->DDRx = Copy_u8Direction;
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	88 2f       	mov	r24, r24
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	88 0f       	add	r24, r24
    2068:	99 1f       	adc	r25, r25
    206a:	fc 01       	movw	r30, r24
    206c:	e5 59       	subi	r30, 0x95	; 149
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	01 90       	ld	r0, Z+
    2072:	f0 81       	ld	r31, Z
    2074:	e0 2d       	mov	r30, r0
    2076:	8a 81       	ldd	r24, Y+2	; 0x02
    2078:	81 83       	std	Z+1, r24	; 0x01
	}
	else{/* Nothing */}
}
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	cf 91       	pop	r28
    2080:	df 91       	pop	r29
    2082:	08 95       	ret

00002084 <DIO_voidSetPortValues>:


void DIO_voidSetPortValues(u8 Copy_u8PortId, u8 Copy_u8Value)
{
    2084:	df 93       	push	r29
    2086:	cf 93       	push	r28
    2088:	00 d0       	rcall	.+0      	; 0x208a <DIO_voidSetPortValues+0x6>
    208a:	cd b7       	in	r28, 0x3d	; 61
    208c:	de b7       	in	r29, 0x3e	; 62
    208e:	89 83       	std	Y+1, r24	; 0x01
    2090:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortId <= NUM_PORTS-1){
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	84 30       	cpi	r24, 0x04	; 4
    2096:	68 f4       	brcc	.+26     	; 0x20b2 <DIO_voidSetPortValues+0x2e>
    Ports_index[Copy_u8PortId]->PORTx = Copy_u8Value;
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	88 2f       	mov	r24, r24
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	88 0f       	add	r24, r24
    20a0:	99 1f       	adc	r25, r25
    20a2:	fc 01       	movw	r30, r24
    20a4:	e5 59       	subi	r30, 0x95	; 149
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	01 90       	ld	r0, Z+
    20aa:	f0 81       	ld	r31, Z
    20ac:	e0 2d       	mov	r30, r0
    20ae:	8a 81       	ldd	r24, Y+2	; 0x02
    20b0:	82 83       	std	Z+2, r24	; 0x02
	}
	else{/* Nothing */}
}
    20b2:	0f 90       	pop	r0
    20b4:	0f 90       	pop	r0
    20b6:	cf 91       	pop	r28
    20b8:	df 91       	pop	r29
    20ba:	08 95       	ret

000020bc <DIO_u8GetPortValues>:


u8 DIO_u8GetPortValues(u8 Copy_u8PortId)
{
    20bc:	df 93       	push	r29
    20be:	cf 93       	push	r28
    20c0:	00 d0       	rcall	.+0      	; 0x20c2 <DIO_u8GetPortValues+0x6>
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
    20c6:	8a 83       	std	Y+2, r24	; 0x02
	u8 ret_val = 0;
    20c8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortId <= NUM_PORTS-1){
    20ca:	8a 81       	ldd	r24, Y+2	; 0x02
    20cc:	84 30       	cpi	r24, 0x04	; 4
    20ce:	68 f4       	brcc	.+26     	; 0x20ea <DIO_u8GetPortValues+0x2e>
		ret_val = (Ports_index[Copy_u8PortId]->PINx);
    20d0:	8a 81       	ldd	r24, Y+2	; 0x02
    20d2:	88 2f       	mov	r24, r24
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	fc 01       	movw	r30, r24
    20dc:	e5 59       	subi	r30, 0x95	; 149
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	01 90       	ld	r0, Z+
    20e2:	f0 81       	ld	r31, Z
    20e4:	e0 2d       	mov	r30, r0
    20e6:	80 81       	ld	r24, Z
    20e8:	89 83       	std	Y+1, r24	; 0x01
	}else{/* Nothing */}
	return ret_val;
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	cf 91       	pop	r28
    20f2:	df 91       	pop	r29
    20f4:	08 95       	ret

000020f6 <ADC_voidInit>:
 */

#include "ADC.h"

void ADC_voidInit(const ADC_cfg_t *ADC_obj)
{
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	00 d0       	rcall	.+0      	; 0x20fc <ADC_voidInit+0x6>
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
    2100:	9a 83       	std	Y+2, r25	; 0x02
    2102:	89 83       	std	Y+1, r24	; 0x01
	if(NULL != ADC_obj)
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	9a 81       	ldd	r25, Y+2	; 0x02
    2108:	00 97       	sbiw	r24, 0x00	; 0
    210a:	09 f4       	brne	.+2      	; 0x210e <ADC_voidInit+0x18>
    210c:	4e c0       	rjmp	.+156    	; 0x21aa <ADC_voidInit+0xb4>
	{
		ADC_DISABLE_CFG();
    210e:	e4 e2       	ldi	r30, 0x24	; 36
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	82 81       	ldd	r24, Z+2	; 0x02
    2114:	8f 77       	andi	r24, 0x7F	; 127
    2116:	82 83       	std	Z+2, r24	; 0x02
		/* Make ADC port as input */
		DIO_voidSetPortDirection(PORTA_INDEX, 0x00);
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	60 e0       	ldi	r22, 0x00	; 0
    211c:	0e 94 26 10 	call	0x204c	; 0x204c <DIO_voidSetPortDirection>
		ADC_SELECT_VOLTAGE_REF_CFG(ADC_obj->voltage_reference_select);
    2120:	a4 e2       	ldi	r26, 0x24	; 36
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	e9 81       	ldd	r30, Y+1	; 0x01
    2126:	fa 81       	ldd	r31, Y+2	; 0x02
    2128:	80 81       	ld	r24, Z
    212a:	86 95       	lsr	r24
    212c:	86 95       	lsr	r24
    212e:	86 95       	lsr	r24
    2130:	83 70       	andi	r24, 0x03	; 3
    2132:	98 2f       	mov	r25, r24
    2134:	92 95       	swap	r25
    2136:	99 0f       	add	r25, r25
    2138:	99 0f       	add	r25, r25
    213a:	90 7c       	andi	r25, 0xC0	; 192
    213c:	13 96       	adiw	r26, 0x03	; 3
    213e:	8c 91       	ld	r24, X
    2140:	13 97       	sbiw	r26, 0x03	; 3
    2142:	8f 73       	andi	r24, 0x3F	; 63
    2144:	89 2b       	or	r24, r25
    2146:	13 96       	adiw	r26, 0x03	; 3
    2148:	8c 93       	st	X, r24
		ADC_SELECT_PRESCALER(ADC_obj->prescaler_select);
    214a:	a4 e2       	ldi	r26, 0x24	; 36
    214c:	b0 e0       	ldi	r27, 0x00	; 0
    214e:	e9 81       	ldd	r30, Y+1	; 0x01
    2150:	fa 81       	ldd	r31, Y+2	; 0x02
    2152:	80 81       	ld	r24, Z
    2154:	82 95       	swap	r24
    2156:	86 95       	lsr	r24
    2158:	86 95       	lsr	r24
    215a:	83 70       	andi	r24, 0x03	; 3
    215c:	81 70       	andi	r24, 0x01	; 1
    215e:	87 70       	andi	r24, 0x07	; 7
    2160:	98 2f       	mov	r25, r24
    2162:	97 70       	andi	r25, 0x07	; 7
    2164:	12 96       	adiw	r26, 0x02	; 2
    2166:	8c 91       	ld	r24, X
    2168:	12 97       	sbiw	r26, 0x02	; 2
    216a:	88 7f       	andi	r24, 0xF8	; 248
    216c:	89 2b       	or	r24, r25
    216e:	12 96       	adiw	r26, 0x02	; 2
    2170:	8c 93       	st	X, r24
		ADC_AUTO_TRIGGER_ENABLE_CONFIG();
    2172:	e4 e2       	ldi	r30, 0x24	; 36
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	82 81       	ldd	r24, Z+2	; 0x02
    2178:	80 62       	ori	r24, 0x20	; 32
    217a:	82 83       	std	Z+2, r24	; 0x02
		ADC_SELECT_TRIGGER_SOURCE_EVENT(ADC_obj->select_trigger_source);
    217c:	a4 e2       	ldi	r26, 0x24	; 36
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e9 81       	ldd	r30, Y+1	; 0x01
    2182:	fa 81       	ldd	r31, Y+2	; 0x02
    2184:	80 81       	ld	r24, Z
    2186:	87 70       	andi	r24, 0x07	; 7
    2188:	98 2f       	mov	r25, r24
    218a:	92 95       	swap	r25
    218c:	99 0f       	add	r25, r25
    218e:	90 7e       	andi	r25, 0xE0	; 224
    2190:	9d 96       	adiw	r26, 0x2d	; 45
    2192:	8c 91       	ld	r24, X
    2194:	9d 97       	sbiw	r26, 0x2d	; 45
    2196:	8f 71       	andi	r24, 0x1F	; 31
    2198:	89 2b       	or	r24, r25
    219a:	9d 96       	adiw	r26, 0x2d	; 45
    219c:	8c 93       	st	X, r24
    219e:	9d 97       	sbiw	r26, 0x2d	; 45
		/* Enable ADC */
		ADC_ENABLE_CFG();
    21a0:	e4 e2       	ldi	r30, 0x24	; 36
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	82 81       	ldd	r24, Z+2	; 0x02
    21a6:	80 68       	ori	r24, 0x80	; 128
    21a8:	82 83       	std	Z+2, r24	; 0x02
	}
	else{/* Nothing */}
}
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	08 95       	ret

000021b4 <ADC_getDigitalValueSynchNonBlocking>:

void ADC_getDigitalValueSynchNonBlocking(u8 Copy_u8Channel)
{
    21b4:	df 93       	push	r29
    21b6:	cf 93       	push	r28
    21b8:	0f 92       	push	r0
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	89 83       	std	Y+1, r24	; 0x01
	// select the channel
	ADC_SELECT_CHANNEL_CFG(Copy_u8Channel);
    21c0:	e4 e2       	ldi	r30, 0x24	; 36
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	8f 71       	andi	r24, 0x1F	; 31
    21c8:	98 2f       	mov	r25, r24
    21ca:	9f 71       	andi	r25, 0x1F	; 31
    21cc:	83 81       	ldd	r24, Z+3	; 0x03
    21ce:	80 7e       	andi	r24, 0xE0	; 224
    21d0:	89 2b       	or	r24, r25
    21d2:	83 83       	std	Z+3, r24	; 0x03

	// start conversion
	ADC_START_CONVERSION_CFG();
    21d4:	e4 e2       	ldi	r30, 0x24	; 36
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	82 81       	ldd	r24, Z+2	; 0x02
    21da:	80 64       	ori	r24, 0x40	; 64
    21dc:	82 83       	std	Z+2, r24	; 0x02


}
    21de:	0f 90       	pop	r0
    21e0:	cf 91       	pop	r28
    21e2:	df 91       	pop	r29
    21e4:	08 95       	ret

000021e6 <H_LCD_void_Init>:
#include "char_lcd.h"

u8 countDigits(s32 number);

void H_LCD_void_Init(void)
{
    21e6:	df 93       	push	r29
    21e8:	cf 93       	push	r28
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	aa 97       	sbiw	r28, 0x2a	; 42
    21f0:	0f b6       	in	r0, 0x3f	; 63
    21f2:	f8 94       	cli
    21f4:	de bf       	out	0x3e, r29	; 62
    21f6:	0f be       	out	0x3f, r0	; 63
    21f8:	cd bf       	out	0x3d, r28	; 61
#if LCD_MODE_SELECT == LCD_4_BIT_MODE_SELECT

	// configure enale and rs and data pins
	DIO_voidSetPinDirection(LCD_4BIT_RS_PIN_PORT, LCD_4BIT_RS_PIN, GPIO_DIRECTION_OUTPUT);
    21fa:	80 e0       	ldi	r24, 0x00	; 0
    21fc:	63 e0       	ldi	r22, 0x03	; 3
    21fe:	41 e0       	ldi	r20, 0x01	; 1
    2200:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_DIRECTION_OUTPUT);
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	62 e0       	ldi	r22, 0x02	; 2
    2208:	41 e0       	ldi	r20, 0x01	; 1
    220a:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_4BIT_D7_PIN_PORT, LCD_4_BIT_D7_PIN, GPIO_DIRECTION_OUTPUT);
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	60 e0       	ldi	r22, 0x00	; 0
    2212:	41 e0       	ldi	r20, 0x01	; 1
    2214:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_4BIT_D6_PIN_PORT, LCD_4_BIT_D6_PIN, GPIO_DIRECTION_OUTPUT);
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	61 e0       	ldi	r22, 0x01	; 1
    221c:	41 e0       	ldi	r20, 0x01	; 1
    221e:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_4BIT_D5_PIN_PORT, LCD_4_BIT_D5_PIN, GPIO_DIRECTION_OUTPUT);
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	62 e0       	ldi	r22, 0x02	; 2
    2226:	41 e0       	ldi	r20, 0x01	; 1
    2228:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_4BIT_D4_PIN_PORT, LCD_4_BIT_D4_PIN, GPIO_DIRECTION_OUTPUT);
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	64 e0       	ldi	r22, 0x04	; 4
    2230:	41 e0       	ldi	r20, 0x01	; 1
    2232:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DIO_voidSetPinDirection>
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	a0 ea       	ldi	r26, 0xA0	; 160
    223c:	b1 e4       	ldi	r27, 0x41	; 65
    223e:	8f a3       	std	Y+39, r24	; 0x27
    2240:	98 a7       	std	Y+40, r25	; 0x28
    2242:	a9 a7       	std	Y+41, r26	; 0x29
    2244:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2246:	6f a1       	ldd	r22, Y+39	; 0x27
    2248:	78 a5       	ldd	r23, Y+40	; 0x28
    224a:	89 a5       	ldd	r24, Y+41	; 0x29
    224c:	9a a5       	ldd	r25, Y+42	; 0x2a
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	4a ef       	ldi	r20, 0xFA	; 250
    2254:	54 e4       	ldi	r21, 0x44	; 68
    2256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	8b a3       	std	Y+35, r24	; 0x23
    2260:	9c a3       	std	Y+36, r25	; 0x24
    2262:	ad a3       	std	Y+37, r26	; 0x25
    2264:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2266:	6b a1       	ldd	r22, Y+35	; 0x23
    2268:	7c a1       	ldd	r23, Y+36	; 0x24
    226a:	8d a1       	ldd	r24, Y+37	; 0x25
    226c:	9e a1       	ldd	r25, Y+38	; 0x26
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	40 e8       	ldi	r20, 0x80	; 128
    2274:	5f e3       	ldi	r21, 0x3F	; 63
    2276:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    227a:	88 23       	and	r24, r24
    227c:	2c f4       	brge	.+10     	; 0x2288 <H_LCD_void_Init+0xa2>
		__ticks = 1;
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	9a a3       	std	Y+34, r25	; 0x22
    2284:	89 a3       	std	Y+33, r24	; 0x21
    2286:	3f c0       	rjmp	.+126    	; 0x2306 <H_LCD_void_Init+0x120>
	else if (__tmp > 65535)
    2288:	6b a1       	ldd	r22, Y+35	; 0x23
    228a:	7c a1       	ldd	r23, Y+36	; 0x24
    228c:	8d a1       	ldd	r24, Y+37	; 0x25
    228e:	9e a1       	ldd	r25, Y+38	; 0x26
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	3f ef       	ldi	r19, 0xFF	; 255
    2294:	4f e7       	ldi	r20, 0x7F	; 127
    2296:	57 e4       	ldi	r21, 0x47	; 71
    2298:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    229c:	18 16       	cp	r1, r24
    229e:	4c f5       	brge	.+82     	; 0x22f2 <H_LCD_void_Init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a0:	6f a1       	ldd	r22, Y+39	; 0x27
    22a2:	78 a5       	ldd	r23, Y+40	; 0x28
    22a4:	89 a5       	ldd	r24, Y+41	; 0x29
    22a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e2       	ldi	r20, 0x20	; 32
    22ae:	51 e4       	ldi	r21, 0x41	; 65
    22b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	bc 01       	movw	r22, r24
    22ba:	cd 01       	movw	r24, r26
    22bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	9a a3       	std	Y+34, r25	; 0x22
    22c6:	89 a3       	std	Y+33, r24	; 0x21
    22c8:	0f c0       	rjmp	.+30     	; 0x22e8 <H_LCD_void_Init+0x102>
    22ca:	88 ec       	ldi	r24, 0xC8	; 200
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	98 a3       	std	Y+32, r25	; 0x20
    22d0:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22d4:	98 a1       	ldd	r25, Y+32	; 0x20
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	f1 f7       	brne	.-4      	; 0x22d6 <H_LCD_void_Init+0xf0>
    22da:	98 a3       	std	Y+32, r25	; 0x20
    22dc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22de:	89 a1       	ldd	r24, Y+33	; 0x21
    22e0:	9a a1       	ldd	r25, Y+34	; 0x22
    22e2:	01 97       	sbiw	r24, 0x01	; 1
    22e4:	9a a3       	std	Y+34, r25	; 0x22
    22e6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e8:	89 a1       	ldd	r24, Y+33	; 0x21
    22ea:	9a a1       	ldd	r25, Y+34	; 0x22
    22ec:	00 97       	sbiw	r24, 0x00	; 0
    22ee:	69 f7       	brne	.-38     	; 0x22ca <H_LCD_void_Init+0xe4>
    22f0:	14 c0       	rjmp	.+40     	; 0x231a <H_LCD_void_Init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f2:	6b a1       	ldd	r22, Y+35	; 0x23
    22f4:	7c a1       	ldd	r23, Y+36	; 0x24
    22f6:	8d a1       	ldd	r24, Y+37	; 0x25
    22f8:	9e a1       	ldd	r25, Y+38	; 0x26
    22fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	9a a3       	std	Y+34, r25	; 0x22
    2304:	89 a3       	std	Y+33, r24	; 0x21
    2306:	89 a1       	ldd	r24, Y+33	; 0x21
    2308:	9a a1       	ldd	r25, Y+34	; 0x22
    230a:	9e 8f       	std	Y+30, r25	; 0x1e
    230c:	8d 8f       	std	Y+29, r24	; 0x1d
    230e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2310:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	f1 f7       	brne	.-4      	; 0x2312 <H_LCD_void_Init+0x12c>
    2316:	9e 8f       	std	Y+30, r25	; 0x1e
    2318:	8d 8f       	std	Y+29, r24	; 0x1d

	// delay before any start
	_delay_ms(20);
	H_LCD_void_SendCommand(LCD_8BIT_MODE_2_LINE);
    231a:	88 e3       	ldi	r24, 0x38	; 56
    231c:	0e 94 95 12 	call	0x252a	; 0x252a <H_LCD_void_SendCommand>
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	a0 ea       	ldi	r26, 0xA0	; 160
    2326:	b0 e4       	ldi	r27, 0x40	; 64
    2328:	89 8f       	std	Y+25, r24	; 0x19
    232a:	9a 8f       	std	Y+26, r25	; 0x1a
    232c:	ab 8f       	std	Y+27, r26	; 0x1b
    232e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2330:	69 8d       	ldd	r22, Y+25	; 0x19
    2332:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2334:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2336:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	4a ef       	ldi	r20, 0xFA	; 250
    233e:	54 e4       	ldi	r21, 0x44	; 68
    2340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	8d 8b       	std	Y+21, r24	; 0x15
    234a:	9e 8b       	std	Y+22, r25	; 0x16
    234c:	af 8b       	std	Y+23, r26	; 0x17
    234e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2350:	6d 89       	ldd	r22, Y+21	; 0x15
    2352:	7e 89       	ldd	r23, Y+22	; 0x16
    2354:	8f 89       	ldd	r24, Y+23	; 0x17
    2356:	98 8d       	ldd	r25, Y+24	; 0x18
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	40 e8       	ldi	r20, 0x80	; 128
    235e:	5f e3       	ldi	r21, 0x3F	; 63
    2360:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2364:	88 23       	and	r24, r24
    2366:	2c f4       	brge	.+10     	; 0x2372 <H_LCD_void_Init+0x18c>
		__ticks = 1;
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	9c 8b       	std	Y+20, r25	; 0x14
    236e:	8b 8b       	std	Y+19, r24	; 0x13
    2370:	3f c0       	rjmp	.+126    	; 0x23f0 <H_LCD_void_Init+0x20a>
	else if (__tmp > 65535)
    2372:	6d 89       	ldd	r22, Y+21	; 0x15
    2374:	7e 89       	ldd	r23, Y+22	; 0x16
    2376:	8f 89       	ldd	r24, Y+23	; 0x17
    2378:	98 8d       	ldd	r25, Y+24	; 0x18
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	3f ef       	ldi	r19, 0xFF	; 255
    237e:	4f e7       	ldi	r20, 0x7F	; 127
    2380:	57 e4       	ldi	r21, 0x47	; 71
    2382:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2386:	18 16       	cp	r1, r24
    2388:	4c f5       	brge	.+82     	; 0x23dc <H_LCD_void_Init+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238a:	69 8d       	ldd	r22, Y+25	; 0x19
    238c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    238e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2390:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	40 e2       	ldi	r20, 0x20	; 32
    2398:	51 e4       	ldi	r21, 0x41	; 65
    239a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	bc 01       	movw	r22, r24
    23a4:	cd 01       	movw	r24, r26
    23a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	9c 8b       	std	Y+20, r25	; 0x14
    23b0:	8b 8b       	std	Y+19, r24	; 0x13
    23b2:	0f c0       	rjmp	.+30     	; 0x23d2 <H_LCD_void_Init+0x1ec>
    23b4:	88 ec       	ldi	r24, 0xC8	; 200
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	9a 8b       	std	Y+18, r25	; 0x12
    23ba:	89 8b       	std	Y+17, r24	; 0x11
    23bc:	89 89       	ldd	r24, Y+17	; 0x11
    23be:	9a 89       	ldd	r25, Y+18	; 0x12
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	f1 f7       	brne	.-4      	; 0x23c0 <H_LCD_void_Init+0x1da>
    23c4:	9a 8b       	std	Y+18, r25	; 0x12
    23c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c8:	8b 89       	ldd	r24, Y+19	; 0x13
    23ca:	9c 89       	ldd	r25, Y+20	; 0x14
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	9c 8b       	std	Y+20, r25	; 0x14
    23d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d2:	8b 89       	ldd	r24, Y+19	; 0x13
    23d4:	9c 89       	ldd	r25, Y+20	; 0x14
    23d6:	00 97       	sbiw	r24, 0x00	; 0
    23d8:	69 f7       	brne	.-38     	; 0x23b4 <H_LCD_void_Init+0x1ce>
    23da:	14 c0       	rjmp	.+40     	; 0x2404 <H_LCD_void_Init+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23dc:	6d 89       	ldd	r22, Y+21	; 0x15
    23de:	7e 89       	ldd	r23, Y+22	; 0x16
    23e0:	8f 89       	ldd	r24, Y+23	; 0x17
    23e2:	98 8d       	ldd	r25, Y+24	; 0x18
    23e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	9c 8b       	std	Y+20, r25	; 0x14
    23ee:	8b 8b       	std	Y+19, r24	; 0x13
    23f0:	8b 89       	ldd	r24, Y+19	; 0x13
    23f2:	9c 89       	ldd	r25, Y+20	; 0x14
    23f4:	98 8b       	std	Y+16, r25	; 0x10
    23f6:	8f 87       	std	Y+15, r24	; 0x0f
    23f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    23fa:	98 89       	ldd	r25, Y+16	; 0x10
    23fc:	01 97       	sbiw	r24, 0x01	; 1
    23fe:	f1 f7       	brne	.-4      	; 0x23fc <H_LCD_void_Init+0x216>
    2400:	98 8b       	std	Y+16, r25	; 0x10
    2402:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	H_LCD_void_SendCommand(LCD_8BIT_MODE_2_LINE);
    2404:	88 e3       	ldi	r24, 0x38	; 56
    2406:	0e 94 95 12 	call	0x252a	; 0x252a <H_LCD_void_SendCommand>
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	a6 e1       	ldi	r26, 0x16	; 22
    2410:	b3 e4       	ldi	r27, 0x43	; 67
    2412:	8b 87       	std	Y+11, r24	; 0x0b
    2414:	9c 87       	std	Y+12, r25	; 0x0c
    2416:	ad 87       	std	Y+13, r26	; 0x0d
    2418:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    241a:	6b 85       	ldd	r22, Y+11	; 0x0b
    241c:	7c 85       	ldd	r23, Y+12	; 0x0c
    241e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2420:	9e 85       	ldd	r25, Y+14	; 0x0e
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	4a ef       	ldi	r20, 0xFA	; 250
    2428:	54 e4       	ldi	r21, 0x44	; 68
    242a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	8f 83       	std	Y+7, r24	; 0x07
    2434:	98 87       	std	Y+8, r25	; 0x08
    2436:	a9 87       	std	Y+9, r26	; 0x09
    2438:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    243a:	6f 81       	ldd	r22, Y+7	; 0x07
    243c:	78 85       	ldd	r23, Y+8	; 0x08
    243e:	89 85       	ldd	r24, Y+9	; 0x09
    2440:	9a 85       	ldd	r25, Y+10	; 0x0a
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e8       	ldi	r20, 0x80	; 128
    2448:	5f e3       	ldi	r21, 0x3F	; 63
    244a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    244e:	88 23       	and	r24, r24
    2450:	2c f4       	brge	.+10     	; 0x245c <H_LCD_void_Init+0x276>
		__ticks = 1;
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	9e 83       	std	Y+6, r25	; 0x06
    2458:	8d 83       	std	Y+5, r24	; 0x05
    245a:	3f c0       	rjmp	.+126    	; 0x24da <H_LCD_void_Init+0x2f4>
	else if (__tmp > 65535)
    245c:	6f 81       	ldd	r22, Y+7	; 0x07
    245e:	78 85       	ldd	r23, Y+8	; 0x08
    2460:	89 85       	ldd	r24, Y+9	; 0x09
    2462:	9a 85       	ldd	r25, Y+10	; 0x0a
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	3f ef       	ldi	r19, 0xFF	; 255
    2468:	4f e7       	ldi	r20, 0x7F	; 127
    246a:	57 e4       	ldi	r21, 0x47	; 71
    246c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2470:	18 16       	cp	r1, r24
    2472:	4c f5       	brge	.+82     	; 0x24c6 <H_LCD_void_Init+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2474:	6b 85       	ldd	r22, Y+11	; 0x0b
    2476:	7c 85       	ldd	r23, Y+12	; 0x0c
    2478:	8d 85       	ldd	r24, Y+13	; 0x0d
    247a:	9e 85       	ldd	r25, Y+14	; 0x0e
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	40 e2       	ldi	r20, 0x20	; 32
    2482:	51 e4       	ldi	r21, 0x41	; 65
    2484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	bc 01       	movw	r22, r24
    248e:	cd 01       	movw	r24, r26
    2490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	9e 83       	std	Y+6, r25	; 0x06
    249a:	8d 83       	std	Y+5, r24	; 0x05
    249c:	0f c0       	rjmp	.+30     	; 0x24bc <H_LCD_void_Init+0x2d6>
    249e:	88 ec       	ldi	r24, 0xC8	; 200
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	9c 83       	std	Y+4, r25	; 0x04
    24a4:	8b 83       	std	Y+3, r24	; 0x03
    24a6:	8b 81       	ldd	r24, Y+3	; 0x03
    24a8:	9c 81       	ldd	r25, Y+4	; 0x04
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	f1 f7       	brne	.-4      	; 0x24aa <H_LCD_void_Init+0x2c4>
    24ae:	9c 83       	std	Y+4, r25	; 0x04
    24b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b2:	8d 81       	ldd	r24, Y+5	; 0x05
    24b4:	9e 81       	ldd	r25, Y+6	; 0x06
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	9e 83       	std	Y+6, r25	; 0x06
    24ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24bc:	8d 81       	ldd	r24, Y+5	; 0x05
    24be:	9e 81       	ldd	r25, Y+6	; 0x06
    24c0:	00 97       	sbiw	r24, 0x00	; 0
    24c2:	69 f7       	brne	.-38     	; 0x249e <H_LCD_void_Init+0x2b8>
    24c4:	14 c0       	rjmp	.+40     	; 0x24ee <H_LCD_void_Init+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c6:	6f 81       	ldd	r22, Y+7	; 0x07
    24c8:	78 85       	ldd	r23, Y+8	; 0x08
    24ca:	89 85       	ldd	r24, Y+9	; 0x09
    24cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	9e 83       	std	Y+6, r25	; 0x06
    24d8:	8d 83       	std	Y+5, r24	; 0x05
    24da:	8d 81       	ldd	r24, Y+5	; 0x05
    24dc:	9e 81       	ldd	r25, Y+6	; 0x06
    24de:	9a 83       	std	Y+2, r25	; 0x02
    24e0:	89 83       	std	Y+1, r24	; 0x01
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	9a 81       	ldd	r25, Y+2	; 0x02
    24e6:	01 97       	sbiw	r24, 0x01	; 1
    24e8:	f1 f7       	brne	.-4      	; 0x24e6 <H_LCD_void_Init+0x300>
    24ea:	9a 83       	std	Y+2, r25	; 0x02
    24ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(150);
	H_LCD_void_SendCommand(LCD_8BIT_MODE_2_LINE);
    24ee:	88 e3       	ldi	r24, 0x38	; 56
    24f0:	0e 94 95 12 	call	0x252a	; 0x252a <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_CLEAR);
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	0e 94 95 12 	call	0x252a	; 0x252a <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_RETURN_HOME);
    24fa:	82 e0       	ldi	r24, 0x02	; 2
    24fc:	0e 94 95 12 	call	0x252a	; 0x252a <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_ENTRY_MODE);
    2500:	86 e0       	ldi	r24, 0x06	; 6
    2502:	0e 94 95 12 	call	0x252a	; 0x252a <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_CURSOR_OFF_DISPLAY_ON);
    2506:	8c e0       	ldi	r24, 0x0C	; 12
    2508:	0e 94 95 12 	call	0x252a	; 0x252a <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_4BIT_MODE_2_LINE);
    250c:	88 e2       	ldi	r24, 0x28	; 40
    250e:	0e 94 95 12 	call	0x252a	; 0x252a <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_DDRAM_START); // start column
    2512:	80 e8       	ldi	r24, 0x80	; 128
    2514:	0e 94 95 12 	call	0x252a	; 0x252a <H_LCD_void_SendCommand>

#elif LCD_MODE_SELECT == LCD_8_BIT_MODE_SELECT


#endif
}
    2518:	aa 96       	adiw	r28, 0x2a	; 42
    251a:	0f b6       	in	r0, 0x3f	; 63
    251c:	f8 94       	cli
    251e:	de bf       	out	0x3e, r29	; 62
    2520:	0f be       	out	0x3f, r0	; 63
    2522:	cd bf       	out	0x3d, r28	; 61
    2524:	cf 91       	pop	r28
    2526:	df 91       	pop	r29
    2528:	08 95       	ret

0000252a <H_LCD_void_SendCommand>:



void H_LCD_void_SendCommand(u8 Copy_u8Command)
{
    252a:	df 93       	push	r29
    252c:	cf 93       	push	r28
    252e:	cd b7       	in	r28, 0x3d	; 61
    2530:	de b7       	in	r29, 0x3e	; 62
    2532:	6d 97       	sbiw	r28, 0x1d	; 29
    2534:	0f b6       	in	r0, 0x3f	; 63
    2536:	f8 94       	cli
    2538:	de bf       	out	0x3e, r29	; 62
    253a:	0f be       	out	0x3f, r0	; 63
    253c:	cd bf       	out	0x3d, r28	; 61
    253e:	8d 8f       	std	Y+29, r24	; 0x1d
#if LCD_MODE_SELECT == LCD_4_BIT_MODE_SELECT
	// write logic low to rs pin
	DIO_voidSetPinValue(LCD_4BIT_RS_PIN_PORT, LCD_4BIT_RS_PIN, GPIO_LOW);
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	63 e0       	ldi	r22, 0x03	; 3
    2544:	40 e0       	ldi	r20, 0x00	; 0
    2546:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>

	// Sending most significant nibble of command through data pins
	DIO_voidSetPinValue(LCD_4BIT_D7_PIN_PORT, LCD_4_BIT_D7_PIN, (Copy_u8Command >> 4)&(u8)1);
    254a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    254c:	82 95       	swap	r24
    254e:	8f 70       	andi	r24, 0x0F	; 15
    2550:	98 2f       	mov	r25, r24
    2552:	91 70       	andi	r25, 0x01	; 1
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	60 e0       	ldi	r22, 0x00	; 0
    2558:	49 2f       	mov	r20, r25
    255a:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D6_PIN_PORT, LCD_4_BIT_D6_PIN, (Copy_u8Command >> 5)&(u8)1);
    255e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2560:	82 95       	swap	r24
    2562:	86 95       	lsr	r24
    2564:	87 70       	andi	r24, 0x07	; 7
    2566:	98 2f       	mov	r25, r24
    2568:	91 70       	andi	r25, 0x01	; 1
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	61 e0       	ldi	r22, 0x01	; 1
    256e:	49 2f       	mov	r20, r25
    2570:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D5_PIN_PORT, LCD_4_BIT_D5_PIN, (Copy_u8Command >> 6)&(u8)1);
    2574:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2576:	82 95       	swap	r24
    2578:	86 95       	lsr	r24
    257a:	86 95       	lsr	r24
    257c:	83 70       	andi	r24, 0x03	; 3
    257e:	98 2f       	mov	r25, r24
    2580:	91 70       	andi	r25, 0x01	; 1
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	62 e0       	ldi	r22, 0x02	; 2
    2586:	49 2f       	mov	r20, r25
    2588:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D4_PIN_PORT, LCD_4_BIT_D4_PIN, (Copy_u8Command >> 7)&(u8)1);
    258c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    258e:	98 2f       	mov	r25, r24
    2590:	99 1f       	adc	r25, r25
    2592:	99 27       	eor	r25, r25
    2594:	99 1f       	adc	r25, r25
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	64 e0       	ldi	r22, 0x04	; 4
    259a:	49 2f       	mov	r20, r25
    259c:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>

	// send enable signal
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_HIGH);
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	62 e0       	ldi	r22, 0x02	; 2
    25a4:	41 e0       	ldi	r20, 0x01	; 1
    25a6:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	a0 ea       	ldi	r26, 0xA0	; 160
    25b0:	b0 e4       	ldi	r27, 0x40	; 64
    25b2:	89 8f       	std	Y+25, r24	; 0x19
    25b4:	9a 8f       	std	Y+26, r25	; 0x1a
    25b6:	ab 8f       	std	Y+27, r26	; 0x1b
    25b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ba:	69 8d       	ldd	r22, Y+25	; 0x19
    25bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	4a ef       	ldi	r20, 0xFA	; 250
    25c8:	54 e4       	ldi	r21, 0x44	; 68
    25ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	8d 8b       	std	Y+21, r24	; 0x15
    25d4:	9e 8b       	std	Y+22, r25	; 0x16
    25d6:	af 8b       	std	Y+23, r26	; 0x17
    25d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25da:	6d 89       	ldd	r22, Y+21	; 0x15
    25dc:	7e 89       	ldd	r23, Y+22	; 0x16
    25de:	8f 89       	ldd	r24, Y+23	; 0x17
    25e0:	98 8d       	ldd	r25, Y+24	; 0x18
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	40 e8       	ldi	r20, 0x80	; 128
    25e8:	5f e3       	ldi	r21, 0x3F	; 63
    25ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ee:	88 23       	and	r24, r24
    25f0:	2c f4       	brge	.+10     	; 0x25fc <H_LCD_void_SendCommand+0xd2>
		__ticks = 1;
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	9c 8b       	std	Y+20, r25	; 0x14
    25f8:	8b 8b       	std	Y+19, r24	; 0x13
    25fa:	3f c0       	rjmp	.+126    	; 0x267a <H_LCD_void_SendCommand+0x150>
	else if (__tmp > 65535)
    25fc:	6d 89       	ldd	r22, Y+21	; 0x15
    25fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2600:	8f 89       	ldd	r24, Y+23	; 0x17
    2602:	98 8d       	ldd	r25, Y+24	; 0x18
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	3f ef       	ldi	r19, 0xFF	; 255
    2608:	4f e7       	ldi	r20, 0x7F	; 127
    260a:	57 e4       	ldi	r21, 0x47	; 71
    260c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2610:	18 16       	cp	r1, r24
    2612:	4c f5       	brge	.+82     	; 0x2666 <H_LCD_void_SendCommand+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2614:	69 8d       	ldd	r22, Y+25	; 0x19
    2616:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2618:	8b 8d       	ldd	r24, Y+27	; 0x1b
    261a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	40 e2       	ldi	r20, 0x20	; 32
    2622:	51 e4       	ldi	r21, 0x41	; 65
    2624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	bc 01       	movw	r22, r24
    262e:	cd 01       	movw	r24, r26
    2630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	9c 8b       	std	Y+20, r25	; 0x14
    263a:	8b 8b       	std	Y+19, r24	; 0x13
    263c:	0f c0       	rjmp	.+30     	; 0x265c <H_LCD_void_SendCommand+0x132>
    263e:	88 ec       	ldi	r24, 0xC8	; 200
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	9a 8b       	std	Y+18, r25	; 0x12
    2644:	89 8b       	std	Y+17, r24	; 0x11
    2646:	89 89       	ldd	r24, Y+17	; 0x11
    2648:	9a 89       	ldd	r25, Y+18	; 0x12
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	f1 f7       	brne	.-4      	; 0x264a <H_LCD_void_SendCommand+0x120>
    264e:	9a 8b       	std	Y+18, r25	; 0x12
    2650:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2652:	8b 89       	ldd	r24, Y+19	; 0x13
    2654:	9c 89       	ldd	r25, Y+20	; 0x14
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	9c 8b       	std	Y+20, r25	; 0x14
    265a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    265c:	8b 89       	ldd	r24, Y+19	; 0x13
    265e:	9c 89       	ldd	r25, Y+20	; 0x14
    2660:	00 97       	sbiw	r24, 0x00	; 0
    2662:	69 f7       	brne	.-38     	; 0x263e <H_LCD_void_SendCommand+0x114>
    2664:	14 c0       	rjmp	.+40     	; 0x268e <H_LCD_void_SendCommand+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2666:	6d 89       	ldd	r22, Y+21	; 0x15
    2668:	7e 89       	ldd	r23, Y+22	; 0x16
    266a:	8f 89       	ldd	r24, Y+23	; 0x17
    266c:	98 8d       	ldd	r25, Y+24	; 0x18
    266e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	9c 8b       	std	Y+20, r25	; 0x14
    2678:	8b 8b       	std	Y+19, r24	; 0x13
    267a:	8b 89       	ldd	r24, Y+19	; 0x13
    267c:	9c 89       	ldd	r25, Y+20	; 0x14
    267e:	98 8b       	std	Y+16, r25	; 0x10
    2680:	8f 87       	std	Y+15, r24	; 0x0f
    2682:	8f 85       	ldd	r24, Y+15	; 0x0f
    2684:	98 89       	ldd	r25, Y+16	; 0x10
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	f1 f7       	brne	.-4      	; 0x2686 <H_LCD_void_SendCommand+0x15c>
    268a:	98 8b       	std	Y+16, r25	; 0x10
    268c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_LOW);
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	62 e0       	ldi	r22, 0x02	; 2
    2692:	40 e0       	ldi	r20, 0x00	; 0
    2694:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>

	// Sending least significant nibble of command through data pins
	DIO_voidSetPinValue(LCD_4BIT_D7_PIN_PORT, LCD_4_BIT_D7_PIN, ((Copy_u8Command) >> 0)&(u8)1);
    2698:	8d 8d       	ldd	r24, Y+29	; 0x1d
    269a:	98 2f       	mov	r25, r24
    269c:	91 70       	andi	r25, 0x01	; 1
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	60 e0       	ldi	r22, 0x00	; 0
    26a2:	49 2f       	mov	r20, r25
    26a4:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D6_PIN_PORT, LCD_4_BIT_D6_PIN, ((Copy_u8Command) >> 1)&(u8)1);
    26a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26aa:	86 95       	lsr	r24
    26ac:	98 2f       	mov	r25, r24
    26ae:	91 70       	andi	r25, 0x01	; 1
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	61 e0       	ldi	r22, 0x01	; 1
    26b4:	49 2f       	mov	r20, r25
    26b6:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D5_PIN_PORT, LCD_4_BIT_D5_PIN, ((Copy_u8Command) >> 2)&(u8)1);
    26ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26bc:	86 95       	lsr	r24
    26be:	86 95       	lsr	r24
    26c0:	98 2f       	mov	r25, r24
    26c2:	91 70       	andi	r25, 0x01	; 1
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	62 e0       	ldi	r22, 0x02	; 2
    26c8:	49 2f       	mov	r20, r25
    26ca:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D4_PIN_PORT, LCD_4_BIT_D4_PIN, ((Copy_u8Command) >> 3)&(u8)1);
    26ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26d0:	86 95       	lsr	r24
    26d2:	86 95       	lsr	r24
    26d4:	86 95       	lsr	r24
    26d6:	98 2f       	mov	r25, r24
    26d8:	91 70       	andi	r25, 0x01	; 1
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	64 e0       	ldi	r22, 0x04	; 4
    26de:	49 2f       	mov	r20, r25
    26e0:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>

	// send enable signal
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_HIGH);
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	62 e0       	ldi	r22, 0x02	; 2
    26e8:	41 e0       	ldi	r20, 0x01	; 1
    26ea:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	a0 ea       	ldi	r26, 0xA0	; 160
    26f4:	b0 e4       	ldi	r27, 0x40	; 64
    26f6:	8b 87       	std	Y+11, r24	; 0x0b
    26f8:	9c 87       	std	Y+12, r25	; 0x0c
    26fa:	ad 87       	std	Y+13, r26	; 0x0d
    26fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2700:	7c 85       	ldd	r23, Y+12	; 0x0c
    2702:	8d 85       	ldd	r24, Y+13	; 0x0d
    2704:	9e 85       	ldd	r25, Y+14	; 0x0e
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	4a ef       	ldi	r20, 0xFA	; 250
    270c:	54 e4       	ldi	r21, 0x44	; 68
    270e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	8f 83       	std	Y+7, r24	; 0x07
    2718:	98 87       	std	Y+8, r25	; 0x08
    271a:	a9 87       	std	Y+9, r26	; 0x09
    271c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    271e:	6f 81       	ldd	r22, Y+7	; 0x07
    2720:	78 85       	ldd	r23, Y+8	; 0x08
    2722:	89 85       	ldd	r24, Y+9	; 0x09
    2724:	9a 85       	ldd	r25, Y+10	; 0x0a
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	40 e8       	ldi	r20, 0x80	; 128
    272c:	5f e3       	ldi	r21, 0x3F	; 63
    272e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2732:	88 23       	and	r24, r24
    2734:	2c f4       	brge	.+10     	; 0x2740 <H_LCD_void_SendCommand+0x216>
		__ticks = 1;
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	9e 83       	std	Y+6, r25	; 0x06
    273c:	8d 83       	std	Y+5, r24	; 0x05
    273e:	3f c0       	rjmp	.+126    	; 0x27be <H_LCD_void_SendCommand+0x294>
	else if (__tmp > 65535)
    2740:	6f 81       	ldd	r22, Y+7	; 0x07
    2742:	78 85       	ldd	r23, Y+8	; 0x08
    2744:	89 85       	ldd	r24, Y+9	; 0x09
    2746:	9a 85       	ldd	r25, Y+10	; 0x0a
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	3f ef       	ldi	r19, 0xFF	; 255
    274c:	4f e7       	ldi	r20, 0x7F	; 127
    274e:	57 e4       	ldi	r21, 0x47	; 71
    2750:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2754:	18 16       	cp	r1, r24
    2756:	4c f5       	brge	.+82     	; 0x27aa <H_LCD_void_SendCommand+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2758:	6b 85       	ldd	r22, Y+11	; 0x0b
    275a:	7c 85       	ldd	r23, Y+12	; 0x0c
    275c:	8d 85       	ldd	r24, Y+13	; 0x0d
    275e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	40 e2       	ldi	r20, 0x20	; 32
    2766:	51 e4       	ldi	r21, 0x41	; 65
    2768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	bc 01       	movw	r22, r24
    2772:	cd 01       	movw	r24, r26
    2774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	9e 83       	std	Y+6, r25	; 0x06
    277e:	8d 83       	std	Y+5, r24	; 0x05
    2780:	0f c0       	rjmp	.+30     	; 0x27a0 <H_LCD_void_SendCommand+0x276>
    2782:	88 ec       	ldi	r24, 0xC8	; 200
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	9c 83       	std	Y+4, r25	; 0x04
    2788:	8b 83       	std	Y+3, r24	; 0x03
    278a:	8b 81       	ldd	r24, Y+3	; 0x03
    278c:	9c 81       	ldd	r25, Y+4	; 0x04
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <H_LCD_void_SendCommand+0x264>
    2792:	9c 83       	std	Y+4, r25	; 0x04
    2794:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2796:	8d 81       	ldd	r24, Y+5	; 0x05
    2798:	9e 81       	ldd	r25, Y+6	; 0x06
    279a:	01 97       	sbiw	r24, 0x01	; 1
    279c:	9e 83       	std	Y+6, r25	; 0x06
    279e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a0:	8d 81       	ldd	r24, Y+5	; 0x05
    27a2:	9e 81       	ldd	r25, Y+6	; 0x06
    27a4:	00 97       	sbiw	r24, 0x00	; 0
    27a6:	69 f7       	brne	.-38     	; 0x2782 <H_LCD_void_SendCommand+0x258>
    27a8:	14 c0       	rjmp	.+40     	; 0x27d2 <H_LCD_void_SendCommand+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27aa:	6f 81       	ldd	r22, Y+7	; 0x07
    27ac:	78 85       	ldd	r23, Y+8	; 0x08
    27ae:	89 85       	ldd	r24, Y+9	; 0x09
    27b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	9e 83       	std	Y+6, r25	; 0x06
    27bc:	8d 83       	std	Y+5, r24	; 0x05
    27be:	8d 81       	ldd	r24, Y+5	; 0x05
    27c0:	9e 81       	ldd	r25, Y+6	; 0x06
    27c2:	9a 83       	std	Y+2, r25	; 0x02
    27c4:	89 83       	std	Y+1, r24	; 0x01
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
    27c8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ca:	01 97       	sbiw	r24, 0x01	; 1
    27cc:	f1 f7       	brne	.-4      	; 0x27ca <H_LCD_void_SendCommand+0x2a0>
    27ce:	9a 83       	std	Y+2, r25	; 0x02
    27d0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_LOW);
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	62 e0       	ldi	r22, 0x02	; 2
    27d6:	40 e0       	ldi	r20, 0x00	; 0
    27d8:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
#elif LCD_MODE_SELECT == LCD_8_BIT_MODE_SELECT


#endif

}
    27dc:	6d 96       	adiw	r28, 0x1d	; 29
    27de:	0f b6       	in	r0, 0x3f	; 63
    27e0:	f8 94       	cli
    27e2:	de bf       	out	0x3e, r29	; 62
    27e4:	0f be       	out	0x3f, r0	; 63
    27e6:	cd bf       	out	0x3d, r28	; 61
    27e8:	cf 91       	pop	r28
    27ea:	df 91       	pop	r29
    27ec:	08 95       	ret

000027ee <H_LCD_void_SendData>:
void H_LCD_void_SendData(u8 Copy_u8Data)
{
    27ee:	df 93       	push	r29
    27f0:	cf 93       	push	r28
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
    27f6:	6d 97       	sbiw	r28, 0x1d	; 29
    27f8:	0f b6       	in	r0, 0x3f	; 63
    27fa:	f8 94       	cli
    27fc:	de bf       	out	0x3e, r29	; 62
    27fe:	0f be       	out	0x3f, r0	; 63
    2800:	cd bf       	out	0x3d, r28	; 61
    2802:	8d 8f       	std	Y+29, r24	; 0x1d
#if LCD_MODE_SELECT == LCD_4_BIT_MODE_SELECT
	// write logic high to rs pin
	DIO_voidSetPinValue(LCD_4BIT_RS_PIN_PORT, LCD_4BIT_RS_PIN, GPIO_HIGH);
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	63 e0       	ldi	r22, 0x03	; 3
    2808:	41 e0       	ldi	r20, 0x01	; 1
    280a:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>

	// Sending most significant nibble of command through data pins
	DIO_voidSetPinValue(LCD_4BIT_D7_PIN_PORT, LCD_4_BIT_D7_PIN, (Copy_u8Data >> 4)&(u8)1);
    280e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2810:	82 95       	swap	r24
    2812:	8f 70       	andi	r24, 0x0F	; 15
    2814:	98 2f       	mov	r25, r24
    2816:	91 70       	andi	r25, 0x01	; 1
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	60 e0       	ldi	r22, 0x00	; 0
    281c:	49 2f       	mov	r20, r25
    281e:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D6_PIN_PORT, LCD_4_BIT_D6_PIN, (Copy_u8Data >> 5)&(u8)1);
    2822:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2824:	82 95       	swap	r24
    2826:	86 95       	lsr	r24
    2828:	87 70       	andi	r24, 0x07	; 7
    282a:	98 2f       	mov	r25, r24
    282c:	91 70       	andi	r25, 0x01	; 1
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	61 e0       	ldi	r22, 0x01	; 1
    2832:	49 2f       	mov	r20, r25
    2834:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D5_PIN_PORT, LCD_4_BIT_D5_PIN, (Copy_u8Data >> 6)&(u8)1);
    2838:	8d 8d       	ldd	r24, Y+29	; 0x1d
    283a:	82 95       	swap	r24
    283c:	86 95       	lsr	r24
    283e:	86 95       	lsr	r24
    2840:	83 70       	andi	r24, 0x03	; 3
    2842:	98 2f       	mov	r25, r24
    2844:	91 70       	andi	r25, 0x01	; 1
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	62 e0       	ldi	r22, 0x02	; 2
    284a:	49 2f       	mov	r20, r25
    284c:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D4_PIN_PORT, LCD_4_BIT_D4_PIN, (Copy_u8Data >> 7)&(u8)1);
    2850:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2852:	98 2f       	mov	r25, r24
    2854:	99 1f       	adc	r25, r25
    2856:	99 27       	eor	r25, r25
    2858:	99 1f       	adc	r25, r25
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	64 e0       	ldi	r22, 0x04	; 4
    285e:	49 2f       	mov	r20, r25
    2860:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>

	// send enable signal
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_HIGH);
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	62 e0       	ldi	r22, 0x02	; 2
    2868:	41 e0       	ldi	r20, 0x01	; 1
    286a:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	a0 ea       	ldi	r26, 0xA0	; 160
    2874:	b0 e4       	ldi	r27, 0x40	; 64
    2876:	89 8f       	std	Y+25, r24	; 0x19
    2878:	9a 8f       	std	Y+26, r25	; 0x1a
    287a:	ab 8f       	std	Y+27, r26	; 0x1b
    287c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    287e:	69 8d       	ldd	r22, Y+25	; 0x19
    2880:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2882:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2884:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	4a ef       	ldi	r20, 0xFA	; 250
    288c:	54 e4       	ldi	r21, 0x44	; 68
    288e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	8d 8b       	std	Y+21, r24	; 0x15
    2898:	9e 8b       	std	Y+22, r25	; 0x16
    289a:	af 8b       	std	Y+23, r26	; 0x17
    289c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    289e:	6d 89       	ldd	r22, Y+21	; 0x15
    28a0:	7e 89       	ldd	r23, Y+22	; 0x16
    28a2:	8f 89       	ldd	r24, Y+23	; 0x17
    28a4:	98 8d       	ldd	r25, Y+24	; 0x18
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 e8       	ldi	r20, 0x80	; 128
    28ac:	5f e3       	ldi	r21, 0x3F	; 63
    28ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28b2:	88 23       	and	r24, r24
    28b4:	2c f4       	brge	.+10     	; 0x28c0 <H_LCD_void_SendData+0xd2>
		__ticks = 1;
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	9c 8b       	std	Y+20, r25	; 0x14
    28bc:	8b 8b       	std	Y+19, r24	; 0x13
    28be:	3f c0       	rjmp	.+126    	; 0x293e <H_LCD_void_SendData+0x150>
	else if (__tmp > 65535)
    28c0:	6d 89       	ldd	r22, Y+21	; 0x15
    28c2:	7e 89       	ldd	r23, Y+22	; 0x16
    28c4:	8f 89       	ldd	r24, Y+23	; 0x17
    28c6:	98 8d       	ldd	r25, Y+24	; 0x18
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	3f ef       	ldi	r19, 0xFF	; 255
    28cc:	4f e7       	ldi	r20, 0x7F	; 127
    28ce:	57 e4       	ldi	r21, 0x47	; 71
    28d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28d4:	18 16       	cp	r1, r24
    28d6:	4c f5       	brge	.+82     	; 0x292a <H_LCD_void_SendData+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d8:	69 8d       	ldd	r22, Y+25	; 0x19
    28da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	40 e2       	ldi	r20, 0x20	; 32
    28e6:	51 e4       	ldi	r21, 0x41	; 65
    28e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	bc 01       	movw	r22, r24
    28f2:	cd 01       	movw	r24, r26
    28f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	9c 8b       	std	Y+20, r25	; 0x14
    28fe:	8b 8b       	std	Y+19, r24	; 0x13
    2900:	0f c0       	rjmp	.+30     	; 0x2920 <H_LCD_void_SendData+0x132>
    2902:	88 ec       	ldi	r24, 0xC8	; 200
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	9a 8b       	std	Y+18, r25	; 0x12
    2908:	89 8b       	std	Y+17, r24	; 0x11
    290a:	89 89       	ldd	r24, Y+17	; 0x11
    290c:	9a 89       	ldd	r25, Y+18	; 0x12
    290e:	01 97       	sbiw	r24, 0x01	; 1
    2910:	f1 f7       	brne	.-4      	; 0x290e <H_LCD_void_SendData+0x120>
    2912:	9a 8b       	std	Y+18, r25	; 0x12
    2914:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2916:	8b 89       	ldd	r24, Y+19	; 0x13
    2918:	9c 89       	ldd	r25, Y+20	; 0x14
    291a:	01 97       	sbiw	r24, 0x01	; 1
    291c:	9c 8b       	std	Y+20, r25	; 0x14
    291e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2920:	8b 89       	ldd	r24, Y+19	; 0x13
    2922:	9c 89       	ldd	r25, Y+20	; 0x14
    2924:	00 97       	sbiw	r24, 0x00	; 0
    2926:	69 f7       	brne	.-38     	; 0x2902 <H_LCD_void_SendData+0x114>
    2928:	14 c0       	rjmp	.+40     	; 0x2952 <H_LCD_void_SendData+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    292a:	6d 89       	ldd	r22, Y+21	; 0x15
    292c:	7e 89       	ldd	r23, Y+22	; 0x16
    292e:	8f 89       	ldd	r24, Y+23	; 0x17
    2930:	98 8d       	ldd	r25, Y+24	; 0x18
    2932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	9c 8b       	std	Y+20, r25	; 0x14
    293c:	8b 8b       	std	Y+19, r24	; 0x13
    293e:	8b 89       	ldd	r24, Y+19	; 0x13
    2940:	9c 89       	ldd	r25, Y+20	; 0x14
    2942:	98 8b       	std	Y+16, r25	; 0x10
    2944:	8f 87       	std	Y+15, r24	; 0x0f
    2946:	8f 85       	ldd	r24, Y+15	; 0x0f
    2948:	98 89       	ldd	r25, Y+16	; 0x10
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	f1 f7       	brne	.-4      	; 0x294a <H_LCD_void_SendData+0x15c>
    294e:	98 8b       	std	Y+16, r25	; 0x10
    2950:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_LOW);
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	62 e0       	ldi	r22, 0x02	; 2
    2956:	40 e0       	ldi	r20, 0x00	; 0
    2958:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>

	// Sending least significant nibble of command through data pins
	DIO_voidSetPinValue(LCD_4BIT_D7_PIN_PORT, LCD_4_BIT_D7_PIN, ((Copy_u8Data) >> 0)&(u8)1);
    295c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    295e:	98 2f       	mov	r25, r24
    2960:	91 70       	andi	r25, 0x01	; 1
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	60 e0       	ldi	r22, 0x00	; 0
    2966:	49 2f       	mov	r20, r25
    2968:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D6_PIN_PORT, LCD_4_BIT_D6_PIN, ((Copy_u8Data) >> 1)&(u8)1);
    296c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    296e:	86 95       	lsr	r24
    2970:	98 2f       	mov	r25, r24
    2972:	91 70       	andi	r25, 0x01	; 1
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	61 e0       	ldi	r22, 0x01	; 1
    2978:	49 2f       	mov	r20, r25
    297a:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D5_PIN_PORT, LCD_4_BIT_D5_PIN, ((Copy_u8Data) >> 2)&(u8)1);
    297e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2980:	86 95       	lsr	r24
    2982:	86 95       	lsr	r24
    2984:	98 2f       	mov	r25, r24
    2986:	91 70       	andi	r25, 0x01	; 1
    2988:	81 e0       	ldi	r24, 0x01	; 1
    298a:	62 e0       	ldi	r22, 0x02	; 2
    298c:	49 2f       	mov	r20, r25
    298e:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D4_PIN_PORT, LCD_4_BIT_D4_PIN, ((Copy_u8Data) >> 3)&(u8)1);
    2992:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2994:	86 95       	lsr	r24
    2996:	86 95       	lsr	r24
    2998:	86 95       	lsr	r24
    299a:	98 2f       	mov	r25, r24
    299c:	91 70       	andi	r25, 0x01	; 1
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	64 e0       	ldi	r22, 0x04	; 4
    29a2:	49 2f       	mov	r20, r25
    29a4:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>

	// send enable signal
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_HIGH);
    29a8:	80 e0       	ldi	r24, 0x00	; 0
    29aa:	62 e0       	ldi	r22, 0x02	; 2
    29ac:	41 e0       	ldi	r20, 0x01	; 1
    29ae:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
    29b2:	80 e0       	ldi	r24, 0x00	; 0
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	a0 ea       	ldi	r26, 0xA0	; 160
    29b8:	b0 e4       	ldi	r27, 0x40	; 64
    29ba:	8b 87       	std	Y+11, r24	; 0x0b
    29bc:	9c 87       	std	Y+12, r25	; 0x0c
    29be:	ad 87       	std	Y+13, r26	; 0x0d
    29c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	4a ef       	ldi	r20, 0xFA	; 250
    29d0:	54 e4       	ldi	r21, 0x44	; 68
    29d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	8f 83       	std	Y+7, r24	; 0x07
    29dc:	98 87       	std	Y+8, r25	; 0x08
    29de:	a9 87       	std	Y+9, r26	; 0x09
    29e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29e2:	6f 81       	ldd	r22, Y+7	; 0x07
    29e4:	78 85       	ldd	r23, Y+8	; 0x08
    29e6:	89 85       	ldd	r24, Y+9	; 0x09
    29e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e8       	ldi	r20, 0x80	; 128
    29f0:	5f e3       	ldi	r21, 0x3F	; 63
    29f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29f6:	88 23       	and	r24, r24
    29f8:	2c f4       	brge	.+10     	; 0x2a04 <H_LCD_void_SendData+0x216>
		__ticks = 1;
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	9e 83       	std	Y+6, r25	; 0x06
    2a00:	8d 83       	std	Y+5, r24	; 0x05
    2a02:	3f c0       	rjmp	.+126    	; 0x2a82 <H_LCD_void_SendData+0x294>
	else if (__tmp > 65535)
    2a04:	6f 81       	ldd	r22, Y+7	; 0x07
    2a06:	78 85       	ldd	r23, Y+8	; 0x08
    2a08:	89 85       	ldd	r24, Y+9	; 0x09
    2a0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	3f ef       	ldi	r19, 0xFF	; 255
    2a10:	4f e7       	ldi	r20, 0x7F	; 127
    2a12:	57 e4       	ldi	r21, 0x47	; 71
    2a14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a18:	18 16       	cp	r1, r24
    2a1a:	4c f5       	brge	.+82     	; 0x2a6e <H_LCD_void_SendData+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	40 e2       	ldi	r20, 0x20	; 32
    2a2a:	51 e4       	ldi	r21, 0x41	; 65
    2a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	bc 01       	movw	r22, r24
    2a36:	cd 01       	movw	r24, r26
    2a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	9e 83       	std	Y+6, r25	; 0x06
    2a42:	8d 83       	std	Y+5, r24	; 0x05
    2a44:	0f c0       	rjmp	.+30     	; 0x2a64 <H_LCD_void_SendData+0x276>
    2a46:	88 ec       	ldi	r24, 0xC8	; 200
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	9c 83       	std	Y+4, r25	; 0x04
    2a4c:	8b 83       	std	Y+3, r24	; 0x03
    2a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a50:	9c 81       	ldd	r25, Y+4	; 0x04
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	f1 f7       	brne	.-4      	; 0x2a52 <H_LCD_void_SendData+0x264>
    2a56:	9c 83       	std	Y+4, r25	; 0x04
    2a58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5e:	01 97       	sbiw	r24, 0x01	; 1
    2a60:	9e 83       	std	Y+6, r25	; 0x06
    2a62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a64:	8d 81       	ldd	r24, Y+5	; 0x05
    2a66:	9e 81       	ldd	r25, Y+6	; 0x06
    2a68:	00 97       	sbiw	r24, 0x00	; 0
    2a6a:	69 f7       	brne	.-38     	; 0x2a46 <H_LCD_void_SendData+0x258>
    2a6c:	14 c0       	rjmp	.+40     	; 0x2a96 <H_LCD_void_SendData+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a70:	78 85       	ldd	r23, Y+8	; 0x08
    2a72:	89 85       	ldd	r24, Y+9	; 0x09
    2a74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	9e 83       	std	Y+6, r25	; 0x06
    2a80:	8d 83       	std	Y+5, r24	; 0x05
    2a82:	8d 81       	ldd	r24, Y+5	; 0x05
    2a84:	9e 81       	ldd	r25, Y+6	; 0x06
    2a86:	9a 83       	std	Y+2, r25	; 0x02
    2a88:	89 83       	std	Y+1, r24	; 0x01
    2a8a:	89 81       	ldd	r24, Y+1	; 0x01
    2a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8e:	01 97       	sbiw	r24, 0x01	; 1
    2a90:	f1 f7       	brne	.-4      	; 0x2a8e <H_LCD_void_SendData+0x2a0>
    2a92:	9a 83       	std	Y+2, r25	; 0x02
    2a94:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_LOW);
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	62 e0       	ldi	r22, 0x02	; 2
    2a9a:	40 e0       	ldi	r20, 0x00	; 0
    2a9c:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>

#elif LCD_MODE_SELECT == LCD_8_BIT_MODE_SELECT  // 8bits configurations


#endif
}
    2aa0:	6d 96       	adiw	r28, 0x1d	; 29
    2aa2:	0f b6       	in	r0, 0x3f	; 63
    2aa4:	f8 94       	cli
    2aa6:	de bf       	out	0x3e, r29	; 62
    2aa8:	0f be       	out	0x3f, r0	; 63
    2aaa:	cd bf       	out	0x3d, r28	; 61
    2aac:	cf 91       	pop	r28
    2aae:	df 91       	pop	r29
    2ab0:	08 95       	ret

00002ab2 <H_LCD_void_SendString>:
void H_LCD_void_SendString(u8 *Copy_u8Str)
{
    2ab2:	df 93       	push	r29
    2ab4:	cf 93       	push	r28
    2ab6:	00 d0       	rcall	.+0      	; 0x2ab8 <H_LCD_void_SendString+0x6>
    2ab8:	cd b7       	in	r28, 0x3d	; 61
    2aba:	de b7       	in	r29, 0x3e	; 62
    2abc:	9a 83       	std	Y+2, r25	; 0x02
    2abe:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Copy_u8Str)
    2ac0:	89 81       	ldd	r24, Y+1	; 0x01
    2ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac4:	00 97       	sbiw	r24, 0x00	; 0
    2ac6:	89 f0       	breq	.+34     	; 0x2aea <H_LCD_void_SendString+0x38>
    2ac8:	0b c0       	rjmp	.+22     	; 0x2ae0 <H_LCD_void_SendString+0x2e>
	}
	else
	{
		while(*Copy_u8Str)
		{
			H_LCD_void_SendData(*Copy_u8Str++);
    2aca:	e9 81       	ldd	r30, Y+1	; 0x01
    2acc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ace:	20 81       	ld	r18, Z
    2ad0:	89 81       	ldd	r24, Y+1	; 0x01
    2ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad4:	01 96       	adiw	r24, 0x01	; 1
    2ad6:	9a 83       	std	Y+2, r25	; 0x02
    2ad8:	89 83       	std	Y+1, r24	; 0x01
    2ada:	82 2f       	mov	r24, r18
    2adc:	0e 94 f7 13 	call	0x27ee	; 0x27ee <H_LCD_void_SendData>
	{
		/* Nothing */
	}
	else
	{
		while(*Copy_u8Str)
    2ae0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ae2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ae4:	80 81       	ld	r24, Z
    2ae6:	88 23       	and	r24, r24
    2ae8:	81 f7       	brne	.-32     	; 0x2aca <H_LCD_void_SendString+0x18>
		{
			H_LCD_void_SendData(*Copy_u8Str++);
		}
	}
}
    2aea:	0f 90       	pop	r0
    2aec:	0f 90       	pop	r0
    2aee:	cf 91       	pop	r28
    2af0:	df 91       	pop	r29
    2af2:	08 95       	ret

00002af4 <H_LCD_void_gotoXY>:
void H_LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    2af4:	df 93       	push	r29
    2af6:	cf 93       	push	r28
    2af8:	00 d0       	rcall	.+0      	; 0x2afa <H_LCD_void_gotoXY+0x6>
    2afa:	00 d0       	rcall	.+0      	; 0x2afc <H_LCD_void_gotoXY+0x8>
    2afc:	cd b7       	in	r28, 0x3d	; 61
    2afe:	de b7       	in	r29, 0x3e	; 62
    2b00:	89 83       	std	Y+1, r24	; 0x01
    2b02:	6a 83       	std	Y+2, r22	; 0x02
	copy_u8Col--;
    2b04:	8a 81       	ldd	r24, Y+2	; 0x02
    2b06:	81 50       	subi	r24, 0x01	; 1
    2b08:	8a 83       	std	Y+2, r24	; 0x02
	switch(copy_u8Row){
    2b0a:	89 81       	ldd	r24, Y+1	; 0x01
    2b0c:	28 2f       	mov	r18, r24
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	3c 83       	std	Y+4, r19	; 0x04
    2b12:	2b 83       	std	Y+3, r18	; 0x03
    2b14:	8b 81       	ldd	r24, Y+3	; 0x03
    2b16:	9c 81       	ldd	r25, Y+4	; 0x04
    2b18:	82 30       	cpi	r24, 0x02	; 2
    2b1a:	91 05       	cpc	r25, r1
    2b1c:	d9 f0       	breq	.+54     	; 0x2b54 <H_LCD_void_gotoXY+0x60>
    2b1e:	2b 81       	ldd	r18, Y+3	; 0x03
    2b20:	3c 81       	ldd	r19, Y+4	; 0x04
    2b22:	23 30       	cpi	r18, 0x03	; 3
    2b24:	31 05       	cpc	r19, r1
    2b26:	34 f4       	brge	.+12     	; 0x2b34 <H_LCD_void_gotoXY+0x40>
    2b28:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2c:	81 30       	cpi	r24, 0x01	; 1
    2b2e:	91 05       	cpc	r25, r1
    2b30:	61 f0       	breq	.+24     	; 0x2b4a <H_LCD_void_gotoXY+0x56>
    2b32:	1e c0       	rjmp	.+60     	; 0x2b70 <H_LCD_void_gotoXY+0x7c>
    2b34:	2b 81       	ldd	r18, Y+3	; 0x03
    2b36:	3c 81       	ldd	r19, Y+4	; 0x04
    2b38:	23 30       	cpi	r18, 0x03	; 3
    2b3a:	31 05       	cpc	r19, r1
    2b3c:	81 f0       	breq	.+32     	; 0x2b5e <H_LCD_void_gotoXY+0x6a>
    2b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b40:	9c 81       	ldd	r25, Y+4	; 0x04
    2b42:	84 30       	cpi	r24, 0x04	; 4
    2b44:	91 05       	cpc	r25, r1
    2b46:	81 f0       	breq	.+32     	; 0x2b68 <H_LCD_void_gotoXY+0x74>
    2b48:	13 c0       	rjmp	.+38     	; 0x2b70 <H_LCD_void_gotoXY+0x7c>
	case ROW1:
		H_LCD_void_SendCommand(0x80 + copy_u8Col);
    2b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4c:	80 58       	subi	r24, 0x80	; 128
    2b4e:	0e 94 95 12 	call	0x252a	; 0x252a <H_LCD_void_SendCommand>
    2b52:	0e c0       	rjmp	.+28     	; 0x2b70 <H_LCD_void_gotoXY+0x7c>
		break;
	case ROW2:
		H_LCD_void_SendCommand(0xc0 + copy_u8Col);
    2b54:	8a 81       	ldd	r24, Y+2	; 0x02
    2b56:	80 54       	subi	r24, 0x40	; 64
    2b58:	0e 94 95 12 	call	0x252a	; 0x252a <H_LCD_void_SendCommand>
    2b5c:	09 c0       	rjmp	.+18     	; 0x2b70 <H_LCD_void_gotoXY+0x7c>
		break;
	case ROW3:
		H_LCD_void_SendCommand(0x94 + copy_u8Col);
    2b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b60:	8c 56       	subi	r24, 0x6C	; 108
    2b62:	0e 94 95 12 	call	0x252a	; 0x252a <H_LCD_void_SendCommand>
    2b66:	04 c0       	rjmp	.+8      	; 0x2b70 <H_LCD_void_gotoXY+0x7c>
		break;
	case ROW4:
		H_LCD_void_SendCommand(0xd4 + copy_u8Col);
    2b68:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6a:	8c 52       	subi	r24, 0x2C	; 44
    2b6c:	0e 94 95 12 	call	0x252a	; 0x252a <H_LCD_void_SendCommand>
		break;
	default:

		break;
	}
}
    2b70:	0f 90       	pop	r0
    2b72:	0f 90       	pop	r0
    2b74:	0f 90       	pop	r0
    2b76:	0f 90       	pop	r0
    2b78:	cf 91       	pop	r28
    2b7a:	df 91       	pop	r29
    2b7c:	08 95       	ret

00002b7e <H_LCD_void_sendIntNum>:
void H_LCD_void_sendIntNum(u32 copy_s32Num)
{
    2b7e:	ef 92       	push	r14
    2b80:	ff 92       	push	r15
    2b82:	0f 93       	push	r16
    2b84:	1f 93       	push	r17
    2b86:	df 93       	push	r29
    2b88:	cf 93       	push	r28
    2b8a:	cd b7       	in	r28, 0x3d	; 61
    2b8c:	de b7       	in	r29, 0x3e	; 62
    2b8e:	27 97       	sbiw	r28, 0x07	; 7
    2b90:	0f b6       	in	r0, 0x3f	; 63
    2b92:	f8 94       	cli
    2b94:	de bf       	out	0x3e, r29	; 62
    2b96:	0f be       	out	0x3f, r0	; 63
    2b98:	cd bf       	out	0x3d, r28	; 61
    2b9a:	9d 83       	std	Y+5, r25	; 0x05
    2b9c:	8c 83       	std	Y+4, r24	; 0x04
	u8 temp_str[num_of_digits + 1];
	memset(temp_str, ' ', num_of_digits);
	temp_str[num_of_digits] = '\0';
	sprintf((u8 *)temp_str, "%i", copy_s32Num);
	H_LCD_void_SendString(temp_str);
}
    2b9e:	0d b7       	in	r16, 0x3d	; 61
    2ba0:	1e b7       	in	r17, 0x3e	; 62

		break;
	}
}
void H_LCD_void_sendIntNum(u32 copy_s32Num)
{
    2ba2:	8d b7       	in	r24, 0x3d	; 61
    2ba4:	9e b7       	in	r25, 0x3e	; 62
    2ba6:	7c 01       	movw	r14, r24
	u8 num_of_digits = countDigits(copy_s32Num);
    2ba8:	8c 81       	ldd	r24, Y+4	; 0x04
    2baa:	9d 81       	ldd	r25, Y+5	; 0x05
    2bac:	0e 94 80 16 	call	0x2d00	; 0x2d00 <countDigits>
    2bb0:	89 83       	std	Y+1, r24	; 0x01
	u8 temp_str[num_of_digits + 1];
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	88 2f       	mov	r24, r24
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	01 96       	adiw	r24, 0x01	; 1
    2bba:	2d b7       	in	r18, 0x3d	; 61
    2bbc:	3e b7       	in	r19, 0x3e	; 62
    2bbe:	28 1b       	sub	r18, r24
    2bc0:	39 0b       	sbc	r19, r25
    2bc2:	0f b6       	in	r0, 0x3f	; 63
    2bc4:	f8 94       	cli
    2bc6:	3e bf       	out	0x3e, r19	; 62
    2bc8:	0f be       	out	0x3f, r0	; 63
    2bca:	2d bf       	out	0x3d, r18	; 61
    2bcc:	8d b7       	in	r24, 0x3d	; 61
    2bce:	9e b7       	in	r25, 0x3e	; 62
    2bd0:	01 96       	adiw	r24, 0x01	; 1
    2bd2:	9f 83       	std	Y+7, r25	; 0x07
    2bd4:	8e 83       	std	Y+6, r24	; 0x06
    2bd6:	8e 81       	ldd	r24, Y+6	; 0x06
    2bd8:	9f 81       	ldd	r25, Y+7	; 0x07
    2bda:	00 96       	adiw	r24, 0x00	; 0
    2bdc:	9f 83       	std	Y+7, r25	; 0x07
    2bde:	8e 83       	std	Y+6, r24	; 0x06
    2be0:	2e 81       	ldd	r18, Y+6	; 0x06
    2be2:	3f 81       	ldd	r19, Y+7	; 0x07
    2be4:	3b 83       	std	Y+3, r19	; 0x03
    2be6:	2a 83       	std	Y+2, r18	; 0x02
	memset(temp_str, ' ', num_of_digits);
    2be8:	2a 81       	ldd	r18, Y+2	; 0x02
    2bea:	3b 81       	ldd	r19, Y+3	; 0x03
    2bec:	89 81       	ldd	r24, Y+1	; 0x01
    2bee:	48 2f       	mov	r20, r24
    2bf0:	50 e0       	ldi	r21, 0x00	; 0
    2bf2:	c9 01       	movw	r24, r18
    2bf4:	60 e2       	ldi	r22, 0x20	; 32
    2bf6:	70 e0       	ldi	r23, 0x00	; 0
    2bf8:	0e 94 1c 1a 	call	0x3438	; 0x3438 <memset>
	temp_str[num_of_digits] = '\0';
    2bfc:	89 81       	ldd	r24, Y+1	; 0x01
    2bfe:	28 2f       	mov	r18, r24
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	8a 81       	ldd	r24, Y+2	; 0x02
    2c04:	9b 81       	ldd	r25, Y+3	; 0x03
    2c06:	fc 01       	movw	r30, r24
    2c08:	e2 0f       	add	r30, r18
    2c0a:	f3 1f       	adc	r31, r19
    2c0c:	10 82       	st	Z, r1
	sprintf((u8 *)temp_str, "%i", copy_s32Num);
    2c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c10:	9b 81       	ldd	r25, Y+3	; 0x03
    2c12:	00 d0       	rcall	.+0      	; 0x2c14 <H_LCD_void_sendIntNum+0x96>
    2c14:	00 d0       	rcall	.+0      	; 0x2c16 <H_LCD_void_sendIntNum+0x98>
    2c16:	00 d0       	rcall	.+0      	; 0x2c18 <H_LCD_void_sendIntNum+0x9a>
    2c18:	ed b7       	in	r30, 0x3d	; 61
    2c1a:	fe b7       	in	r31, 0x3e	; 62
    2c1c:	31 96       	adiw	r30, 0x01	; 1
    2c1e:	91 83       	std	Z+1, r25	; 0x01
    2c20:	80 83       	st	Z, r24
    2c22:	80 e6       	ldi	r24, 0x60	; 96
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	93 83       	std	Z+3, r25	; 0x03
    2c28:	82 83       	std	Z+2, r24	; 0x02
    2c2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c2c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c2e:	95 83       	std	Z+5, r25	; 0x05
    2c30:	84 83       	std	Z+4, r24	; 0x04
    2c32:	0e 94 23 1a 	call	0x3446	; 0x3446 <sprintf>
    2c36:	8d b7       	in	r24, 0x3d	; 61
    2c38:	9e b7       	in	r25, 0x3e	; 62
    2c3a:	06 96       	adiw	r24, 0x06	; 6
    2c3c:	0f b6       	in	r0, 0x3f	; 63
    2c3e:	f8 94       	cli
    2c40:	9e bf       	out	0x3e, r25	; 62
    2c42:	0f be       	out	0x3f, r0	; 63
    2c44:	8d bf       	out	0x3d, r24	; 61
	H_LCD_void_SendString(temp_str);
    2c46:	8a 81       	ldd	r24, Y+2	; 0x02
    2c48:	9b 81       	ldd	r25, Y+3	; 0x03
    2c4a:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <H_LCD_void_SendString>
    2c4e:	0f b6       	in	r0, 0x3f	; 63
    2c50:	f8 94       	cli
    2c52:	fe be       	out	0x3e, r15	; 62
    2c54:	0f be       	out	0x3f, r0	; 63
    2c56:	ed be       	out	0x3d, r14	; 61
}
    2c58:	0f b6       	in	r0, 0x3f	; 63
    2c5a:	f8 94       	cli
    2c5c:	1e bf       	out	0x3e, r17	; 62
    2c5e:	0f be       	out	0x3f, r0	; 63
    2c60:	0d bf       	out	0x3d, r16	; 61
    2c62:	27 96       	adiw	r28, 0x07	; 7
    2c64:	0f b6       	in	r0, 0x3f	; 63
    2c66:	f8 94       	cli
    2c68:	de bf       	out	0x3e, r29	; 62
    2c6a:	0f be       	out	0x3f, r0	; 63
    2c6c:	cd bf       	out	0x3d, r28	; 61
    2c6e:	cf 91       	pop	r28
    2c70:	df 91       	pop	r29
    2c72:	1f 91       	pop	r17
    2c74:	0f 91       	pop	r16
    2c76:	ff 90       	pop	r15
    2c78:	ef 90       	pop	r14
    2c7a:	08 95       	ret

00002c7c <H_LCD_void_Clear_Display>:


void H_LCD_void_Clear_Display(void)
{
    2c7c:	df 93       	push	r29
    2c7e:	cf 93       	push	r28
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_SendCommand(LCD_CLEAR);
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	0e 94 95 12 	call	0x252a	; 0x252a <H_LCD_void_SendCommand>
}
    2c8a:	cf 91       	pop	r28
    2c8c:	df 91       	pop	r29
    2c8e:	08 95       	ret

00002c90 <H_LCD_void_creatCustomChar>:



void H_LCD_void_creatCustomChar(const u8 * ArrPattern,u8 copy_u8charCode)
{
    2c90:	df 93       	push	r29
    2c92:	cf 93       	push	r28
    2c94:	00 d0       	rcall	.+0      	; 0x2c96 <H_LCD_void_creatCustomChar+0x6>
    2c96:	00 d0       	rcall	.+0      	; 0x2c98 <H_LCD_void_creatCustomChar+0x8>
    2c98:	cd b7       	in	r28, 0x3d	; 61
    2c9a:	de b7       	in	r29, 0x3e	; 62
    2c9c:	9b 83       	std	Y+3, r25	; 0x03
    2c9e:	8a 83       	std	Y+2, r24	; 0x02
    2ca0:	6c 83       	std	Y+4, r22	; 0x04
	u8 lcd_counter = 0;
    2ca2:	19 82       	std	Y+1, r1	; 0x01
	if(NULL != ArrPattern)
    2ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca8:	00 97       	sbiw	r24, 0x00	; 0
    2caa:	b1 f0       	breq	.+44     	; 0x2cd8 <H_LCD_void_creatCustomChar+0x48>
	{
		H_LCD_void_SendCommand(LCD_CGRAM_START);
    2cac:	80 e4       	ldi	r24, 0x40	; 64
    2cae:	0e 94 95 12 	call	0x252a	; 0x252a <H_LCD_void_SendCommand>
		for(lcd_counter = 0; lcd_counter <= 7; ++lcd_counter)
    2cb2:	19 82       	std	Y+1, r1	; 0x01
    2cb4:	0e c0       	rjmp	.+28     	; 0x2cd2 <H_LCD_void_creatCustomChar+0x42>
		{
			H_LCD_void_SendData(ArrPattern[lcd_counter]);
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
    2cb8:	28 2f       	mov	r18, r24
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbe:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc0:	fc 01       	movw	r30, r24
    2cc2:	e2 0f       	add	r30, r18
    2cc4:	f3 1f       	adc	r31, r19
    2cc6:	80 81       	ld	r24, Z
    2cc8:	0e 94 f7 13 	call	0x27ee	; 0x27ee <H_LCD_void_SendData>
{
	u8 lcd_counter = 0;
	if(NULL != ArrPattern)
	{
		H_LCD_void_SendCommand(LCD_CGRAM_START);
		for(lcd_counter = 0; lcd_counter <= 7; ++lcd_counter)
    2ccc:	89 81       	ldd	r24, Y+1	; 0x01
    2cce:	8f 5f       	subi	r24, 0xFF	; 255
    2cd0:	89 83       	std	Y+1, r24	; 0x01
    2cd2:	89 81       	ldd	r24, Y+1	; 0x01
    2cd4:	88 30       	cpi	r24, 0x08	; 8
    2cd6:	78 f3       	brcs	.-34     	; 0x2cb6 <H_LCD_void_creatCustomChar+0x26>
		{
			H_LCD_void_SendData(ArrPattern[lcd_counter]);
		}
	}
	else{/* Nothing */}
}
    2cd8:	0f 90       	pop	r0
    2cda:	0f 90       	pop	r0
    2cdc:	0f 90       	pop	r0
    2cde:	0f 90       	pop	r0
    2ce0:	cf 91       	pop	r28
    2ce2:	df 91       	pop	r29
    2ce4:	08 95       	ret

00002ce6 <H_LCD_void_displayCustomChar>:

void H_LCD_void_displayCustomChar(u8 copy_u8charCode)
{
    2ce6:	df 93       	push	r29
    2ce8:	cf 93       	push	r28
    2cea:	0f 92       	push	r0
    2cec:	cd b7       	in	r28, 0x3d	; 61
    2cee:	de b7       	in	r29, 0x3e	; 62
    2cf0:	89 83       	std	Y+1, r24	; 0x01
	H_LCD_void_SendData(copy_u8charCode);
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	0e 94 f7 13 	call	0x27ee	; 0x27ee <H_LCD_void_SendData>
}
    2cf8:	0f 90       	pop	r0
    2cfa:	cf 91       	pop	r28
    2cfc:	df 91       	pop	r29
    2cfe:	08 95       	ret

00002d00 <countDigits>:


/* --------------------------------------- helper function --------------------------------------- */
u8 countDigits(s32 number) {
    2d00:	df 93       	push	r29
    2d02:	cf 93       	push	r28
    2d04:	00 d0       	rcall	.+0      	; 0x2d06 <countDigits+0x6>
    2d06:	00 d0       	rcall	.+0      	; 0x2d08 <countDigits+0x8>
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
    2d0c:	9b 83       	std	Y+3, r25	; 0x03
    2d0e:	8a 83       	std	Y+2, r24	; 0x02
    u8 count = 0;
    2d10:	19 82       	std	Y+1, r1	; 0x01

    // Handle the case where the number is 0 separately
    if (number == 0) {
    2d12:	8a 81       	ldd	r24, Y+2	; 0x02
    2d14:	9b 81       	ldd	r25, Y+3	; 0x03
    2d16:	00 97       	sbiw	r24, 0x00	; 0
    2d18:	19 f4       	brne	.+6      	; 0x2d20 <countDigits+0x20>
        return 1;
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	8c 83       	std	Y+4, r24	; 0x04
    2d1e:	1f c0       	rjmp	.+62     	; 0x2d5e <countDigits+0x5e>
    }
    // For negative numbers, convert to positive before counting digits
    if (number < 0) {
    2d20:	8a 81       	ldd	r24, Y+2	; 0x02
    2d22:	9b 81       	ldd	r25, Y+3	; 0x03
    2d24:	99 23       	and	r25, r25
    2d26:	ac f4       	brge	.+42     	; 0x2d52 <countDigits+0x52>
    	number = -1 * number;
    2d28:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d2c:	90 95       	com	r25
    2d2e:	81 95       	neg	r24
    2d30:	9f 4f       	sbci	r25, 0xFF	; 255
    2d32:	9b 83       	std	Y+3, r25	; 0x03
    2d34:	8a 83       	std	Y+2, r24	; 0x02
    2d36:	0d c0       	rjmp	.+26     	; 0x2d52 <countDigits+0x52>
    }
    // Count the digits by dividing by 10 until the number becomes 0
    while (number != 0) {
        number /= 10;
    2d38:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d3c:	2a e0       	ldi	r18, 0x0A	; 10
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	b9 01       	movw	r22, r18
    2d42:	0e 94 be 19 	call	0x337c	; 0x337c <__divmodhi4>
    2d46:	cb 01       	movw	r24, r22
    2d48:	9b 83       	std	Y+3, r25	; 0x03
    2d4a:	8a 83       	std	Y+2, r24	; 0x02
        ++count;
    2d4c:	89 81       	ldd	r24, Y+1	; 0x01
    2d4e:	8f 5f       	subi	r24, 0xFF	; 255
    2d50:	89 83       	std	Y+1, r24	; 0x01
    // For negative numbers, convert to positive before counting digits
    if (number < 0) {
    	number = -1 * number;
    }
    // Count the digits by dividing by 10 until the number becomes 0
    while (number != 0) {
    2d52:	8a 81       	ldd	r24, Y+2	; 0x02
    2d54:	9b 81       	ldd	r25, Y+3	; 0x03
    2d56:	00 97       	sbiw	r24, 0x00	; 0
    2d58:	79 f7       	brne	.-34     	; 0x2d38 <countDigits+0x38>
        number /= 10;
        ++count;
    }

    return count;
    2d5a:	89 81       	ldd	r24, Y+1	; 0x01
    2d5c:	8c 83       	std	Y+4, r24	; 0x04
    2d5e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2d60:	0f 90       	pop	r0
    2d62:	0f 90       	pop	r0
    2d64:	0f 90       	pop	r0
    2d66:	0f 90       	pop	r0
    2d68:	cf 91       	pop	r28
    2d6a:	df 91       	pop	r29
    2d6c:	08 95       	ret

00002d6e <SevenSeG_voidinit>:
 *      Author: Mohamed Aly
 */
#include "seven_segment.h"

void SevenSeG_voidinit(void)
{
    2d6e:	df 93       	push	r29
    2d70:	cf 93       	push	r28
    2d72:	cd b7       	in	r28, 0x3d	; 61
    2d74:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(SEGMENT_PIN0_PORT, SEGMENT_PIN0, GPIO_DIRECTION_OUTPUT);
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	60 e0       	ldi	r22, 0x00	; 0
    2d7a:	41 e0       	ldi	r20, 0x01	; 1
    2d7c:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(SEGMENT_PIN1_PORT, SEGMENT_PIN1, GPIO_DIRECTION_OUTPUT);
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	61 e0       	ldi	r22, 0x01	; 1
    2d84:	41 e0       	ldi	r20, 0x01	; 1
    2d86:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(SEGMENT_PIN2_PORT, SEGMENT_PIN2, GPIO_DIRECTION_OUTPUT);
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	62 e0       	ldi	r22, 0x02	; 2
    2d8e:	41 e0       	ldi	r20, 0x01	; 1
    2d90:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(SEGMENT_PIN3_PORT, SEGMENT_PIN3, GPIO_DIRECTION_OUTPUT);
    2d94:	81 e0       	ldi	r24, 0x01	; 1
    2d96:	64 e0       	ldi	r22, 0x04	; 4
    2d98:	41 e0       	ldi	r20, 0x01	; 1
    2d9a:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DIO_voidSetPinDirection>
}
    2d9e:	cf 91       	pop	r28
    2da0:	df 91       	pop	r29
    2da2:	08 95       	ret

00002da4 <SevenSeG_voidWriteNum>:

void SevenSeG_voidWriteNum(u8 Copy_u8Number)
{
    2da4:	df 93       	push	r29
    2da6:	cf 93       	push	r28
    2da8:	0f 92       	push	r0
    2daa:	cd b7       	in	r28, 0x3d	; 61
    2dac:	de b7       	in	r29, 0x3e	; 62
    2dae:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPinValue(SEGMENT_PIN0_PORT, SEGMENT_PIN0, ((Copy_u8Number >> 0) & 0x01));
    2db0:	89 81       	ldd	r24, Y+1	; 0x01
    2db2:	98 2f       	mov	r25, r24
    2db4:	91 70       	andi	r25, 0x01	; 1
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    2db8:	60 e0       	ldi	r22, 0x00	; 0
    2dba:	49 2f       	mov	r20, r25
    2dbc:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(SEGMENT_PIN1_PORT, SEGMENT_PIN1, ((Copy_u8Number >> 1) & 0x01));
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	86 95       	lsr	r24
    2dc4:	98 2f       	mov	r25, r24
    2dc6:	91 70       	andi	r25, 0x01	; 1
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	61 e0       	ldi	r22, 0x01	; 1
    2dcc:	49 2f       	mov	r20, r25
    2dce:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(SEGMENT_PIN2_PORT, SEGMENT_PIN2, ((Copy_u8Number >> 2) & 0x01));
    2dd2:	89 81       	ldd	r24, Y+1	; 0x01
    2dd4:	86 95       	lsr	r24
    2dd6:	86 95       	lsr	r24
    2dd8:	98 2f       	mov	r25, r24
    2dda:	91 70       	andi	r25, 0x01	; 1
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	62 e0       	ldi	r22, 0x02	; 2
    2de0:	49 2f       	mov	r20, r25
    2de2:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(SEGMENT_PIN3_PORT, SEGMENT_PIN3, ((Copy_u8Number >> 3) & 0x01));
    2de6:	89 81       	ldd	r24, Y+1	; 0x01
    2de8:	86 95       	lsr	r24
    2dea:	86 95       	lsr	r24
    2dec:	86 95       	lsr	r24
    2dee:	98 2f       	mov	r25, r24
    2df0:	91 70       	andi	r25, 0x01	; 1
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	64 e0       	ldi	r22, 0x04	; 4
    2df6:	49 2f       	mov	r20, r25
    2df8:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
}
    2dfc:	0f 90       	pop	r0
    2dfe:	cf 91       	pop	r28
    2e00:	df 91       	pop	r29
    2e02:	08 95       	ret

00002e04 <H_KEYPAD_void_Init>:
static u8 rows_ports[4] = {KEYPAD_R1_PORT, KEYPAD_R2_PORT, KEYPAD_R3_PORT, KEYPAD_R4_PORT};
static u8 cols_ports[4] = {KEYPAD_C1_PORT, KEYPAD_C2_PORT, KEYPAD_C3_PORT, KEYPAD_C4_PORT};


void H_KEYPAD_void_Init(void)
{
    2e04:	df 93       	push	r29
    2e06:	cf 93       	push	r28
    2e08:	cd b7       	in	r28, 0x3d	; 61
    2e0a:	de b7       	in	r29, 0x3e	; 62
	// initialize rows to be output mode
	DIO_voidSetPinDirection(KEYPAD_R1_PORT, KEYPAD_R1_PIN, GPIO_DIRECTION_OUTPUT);
    2e0c:	82 e0       	ldi	r24, 0x02	; 2
    2e0e:	65 e0       	ldi	r22, 0x05	; 5
    2e10:	41 e0       	ldi	r20, 0x01	; 1
    2e12:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_R2_PORT, KEYPAD_R2_PIN, GPIO_DIRECTION_OUTPUT);
    2e16:	82 e0       	ldi	r24, 0x02	; 2
    2e18:	64 e0       	ldi	r22, 0x04	; 4
    2e1a:	41 e0       	ldi	r20, 0x01	; 1
    2e1c:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_R3_PORT, KEYPAD_R3_PIN, GPIO_DIRECTION_OUTPUT);
    2e20:	82 e0       	ldi	r24, 0x02	; 2
    2e22:	63 e0       	ldi	r22, 0x03	; 3
    2e24:	41 e0       	ldi	r20, 0x01	; 1
    2e26:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_R4_PORT, KEYPAD_R4_PIN, GPIO_DIRECTION_OUTPUT);
    2e2a:	82 e0       	ldi	r24, 0x02	; 2
    2e2c:	62 e0       	ldi	r22, 0x02	; 2
    2e2e:	41 e0       	ldi	r20, 0x01	; 1
    2e30:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DIO_voidSetPinDirection>

	// initialize columns to be output mode
	DIO_voidSetPinDirection(KEYPAD_C1_PORT, KEYPAD_R1_PIN, GPIO_DIRECTION_INPUT);
    2e34:	83 e0       	ldi	r24, 0x03	; 3
    2e36:	65 e0       	ldi	r22, 0x05	; 5
    2e38:	40 e0       	ldi	r20, 0x00	; 0
    2e3a:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_C2_PORT, KEYPAD_R2_PIN, GPIO_DIRECTION_INPUT);
    2e3e:	83 e0       	ldi	r24, 0x03	; 3
    2e40:	64 e0       	ldi	r22, 0x04	; 4
    2e42:	40 e0       	ldi	r20, 0x00	; 0
    2e44:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_C3_PORT, KEYPAD_R3_PIN, GPIO_DIRECTION_INPUT);
    2e48:	83 e0       	ldi	r24, 0x03	; 3
    2e4a:	63 e0       	ldi	r22, 0x03	; 3
    2e4c:	40 e0       	ldi	r20, 0x00	; 0
    2e4e:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_C4_PORT, KEYPAD_R4_PIN, GPIO_DIRECTION_INPUT);
    2e52:	83 e0       	ldi	r24, 0x03	; 3
    2e54:	62 e0       	ldi	r22, 0x02	; 2
    2e56:	40 e0       	ldi	r20, 0x00	; 0
    2e58:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DIO_voidSetPinDirection>
}
    2e5c:	cf 91       	pop	r28
    2e5e:	df 91       	pop	r29
    2e60:	08 95       	ret

00002e62 <H_KEYPAD_u8_getPressedKey>:

void H_KEYPAD_u8_getPressedKey(u8 * pPressedKey)
{
    2e62:	df 93       	push	r29
    2e64:	cf 93       	push	r28
    2e66:	cd b7       	in	r28, 0x3d	; 61
    2e68:	de b7       	in	r29, 0x3e	; 62
    2e6a:	64 97       	sbiw	r28, 0x14	; 20
    2e6c:	0f b6       	in	r0, 0x3f	; 63
    2e6e:	f8 94       	cli
    2e70:	de bf       	out	0x3e, r29	; 62
    2e72:	0f be       	out	0x3f, r0	; 63
    2e74:	cd bf       	out	0x3d, r28	; 61
    2e76:	9c 8b       	std	Y+20, r25	; 0x14
    2e78:	8b 8b       	std	Y+19, r24	; 0x13
	u8 l_row_counter = 0;
    2e7a:	1a 8a       	std	Y+18, r1	; 0x12
	u8 l_column_counter = 0;
    2e7c:	19 8a       	std	Y+17, r1	; 0x11
	u8 l_counter = 0;
    2e7e:	18 8a       	std	Y+16, r1	; 0x10
	u8 row_logic = 1;
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	8f 87       	std	Y+15, r24	; 0x0f
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
    2e84:	1a 8a       	std	Y+18, r1	; 0x12
    2e86:	d5 c0       	rjmp	.+426    	; 0x3032 <H_KEYPAD_u8_getPressedKey+0x1d0>
	{
		// Set All pins to be low at first
		for(l_counter = 0; l_counter < KEYPAD_ROWS; l_counter++)
    2e88:	18 8a       	std	Y+16, r1	; 0x10
    2e8a:	16 c0       	rjmp	.+44     	; 0x2eb8 <H_KEYPAD_u8_getPressedKey+0x56>
		{
			DIO_voidSetPinValue(rows_ports[l_counter], rows_pins[l_counter], GPIO_HIGH);
    2e8c:	88 89       	ldd	r24, Y+16	; 0x10
    2e8e:	88 2f       	mov	r24, r24
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	fc 01       	movw	r30, r24
    2e94:	e5 58       	subi	r30, 0x85	; 133
    2e96:	ff 4f       	sbci	r31, 0xFF	; 255
    2e98:	20 81       	ld	r18, Z
    2e9a:	88 89       	ldd	r24, Y+16	; 0x10
    2e9c:	88 2f       	mov	r24, r24
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	fc 01       	movw	r30, r24
    2ea2:	ed 58       	subi	r30, 0x8D	; 141
    2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea6:	90 81       	ld	r25, Z
    2ea8:	82 2f       	mov	r24, r18
    2eaa:	69 2f       	mov	r22, r25
    2eac:	41 e0       	ldi	r20, 0x01	; 1
    2eae:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
	u8 l_counter = 0;
	u8 row_logic = 1;
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
	{
		// Set All pins to be low at first
		for(l_counter = 0; l_counter < KEYPAD_ROWS; l_counter++)
    2eb2:	88 89       	ldd	r24, Y+16	; 0x10
    2eb4:	8f 5f       	subi	r24, 0xFF	; 255
    2eb6:	88 8b       	std	Y+16, r24	; 0x10
    2eb8:	88 89       	ldd	r24, Y+16	; 0x10
    2eba:	84 30       	cpi	r24, 0x04	; 4
    2ebc:	38 f3       	brcs	.-50     	; 0x2e8c <H_KEYPAD_u8_getPressedKey+0x2a>
		{
			DIO_voidSetPinValue(rows_ports[l_counter], rows_pins[l_counter], GPIO_HIGH);
		}

		DIO_voidSetPinValue(rows_ports[l_row_counter], rows_pins[l_row_counter], GPIO_LOW);
    2ebe:	8a 89       	ldd	r24, Y+18	; 0x12
    2ec0:	88 2f       	mov	r24, r24
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	fc 01       	movw	r30, r24
    2ec6:	e5 58       	subi	r30, 0x85	; 133
    2ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eca:	20 81       	ld	r18, Z
    2ecc:	8a 89       	ldd	r24, Y+18	; 0x12
    2ece:	88 2f       	mov	r24, r24
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	fc 01       	movw	r30, r24
    2ed4:	ed 58       	subi	r30, 0x8D	; 141
    2ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed8:	90 81       	ld	r25, Z
    2eda:	82 2f       	mov	r24, r18
    2edc:	69 2f       	mov	r22, r25
    2ede:	40 e0       	ldi	r20, 0x00	; 0
    2ee0:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
    2ee4:	80 e0       	ldi	r24, 0x00	; 0
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	a0 e2       	ldi	r26, 0x20	; 32
    2eea:	b1 e4       	ldi	r27, 0x41	; 65
    2eec:	8b 87       	std	Y+11, r24	; 0x0b
    2eee:	9c 87       	std	Y+12, r25	; 0x0c
    2ef0:	ad 87       	std	Y+13, r26	; 0x0d
    2ef2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ef6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2efa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	4a ef       	ldi	r20, 0xFA	; 250
    2f02:	54 e4       	ldi	r21, 0x44	; 68
    2f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	8f 83       	std	Y+7, r24	; 0x07
    2f0e:	98 87       	std	Y+8, r25	; 0x08
    2f10:	a9 87       	std	Y+9, r26	; 0x09
    2f12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f14:	6f 81       	ldd	r22, Y+7	; 0x07
    2f16:	78 85       	ldd	r23, Y+8	; 0x08
    2f18:	89 85       	ldd	r24, Y+9	; 0x09
    2f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	40 e8       	ldi	r20, 0x80	; 128
    2f22:	5f e3       	ldi	r21, 0x3F	; 63
    2f24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f28:	88 23       	and	r24, r24
    2f2a:	2c f4       	brge	.+10     	; 0x2f36 <H_KEYPAD_u8_getPressedKey+0xd4>
		__ticks = 1;
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	9e 83       	std	Y+6, r25	; 0x06
    2f32:	8d 83       	std	Y+5, r24	; 0x05
    2f34:	3f c0       	rjmp	.+126    	; 0x2fb4 <H_KEYPAD_u8_getPressedKey+0x152>
	else if (__tmp > 65535)
    2f36:	6f 81       	ldd	r22, Y+7	; 0x07
    2f38:	78 85       	ldd	r23, Y+8	; 0x08
    2f3a:	89 85       	ldd	r24, Y+9	; 0x09
    2f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	3f ef       	ldi	r19, 0xFF	; 255
    2f42:	4f e7       	ldi	r20, 0x7F	; 127
    2f44:	57 e4       	ldi	r21, 0x47	; 71
    2f46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f4a:	18 16       	cp	r1, r24
    2f4c:	4c f5       	brge	.+82     	; 0x2fa0 <H_KEYPAD_u8_getPressedKey+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f50:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f52:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f54:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	40 e2       	ldi	r20, 0x20	; 32
    2f5c:	51 e4       	ldi	r21, 0x41	; 65
    2f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	bc 01       	movw	r22, r24
    2f68:	cd 01       	movw	r24, r26
    2f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	9e 83       	std	Y+6, r25	; 0x06
    2f74:	8d 83       	std	Y+5, r24	; 0x05
    2f76:	0f c0       	rjmp	.+30     	; 0x2f96 <H_KEYPAD_u8_getPressedKey+0x134>
    2f78:	88 ec       	ldi	r24, 0xC8	; 200
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	9c 83       	std	Y+4, r25	; 0x04
    2f7e:	8b 83       	std	Y+3, r24	; 0x03
    2f80:	8b 81       	ldd	r24, Y+3	; 0x03
    2f82:	9c 81       	ldd	r25, Y+4	; 0x04
    2f84:	01 97       	sbiw	r24, 0x01	; 1
    2f86:	f1 f7       	brne	.-4      	; 0x2f84 <H_KEYPAD_u8_getPressedKey+0x122>
    2f88:	9c 83       	std	Y+4, r25	; 0x04
    2f8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	9e 83       	std	Y+6, r25	; 0x06
    2f94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f96:	8d 81       	ldd	r24, Y+5	; 0x05
    2f98:	9e 81       	ldd	r25, Y+6	; 0x06
    2f9a:	00 97       	sbiw	r24, 0x00	; 0
    2f9c:	69 f7       	brne	.-38     	; 0x2f78 <H_KEYPAD_u8_getPressedKey+0x116>
    2f9e:	14 c0       	rjmp	.+40     	; 0x2fc8 <H_KEYPAD_u8_getPressedKey+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa2:	78 85       	ldd	r23, Y+8	; 0x08
    2fa4:	89 85       	ldd	r24, Y+9	; 0x09
    2fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	9e 83       	std	Y+6, r25	; 0x06
    2fb2:	8d 83       	std	Y+5, r24	; 0x05
    2fb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb8:	9a 83       	std	Y+2, r25	; 0x02
    2fba:	89 83       	std	Y+1, r24	; 0x01
    2fbc:	89 81       	ldd	r24, Y+1	; 0x01
    2fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc0:	01 97       	sbiw	r24, 0x01	; 1
    2fc2:	f1 f7       	brne	.-4      	; 0x2fc0 <H_KEYPAD_u8_getPressedKey+0x15e>
    2fc4:	9a 83       	std	Y+2, r25	; 0x02
    2fc6:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(10);

		for(l_column_counter = 0; l_column_counter < KEYPAD_COLUMNS; l_column_counter++)
    2fc8:	19 8a       	std	Y+17, r1	; 0x11
    2fca:	2d c0       	rjmp	.+90     	; 0x3026 <H_KEYPAD_u8_getPressedKey+0x1c4>
		{
			row_logic = DIO_u8GetPinValue(cols_ports[l_column_counter], cols_pins[l_column_counter]);
    2fcc:	89 89       	ldd	r24, Y+17	; 0x11
    2fce:	88 2f       	mov	r24, r24
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	fc 01       	movw	r30, r24
    2fd4:	e1 58       	subi	r30, 0x81	; 129
    2fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd8:	20 81       	ld	r18, Z
    2fda:	89 89       	ldd	r24, Y+17	; 0x11
    2fdc:	88 2f       	mov	r24, r24
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	fc 01       	movw	r30, r24
    2fe2:	e9 58       	subi	r30, 0x89	; 137
    2fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe6:	90 81       	ld	r25, Z
    2fe8:	82 2f       	mov	r24, r18
    2fea:	69 2f       	mov	r22, r25
    2fec:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <DIO_u8GetPinValue>
    2ff0:	8f 87       	std	Y+15, r24	; 0x0f

			if(row_logic == GPIO_LOW)
    2ff2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ff4:	88 23       	and	r24, r24
    2ff6:	a1 f4       	brne	.+40     	; 0x3020 <H_KEYPAD_u8_getPressedKey+0x1be>
			{
				*pPressedKey = btn_values[l_row_counter][l_column_counter];
    2ff8:	8a 89       	ldd	r24, Y+18	; 0x12
    2ffa:	48 2f       	mov	r20, r24
    2ffc:	50 e0       	ldi	r21, 0x00	; 0
    2ffe:	89 89       	ldd	r24, Y+17	; 0x11
    3000:	28 2f       	mov	r18, r24
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	ca 01       	movw	r24, r20
    3006:	88 0f       	add	r24, r24
    3008:	99 1f       	adc	r25, r25
    300a:	88 0f       	add	r24, r24
    300c:	99 1f       	adc	r25, r25
    300e:	82 0f       	add	r24, r18
    3010:	93 1f       	adc	r25, r19
    3012:	fc 01       	movw	r30, r24
    3014:	e7 57       	subi	r30, 0x77	; 119
    3016:	ff 4f       	sbci	r31, 0xFF	; 255
    3018:	80 81       	ld	r24, Z
    301a:	eb 89       	ldd	r30, Y+19	; 0x13
    301c:	fc 89       	ldd	r31, Y+20	; 0x14
    301e:	80 83       	st	Z, r24

		DIO_voidSetPinValue(rows_ports[l_row_counter], rows_pins[l_row_counter], GPIO_LOW);

		_delay_ms(10);

		for(l_column_counter = 0; l_column_counter < KEYPAD_COLUMNS; l_column_counter++)
    3020:	89 89       	ldd	r24, Y+17	; 0x11
    3022:	8f 5f       	subi	r24, 0xFF	; 255
    3024:	89 8b       	std	Y+17, r24	; 0x11
    3026:	89 89       	ldd	r24, Y+17	; 0x11
    3028:	84 30       	cpi	r24, 0x04	; 4
    302a:	80 f2       	brcs	.-96     	; 0x2fcc <H_KEYPAD_u8_getPressedKey+0x16a>
{
	u8 l_row_counter = 0;
	u8 l_column_counter = 0;
	u8 l_counter = 0;
	u8 row_logic = 1;
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
    302c:	8a 89       	ldd	r24, Y+18	; 0x12
    302e:	8f 5f       	subi	r24, 0xFF	; 255
    3030:	8a 8b       	std	Y+18, r24	; 0x12
    3032:	8a 89       	ldd	r24, Y+18	; 0x12
    3034:	84 30       	cpi	r24, 0x04	; 4
    3036:	08 f4       	brcc	.+2      	; 0x303a <H_KEYPAD_u8_getPressedKey+0x1d8>
    3038:	27 cf       	rjmp	.-434    	; 0x2e88 <H_KEYPAD_u8_getPressedKey+0x26>
				*pPressedKey = btn_values[l_row_counter][l_column_counter];
			}
			else{/* Nothing */}
		}
	}
}
    303a:	64 96       	adiw	r28, 0x14	; 20
    303c:	0f b6       	in	r0, 0x3f	; 63
    303e:	f8 94       	cli
    3040:	de bf       	out	0x3e, r29	; 62
    3042:	0f be       	out	0x3f, r0	; 63
    3044:	cd bf       	out	0x3d, r28	; 61
    3046:	cf 91       	pop	r28
    3048:	df 91       	pop	r29
    304a:	08 95       	ret

0000304c <keypad_cursor_init>:

/* -------------------------------------------------------------- Additional functions ----------------------------------------- */

// to initialize digits
void keypad_cursor_init(keypad_digit_t *digits_obj)
{
    304c:	df 93       	push	r29
    304e:	cf 93       	push	r28
    3050:	00 d0       	rcall	.+0      	; 0x3052 <keypad_cursor_init+0x6>
    3052:	0f 92       	push	r0
    3054:	cd b7       	in	r28, 0x3d	; 61
    3056:	de b7       	in	r29, 0x3e	; 62
    3058:	9b 83       	std	Y+3, r25	; 0x03
    305a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t l_cursor = 0;
    305c:	19 82       	std	Y+1, r1	; 0x01
	if(NULL != digits_obj)
    305e:	8a 81       	ldd	r24, Y+2	; 0x02
    3060:	9b 81       	ldd	r25, Y+3	; 0x03
    3062:	00 97       	sbiw	r24, 0x00	; 0
    3064:	a1 f0       	breq	.+40     	; 0x308e <keypad_cursor_init+0x42>
	{
		digits_obj->cursor = 0;
    3066:	ea 81       	ldd	r30, Y+2	; 0x02
    3068:	fb 81       	ldd	r31, Y+3	; 0x03
    306a:	15 82       	std	Z+5, r1	; 0x05
		for(l_cursor = 0; l_cursor < 5; l_cursor++)
    306c:	19 82       	std	Y+1, r1	; 0x01
    306e:	0c c0       	rjmp	.+24     	; 0x3088 <keypad_cursor_init+0x3c>
		{
			digits_obj->digits[l_cursor] = 0;
    3070:	89 81       	ldd	r24, Y+1	; 0x01
    3072:	28 2f       	mov	r18, r24
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	8a 81       	ldd	r24, Y+2	; 0x02
    3078:	9b 81       	ldd	r25, Y+3	; 0x03
    307a:	fc 01       	movw	r30, r24
    307c:	e2 0f       	add	r30, r18
    307e:	f3 1f       	adc	r31, r19
    3080:	10 82       	st	Z, r1
{
	uint8_t l_cursor = 0;
	if(NULL != digits_obj)
	{
		digits_obj->cursor = 0;
		for(l_cursor = 0; l_cursor < 5; l_cursor++)
    3082:	89 81       	ldd	r24, Y+1	; 0x01
    3084:	8f 5f       	subi	r24, 0xFF	; 255
    3086:	89 83       	std	Y+1, r24	; 0x01
    3088:	89 81       	ldd	r24, Y+1	; 0x01
    308a:	85 30       	cpi	r24, 0x05	; 5
    308c:	88 f3       	brcs	.-30     	; 0x3070 <keypad_cursor_init+0x24>
		{
			digits_obj->digits[l_cursor] = 0;
		}
	}
}
    308e:	0f 90       	pop	r0
    3090:	0f 90       	pop	r0
    3092:	0f 90       	pop	r0
    3094:	cf 91       	pop	r28
    3096:	df 91       	pop	r29
    3098:	08 95       	ret

0000309a <H_KEYPAD_u8_WriteOnDigits>:


void H_KEYPAD_u8_WriteOnDigits(keypad_digit_t *digits_obj)
{
    309a:	df 93       	push	r29
    309c:	cf 93       	push	r28
    309e:	cd b7       	in	r28, 0x3d	; 61
    30a0:	de b7       	in	r29, 0x3e	; 62
    30a2:	64 97       	sbiw	r28, 0x14	; 20
    30a4:	0f b6       	in	r0, 0x3f	; 63
    30a6:	f8 94       	cli
    30a8:	de bf       	out	0x3e, r29	; 62
    30aa:	0f be       	out	0x3f, r0	; 63
    30ac:	cd bf       	out	0x3d, r28	; 61
    30ae:	9c 8b       	std	Y+20, r25	; 0x14
    30b0:	8b 8b       	std	Y+19, r24	; 0x13
	u8 l_row_counter = 0;
    30b2:	1a 8a       	std	Y+18, r1	; 0x12
	u8 l_column_counter = 0;
    30b4:	19 8a       	std	Y+17, r1	; 0x11
	u8 l_counter = 0;
    30b6:	18 8a       	std	Y+16, r1	; 0x10
	u8 row_logic = 1;
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	8f 87       	std	Y+15, r24	; 0x0f
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
    30bc:	1a 8a       	std	Y+18, r1	; 0x12
    30be:	fb c0       	rjmp	.+502    	; 0x32b6 <H_KEYPAD_u8_WriteOnDigits+0x21c>
	{
		// Set All pins to be low at first
		for(l_counter = 0; l_counter < KEYPAD_ROWS; l_counter++)
    30c0:	18 8a       	std	Y+16, r1	; 0x10
    30c2:	16 c0       	rjmp	.+44     	; 0x30f0 <H_KEYPAD_u8_WriteOnDigits+0x56>
		{
			DIO_voidSetPinValue(rows_ports[l_counter], rows_pins[l_counter], GPIO_HIGH);
    30c4:	88 89       	ldd	r24, Y+16	; 0x10
    30c6:	88 2f       	mov	r24, r24
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	fc 01       	movw	r30, r24
    30cc:	e5 58       	subi	r30, 0x85	; 133
    30ce:	ff 4f       	sbci	r31, 0xFF	; 255
    30d0:	20 81       	ld	r18, Z
    30d2:	88 89       	ldd	r24, Y+16	; 0x10
    30d4:	88 2f       	mov	r24, r24
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	fc 01       	movw	r30, r24
    30da:	ed 58       	subi	r30, 0x8D	; 141
    30dc:	ff 4f       	sbci	r31, 0xFF	; 255
    30de:	90 81       	ld	r25, Z
    30e0:	82 2f       	mov	r24, r18
    30e2:	69 2f       	mov	r22, r25
    30e4:	41 e0       	ldi	r20, 0x01	; 1
    30e6:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
	u8 l_counter = 0;
	u8 row_logic = 1;
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
	{
		// Set All pins to be low at first
		for(l_counter = 0; l_counter < KEYPAD_ROWS; l_counter++)
    30ea:	88 89       	ldd	r24, Y+16	; 0x10
    30ec:	8f 5f       	subi	r24, 0xFF	; 255
    30ee:	88 8b       	std	Y+16, r24	; 0x10
    30f0:	88 89       	ldd	r24, Y+16	; 0x10
    30f2:	84 30       	cpi	r24, 0x04	; 4
    30f4:	38 f3       	brcs	.-50     	; 0x30c4 <H_KEYPAD_u8_WriteOnDigits+0x2a>
		{
			DIO_voidSetPinValue(rows_ports[l_counter], rows_pins[l_counter], GPIO_HIGH);
		}

		DIO_voidSetPinValue(rows_ports[l_row_counter], rows_pins[l_row_counter], GPIO_LOW);
    30f6:	8a 89       	ldd	r24, Y+18	; 0x12
    30f8:	88 2f       	mov	r24, r24
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	fc 01       	movw	r30, r24
    30fe:	e5 58       	subi	r30, 0x85	; 133
    3100:	ff 4f       	sbci	r31, 0xFF	; 255
    3102:	20 81       	ld	r18, Z
    3104:	8a 89       	ldd	r24, Y+18	; 0x12
    3106:	88 2f       	mov	r24, r24
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	fc 01       	movw	r30, r24
    310c:	ed 58       	subi	r30, 0x8D	; 141
    310e:	ff 4f       	sbci	r31, 0xFF	; 255
    3110:	90 81       	ld	r25, Z
    3112:	82 2f       	mov	r24, r18
    3114:	69 2f       	mov	r22, r25
    3116:	40 e0       	ldi	r20, 0x00	; 0
    3118:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
    311c:	80 e0       	ldi	r24, 0x00	; 0
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	a0 e2       	ldi	r26, 0x20	; 32
    3122:	b1 e4       	ldi	r27, 0x41	; 65
    3124:	8b 87       	std	Y+11, r24	; 0x0b
    3126:	9c 87       	std	Y+12, r25	; 0x0c
    3128:	ad 87       	std	Y+13, r26	; 0x0d
    312a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    312c:	6b 85       	ldd	r22, Y+11	; 0x0b
    312e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3130:	8d 85       	ldd	r24, Y+13	; 0x0d
    3132:	9e 85       	ldd	r25, Y+14	; 0x0e
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	4a ef       	ldi	r20, 0xFA	; 250
    313a:	54 e4       	ldi	r21, 0x44	; 68
    313c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	8f 83       	std	Y+7, r24	; 0x07
    3146:	98 87       	std	Y+8, r25	; 0x08
    3148:	a9 87       	std	Y+9, r26	; 0x09
    314a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    314c:	6f 81       	ldd	r22, Y+7	; 0x07
    314e:	78 85       	ldd	r23, Y+8	; 0x08
    3150:	89 85       	ldd	r24, Y+9	; 0x09
    3152:	9a 85       	ldd	r25, Y+10	; 0x0a
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	40 e8       	ldi	r20, 0x80	; 128
    315a:	5f e3       	ldi	r21, 0x3F	; 63
    315c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3160:	88 23       	and	r24, r24
    3162:	2c f4       	brge	.+10     	; 0x316e <H_KEYPAD_u8_WriteOnDigits+0xd4>
		__ticks = 1;
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	9e 83       	std	Y+6, r25	; 0x06
    316a:	8d 83       	std	Y+5, r24	; 0x05
    316c:	3f c0       	rjmp	.+126    	; 0x31ec <H_KEYPAD_u8_WriteOnDigits+0x152>
	else if (__tmp > 65535)
    316e:	6f 81       	ldd	r22, Y+7	; 0x07
    3170:	78 85       	ldd	r23, Y+8	; 0x08
    3172:	89 85       	ldd	r24, Y+9	; 0x09
    3174:	9a 85       	ldd	r25, Y+10	; 0x0a
    3176:	20 e0       	ldi	r18, 0x00	; 0
    3178:	3f ef       	ldi	r19, 0xFF	; 255
    317a:	4f e7       	ldi	r20, 0x7F	; 127
    317c:	57 e4       	ldi	r21, 0x47	; 71
    317e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3182:	18 16       	cp	r1, r24
    3184:	4c f5       	brge	.+82     	; 0x31d8 <H_KEYPAD_u8_WriteOnDigits+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3186:	6b 85       	ldd	r22, Y+11	; 0x0b
    3188:	7c 85       	ldd	r23, Y+12	; 0x0c
    318a:	8d 85       	ldd	r24, Y+13	; 0x0d
    318c:	9e 85       	ldd	r25, Y+14	; 0x0e
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	40 e2       	ldi	r20, 0x20	; 32
    3194:	51 e4       	ldi	r21, 0x41	; 65
    3196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    319a:	dc 01       	movw	r26, r24
    319c:	cb 01       	movw	r24, r22
    319e:	bc 01       	movw	r22, r24
    31a0:	cd 01       	movw	r24, r26
    31a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a6:	dc 01       	movw	r26, r24
    31a8:	cb 01       	movw	r24, r22
    31aa:	9e 83       	std	Y+6, r25	; 0x06
    31ac:	8d 83       	std	Y+5, r24	; 0x05
    31ae:	0f c0       	rjmp	.+30     	; 0x31ce <H_KEYPAD_u8_WriteOnDigits+0x134>
    31b0:	88 ec       	ldi	r24, 0xC8	; 200
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	9c 83       	std	Y+4, r25	; 0x04
    31b6:	8b 83       	std	Y+3, r24	; 0x03
    31b8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ba:	9c 81       	ldd	r25, Y+4	; 0x04
    31bc:	01 97       	sbiw	r24, 0x01	; 1
    31be:	f1 f7       	brne	.-4      	; 0x31bc <H_KEYPAD_u8_WriteOnDigits+0x122>
    31c0:	9c 83       	std	Y+4, r25	; 0x04
    31c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31c4:	8d 81       	ldd	r24, Y+5	; 0x05
    31c6:	9e 81       	ldd	r25, Y+6	; 0x06
    31c8:	01 97       	sbiw	r24, 0x01	; 1
    31ca:	9e 83       	std	Y+6, r25	; 0x06
    31cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ce:	8d 81       	ldd	r24, Y+5	; 0x05
    31d0:	9e 81       	ldd	r25, Y+6	; 0x06
    31d2:	00 97       	sbiw	r24, 0x00	; 0
    31d4:	69 f7       	brne	.-38     	; 0x31b0 <H_KEYPAD_u8_WriteOnDigits+0x116>
    31d6:	14 c0       	rjmp	.+40     	; 0x3200 <H_KEYPAD_u8_WriteOnDigits+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31d8:	6f 81       	ldd	r22, Y+7	; 0x07
    31da:	78 85       	ldd	r23, Y+8	; 0x08
    31dc:	89 85       	ldd	r24, Y+9	; 0x09
    31de:	9a 85       	ldd	r25, Y+10	; 0x0a
    31e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e4:	dc 01       	movw	r26, r24
    31e6:	cb 01       	movw	r24, r22
    31e8:	9e 83       	std	Y+6, r25	; 0x06
    31ea:	8d 83       	std	Y+5, r24	; 0x05
    31ec:	8d 81       	ldd	r24, Y+5	; 0x05
    31ee:	9e 81       	ldd	r25, Y+6	; 0x06
    31f0:	9a 83       	std	Y+2, r25	; 0x02
    31f2:	89 83       	std	Y+1, r24	; 0x01
    31f4:	89 81       	ldd	r24, Y+1	; 0x01
    31f6:	9a 81       	ldd	r25, Y+2	; 0x02
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	f1 f7       	brne	.-4      	; 0x31f8 <H_KEYPAD_u8_WriteOnDigits+0x15e>
    31fc:	9a 83       	std	Y+2, r25	; 0x02
    31fe:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(10);

		for(l_column_counter = 0; l_column_counter < KEYPAD_COLUMNS; l_column_counter++)
    3200:	19 8a       	std	Y+17, r1	; 0x11
    3202:	52 c0       	rjmp	.+164    	; 0x32a8 <H_KEYPAD_u8_WriteOnDigits+0x20e>
		{
			row_logic = DIO_u8GetPinValue(cols_ports[l_column_counter], cols_pins[l_column_counter]);
    3204:	89 89       	ldd	r24, Y+17	; 0x11
    3206:	88 2f       	mov	r24, r24
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	fc 01       	movw	r30, r24
    320c:	e1 58       	subi	r30, 0x81	; 129
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	20 81       	ld	r18, Z
    3212:	89 89       	ldd	r24, Y+17	; 0x11
    3214:	88 2f       	mov	r24, r24
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	fc 01       	movw	r30, r24
    321a:	e9 58       	subi	r30, 0x89	; 137
    321c:	ff 4f       	sbci	r31, 0xFF	; 255
    321e:	90 81       	ld	r25, Z
    3220:	82 2f       	mov	r24, r18
    3222:	69 2f       	mov	r22, r25
    3224:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <DIO_u8GetPinValue>
    3228:	8f 87       	std	Y+15, r24	; 0x0f

			if(row_logic == GPIO_LOW)
    322a:	8f 85       	ldd	r24, Y+15	; 0x0f
    322c:	88 23       	and	r24, r24
    322e:	19 f5       	brne	.+70     	; 0x3276 <H_KEYPAD_u8_WriteOnDigits+0x1dc>
			{
				digits_obj->digits[digits_obj->cursor] = btn_values2[l_row_counter][l_column_counter];
    3230:	eb 89       	ldd	r30, Y+19	; 0x13
    3232:	fc 89       	ldd	r31, Y+20	; 0x14
    3234:	85 81       	ldd	r24, Z+5	; 0x05
    3236:	68 2f       	mov	r22, r24
    3238:	70 e0       	ldi	r23, 0x00	; 0
    323a:	8a 89       	ldd	r24, Y+18	; 0x12
    323c:	48 2f       	mov	r20, r24
    323e:	50 e0       	ldi	r21, 0x00	; 0
    3240:	89 89       	ldd	r24, Y+17	; 0x11
    3242:	28 2f       	mov	r18, r24
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	ca 01       	movw	r24, r20
    3248:	88 0f       	add	r24, r24
    324a:	99 1f       	adc	r25, r25
    324c:	88 0f       	add	r24, r24
    324e:	99 1f       	adc	r25, r25
    3250:	82 0f       	add	r24, r18
    3252:	93 1f       	adc	r25, r19
    3254:	fc 01       	movw	r30, r24
    3256:	e7 56       	subi	r30, 0x67	; 103
    3258:	ff 4f       	sbci	r31, 0xFF	; 255
    325a:	20 81       	ld	r18, Z
    325c:	8b 89       	ldd	r24, Y+19	; 0x13
    325e:	9c 89       	ldd	r25, Y+20	; 0x14
    3260:	fc 01       	movw	r30, r24
    3262:	e6 0f       	add	r30, r22
    3264:	f7 1f       	adc	r31, r23
    3266:	20 83       	st	Z, r18
				digits_obj->cursor += 1;
    3268:	eb 89       	ldd	r30, Y+19	; 0x13
    326a:	fc 89       	ldd	r31, Y+20	; 0x14
    326c:	85 81       	ldd	r24, Z+5	; 0x05
    326e:	8f 5f       	subi	r24, 0xFF	; 255
    3270:	eb 89       	ldd	r30, Y+19	; 0x13
    3272:	fc 89       	ldd	r31, Y+20	; 0x14
    3274:	85 83       	std	Z+5, r24	; 0x05
			}
			else{/* Nothing */}

			if(btn_values2[l_row_counter][l_column_counter] == '#')
    3276:	8a 89       	ldd	r24, Y+18	; 0x12
    3278:	48 2f       	mov	r20, r24
    327a:	50 e0       	ldi	r21, 0x00	; 0
    327c:	89 89       	ldd	r24, Y+17	; 0x11
    327e:	28 2f       	mov	r18, r24
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	ca 01       	movw	r24, r20
    3284:	88 0f       	add	r24, r24
    3286:	99 1f       	adc	r25, r25
    3288:	88 0f       	add	r24, r24
    328a:	99 1f       	adc	r25, r25
    328c:	82 0f       	add	r24, r18
    328e:	93 1f       	adc	r25, r19
    3290:	fc 01       	movw	r30, r24
    3292:	e7 56       	subi	r30, 0x67	; 103
    3294:	ff 4f       	sbci	r31, 0xFF	; 255
    3296:	80 81       	ld	r24, Z
    3298:	83 32       	cpi	r24, 0x23	; 35
    329a:	19 f4       	brne	.+6      	; 0x32a2 <H_KEYPAD_u8_WriteOnDigits+0x208>
			{
				digits_obj->cursor = 0;
    329c:	eb 89       	ldd	r30, Y+19	; 0x13
    329e:	fc 89       	ldd	r31, Y+20	; 0x14
    32a0:	15 82       	std	Z+5, r1	; 0x05

		DIO_voidSetPinValue(rows_ports[l_row_counter], rows_pins[l_row_counter], GPIO_LOW);

		_delay_ms(10);

		for(l_column_counter = 0; l_column_counter < KEYPAD_COLUMNS; l_column_counter++)
    32a2:	89 89       	ldd	r24, Y+17	; 0x11
    32a4:	8f 5f       	subi	r24, 0xFF	; 255
    32a6:	89 8b       	std	Y+17, r24	; 0x11
    32a8:	89 89       	ldd	r24, Y+17	; 0x11
    32aa:	84 30       	cpi	r24, 0x04	; 4
    32ac:	08 f4       	brcc	.+2      	; 0x32b0 <H_KEYPAD_u8_WriteOnDigits+0x216>
    32ae:	aa cf       	rjmp	.-172    	; 0x3204 <H_KEYPAD_u8_WriteOnDigits+0x16a>
{
	u8 l_row_counter = 0;
	u8 l_column_counter = 0;
	u8 l_counter = 0;
	u8 row_logic = 1;
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
    32b0:	8a 89       	ldd	r24, Y+18	; 0x12
    32b2:	8f 5f       	subi	r24, 0xFF	; 255
    32b4:	8a 8b       	std	Y+18, r24	; 0x12
    32b6:	8a 89       	ldd	r24, Y+18	; 0x12
    32b8:	84 30       	cpi	r24, 0x04	; 4
    32ba:	08 f4       	brcc	.+2      	; 0x32be <H_KEYPAD_u8_WriteOnDigits+0x224>
    32bc:	01 cf       	rjmp	.-510    	; 0x30c0 <H_KEYPAD_u8_WriteOnDigits+0x26>
			{
				digits_obj->cursor = 0;
			}
		}
	}
}
    32be:	64 96       	adiw	r28, 0x14	; 20
    32c0:	0f b6       	in	r0, 0x3f	; 63
    32c2:	f8 94       	cli
    32c4:	de bf       	out	0x3e, r29	; 62
    32c6:	0f be       	out	0x3f, r0	; 63
    32c8:	cd bf       	out	0x3d, r28	; 61
    32ca:	cf 91       	pop	r28
    32cc:	df 91       	pop	r29
    32ce:	08 95       	ret

000032d0 <Spi_Isr>:
#include "main.h"

u8 dum = 0;

void Spi_Isr(u8 *var)
{
    32d0:	df 93       	push	r29
    32d2:	cf 93       	push	r28
    32d4:	00 d0       	rcall	.+0      	; 0x32d6 <Spi_Isr+0x6>
    32d6:	cd b7       	in	r28, 0x3d	; 61
    32d8:	de b7       	in	r29, 0x3e	; 62
    32da:	9a 83       	std	Y+2, r25	; 0x02
    32dc:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(PORTA_INDEX, PIN1_INDEX, GPIO_HIGH);
    32de:	80 e0       	ldi	r24, 0x00	; 0
    32e0:	61 e0       	ldi	r22, 0x01	; 1
    32e2:	41 e0       	ldi	r20, 0x01	; 1
    32e4:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
	dum = SPI_MAP->SPDR_CFG;
    32e8:	ed e2       	ldi	r30, 0x2D	; 45
    32ea:	f0 e0       	ldi	r31, 0x00	; 0
    32ec:	82 81       	ldd	r24, Z+2	; 0x02
    32ee:	80 93 be 00 	sts	0x00BE, r24
	DIO_voidSetPinValue(PORTA_INDEX, PIN2_INDEX, GPIO_HIGH);
    32f2:	80 e0       	ldi	r24, 0x00	; 0
    32f4:	62 e0       	ldi	r22, 0x02	; 2
    32f6:	41 e0       	ldi	r20, 0x01	; 1
    32f8:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
}
    32fc:	0f 90       	pop	r0
    32fe:	0f 90       	pop	r0
    3300:	cf 91       	pop	r28
    3302:	df 91       	pop	r29
    3304:	08 95       	ret

00003306 <main>:
u8 dummy_spi;

u8 string[] = "HELLO";

int main()
{
    3306:	df 93       	push	r29
    3308:	cf 93       	push	r28
    330a:	cd b7       	in	r28, 0x3d	; 61
    330c:	de b7       	in	r29, 0x3e	; 62
//	ret_status = UART_Init();
//	DIO_voidSetPinDirection(PORTA_INDEX, PIN0_INDEX, GPIO_DIRECTION_OUTPUT);
	ret_status = SPI_Init(&my_spi);
    330e:	80 ec       	ldi	r24, 0xC0	; 192
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <SPI_Init>
    3316:	80 93 bf 00 	sts	0x00BF, r24
	DIO_voidSetPinDirection(PORTA_INDEX, PIN1_INDEX, GPIO_DIRECTION_OUTPUT);
    331a:	80 e0       	ldi	r24, 0x00	; 0
    331c:	61 e0       	ldi	r22, 0x01	; 1
    331e:	41 e0       	ldi	r20, 0x01	; 1
    3320:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTA_INDEX, PIN2_INDEX, GPIO_DIRECTION_OUTPUT);
    3324:	80 e0       	ldi	r24, 0x00	; 0
    3326:	62 e0       	ldi	r22, 0x02	; 2
    3328:	41 e0       	ldi	r20, 0x01	; 1
    332a:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DIO_voidSetPinDirection>
//
//		ret_status = SPI_Transfere('C', &dummy_spi);
//
//		ret_status = SPI_Send_String("Mohammed");

		ret_status = SPI_AsynchCallBack(Spi_Isr, 'A');
    332e:	88 e6       	ldi	r24, 0x68	; 104
    3330:	99 e1       	ldi	r25, 0x19	; 25
    3332:	61 e4       	ldi	r22, 0x41	; 65
    3334:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <SPI_AsynchCallBack>
    3338:	80 93 bf 00 	sts	0x00BF, r24
		ret_status = SPI_Transfere(dum, &dummy_spi);
    333c:	80 91 be 00 	lds	r24, 0x00BE
    3340:	27 ec       	ldi	r18, 0xC7	; 199
    3342:	30 e0       	ldi	r19, 0x00	; 0
    3344:	b9 01       	movw	r22, r18
    3346:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <SPI_Transfere>
    334a:	80 93 bf 00 	sts	0x00BF, r24
		DIO_voidSetPinValue(PORTA_INDEX, PIN1_INDEX, GPIO_LOW);
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	61 e0       	ldi	r22, 0x01	; 1
    3352:	40 e0       	ldi	r20, 0x00	; 0
    3354:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTA_INDEX, PIN2_INDEX, GPIO_LOW);
    3358:	80 e0       	ldi	r24, 0x00	; 0
    335a:	62 e0       	ldi	r22, 0x02	; 2
    335c:	40 e0       	ldi	r20, 0x00	; 0
    335e:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_voidSetPinValue>
    3362:	e5 cf       	rjmp	.-54     	; 0x332e <main+0x28>

00003364 <__udivmodqi4>:
    3364:	99 1b       	sub	r25, r25
    3366:	79 e0       	ldi	r23, 0x09	; 9
    3368:	04 c0       	rjmp	.+8      	; 0x3372 <__udivmodqi4_ep>

0000336a <__udivmodqi4_loop>:
    336a:	99 1f       	adc	r25, r25
    336c:	96 17       	cp	r25, r22
    336e:	08 f0       	brcs	.+2      	; 0x3372 <__udivmodqi4_ep>
    3370:	96 1b       	sub	r25, r22

00003372 <__udivmodqi4_ep>:
    3372:	88 1f       	adc	r24, r24
    3374:	7a 95       	dec	r23
    3376:	c9 f7       	brne	.-14     	; 0x336a <__udivmodqi4_loop>
    3378:	80 95       	com	r24
    337a:	08 95       	ret

0000337c <__divmodhi4>:
    337c:	97 fb       	bst	r25, 7
    337e:	09 2e       	mov	r0, r25
    3380:	07 26       	eor	r0, r23
    3382:	0a d0       	rcall	.+20     	; 0x3398 <__divmodhi4_neg1>
    3384:	77 fd       	sbrc	r23, 7
    3386:	04 d0       	rcall	.+8      	; 0x3390 <__divmodhi4_neg2>
    3388:	0c d0       	rcall	.+24     	; 0x33a2 <__udivmodhi4>
    338a:	06 d0       	rcall	.+12     	; 0x3398 <__divmodhi4_neg1>
    338c:	00 20       	and	r0, r0
    338e:	1a f4       	brpl	.+6      	; 0x3396 <__divmodhi4_exit>

00003390 <__divmodhi4_neg2>:
    3390:	70 95       	com	r23
    3392:	61 95       	neg	r22
    3394:	7f 4f       	sbci	r23, 0xFF	; 255

00003396 <__divmodhi4_exit>:
    3396:	08 95       	ret

00003398 <__divmodhi4_neg1>:
    3398:	f6 f7       	brtc	.-4      	; 0x3396 <__divmodhi4_exit>
    339a:	90 95       	com	r25
    339c:	81 95       	neg	r24
    339e:	9f 4f       	sbci	r25, 0xFF	; 255
    33a0:	08 95       	ret

000033a2 <__udivmodhi4>:
    33a2:	aa 1b       	sub	r26, r26
    33a4:	bb 1b       	sub	r27, r27
    33a6:	51 e1       	ldi	r21, 0x11	; 17
    33a8:	07 c0       	rjmp	.+14     	; 0x33b8 <__udivmodhi4_ep>

000033aa <__udivmodhi4_loop>:
    33aa:	aa 1f       	adc	r26, r26
    33ac:	bb 1f       	adc	r27, r27
    33ae:	a6 17       	cp	r26, r22
    33b0:	b7 07       	cpc	r27, r23
    33b2:	10 f0       	brcs	.+4      	; 0x33b8 <__udivmodhi4_ep>
    33b4:	a6 1b       	sub	r26, r22
    33b6:	b7 0b       	sbc	r27, r23

000033b8 <__udivmodhi4_ep>:
    33b8:	88 1f       	adc	r24, r24
    33ba:	99 1f       	adc	r25, r25
    33bc:	5a 95       	dec	r21
    33be:	a9 f7       	brne	.-22     	; 0x33aa <__udivmodhi4_loop>
    33c0:	80 95       	com	r24
    33c2:	90 95       	com	r25
    33c4:	bc 01       	movw	r22, r24
    33c6:	cd 01       	movw	r24, r26
    33c8:	08 95       	ret

000033ca <__prologue_saves__>:
    33ca:	2f 92       	push	r2
    33cc:	3f 92       	push	r3
    33ce:	4f 92       	push	r4
    33d0:	5f 92       	push	r5
    33d2:	6f 92       	push	r6
    33d4:	7f 92       	push	r7
    33d6:	8f 92       	push	r8
    33d8:	9f 92       	push	r9
    33da:	af 92       	push	r10
    33dc:	bf 92       	push	r11
    33de:	cf 92       	push	r12
    33e0:	df 92       	push	r13
    33e2:	ef 92       	push	r14
    33e4:	ff 92       	push	r15
    33e6:	0f 93       	push	r16
    33e8:	1f 93       	push	r17
    33ea:	cf 93       	push	r28
    33ec:	df 93       	push	r29
    33ee:	cd b7       	in	r28, 0x3d	; 61
    33f0:	de b7       	in	r29, 0x3e	; 62
    33f2:	ca 1b       	sub	r28, r26
    33f4:	db 0b       	sbc	r29, r27
    33f6:	0f b6       	in	r0, 0x3f	; 63
    33f8:	f8 94       	cli
    33fa:	de bf       	out	0x3e, r29	; 62
    33fc:	0f be       	out	0x3f, r0	; 63
    33fe:	cd bf       	out	0x3d, r28	; 61
    3400:	09 94       	ijmp

00003402 <__epilogue_restores__>:
    3402:	2a 88       	ldd	r2, Y+18	; 0x12
    3404:	39 88       	ldd	r3, Y+17	; 0x11
    3406:	48 88       	ldd	r4, Y+16	; 0x10
    3408:	5f 84       	ldd	r5, Y+15	; 0x0f
    340a:	6e 84       	ldd	r6, Y+14	; 0x0e
    340c:	7d 84       	ldd	r7, Y+13	; 0x0d
    340e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3410:	9b 84       	ldd	r9, Y+11	; 0x0b
    3412:	aa 84       	ldd	r10, Y+10	; 0x0a
    3414:	b9 84       	ldd	r11, Y+9	; 0x09
    3416:	c8 84       	ldd	r12, Y+8	; 0x08
    3418:	df 80       	ldd	r13, Y+7	; 0x07
    341a:	ee 80       	ldd	r14, Y+6	; 0x06
    341c:	fd 80       	ldd	r15, Y+5	; 0x05
    341e:	0c 81       	ldd	r16, Y+4	; 0x04
    3420:	1b 81       	ldd	r17, Y+3	; 0x03
    3422:	aa 81       	ldd	r26, Y+2	; 0x02
    3424:	b9 81       	ldd	r27, Y+1	; 0x01
    3426:	ce 0f       	add	r28, r30
    3428:	d1 1d       	adc	r29, r1
    342a:	0f b6       	in	r0, 0x3f	; 63
    342c:	f8 94       	cli
    342e:	de bf       	out	0x3e, r29	; 62
    3430:	0f be       	out	0x3f, r0	; 63
    3432:	cd bf       	out	0x3d, r28	; 61
    3434:	ed 01       	movw	r28, r26
    3436:	08 95       	ret

00003438 <memset>:
    3438:	dc 01       	movw	r26, r24
    343a:	01 c0       	rjmp	.+2      	; 0x343e <memset+0x6>
    343c:	6d 93       	st	X+, r22
    343e:	41 50       	subi	r20, 0x01	; 1
    3440:	50 40       	sbci	r21, 0x00	; 0
    3442:	e0 f7       	brcc	.-8      	; 0x343c <memset+0x4>
    3444:	08 95       	ret

00003446 <sprintf>:
    3446:	ae e0       	ldi	r26, 0x0E	; 14
    3448:	b0 e0       	ldi	r27, 0x00	; 0
    344a:	e9 e2       	ldi	r30, 0x29	; 41
    344c:	fa e1       	ldi	r31, 0x1A	; 26
    344e:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__prologue_saves__+0x1c>
    3452:	0d 89       	ldd	r16, Y+21	; 0x15
    3454:	1e 89       	ldd	r17, Y+22	; 0x16
    3456:	86 e0       	ldi	r24, 0x06	; 6
    3458:	8c 83       	std	Y+4, r24	; 0x04
    345a:	1a 83       	std	Y+2, r17	; 0x02
    345c:	09 83       	std	Y+1, r16	; 0x01
    345e:	8f ef       	ldi	r24, 0xFF	; 255
    3460:	9f e7       	ldi	r25, 0x7F	; 127
    3462:	9e 83       	std	Y+6, r25	; 0x06
    3464:	8d 83       	std	Y+5, r24	; 0x05
    3466:	9e 01       	movw	r18, r28
    3468:	27 5e       	subi	r18, 0xE7	; 231
    346a:	3f 4f       	sbci	r19, 0xFF	; 255
    346c:	ce 01       	movw	r24, r28
    346e:	01 96       	adiw	r24, 0x01	; 1
    3470:	6f 89       	ldd	r22, Y+23	; 0x17
    3472:	78 8d       	ldd	r23, Y+24	; 0x18
    3474:	a9 01       	movw	r20, r18
    3476:	0e 94 47 1a 	call	0x348e	; 0x348e <vfprintf>
    347a:	2f 81       	ldd	r18, Y+7	; 0x07
    347c:	38 85       	ldd	r19, Y+8	; 0x08
    347e:	02 0f       	add	r16, r18
    3480:	13 1f       	adc	r17, r19
    3482:	f8 01       	movw	r30, r16
    3484:	10 82       	st	Z, r1
    3486:	2e 96       	adiw	r28, 0x0e	; 14
    3488:	e4 e0       	ldi	r30, 0x04	; 4
    348a:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__epilogue_restores__+0x1c>

0000348e <vfprintf>:
    348e:	ab e0       	ldi	r26, 0x0B	; 11
    3490:	b0 e0       	ldi	r27, 0x00	; 0
    3492:	ed e4       	ldi	r30, 0x4D	; 77
    3494:	fa e1       	ldi	r31, 0x1A	; 26
    3496:	0c 94 e5 19 	jmp	0x33ca	; 0x33ca <__prologue_saves__>
    349a:	3c 01       	movw	r6, r24
    349c:	2b 01       	movw	r4, r22
    349e:	5a 01       	movw	r10, r20
    34a0:	fc 01       	movw	r30, r24
    34a2:	17 82       	std	Z+7, r1	; 0x07
    34a4:	16 82       	std	Z+6, r1	; 0x06
    34a6:	83 81       	ldd	r24, Z+3	; 0x03
    34a8:	81 fd       	sbrc	r24, 1
    34aa:	03 c0       	rjmp	.+6      	; 0x34b2 <vfprintf+0x24>
    34ac:	6f ef       	ldi	r22, 0xFF	; 255
    34ae:	7f ef       	ldi	r23, 0xFF	; 255
    34b0:	c6 c1       	rjmp	.+908    	; 0x383e <vfprintf+0x3b0>
    34b2:	9a e0       	ldi	r25, 0x0A	; 10
    34b4:	89 2e       	mov	r8, r25
    34b6:	1e 01       	movw	r2, r28
    34b8:	08 94       	sec
    34ba:	21 1c       	adc	r2, r1
    34bc:	31 1c       	adc	r3, r1
    34be:	f3 01       	movw	r30, r6
    34c0:	23 81       	ldd	r18, Z+3	; 0x03
    34c2:	f2 01       	movw	r30, r4
    34c4:	23 fd       	sbrc	r18, 3
    34c6:	85 91       	lpm	r24, Z+
    34c8:	23 ff       	sbrs	r18, 3
    34ca:	81 91       	ld	r24, Z+
    34cc:	2f 01       	movw	r4, r30
    34ce:	88 23       	and	r24, r24
    34d0:	09 f4       	brne	.+2      	; 0x34d4 <vfprintf+0x46>
    34d2:	b2 c1       	rjmp	.+868    	; 0x3838 <vfprintf+0x3aa>
    34d4:	85 32       	cpi	r24, 0x25	; 37
    34d6:	39 f4       	brne	.+14     	; 0x34e6 <vfprintf+0x58>
    34d8:	23 fd       	sbrc	r18, 3
    34da:	85 91       	lpm	r24, Z+
    34dc:	23 ff       	sbrs	r18, 3
    34de:	81 91       	ld	r24, Z+
    34e0:	2f 01       	movw	r4, r30
    34e2:	85 32       	cpi	r24, 0x25	; 37
    34e4:	29 f4       	brne	.+10     	; 0x34f0 <vfprintf+0x62>
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	b3 01       	movw	r22, r6
    34ea:	0e 94 3a 1c 	call	0x3874	; 0x3874 <fputc>
    34ee:	e7 cf       	rjmp	.-50     	; 0x34be <vfprintf+0x30>
    34f0:	98 2f       	mov	r25, r24
    34f2:	ff 24       	eor	r15, r15
    34f4:	ee 24       	eor	r14, r14
    34f6:	99 24       	eor	r9, r9
    34f8:	ff e1       	ldi	r31, 0x1F	; 31
    34fa:	ff 15       	cp	r31, r15
    34fc:	d0 f0       	brcs	.+52     	; 0x3532 <vfprintf+0xa4>
    34fe:	9b 32       	cpi	r25, 0x2B	; 43
    3500:	69 f0       	breq	.+26     	; 0x351c <vfprintf+0x8e>
    3502:	9c 32       	cpi	r25, 0x2C	; 44
    3504:	28 f4       	brcc	.+10     	; 0x3510 <vfprintf+0x82>
    3506:	90 32       	cpi	r25, 0x20	; 32
    3508:	59 f0       	breq	.+22     	; 0x3520 <vfprintf+0x92>
    350a:	93 32       	cpi	r25, 0x23	; 35
    350c:	91 f4       	brne	.+36     	; 0x3532 <vfprintf+0xa4>
    350e:	0e c0       	rjmp	.+28     	; 0x352c <vfprintf+0x9e>
    3510:	9d 32       	cpi	r25, 0x2D	; 45
    3512:	49 f0       	breq	.+18     	; 0x3526 <vfprintf+0x98>
    3514:	90 33       	cpi	r25, 0x30	; 48
    3516:	69 f4       	brne	.+26     	; 0x3532 <vfprintf+0xa4>
    3518:	41 e0       	ldi	r20, 0x01	; 1
    351a:	24 c0       	rjmp	.+72     	; 0x3564 <vfprintf+0xd6>
    351c:	52 e0       	ldi	r21, 0x02	; 2
    351e:	f5 2a       	or	r15, r21
    3520:	84 e0       	ldi	r24, 0x04	; 4
    3522:	f8 2a       	or	r15, r24
    3524:	28 c0       	rjmp	.+80     	; 0x3576 <vfprintf+0xe8>
    3526:	98 e0       	ldi	r25, 0x08	; 8
    3528:	f9 2a       	or	r15, r25
    352a:	25 c0       	rjmp	.+74     	; 0x3576 <vfprintf+0xe8>
    352c:	e0 e1       	ldi	r30, 0x10	; 16
    352e:	fe 2a       	or	r15, r30
    3530:	22 c0       	rjmp	.+68     	; 0x3576 <vfprintf+0xe8>
    3532:	f7 fc       	sbrc	r15, 7
    3534:	29 c0       	rjmp	.+82     	; 0x3588 <vfprintf+0xfa>
    3536:	89 2f       	mov	r24, r25
    3538:	80 53       	subi	r24, 0x30	; 48
    353a:	8a 30       	cpi	r24, 0x0A	; 10
    353c:	70 f4       	brcc	.+28     	; 0x355a <vfprintf+0xcc>
    353e:	f6 fe       	sbrs	r15, 6
    3540:	05 c0       	rjmp	.+10     	; 0x354c <vfprintf+0xbe>
    3542:	98 9c       	mul	r9, r8
    3544:	90 2c       	mov	r9, r0
    3546:	11 24       	eor	r1, r1
    3548:	98 0e       	add	r9, r24
    354a:	15 c0       	rjmp	.+42     	; 0x3576 <vfprintf+0xe8>
    354c:	e8 9c       	mul	r14, r8
    354e:	e0 2c       	mov	r14, r0
    3550:	11 24       	eor	r1, r1
    3552:	e8 0e       	add	r14, r24
    3554:	f0 e2       	ldi	r31, 0x20	; 32
    3556:	ff 2a       	or	r15, r31
    3558:	0e c0       	rjmp	.+28     	; 0x3576 <vfprintf+0xe8>
    355a:	9e 32       	cpi	r25, 0x2E	; 46
    355c:	29 f4       	brne	.+10     	; 0x3568 <vfprintf+0xda>
    355e:	f6 fc       	sbrc	r15, 6
    3560:	6b c1       	rjmp	.+726    	; 0x3838 <vfprintf+0x3aa>
    3562:	40 e4       	ldi	r20, 0x40	; 64
    3564:	f4 2a       	or	r15, r20
    3566:	07 c0       	rjmp	.+14     	; 0x3576 <vfprintf+0xe8>
    3568:	9c 36       	cpi	r25, 0x6C	; 108
    356a:	19 f4       	brne	.+6      	; 0x3572 <vfprintf+0xe4>
    356c:	50 e8       	ldi	r21, 0x80	; 128
    356e:	f5 2a       	or	r15, r21
    3570:	02 c0       	rjmp	.+4      	; 0x3576 <vfprintf+0xe8>
    3572:	98 36       	cpi	r25, 0x68	; 104
    3574:	49 f4       	brne	.+18     	; 0x3588 <vfprintf+0xfa>
    3576:	f2 01       	movw	r30, r4
    3578:	23 fd       	sbrc	r18, 3
    357a:	95 91       	lpm	r25, Z+
    357c:	23 ff       	sbrs	r18, 3
    357e:	91 91       	ld	r25, Z+
    3580:	2f 01       	movw	r4, r30
    3582:	99 23       	and	r25, r25
    3584:	09 f0       	breq	.+2      	; 0x3588 <vfprintf+0xfa>
    3586:	b8 cf       	rjmp	.-144    	; 0x34f8 <vfprintf+0x6a>
    3588:	89 2f       	mov	r24, r25
    358a:	85 54       	subi	r24, 0x45	; 69
    358c:	83 30       	cpi	r24, 0x03	; 3
    358e:	18 f0       	brcs	.+6      	; 0x3596 <vfprintf+0x108>
    3590:	80 52       	subi	r24, 0x20	; 32
    3592:	83 30       	cpi	r24, 0x03	; 3
    3594:	38 f4       	brcc	.+14     	; 0x35a4 <vfprintf+0x116>
    3596:	44 e0       	ldi	r20, 0x04	; 4
    3598:	50 e0       	ldi	r21, 0x00	; 0
    359a:	a4 0e       	add	r10, r20
    359c:	b5 1e       	adc	r11, r21
    359e:	5f e3       	ldi	r21, 0x3F	; 63
    35a0:	59 83       	std	Y+1, r21	; 0x01
    35a2:	0f c0       	rjmp	.+30     	; 0x35c2 <vfprintf+0x134>
    35a4:	93 36       	cpi	r25, 0x63	; 99
    35a6:	31 f0       	breq	.+12     	; 0x35b4 <vfprintf+0x126>
    35a8:	93 37       	cpi	r25, 0x73	; 115
    35aa:	79 f0       	breq	.+30     	; 0x35ca <vfprintf+0x13c>
    35ac:	93 35       	cpi	r25, 0x53	; 83
    35ae:	09 f0       	breq	.+2      	; 0x35b2 <vfprintf+0x124>
    35b0:	56 c0       	rjmp	.+172    	; 0x365e <vfprintf+0x1d0>
    35b2:	20 c0       	rjmp	.+64     	; 0x35f4 <vfprintf+0x166>
    35b4:	f5 01       	movw	r30, r10
    35b6:	80 81       	ld	r24, Z
    35b8:	89 83       	std	Y+1, r24	; 0x01
    35ba:	42 e0       	ldi	r20, 0x02	; 2
    35bc:	50 e0       	ldi	r21, 0x00	; 0
    35be:	a4 0e       	add	r10, r20
    35c0:	b5 1e       	adc	r11, r21
    35c2:	61 01       	movw	r12, r2
    35c4:	01 e0       	ldi	r16, 0x01	; 1
    35c6:	10 e0       	ldi	r17, 0x00	; 0
    35c8:	12 c0       	rjmp	.+36     	; 0x35ee <vfprintf+0x160>
    35ca:	f5 01       	movw	r30, r10
    35cc:	c0 80       	ld	r12, Z
    35ce:	d1 80       	ldd	r13, Z+1	; 0x01
    35d0:	f6 fc       	sbrc	r15, 6
    35d2:	03 c0       	rjmp	.+6      	; 0x35da <vfprintf+0x14c>
    35d4:	6f ef       	ldi	r22, 0xFF	; 255
    35d6:	7f ef       	ldi	r23, 0xFF	; 255
    35d8:	02 c0       	rjmp	.+4      	; 0x35de <vfprintf+0x150>
    35da:	69 2d       	mov	r22, r9
    35dc:	70 e0       	ldi	r23, 0x00	; 0
    35de:	42 e0       	ldi	r20, 0x02	; 2
    35e0:	50 e0       	ldi	r21, 0x00	; 0
    35e2:	a4 0e       	add	r10, r20
    35e4:	b5 1e       	adc	r11, r21
    35e6:	c6 01       	movw	r24, r12
    35e8:	0e 94 2f 1c 	call	0x385e	; 0x385e <strnlen>
    35ec:	8c 01       	movw	r16, r24
    35ee:	5f e7       	ldi	r21, 0x7F	; 127
    35f0:	f5 22       	and	r15, r21
    35f2:	14 c0       	rjmp	.+40     	; 0x361c <vfprintf+0x18e>
    35f4:	f5 01       	movw	r30, r10
    35f6:	c0 80       	ld	r12, Z
    35f8:	d1 80       	ldd	r13, Z+1	; 0x01
    35fa:	f6 fc       	sbrc	r15, 6
    35fc:	03 c0       	rjmp	.+6      	; 0x3604 <vfprintf+0x176>
    35fe:	6f ef       	ldi	r22, 0xFF	; 255
    3600:	7f ef       	ldi	r23, 0xFF	; 255
    3602:	02 c0       	rjmp	.+4      	; 0x3608 <vfprintf+0x17a>
    3604:	69 2d       	mov	r22, r9
    3606:	70 e0       	ldi	r23, 0x00	; 0
    3608:	42 e0       	ldi	r20, 0x02	; 2
    360a:	50 e0       	ldi	r21, 0x00	; 0
    360c:	a4 0e       	add	r10, r20
    360e:	b5 1e       	adc	r11, r21
    3610:	c6 01       	movw	r24, r12
    3612:	0e 94 24 1c 	call	0x3848	; 0x3848 <strnlen_P>
    3616:	8c 01       	movw	r16, r24
    3618:	50 e8       	ldi	r21, 0x80	; 128
    361a:	f5 2a       	or	r15, r21
    361c:	f3 fe       	sbrs	r15, 3
    361e:	07 c0       	rjmp	.+14     	; 0x362e <vfprintf+0x1a0>
    3620:	1a c0       	rjmp	.+52     	; 0x3656 <vfprintf+0x1c8>
    3622:	80 e2       	ldi	r24, 0x20	; 32
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	b3 01       	movw	r22, r6
    3628:	0e 94 3a 1c 	call	0x3874	; 0x3874 <fputc>
    362c:	ea 94       	dec	r14
    362e:	8e 2d       	mov	r24, r14
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	08 17       	cp	r16, r24
    3634:	19 07       	cpc	r17, r25
    3636:	a8 f3       	brcs	.-22     	; 0x3622 <vfprintf+0x194>
    3638:	0e c0       	rjmp	.+28     	; 0x3656 <vfprintf+0x1c8>
    363a:	f6 01       	movw	r30, r12
    363c:	f7 fc       	sbrc	r15, 7
    363e:	85 91       	lpm	r24, Z+
    3640:	f7 fe       	sbrs	r15, 7
    3642:	81 91       	ld	r24, Z+
    3644:	6f 01       	movw	r12, r30
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	b3 01       	movw	r22, r6
    364a:	0e 94 3a 1c 	call	0x3874	; 0x3874 <fputc>
    364e:	e1 10       	cpse	r14, r1
    3650:	ea 94       	dec	r14
    3652:	01 50       	subi	r16, 0x01	; 1
    3654:	10 40       	sbci	r17, 0x00	; 0
    3656:	01 15       	cp	r16, r1
    3658:	11 05       	cpc	r17, r1
    365a:	79 f7       	brne	.-34     	; 0x363a <vfprintf+0x1ac>
    365c:	ea c0       	rjmp	.+468    	; 0x3832 <vfprintf+0x3a4>
    365e:	94 36       	cpi	r25, 0x64	; 100
    3660:	11 f0       	breq	.+4      	; 0x3666 <vfprintf+0x1d8>
    3662:	99 36       	cpi	r25, 0x69	; 105
    3664:	69 f5       	brne	.+90     	; 0x36c0 <vfprintf+0x232>
    3666:	f7 fe       	sbrs	r15, 7
    3668:	08 c0       	rjmp	.+16     	; 0x367a <vfprintf+0x1ec>
    366a:	f5 01       	movw	r30, r10
    366c:	20 81       	ld	r18, Z
    366e:	31 81       	ldd	r19, Z+1	; 0x01
    3670:	42 81       	ldd	r20, Z+2	; 0x02
    3672:	53 81       	ldd	r21, Z+3	; 0x03
    3674:	84 e0       	ldi	r24, 0x04	; 4
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	0a c0       	rjmp	.+20     	; 0x368e <vfprintf+0x200>
    367a:	f5 01       	movw	r30, r10
    367c:	80 81       	ld	r24, Z
    367e:	91 81       	ldd	r25, Z+1	; 0x01
    3680:	9c 01       	movw	r18, r24
    3682:	44 27       	eor	r20, r20
    3684:	37 fd       	sbrc	r19, 7
    3686:	40 95       	com	r20
    3688:	54 2f       	mov	r21, r20
    368a:	82 e0       	ldi	r24, 0x02	; 2
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	a8 0e       	add	r10, r24
    3690:	b9 1e       	adc	r11, r25
    3692:	9f e6       	ldi	r25, 0x6F	; 111
    3694:	f9 22       	and	r15, r25
    3696:	57 ff       	sbrs	r21, 7
    3698:	09 c0       	rjmp	.+18     	; 0x36ac <vfprintf+0x21e>
    369a:	50 95       	com	r21
    369c:	40 95       	com	r20
    369e:	30 95       	com	r19
    36a0:	21 95       	neg	r18
    36a2:	3f 4f       	sbci	r19, 0xFF	; 255
    36a4:	4f 4f       	sbci	r20, 0xFF	; 255
    36a6:	5f 4f       	sbci	r21, 0xFF	; 255
    36a8:	e0 e8       	ldi	r30, 0x80	; 128
    36aa:	fe 2a       	or	r15, r30
    36ac:	ca 01       	movw	r24, r20
    36ae:	b9 01       	movw	r22, r18
    36b0:	a1 01       	movw	r20, r2
    36b2:	2a e0       	ldi	r18, 0x0A	; 10
    36b4:	30 e0       	ldi	r19, 0x00	; 0
    36b6:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__ultoa_invert>
    36ba:	d8 2e       	mov	r13, r24
    36bc:	d2 18       	sub	r13, r2
    36be:	40 c0       	rjmp	.+128    	; 0x3740 <vfprintf+0x2b2>
    36c0:	95 37       	cpi	r25, 0x75	; 117
    36c2:	29 f4       	brne	.+10     	; 0x36ce <vfprintf+0x240>
    36c4:	1f 2d       	mov	r17, r15
    36c6:	1f 7e       	andi	r17, 0xEF	; 239
    36c8:	2a e0       	ldi	r18, 0x0A	; 10
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	1d c0       	rjmp	.+58     	; 0x3708 <vfprintf+0x27a>
    36ce:	1f 2d       	mov	r17, r15
    36d0:	19 7f       	andi	r17, 0xF9	; 249
    36d2:	9f 36       	cpi	r25, 0x6F	; 111
    36d4:	61 f0       	breq	.+24     	; 0x36ee <vfprintf+0x260>
    36d6:	90 37       	cpi	r25, 0x70	; 112
    36d8:	20 f4       	brcc	.+8      	; 0x36e2 <vfprintf+0x254>
    36da:	98 35       	cpi	r25, 0x58	; 88
    36dc:	09 f0       	breq	.+2      	; 0x36e0 <vfprintf+0x252>
    36de:	ac c0       	rjmp	.+344    	; 0x3838 <vfprintf+0x3aa>
    36e0:	0f c0       	rjmp	.+30     	; 0x3700 <vfprintf+0x272>
    36e2:	90 37       	cpi	r25, 0x70	; 112
    36e4:	39 f0       	breq	.+14     	; 0x36f4 <vfprintf+0x266>
    36e6:	98 37       	cpi	r25, 0x78	; 120
    36e8:	09 f0       	breq	.+2      	; 0x36ec <vfprintf+0x25e>
    36ea:	a6 c0       	rjmp	.+332    	; 0x3838 <vfprintf+0x3aa>
    36ec:	04 c0       	rjmp	.+8      	; 0x36f6 <vfprintf+0x268>
    36ee:	28 e0       	ldi	r18, 0x08	; 8
    36f0:	30 e0       	ldi	r19, 0x00	; 0
    36f2:	0a c0       	rjmp	.+20     	; 0x3708 <vfprintf+0x27a>
    36f4:	10 61       	ori	r17, 0x10	; 16
    36f6:	14 fd       	sbrc	r17, 4
    36f8:	14 60       	ori	r17, 0x04	; 4
    36fa:	20 e1       	ldi	r18, 0x10	; 16
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	04 c0       	rjmp	.+8      	; 0x3708 <vfprintf+0x27a>
    3700:	14 fd       	sbrc	r17, 4
    3702:	16 60       	ori	r17, 0x06	; 6
    3704:	20 e1       	ldi	r18, 0x10	; 16
    3706:	32 e0       	ldi	r19, 0x02	; 2
    3708:	17 ff       	sbrs	r17, 7
    370a:	08 c0       	rjmp	.+16     	; 0x371c <vfprintf+0x28e>
    370c:	f5 01       	movw	r30, r10
    370e:	60 81       	ld	r22, Z
    3710:	71 81       	ldd	r23, Z+1	; 0x01
    3712:	82 81       	ldd	r24, Z+2	; 0x02
    3714:	93 81       	ldd	r25, Z+3	; 0x03
    3716:	44 e0       	ldi	r20, 0x04	; 4
    3718:	50 e0       	ldi	r21, 0x00	; 0
    371a:	08 c0       	rjmp	.+16     	; 0x372c <vfprintf+0x29e>
    371c:	f5 01       	movw	r30, r10
    371e:	80 81       	ld	r24, Z
    3720:	91 81       	ldd	r25, Z+1	; 0x01
    3722:	bc 01       	movw	r22, r24
    3724:	80 e0       	ldi	r24, 0x00	; 0
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	42 e0       	ldi	r20, 0x02	; 2
    372a:	50 e0       	ldi	r21, 0x00	; 0
    372c:	a4 0e       	add	r10, r20
    372e:	b5 1e       	adc	r11, r21
    3730:	a1 01       	movw	r20, r2
    3732:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__ultoa_invert>
    3736:	d8 2e       	mov	r13, r24
    3738:	d2 18       	sub	r13, r2
    373a:	8f e7       	ldi	r24, 0x7F	; 127
    373c:	f8 2e       	mov	r15, r24
    373e:	f1 22       	and	r15, r17
    3740:	f6 fe       	sbrs	r15, 6
    3742:	0b c0       	rjmp	.+22     	; 0x375a <vfprintf+0x2cc>
    3744:	5e ef       	ldi	r21, 0xFE	; 254
    3746:	f5 22       	and	r15, r21
    3748:	d9 14       	cp	r13, r9
    374a:	38 f4       	brcc	.+14     	; 0x375a <vfprintf+0x2cc>
    374c:	f4 fe       	sbrs	r15, 4
    374e:	07 c0       	rjmp	.+14     	; 0x375e <vfprintf+0x2d0>
    3750:	f2 fc       	sbrc	r15, 2
    3752:	05 c0       	rjmp	.+10     	; 0x375e <vfprintf+0x2d0>
    3754:	8f ee       	ldi	r24, 0xEF	; 239
    3756:	f8 22       	and	r15, r24
    3758:	02 c0       	rjmp	.+4      	; 0x375e <vfprintf+0x2d0>
    375a:	1d 2d       	mov	r17, r13
    375c:	01 c0       	rjmp	.+2      	; 0x3760 <vfprintf+0x2d2>
    375e:	19 2d       	mov	r17, r9
    3760:	f4 fe       	sbrs	r15, 4
    3762:	0d c0       	rjmp	.+26     	; 0x377e <vfprintf+0x2f0>
    3764:	fe 01       	movw	r30, r28
    3766:	ed 0d       	add	r30, r13
    3768:	f1 1d       	adc	r31, r1
    376a:	80 81       	ld	r24, Z
    376c:	80 33       	cpi	r24, 0x30	; 48
    376e:	19 f4       	brne	.+6      	; 0x3776 <vfprintf+0x2e8>
    3770:	99 ee       	ldi	r25, 0xE9	; 233
    3772:	f9 22       	and	r15, r25
    3774:	08 c0       	rjmp	.+16     	; 0x3786 <vfprintf+0x2f8>
    3776:	1f 5f       	subi	r17, 0xFF	; 255
    3778:	f2 fe       	sbrs	r15, 2
    377a:	05 c0       	rjmp	.+10     	; 0x3786 <vfprintf+0x2f8>
    377c:	03 c0       	rjmp	.+6      	; 0x3784 <vfprintf+0x2f6>
    377e:	8f 2d       	mov	r24, r15
    3780:	86 78       	andi	r24, 0x86	; 134
    3782:	09 f0       	breq	.+2      	; 0x3786 <vfprintf+0x2f8>
    3784:	1f 5f       	subi	r17, 0xFF	; 255
    3786:	0f 2d       	mov	r16, r15
    3788:	f3 fc       	sbrc	r15, 3
    378a:	14 c0       	rjmp	.+40     	; 0x37b4 <vfprintf+0x326>
    378c:	f0 fe       	sbrs	r15, 0
    378e:	0f c0       	rjmp	.+30     	; 0x37ae <vfprintf+0x320>
    3790:	1e 15       	cp	r17, r14
    3792:	10 f0       	brcs	.+4      	; 0x3798 <vfprintf+0x30a>
    3794:	9d 2c       	mov	r9, r13
    3796:	0b c0       	rjmp	.+22     	; 0x37ae <vfprintf+0x320>
    3798:	9d 2c       	mov	r9, r13
    379a:	9e 0c       	add	r9, r14
    379c:	91 1a       	sub	r9, r17
    379e:	1e 2d       	mov	r17, r14
    37a0:	06 c0       	rjmp	.+12     	; 0x37ae <vfprintf+0x320>
    37a2:	80 e2       	ldi	r24, 0x20	; 32
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	b3 01       	movw	r22, r6
    37a8:	0e 94 3a 1c 	call	0x3874	; 0x3874 <fputc>
    37ac:	1f 5f       	subi	r17, 0xFF	; 255
    37ae:	1e 15       	cp	r17, r14
    37b0:	c0 f3       	brcs	.-16     	; 0x37a2 <vfprintf+0x314>
    37b2:	04 c0       	rjmp	.+8      	; 0x37bc <vfprintf+0x32e>
    37b4:	1e 15       	cp	r17, r14
    37b6:	10 f4       	brcc	.+4      	; 0x37bc <vfprintf+0x32e>
    37b8:	e1 1a       	sub	r14, r17
    37ba:	01 c0       	rjmp	.+2      	; 0x37be <vfprintf+0x330>
    37bc:	ee 24       	eor	r14, r14
    37be:	04 ff       	sbrs	r16, 4
    37c0:	0f c0       	rjmp	.+30     	; 0x37e0 <vfprintf+0x352>
    37c2:	80 e3       	ldi	r24, 0x30	; 48
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	b3 01       	movw	r22, r6
    37c8:	0e 94 3a 1c 	call	0x3874	; 0x3874 <fputc>
    37cc:	02 ff       	sbrs	r16, 2
    37ce:	1d c0       	rjmp	.+58     	; 0x380a <vfprintf+0x37c>
    37d0:	01 fd       	sbrc	r16, 1
    37d2:	03 c0       	rjmp	.+6      	; 0x37da <vfprintf+0x34c>
    37d4:	88 e7       	ldi	r24, 0x78	; 120
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	0e c0       	rjmp	.+28     	; 0x37f6 <vfprintf+0x368>
    37da:	88 e5       	ldi	r24, 0x58	; 88
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	0b c0       	rjmp	.+22     	; 0x37f6 <vfprintf+0x368>
    37e0:	80 2f       	mov	r24, r16
    37e2:	86 78       	andi	r24, 0x86	; 134
    37e4:	91 f0       	breq	.+36     	; 0x380a <vfprintf+0x37c>
    37e6:	01 ff       	sbrs	r16, 1
    37e8:	02 c0       	rjmp	.+4      	; 0x37ee <vfprintf+0x360>
    37ea:	8b e2       	ldi	r24, 0x2B	; 43
    37ec:	01 c0       	rjmp	.+2      	; 0x37f0 <vfprintf+0x362>
    37ee:	80 e2       	ldi	r24, 0x20	; 32
    37f0:	f7 fc       	sbrc	r15, 7
    37f2:	8d e2       	ldi	r24, 0x2D	; 45
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	b3 01       	movw	r22, r6
    37f8:	0e 94 3a 1c 	call	0x3874	; 0x3874 <fputc>
    37fc:	06 c0       	rjmp	.+12     	; 0x380a <vfprintf+0x37c>
    37fe:	80 e3       	ldi	r24, 0x30	; 48
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	b3 01       	movw	r22, r6
    3804:	0e 94 3a 1c 	call	0x3874	; 0x3874 <fputc>
    3808:	9a 94       	dec	r9
    380a:	d9 14       	cp	r13, r9
    380c:	c0 f3       	brcs	.-16     	; 0x37fe <vfprintf+0x370>
    380e:	da 94       	dec	r13
    3810:	f1 01       	movw	r30, r2
    3812:	ed 0d       	add	r30, r13
    3814:	f1 1d       	adc	r31, r1
    3816:	80 81       	ld	r24, Z
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	b3 01       	movw	r22, r6
    381c:	0e 94 3a 1c 	call	0x3874	; 0x3874 <fputc>
    3820:	dd 20       	and	r13, r13
    3822:	a9 f7       	brne	.-22     	; 0x380e <vfprintf+0x380>
    3824:	06 c0       	rjmp	.+12     	; 0x3832 <vfprintf+0x3a4>
    3826:	80 e2       	ldi	r24, 0x20	; 32
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	b3 01       	movw	r22, r6
    382c:	0e 94 3a 1c 	call	0x3874	; 0x3874 <fputc>
    3830:	ea 94       	dec	r14
    3832:	ee 20       	and	r14, r14
    3834:	c1 f7       	brne	.-16     	; 0x3826 <vfprintf+0x398>
    3836:	43 ce       	rjmp	.-890    	; 0x34be <vfprintf+0x30>
    3838:	f3 01       	movw	r30, r6
    383a:	66 81       	ldd	r22, Z+6	; 0x06
    383c:	77 81       	ldd	r23, Z+7	; 0x07
    383e:	cb 01       	movw	r24, r22
    3840:	2b 96       	adiw	r28, 0x0b	; 11
    3842:	e2 e1       	ldi	r30, 0x12	; 18
    3844:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <__epilogue_restores__>

00003848 <strnlen_P>:
    3848:	fc 01       	movw	r30, r24
    384a:	05 90       	lpm	r0, Z+
    384c:	61 50       	subi	r22, 0x01	; 1
    384e:	70 40       	sbci	r23, 0x00	; 0
    3850:	01 10       	cpse	r0, r1
    3852:	d8 f7       	brcc	.-10     	; 0x384a <strnlen_P+0x2>
    3854:	80 95       	com	r24
    3856:	90 95       	com	r25
    3858:	8e 0f       	add	r24, r30
    385a:	9f 1f       	adc	r25, r31
    385c:	08 95       	ret

0000385e <strnlen>:
    385e:	fc 01       	movw	r30, r24
    3860:	61 50       	subi	r22, 0x01	; 1
    3862:	70 40       	sbci	r23, 0x00	; 0
    3864:	01 90       	ld	r0, Z+
    3866:	01 10       	cpse	r0, r1
    3868:	d8 f7       	brcc	.-10     	; 0x3860 <strnlen+0x2>
    386a:	80 95       	com	r24
    386c:	90 95       	com	r25
    386e:	8e 0f       	add	r24, r30
    3870:	9f 1f       	adc	r25, r31
    3872:	08 95       	ret

00003874 <fputc>:
    3874:	0f 93       	push	r16
    3876:	1f 93       	push	r17
    3878:	cf 93       	push	r28
    387a:	df 93       	push	r29
    387c:	8c 01       	movw	r16, r24
    387e:	eb 01       	movw	r28, r22
    3880:	8b 81       	ldd	r24, Y+3	; 0x03
    3882:	81 ff       	sbrs	r24, 1
    3884:	1b c0       	rjmp	.+54     	; 0x38bc <fputc+0x48>
    3886:	82 ff       	sbrs	r24, 2
    3888:	0d c0       	rjmp	.+26     	; 0x38a4 <fputc+0x30>
    388a:	2e 81       	ldd	r18, Y+6	; 0x06
    388c:	3f 81       	ldd	r19, Y+7	; 0x07
    388e:	8c 81       	ldd	r24, Y+4	; 0x04
    3890:	9d 81       	ldd	r25, Y+5	; 0x05
    3892:	28 17       	cp	r18, r24
    3894:	39 07       	cpc	r19, r25
    3896:	64 f4       	brge	.+24     	; 0x38b0 <fputc+0x3c>
    3898:	e8 81       	ld	r30, Y
    389a:	f9 81       	ldd	r31, Y+1	; 0x01
    389c:	01 93       	st	Z+, r16
    389e:	f9 83       	std	Y+1, r31	; 0x01
    38a0:	e8 83       	st	Y, r30
    38a2:	06 c0       	rjmp	.+12     	; 0x38b0 <fputc+0x3c>
    38a4:	e8 85       	ldd	r30, Y+8	; 0x08
    38a6:	f9 85       	ldd	r31, Y+9	; 0x09
    38a8:	80 2f       	mov	r24, r16
    38aa:	09 95       	icall
    38ac:	89 2b       	or	r24, r25
    38ae:	31 f4       	brne	.+12     	; 0x38bc <fputc+0x48>
    38b0:	8e 81       	ldd	r24, Y+6	; 0x06
    38b2:	9f 81       	ldd	r25, Y+7	; 0x07
    38b4:	01 96       	adiw	r24, 0x01	; 1
    38b6:	9f 83       	std	Y+7, r25	; 0x07
    38b8:	8e 83       	std	Y+6, r24	; 0x06
    38ba:	02 c0       	rjmp	.+4      	; 0x38c0 <fputc+0x4c>
    38bc:	0f ef       	ldi	r16, 0xFF	; 255
    38be:	1f ef       	ldi	r17, 0xFF	; 255
    38c0:	c8 01       	movw	r24, r16
    38c2:	df 91       	pop	r29
    38c4:	cf 91       	pop	r28
    38c6:	1f 91       	pop	r17
    38c8:	0f 91       	pop	r16
    38ca:	08 95       	ret

000038cc <__ultoa_invert>:
    38cc:	fa 01       	movw	r30, r20
    38ce:	aa 27       	eor	r26, r26
    38d0:	28 30       	cpi	r18, 0x08	; 8
    38d2:	51 f1       	breq	.+84     	; 0x3928 <__ultoa_invert+0x5c>
    38d4:	20 31       	cpi	r18, 0x10	; 16
    38d6:	81 f1       	breq	.+96     	; 0x3938 <__ultoa_invert+0x6c>
    38d8:	e8 94       	clt
    38da:	6f 93       	push	r22
    38dc:	6e 7f       	andi	r22, 0xFE	; 254
    38de:	6e 5f       	subi	r22, 0xFE	; 254
    38e0:	7f 4f       	sbci	r23, 0xFF	; 255
    38e2:	8f 4f       	sbci	r24, 0xFF	; 255
    38e4:	9f 4f       	sbci	r25, 0xFF	; 255
    38e6:	af 4f       	sbci	r26, 0xFF	; 255
    38e8:	b1 e0       	ldi	r27, 0x01	; 1
    38ea:	3e d0       	rcall	.+124    	; 0x3968 <__ultoa_invert+0x9c>
    38ec:	b4 e0       	ldi	r27, 0x04	; 4
    38ee:	3c d0       	rcall	.+120    	; 0x3968 <__ultoa_invert+0x9c>
    38f0:	67 0f       	add	r22, r23
    38f2:	78 1f       	adc	r23, r24
    38f4:	89 1f       	adc	r24, r25
    38f6:	9a 1f       	adc	r25, r26
    38f8:	a1 1d       	adc	r26, r1
    38fa:	68 0f       	add	r22, r24
    38fc:	79 1f       	adc	r23, r25
    38fe:	8a 1f       	adc	r24, r26
    3900:	91 1d       	adc	r25, r1
    3902:	a1 1d       	adc	r26, r1
    3904:	6a 0f       	add	r22, r26
    3906:	71 1d       	adc	r23, r1
    3908:	81 1d       	adc	r24, r1
    390a:	91 1d       	adc	r25, r1
    390c:	a1 1d       	adc	r26, r1
    390e:	20 d0       	rcall	.+64     	; 0x3950 <__ultoa_invert+0x84>
    3910:	09 f4       	brne	.+2      	; 0x3914 <__ultoa_invert+0x48>
    3912:	68 94       	set
    3914:	3f 91       	pop	r19
    3916:	2a e0       	ldi	r18, 0x0A	; 10
    3918:	26 9f       	mul	r18, r22
    391a:	11 24       	eor	r1, r1
    391c:	30 19       	sub	r19, r0
    391e:	30 5d       	subi	r19, 0xD0	; 208
    3920:	31 93       	st	Z+, r19
    3922:	de f6       	brtc	.-74     	; 0x38da <__ultoa_invert+0xe>
    3924:	cf 01       	movw	r24, r30
    3926:	08 95       	ret
    3928:	46 2f       	mov	r20, r22
    392a:	47 70       	andi	r20, 0x07	; 7
    392c:	40 5d       	subi	r20, 0xD0	; 208
    392e:	41 93       	st	Z+, r20
    3930:	b3 e0       	ldi	r27, 0x03	; 3
    3932:	0f d0       	rcall	.+30     	; 0x3952 <__ultoa_invert+0x86>
    3934:	c9 f7       	brne	.-14     	; 0x3928 <__ultoa_invert+0x5c>
    3936:	f6 cf       	rjmp	.-20     	; 0x3924 <__ultoa_invert+0x58>
    3938:	46 2f       	mov	r20, r22
    393a:	4f 70       	andi	r20, 0x0F	; 15
    393c:	40 5d       	subi	r20, 0xD0	; 208
    393e:	4a 33       	cpi	r20, 0x3A	; 58
    3940:	18 f0       	brcs	.+6      	; 0x3948 <__ultoa_invert+0x7c>
    3942:	49 5d       	subi	r20, 0xD9	; 217
    3944:	31 fd       	sbrc	r19, 1
    3946:	40 52       	subi	r20, 0x20	; 32
    3948:	41 93       	st	Z+, r20
    394a:	02 d0       	rcall	.+4      	; 0x3950 <__ultoa_invert+0x84>
    394c:	a9 f7       	brne	.-22     	; 0x3938 <__ultoa_invert+0x6c>
    394e:	ea cf       	rjmp	.-44     	; 0x3924 <__ultoa_invert+0x58>
    3950:	b4 e0       	ldi	r27, 0x04	; 4
    3952:	a6 95       	lsr	r26
    3954:	97 95       	ror	r25
    3956:	87 95       	ror	r24
    3958:	77 95       	ror	r23
    395a:	67 95       	ror	r22
    395c:	ba 95       	dec	r27
    395e:	c9 f7       	brne	.-14     	; 0x3952 <__ultoa_invert+0x86>
    3960:	00 97       	sbiw	r24, 0x00	; 0
    3962:	61 05       	cpc	r22, r1
    3964:	71 05       	cpc	r23, r1
    3966:	08 95       	ret
    3968:	9b 01       	movw	r18, r22
    396a:	ac 01       	movw	r20, r24
    396c:	0a 2e       	mov	r0, r26
    396e:	06 94       	lsr	r0
    3970:	57 95       	ror	r21
    3972:	47 95       	ror	r20
    3974:	37 95       	ror	r19
    3976:	27 95       	ror	r18
    3978:	ba 95       	dec	r27
    397a:	c9 f7       	brne	.-14     	; 0x396e <__ultoa_invert+0xa2>
    397c:	62 0f       	add	r22, r18
    397e:	73 1f       	adc	r23, r19
    3980:	84 1f       	adc	r24, r20
    3982:	95 1f       	adc	r25, r21
    3984:	a0 1d       	adc	r26, r0
    3986:	08 95       	ret

00003988 <_exit>:
    3988:	f8 94       	cli

0000398a <__stop_program>:
    398a:	ff cf       	rjmp	.-2      	; 0x398a <__stop_program>
