
NTI_MohamedAli.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007b6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000280  00800060  00007b6a  00007bfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  008002e0  008002e0  00007e7e  2**0
                  ALLOC
  3 .stab         0000acc8  00000000  00000000  00007e80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00007162  00000000  00000000  00012b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00019caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00019e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0001a03c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0001c447  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0001d7cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0001e9a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0001eb64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001ee5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001f7c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d8 0f 	jmp	0x1fb0	; 0x1fb0 <__vector_1>
       8:	0c 94 10 10 	jmp	0x2020	; 0x2020 <__vector_2>
       c:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__vector_6>
      1c:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__vector_7>
      20:	0c 94 87 0a 	jmp	0x150e	; 0x150e <__vector_8>
      24:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <__vector_9>
      28:	0c 94 87 0e 	jmp	0x1d0e	; 0x1d0e <__vector_10>
      2c:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__vector_11>
      30:	0c 94 2e 12 	jmp	0x245c	; 0x245c <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	fb e7       	ldi	r31, 0x7B	; 123
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3e       	cpi	r26, 0xE0	; 224
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a0 ee       	ldi	r26, 0xE0	; 224
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 30       	cpi	r26, 0x0B	; 11
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 74 3a 	call	0x74e8	; 0x74e8 <main>
      8a:	0c 94 b3 3d 	jmp	0x7b66	; 0x7b66 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4b 3d 	jmp	0x7a96	; 0x7a96 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af eb       	ldi	r26, 0xBF	; 191
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 67 3d 	jmp	0x7ace	; 0x7ace <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 57 3d 	jmp	0x7aae	; 0x7aae <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 73 3d 	jmp	0x7ae6	; 0x7ae6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 57 3d 	jmp	0x7aae	; 0x7aae <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 73 3d 	jmp	0x7ae6	; 0x7ae6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4b 3d 	jmp	0x7a96	; 0x7a96 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f eb       	ldi	r24, 0xBF	; 191
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 67 3d 	jmp	0x7ace	; 0x7ace <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 53 3d 	jmp	0x7aa6	; 0x7aa6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f eb       	ldi	r22, 0xBF	; 191
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 6f 3d 	jmp	0x7ade	; 0x7ade <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 57 3d 	jmp	0x7aae	; 0x7aae <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 73 3d 	jmp	0x7ae6	; 0x7ae6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 57 3d 	jmp	0x7aae	; 0x7aae <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 73 3d 	jmp	0x7ae6	; 0x7ae6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 57 3d 	jmp	0x7aae	; 0x7aae <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 73 3d 	jmp	0x7ae6	; 0x7ae6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 5b 3d 	jmp	0x7ab6	; 0x7ab6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 77 3d 	jmp	0x7aee	; 0x7aee <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 53 3d 	jmp	0x7aa6	; 0x7aa6 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 6f 3d 	jmp	0x7ade	; 0x7ade <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e9 53       	subi	r30, 0x39	; 57
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Timer1_Init>:
void(*Timer1_CompA_isr)(void) = NULL;
void(*Timer1_Capt_isr)(void) = NULL;
/* ---------------------------------------------------------------------------------------*/

Error_Status_t Timer1_Init(const timer1_t *timer1_obj)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <Timer1_Init+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <Timer1_Init+0x8>
     e36:	0f 92       	push	r0
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	9b 83       	std	Y+3, r25	; 0x03
     e3e:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
     e40:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	9b 81       	ldd	r25, Y+3	; 0x03
     e46:	00 97       	sbiw	r24, 0x00	; 0
     e48:	19 f4       	brne	.+6      	; 0xe50 <Timer1_Init+0x22>
	{
		ret_status = NULL_POINTER;
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	89 83       	std	Y+1, r24	; 0x01
     e4e:	ae c0       	rjmp	.+348    	; 0xfac <Timer1_Init+0x17e>
	}
	else
	{
		// To initialize mode
		TIMER1_CONTROL->TCCR1A_CFG.WGM1_0_BIT = (((timer1_obj->mode) >> 0) & 0x01);
     e50:	a6 e4       	ldi	r26, 0x46	; 70
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	ea 81       	ldd	r30, Y+2	; 0x02
     e56:	fb 81       	ldd	r31, Y+3	; 0x03
     e58:	80 85       	ldd	r24, Z+8	; 0x08
     e5a:	8f 70       	andi	r24, 0x0F	; 15
     e5c:	81 70       	andi	r24, 0x01	; 1
     e5e:	81 70       	andi	r24, 0x01	; 1
     e60:	81 70       	andi	r24, 0x01	; 1
     e62:	98 2f       	mov	r25, r24
     e64:	91 70       	andi	r25, 0x01	; 1
     e66:	19 96       	adiw	r26, 0x09	; 9
     e68:	8c 91       	ld	r24, X
     e6a:	19 97       	sbiw	r26, 0x09	; 9
     e6c:	8e 7f       	andi	r24, 0xFE	; 254
     e6e:	89 2b       	or	r24, r25
     e70:	19 96       	adiw	r26, 0x09	; 9
     e72:	8c 93       	st	X, r24
		TIMER1_CONTROL->TCCR1A_CFG.WGM1_1_BIT = (((timer1_obj->mode) >> 1) & 0x01);
     e74:	a6 e4       	ldi	r26, 0x46	; 70
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	ea 81       	ldd	r30, Y+2	; 0x02
     e7a:	fb 81       	ldd	r31, Y+3	; 0x03
     e7c:	80 85       	ldd	r24, Z+8	; 0x08
     e7e:	8f 70       	andi	r24, 0x0F	; 15
     e80:	88 2f       	mov	r24, r24
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	95 95       	asr	r25
     e86:	87 95       	ror	r24
     e88:	81 70       	andi	r24, 0x01	; 1
     e8a:	81 70       	andi	r24, 0x01	; 1
     e8c:	81 70       	andi	r24, 0x01	; 1
     e8e:	81 70       	andi	r24, 0x01	; 1
     e90:	98 2f       	mov	r25, r24
     e92:	99 0f       	add	r25, r25
     e94:	19 96       	adiw	r26, 0x09	; 9
     e96:	8c 91       	ld	r24, X
     e98:	19 97       	sbiw	r26, 0x09	; 9
     e9a:	8d 7f       	andi	r24, 0xFD	; 253
     e9c:	89 2b       	or	r24, r25
     e9e:	19 96       	adiw	r26, 0x09	; 9
     ea0:	8c 93       	st	X, r24
		TIMER1_CONTROL->TCCR1B_CFG.WGM1_2_BIT = (((timer1_obj->mode) >> 2) & 0x01);
     ea2:	a6 e4       	ldi	r26, 0x46	; 70
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	ea 81       	ldd	r30, Y+2	; 0x02
     ea8:	fb 81       	ldd	r31, Y+3	; 0x03
     eaa:	80 85       	ldd	r24, Z+8	; 0x08
     eac:	8f 70       	andi	r24, 0x0F	; 15
     eae:	88 2f       	mov	r24, r24
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	95 95       	asr	r25
     eb4:	87 95       	ror	r24
     eb6:	95 95       	asr	r25
     eb8:	87 95       	ror	r24
     eba:	81 70       	andi	r24, 0x01	; 1
     ebc:	81 70       	andi	r24, 0x01	; 1
     ebe:	81 70       	andi	r24, 0x01	; 1
     ec0:	81 70       	andi	r24, 0x01	; 1
     ec2:	98 2f       	mov	r25, r24
     ec4:	99 0f       	add	r25, r25
     ec6:	99 0f       	add	r25, r25
     ec8:	99 0f       	add	r25, r25
     eca:	18 96       	adiw	r26, 0x08	; 8
     ecc:	8c 91       	ld	r24, X
     ece:	18 97       	sbiw	r26, 0x08	; 8
     ed0:	87 7f       	andi	r24, 0xF7	; 247
     ed2:	89 2b       	or	r24, r25
     ed4:	18 96       	adiw	r26, 0x08	; 8
     ed6:	8c 93       	st	X, r24
		TIMER1_CONTROL->TCCR1B_CFG.WGM1_3_BIT = (((timer1_obj->mode) >> 3) & 0x01);
     ed8:	a6 e4       	ldi	r26, 0x46	; 70
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	ea 81       	ldd	r30, Y+2	; 0x02
     ede:	fb 81       	ldd	r31, Y+3	; 0x03
     ee0:	80 85       	ldd	r24, Z+8	; 0x08
     ee2:	8f 70       	andi	r24, 0x0F	; 15
     ee4:	88 2f       	mov	r24, r24
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	95 95       	asr	r25
     eea:	87 95       	ror	r24
     eec:	95 95       	asr	r25
     eee:	87 95       	ror	r24
     ef0:	95 95       	asr	r25
     ef2:	87 95       	ror	r24
     ef4:	81 70       	andi	r24, 0x01	; 1
     ef6:	81 70       	andi	r24, 0x01	; 1
     ef8:	81 70       	andi	r24, 0x01	; 1
     efa:	81 70       	andi	r24, 0x01	; 1
     efc:	98 2f       	mov	r25, r24
     efe:	92 95       	swap	r25
     f00:	90 7f       	andi	r25, 0xF0	; 240
     f02:	18 96       	adiw	r26, 0x08	; 8
     f04:	8c 91       	ld	r24, X
     f06:	18 97       	sbiw	r26, 0x08	; 8
     f08:	8f 7e       	andi	r24, 0xEF	; 239
     f0a:	89 2b       	or	r24, r25
     f0c:	18 96       	adiw	r26, 0x08	; 8
     f0e:	8c 93       	st	X, r24


		// To select the output compare match pin
		TIMER1_CONTROL->TCCR1A_CFG.COM1A_BITS = timer1_obj->ctc_mode_A_cfg;
     f10:	a6 e4       	ldi	r26, 0x46	; 70
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	ea 81       	ldd	r30, Y+2	; 0x02
     f16:	fb 81       	ldd	r31, Y+3	; 0x03
     f18:	80 85       	ldd	r24, Z+8	; 0x08
     f1a:	98 2f       	mov	r25, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	99 27       	eor	r25, r25
     f20:	99 1f       	adc	r25, r25
     f22:	81 85       	ldd	r24, Z+9	; 0x09
     f24:	81 70       	andi	r24, 0x01	; 1
     f26:	88 0f       	add	r24, r24
     f28:	89 2b       	or	r24, r25
     f2a:	98 2f       	mov	r25, r24
     f2c:	92 95       	swap	r25
     f2e:	99 0f       	add	r25, r25
     f30:	99 0f       	add	r25, r25
     f32:	90 7c       	andi	r25, 0xC0	; 192
     f34:	19 96       	adiw	r26, 0x09	; 9
     f36:	8c 91       	ld	r24, X
     f38:	19 97       	sbiw	r26, 0x09	; 9
     f3a:	8f 73       	andi	r24, 0x3F	; 63
     f3c:	89 2b       	or	r24, r25
     f3e:	19 96       	adiw	r26, 0x09	; 9
     f40:	8c 93       	st	X, r24
		TIMER1_CONTROL->TCCR1A_CFG.COM1B_BITS = timer1_obj->ctc_mode_B_cfg;
     f42:	a6 e4       	ldi	r26, 0x46	; 70
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	ea 81       	ldd	r30, Y+2	; 0x02
     f48:	fb 81       	ldd	r31, Y+3	; 0x03
     f4a:	81 85       	ldd	r24, Z+9	; 0x09
     f4c:	86 95       	lsr	r24
     f4e:	83 70       	andi	r24, 0x03	; 3
     f50:	83 70       	andi	r24, 0x03	; 3
     f52:	98 2f       	mov	r25, r24
     f54:	92 95       	swap	r25
     f56:	90 7f       	andi	r25, 0xF0	; 240
     f58:	19 96       	adiw	r26, 0x09	; 9
     f5a:	8c 91       	ld	r24, X
     f5c:	19 97       	sbiw	r26, 0x09	; 9
     f5e:	8f 7c       	andi	r24, 0xCF	; 207
     f60:	89 2b       	or	r24, r25
     f62:	19 96       	adiw	r26, 0x09	; 9
     f64:	8c 93       	st	X, r24
     f66:	19 97       	sbiw	r26, 0x09	; 9


		// Set trigger of ICU
		switch(timer1_obj->icu_trigger) {
     f68:	ea 81       	ldd	r30, Y+2	; 0x02
     f6a:	fb 81       	ldd	r31, Y+3	; 0x03
     f6c:	81 85       	ldd	r24, Z+9	; 0x09
     f6e:	86 95       	lsr	r24
     f70:	86 95       	lsr	r24
     f72:	86 95       	lsr	r24
     f74:	81 70       	andi	r24, 0x01	; 1
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	3d 83       	std	Y+5, r19	; 0x05
     f7c:	2c 83       	std	Y+4, r18	; 0x04
     f7e:	8c 81       	ldd	r24, Y+4	; 0x04
     f80:	9d 81       	ldd	r25, Y+5	; 0x05
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	59 f0       	breq	.+22     	; 0xf9c <Timer1_Init+0x16e>
     f86:	2c 81       	ldd	r18, Y+4	; 0x04
     f88:	3d 81       	ldd	r19, Y+5	; 0x05
     f8a:	21 30       	cpi	r18, 0x01	; 1
     f8c:	31 05       	cpc	r19, r1
     f8e:	61 f4       	brne	.+24     	; 0xfa8 <Timer1_Init+0x17a>
			case TIMER1_INPUT_CAPTURE_RISING_EDGE:
				TIMER1_ICU_TRIGGER_RISING_EDGE();
     f90:	e6 e4       	ldi	r30, 0x46	; 70
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 85       	ldd	r24, Z+8	; 0x08
     f96:	80 64       	ori	r24, 0x40	; 64
     f98:	80 87       	std	Z+8, r24	; 0x08
     f9a:	08 c0       	rjmp	.+16     	; 0xfac <Timer1_Init+0x17e>
				break;
			case TIMER1_INPUT_CAPTURE_FALLING_EDGE:
				TIMER1_ICU_TRIGGER_FALLING_EDGE();
     f9c:	e6 e4       	ldi	r30, 0x46	; 70
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 85       	ldd	r24, Z+8	; 0x08
     fa2:	8f 7b       	andi	r24, 0xBF	; 191
     fa4:	80 87       	std	Z+8, r24	; 0x08
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <Timer1_Init+0x17e>
				break;
			default:
				ret_status = OUT_OF_RANGE_VALUE;
     fa8:	82 e0       	ldi	r24, 0x02	; 2
     faa:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}
	return ret_status;
     fac:	89 81       	ldd	r24, Y+1	; 0x01
}
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <Timer1_start>:


Error_Status_t Timer1_start(const timer1_t *timer1_obj)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <Timer1_start+0x6>
     fc4:	0f 92       	push	r0
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	9b 83       	std	Y+3, r25	; 0x03
     fcc:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
     fce:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	9b 81       	ldd	r25, Y+3	; 0x03
     fd4:	00 97       	sbiw	r24, 0x00	; 0
     fd6:	19 f4       	brne	.+6      	; 0xfde <Timer1_start+0x20>
	{
		ret_status = NULL_POINTER;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	89 83       	std	Y+1, r24	; 0x01
     fdc:	35 c0       	rjmp	.+106    	; 0x1048 <Timer1_start+0x8a>
	}
	else
	{
		if(TIMER1_NORMAL_MODE == timer1_obj)
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	9b 81       	ldd	r25, Y+3	; 0x03
     fe2:	00 97       	sbiw	r24, 0x00	; 0
     fe4:	99 f4       	brne	.+38     	; 0x100c <Timer1_start+0x4e>
		{
			TIMER1_CONTROL->TCCR1B_CFG.CS1_BITS = timer1_obj->prescaler_select;
     fe6:	a6 e4       	ldi	r26, 0x46	; 70
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	ea 81       	ldd	r30, Y+2	; 0x02
     fec:	fb 81       	ldd	r31, Y+3	; 0x03
     fee:	80 85       	ldd	r24, Z+8	; 0x08
     ff0:	82 95       	swap	r24
     ff2:	8f 70       	andi	r24, 0x0F	; 15
     ff4:	87 70       	andi	r24, 0x07	; 7
     ff6:	98 2f       	mov	r25, r24
     ff8:	97 70       	andi	r25, 0x07	; 7
     ffa:	18 96       	adiw	r26, 0x08	; 8
     ffc:	8c 91       	ld	r24, X
     ffe:	18 97       	sbiw	r26, 0x08	; 8
    1000:	88 7f       	andi	r24, 0xF8	; 248
    1002:	89 2b       	or	r24, r25
    1004:	18 96       	adiw	r26, 0x08	; 8
    1006:	8c 93       	st	X, r24
    1008:	18 97       	sbiw	r26, 0x08	; 8
    100a:	1e c0       	rjmp	.+60     	; 0x1048 <Timer1_start+0x8a>
		}
		else
		{
			TIMER1_CONTROL->TCCR1B_CFG.CS1_BITS = timer1_obj->prescaler_select;
    100c:	a6 e4       	ldi	r26, 0x46	; 70
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	ea 81       	ldd	r30, Y+2	; 0x02
    1012:	fb 81       	ldd	r31, Y+3	; 0x03
    1014:	80 85       	ldd	r24, Z+8	; 0x08
    1016:	82 95       	swap	r24
    1018:	8f 70       	andi	r24, 0x0F	; 15
    101a:	87 70       	andi	r24, 0x07	; 7
    101c:	98 2f       	mov	r25, r24
    101e:	97 70       	andi	r25, 0x07	; 7
    1020:	18 96       	adiw	r26, 0x08	; 8
    1022:	8c 91       	ld	r24, X
    1024:	18 97       	sbiw	r26, 0x08	; 8
    1026:	88 7f       	andi	r24, 0xF8	; 248
    1028:	89 2b       	or	r24, r25
    102a:	18 96       	adiw	r26, 0x08	; 8
    102c:	8c 93       	st	X, r24
    102e:	18 97       	sbiw	r26, 0x08	; 8

			/* Initialize first value of OCR registers */
			TIMER1_CONTROL->OCR1AL_CFG = 0;
    1030:	e6 e4       	ldi	r30, 0x46	; 70
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	14 82       	std	Z+4, r1	; 0x04
			TIMER1_CONTROL->OCR1AH_CFG = 0;
    1036:	e6 e4       	ldi	r30, 0x46	; 70
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	15 82       	std	Z+5, r1	; 0x05
			TIMER1_CONTROL->OCR1BL_CFG = 0;
    103c:	e6 e4       	ldi	r30, 0x46	; 70
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	12 82       	std	Z+2, r1	; 0x02
			TIMER1_CONTROL->OCR1BH_CFG = 0;
    1042:	e6 e4       	ldi	r30, 0x46	; 70
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	13 82       	std	Z+3, r1	; 0x03
		}
	}
	return ret_status;
    1048:	89 81       	ldd	r24, Y+1	; 0x01
}
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <Timer1_stop>:


Error_Status_t Timer1_stop(const timer1_t *timer1_obj)
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	00 d0       	rcall	.+0      	; 0x105c <Timer1_stop+0x6>
    105c:	0f 92       	push	r0
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	9b 83       	std	Y+3, r25	; 0x03
    1064:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1066:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	9b 81       	ldd	r25, Y+3	; 0x03
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	19 f4       	brne	.+6      	; 0x1076 <Timer1_stop+0x20>
	{
		ret_status = NULL_POINTER;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	05 c0       	rjmp	.+10     	; 0x1080 <Timer1_stop+0x2a>
	}
	else
	{
		// assign no pre-scaler to pre-scaler select bits
		TIMER1_CONTROL->TCCR1B_CFG.CS1_BITS = TIMER1_STOP_TIMER;
    1076:	e6 e4       	ldi	r30, 0x46	; 70
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 85       	ldd	r24, Z+8	; 0x08
    107c:	88 7f       	andi	r24, 0xF8	; 248
    107e:	80 87       	std	Z+8, r24	; 0x08
	}
	return ret_status;
    1080:	89 81       	ldd	r24, Y+1	; 0x01
}
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <Timer1_GetCounts>:


Error_Status_t Timer1_GetCounts(u16 *Num_of_count)
{
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	00 d0       	rcall	.+0      	; 0x1094 <Timer1_GetCounts+0x6>
    1094:	0f 92       	push	r0
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	9b 83       	std	Y+3, r25	; 0x03
    109c:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    109e:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Num_of_count)
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	9b 81       	ldd	r25, Y+3	; 0x03
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	19 f4       	brne	.+6      	; 0x10ae <Timer1_GetCounts+0x20>
	{
		ret_status = NULL_POINTER;
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	89 83       	std	Y+1, r24	; 0x01
    10ac:	08 c0       	rjmp	.+16     	; 0x10be <Timer1_GetCounts+0x30>
	}
	else
	{
		*Num_of_count = TIMER1_CONTROL->TCNT1_CFG;
    10ae:	e6 e4       	ldi	r30, 0x46	; 70
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	86 81       	ldd	r24, Z+6	; 0x06
    10b4:	97 81       	ldd	r25, Z+7	; 0x07
    10b6:	ea 81       	ldd	r30, Y+2	; 0x02
    10b8:	fb 81       	ldd	r31, Y+3	; 0x03
    10ba:	91 83       	std	Z+1, r25	; 0x01
    10bc:	80 83       	st	Z, r24
	}
	return ret_status;
    10be:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <Timer1_setDelayTimeMilliSec>:


Error_Status_t Timer1_setDelayTimeMilliSec(const timer1_t *timer1_obj, u8 Time_ms)
{
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <Timer1_setDelayTimeMilliSec+0x6>
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <Timer1_setDelayTimeMilliSec+0x8>
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	9b 83       	std	Y+3, r25	; 0x03
    10da:	8a 83       	std	Y+2, r24	; 0x02
    10dc:	6c 83       	std	Y+4, r22	; 0x04
	Error_Status_t ret_status = NO_ERROR;
    10de:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	9b 81       	ldd	r25, Y+3	; 0x03
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	11 f4       	brne	.+4      	; 0x10ec <Timer1_setDelayTimeMilliSec+0x20>
	{
		ret_status = NULL_POINTER;
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return ret_status;
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	08 95       	ret

000010fc <Timer1_OVF_IntEnable>:


Error_Status_t Timer1_OVF_IntEnable(void)
{
    10fc:	df 93       	push	r29
    10fe:	cf 93       	push	r28
    1100:	0f 92       	push	r0
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
    1106:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.TOIE1_BIT = 1;
    1108:	e6 e4       	ldi	r30, 0x46	; 70
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	83 89       	ldd	r24, Z+19	; 0x13
    110e:	84 60       	ori	r24, 0x04	; 4
    1110:	83 8b       	std	Z+19, r24	; 0x13
	return ret_status;
    1112:	89 81       	ldd	r24, Y+1	; 0x01
}
    1114:	0f 90       	pop	r0
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <Timer1_OCA_IntEnable>:


Error_Status_t Timer1_OCA_IntEnable(void)
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	0f 92       	push	r0
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
    1126:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.OCIE1A_BIT = 1;
    1128:	e6 e4       	ldi	r30, 0x46	; 70
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	83 89       	ldd	r24, Z+19	; 0x13
    112e:	80 61       	ori	r24, 0x10	; 16
    1130:	83 8b       	std	Z+19, r24	; 0x13
	return ret_status;
    1132:	89 81       	ldd	r24, Y+1	; 0x01
}
    1134:	0f 90       	pop	r0
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <Timer1_OCB_IntEnable>:


Error_Status_t Timer1_OCB_IntEnable(void)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	0f 92       	push	r0
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
    1146:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.OCIE1B_BIT = 1;
    1148:	e6 e4       	ldi	r30, 0x46	; 70
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	83 89       	ldd	r24, Z+19	; 0x13
    114e:	88 60       	ori	r24, 0x08	; 8
    1150:	83 8b       	std	Z+19, r24	; 0x13
	return ret_status;
    1152:	89 81       	ldd	r24, Y+1	; 0x01
}
    1154:	0f 90       	pop	r0
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <Timer1_ICU_IntEnable>:


Error_Status_t Timer1_ICU_IntEnable(void)
{
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	0f 92       	push	r0
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
    1166:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.TICIE1_BIT = 1;
    1168:	e6 e4       	ldi	r30, 0x46	; 70
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	83 89       	ldd	r24, Z+19	; 0x13
    116e:	80 62       	ori	r24, 0x20	; 32
    1170:	83 8b       	std	Z+19, r24	; 0x13
	return ret_status;
    1172:	89 81       	ldd	r24, Y+1	; 0x01
}
    1174:	0f 90       	pop	r0
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <Timer1_OVF_IntDisable>:


Error_Status_t Timer1_OVF_IntDisable(void)
{
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	0f 92       	push	r0
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
    1186:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.TOIE1_BIT = 0;
    1188:	e6 e4       	ldi	r30, 0x46	; 70
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	83 89       	ldd	r24, Z+19	; 0x13
    118e:	8b 7f       	andi	r24, 0xFB	; 251
    1190:	83 8b       	std	Z+19, r24	; 0x13
	return ret_status;
    1192:	89 81       	ldd	r24, Y+1	; 0x01
}
    1194:	0f 90       	pop	r0
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	08 95       	ret

0000119c <Timer1_OCA_IntDisable>:


Error_Status_t Timer1_OCA_IntDisable(void)
{
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	0f 92       	push	r0
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
    11a6:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.OCIE1A_BIT = 0;
    11a8:	e6 e4       	ldi	r30, 0x46	; 70
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	83 89       	ldd	r24, Z+19	; 0x13
    11ae:	8f 7e       	andi	r24, 0xEF	; 239
    11b0:	83 8b       	std	Z+19, r24	; 0x13
	return ret_status;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <Timer1_OCB_IntDisable>:


Error_Status_t Timer1_OCB_IntDisable(void)
{
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	0f 92       	push	r0
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
    11c6:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.OCIE1B_BIT = 0;
    11c8:	e6 e4       	ldi	r30, 0x46	; 70
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	83 89       	ldd	r24, Z+19	; 0x13
    11ce:	87 7f       	andi	r24, 0xF7	; 247
    11d0:	83 8b       	std	Z+19, r24	; 0x13
	return ret_status;
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11d4:	0f 90       	pop	r0
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <Timer1_ICU_IntDisable>:


Error_Status_t Timer1_ICU_IntDisable(void)
{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	0f 92       	push	r0
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
    11e6:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_CONTROL->TIMSK1_CFG.TICIE1_BIT = 0;
    11e8:	e6 e4       	ldi	r30, 0x46	; 70
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	83 89       	ldd	r24, Z+19	; 0x13
    11ee:	8f 7d       	andi	r24, 0xDF	; 223
    11f0:	83 8b       	std	Z+19, r24	; 0x13
	return ret_status;
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11f4:	0f 90       	pop	r0
    11f6:	cf 91       	pop	r28
    11f8:	df 91       	pop	r29
    11fa:	08 95       	ret

000011fc <Timer1_OVF_setCallBack>:


Error_Status_t Timer1_OVF_setCallBack(const timer1_t *timer1_obj)
{
    11fc:	df 93       	push	r29
    11fe:	cf 93       	push	r28
    1200:	00 d0       	rcall	.+0      	; 0x1202 <Timer1_OVF_setCallBack+0x6>
    1202:	0f 92       	push	r0
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	9b 83       	std	Y+3, r25	; 0x03
    120a:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    120c:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	9b 81       	ldd	r25, Y+3	; 0x03
    1212:	00 97       	sbiw	r24, 0x00	; 0
    1214:	19 f4       	brne	.+6      	; 0x121c <Timer1_OVF_setCallBack+0x20>
	{
		ret_status = NULL_POINTER;
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	89 83       	std	Y+1, r24	; 0x01
    121a:	08 c0       	rjmp	.+16     	; 0x122c <Timer1_OVF_setCallBack+0x30>
	}
	else
	{
		Timer1_Over_Flow_isr = timer1_obj->timer1_ovf_isr;
    121c:	ea 81       	ldd	r30, Y+2	; 0x02
    121e:	fb 81       	ldd	r31, Y+3	; 0x03
    1220:	80 81       	ld	r24, Z
    1222:	91 81       	ldd	r25, Z+1	; 0x01
    1224:	90 93 e1 02 	sts	0x02E1, r25
    1228:	80 93 e0 02 	sts	0x02E0, r24
	}
	return ret_status;
    122c:	89 81       	ldd	r24, Y+1	; 0x01
}
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <Timer1_OCA_setCallBack>:


Error_Status_t Timer1_OCA_setCallBack(const timer1_t *timer1_obj)
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	00 d0       	rcall	.+0      	; 0x1240 <Timer1_OCA_setCallBack+0x6>
    1240:	0f 92       	push	r0
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	9b 83       	std	Y+3, r25	; 0x03
    1248:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    124a:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	9b 81       	ldd	r25, Y+3	; 0x03
    1250:	00 97       	sbiw	r24, 0x00	; 0
    1252:	19 f4       	brne	.+6      	; 0x125a <Timer1_OCA_setCallBack+0x20>
	{
		ret_status = NULL_POINTER;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	89 83       	std	Y+1, r24	; 0x01
    1258:	08 c0       	rjmp	.+16     	; 0x126a <Timer1_OCA_setCallBack+0x30>
	}
	else
	{
		Timer1_CompA_isr = timer1_obj->timer1_compA_isr;
    125a:	ea 81       	ldd	r30, Y+2	; 0x02
    125c:	fb 81       	ldd	r31, Y+3	; 0x03
    125e:	82 81       	ldd	r24, Z+2	; 0x02
    1260:	93 81       	ldd	r25, Z+3	; 0x03
    1262:	90 93 e5 02 	sts	0x02E5, r25
    1266:	80 93 e4 02 	sts	0x02E4, r24
	}
	return ret_status;
    126a:	89 81       	ldd	r24, Y+1	; 0x01
}
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <Timer1_OCB_setCallBack>:
Error_Status_t Timer1_OCB_setCallBack(const timer1_t *timer1_obj)
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	00 d0       	rcall	.+0      	; 0x127e <Timer1_OCB_setCallBack+0x6>
    127e:	0f 92       	push	r0
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	9b 83       	std	Y+3, r25	; 0x03
    1286:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1288:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	9b 81       	ldd	r25, Y+3	; 0x03
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	19 f4       	brne	.+6      	; 0x1298 <Timer1_OCB_setCallBack+0x20>
	{
		ret_status = NULL_POINTER;
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	89 83       	std	Y+1, r24	; 0x01
    1296:	08 c0       	rjmp	.+16     	; 0x12a8 <Timer1_OCB_setCallBack+0x30>
	}
	else
	{
		Timer1_CompB_isr = timer1_obj->timer1_compB_isr;
    1298:	ea 81       	ldd	r30, Y+2	; 0x02
    129a:	fb 81       	ldd	r31, Y+3	; 0x03
    129c:	84 81       	ldd	r24, Z+4	; 0x04
    129e:	95 81       	ldd	r25, Z+5	; 0x05
    12a0:	90 93 e3 02 	sts	0x02E3, r25
    12a4:	80 93 e2 02 	sts	0x02E2, r24
	}
	return ret_status;
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <Timer1_ICU_setCallBack>:
Error_Status_t Timer1_ICU_setCallBack(const timer1_t *timer1_obj)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <Timer1_ICU_setCallBack+0x6>
    12bc:	0f 92       	push	r0
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	9b 83       	std	Y+3, r25	; 0x03
    12c4:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    12c6:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	9b 81       	ldd	r25, Y+3	; 0x03
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	19 f4       	brne	.+6      	; 0x12d6 <Timer1_ICU_setCallBack+0x20>
	{
		ret_status = NULL_POINTER;
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	08 c0       	rjmp	.+16     	; 0x12e6 <Timer1_ICU_setCallBack+0x30>
	}
	else
	{
		Timer1_Capt_isr = timer1_obj->timer1_capt_isr;
    12d6:	ea 81       	ldd	r30, Y+2	; 0x02
    12d8:	fb 81       	ldd	r31, Y+3	; 0x03
    12da:	86 81       	ldd	r24, Z+6	; 0x06
    12dc:	97 81       	ldd	r25, Z+7	; 0x07
    12de:	90 93 e7 02 	sts	0x02E7, r25
    12e2:	80 93 e6 02 	sts	0x02E6, r24
	}
	return ret_status;
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <Timer1_setFastPWM>:


Error_Status_t Timer1_setFastPWM(const timer1_t *timer1_obj, u8 frequency ,u8 duty)
{
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <Timer1_setFastPWM+0x6>
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <Timer1_setFastPWM+0x8>
    12fc:	0f 92       	push	r0
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	9b 83       	std	Y+3, r25	; 0x03
    1304:	8a 83       	std	Y+2, r24	; 0x02
    1306:	6c 83       	std	Y+4, r22	; 0x04
    1308:	4d 83       	std	Y+5, r20	; 0x05
	Error_Status_t ret_status = NO_ERROR;
    130a:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	9b 81       	ldd	r25, Y+3	; 0x03
    1310:	00 97       	sbiw	r24, 0x00	; 0
    1312:	11 f4       	brne	.+4      	; 0x1318 <Timer1_setFastPWM+0x24>
	{
		ret_status = NULL_POINTER;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return ret_status;
    1318:	89 81       	ldd	r24, Y+1	; 0x01
}
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <Timer1_setphaseCorrectPWM>:


Error_Status_t Timer1_setphaseCorrectPWM(const timer1_t *timer1_obj,u8 frequency , u8 duty)
{
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	00 d0       	rcall	.+0      	; 0x1330 <Timer1_setphaseCorrectPWM+0x6>
    1330:	00 d0       	rcall	.+0      	; 0x1332 <Timer1_setphaseCorrectPWM+0x8>
    1332:	0f 92       	push	r0
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	9b 83       	std	Y+3, r25	; 0x03
    133a:	8a 83       	std	Y+2, r24	; 0x02
    133c:	6c 83       	std	Y+4, r22	; 0x04
    133e:	4d 83       	std	Y+5, r20	; 0x05
	Error_Status_t ret_status = NO_ERROR;
    1340:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer1_obj)
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	9b 81       	ldd	r25, Y+3	; 0x03
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	11 f4       	brne	.+4      	; 0x134e <Timer1_setphaseCorrectPWM+0x24>
	{
		ret_status = NULL_POINTER;
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return ret_status;
    134e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <Timer1_ICU_SetTrigger>:


Error_Status_t Timer1_ICU_SetTrigger(u8 trigger)
{
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	00 d0       	rcall	.+0      	; 0x1366 <Timer1_ICU_SetTrigger+0x6>
    1366:	00 d0       	rcall	.+0      	; 0x1368 <Timer1_ICU_SetTrigger+0x8>
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    136e:	19 82       	std	Y+1, r1	; 0x01
	switch(trigger){
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	3c 83       	std	Y+4, r19	; 0x04
    1378:	2b 83       	std	Y+3, r18	; 0x03
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	9c 81       	ldd	r25, Y+4	; 0x04
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	59 f0       	breq	.+22     	; 0x1398 <Timer1_ICU_SetTrigger+0x38>
    1382:	2b 81       	ldd	r18, Y+3	; 0x03
    1384:	3c 81       	ldd	r19, Y+4	; 0x04
    1386:	21 30       	cpi	r18, 0x01	; 1
    1388:	31 05       	cpc	r19, r1
    138a:	61 f4       	brne	.+24     	; 0x13a4 <Timer1_ICU_SetTrigger+0x44>
	case TIMER1_INPUT_CAPTURE_RISING_EDGE:
		TIMER1_ICU_TRIGGER_RISING_EDGE();
    138c:	e6 e4       	ldi	r30, 0x46	; 70
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 85       	ldd	r24, Z+8	; 0x08
    1392:	80 64       	ori	r24, 0x40	; 64
    1394:	80 87       	std	Z+8, r24	; 0x08
    1396:	08 c0       	rjmp	.+16     	; 0x13a8 <Timer1_ICU_SetTrigger+0x48>
		break;
	case TIMER1_INPUT_CAPTURE_FALLING_EDGE:
		TIMER1_ICU_TRIGGER_FALLING_EDGE();
    1398:	e6 e4       	ldi	r30, 0x46	; 70
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 85       	ldd	r24, Z+8	; 0x08
    139e:	8f 7b       	andi	r24, 0xBF	; 191
    13a0:	80 87       	std	Z+8, r24	; 0x08
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <Timer1_ICU_SetTrigger+0x48>
		break;
	default:
		ret_status = OUT_OF_RANGE_VALUE;
    13a4:	82 e0       	ldi	r24, 0x02	; 2
    13a6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return ret_status;
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <Timer1_ICU_takeReading>:


Error_Status_t Timer1_ICU_takeReading(u16 *icr_reading)
{
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	00 d0       	rcall	.+0      	; 0x13be <Timer1_ICU_takeReading+0x6>
    13be:	0f 92       	push	r0
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	9b 83       	std	Y+3, r25	; 0x03
    13c6:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    13c8:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == icr_reading)
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	9b 81       	ldd	r25, Y+3	; 0x03
    13ce:	00 97       	sbiw	r24, 0x00	; 0
    13d0:	19 f4       	brne	.+6      	; 0x13d8 <Timer1_ICU_takeReading+0x20>
	{
		ret_status = NULL_POINTER;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	89 83       	std	Y+1, r24	; 0x01
    13d6:	08 c0       	rjmp	.+16     	; 0x13e8 <Timer1_ICU_takeReading+0x30>
	}
	else
	{
		*icr_reading = TIMER1_CONTROL->ICR1_CFG;
    13d8:	e6 e4       	ldi	r30, 0x46	; 70
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	91 81       	ldd	r25, Z+1	; 0x01
    13e0:	ea 81       	ldd	r30, Y+2	; 0x02
    13e2:	fb 81       	ldd	r31, Y+3	; 0x03
    13e4:	91 83       	std	Z+1, r25	; 0x01
    13e6:	80 83       	st	Z, r24
	}
	return ret_status;
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	08 95       	ret

000013f6 <prescaler_map>:


/* -------------------------------------------------- Helper functions ---------------------------------- */
u16 prescaler_map(u8 mapped_value)
{
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <prescaler_map+0x6>
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <prescaler_map+0x8>
    13fe:	0f 92       	push	r0
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
    1404:	89 83       	std	Y+1, r24	; 0x01
    switch(mapped_value){
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	3d 83       	std	Y+5, r19	; 0x05
    140e:	2c 83       	std	Y+4, r18	; 0x04
    1410:	8c 81       	ldd	r24, Y+4	; 0x04
    1412:	9d 81       	ldd	r25, Y+5	; 0x05
    1414:	83 30       	cpi	r24, 0x03	; 3
    1416:	91 05       	cpc	r25, r1
    1418:	29 f1       	breq	.+74     	; 0x1464 <prescaler_map+0x6e>
    141a:	2c 81       	ldd	r18, Y+4	; 0x04
    141c:	3d 81       	ldd	r19, Y+5	; 0x05
    141e:	24 30       	cpi	r18, 0x04	; 4
    1420:	31 05       	cpc	r19, r1
    1422:	5c f4       	brge	.+22     	; 0x143a <prescaler_map+0x44>
    1424:	8c 81       	ldd	r24, Y+4	; 0x04
    1426:	9d 81       	ldd	r25, Y+5	; 0x05
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	91 05       	cpc	r25, r1
    142c:	89 f0       	breq	.+34     	; 0x1450 <prescaler_map+0x5a>
    142e:	2c 81       	ldd	r18, Y+4	; 0x04
    1430:	3d 81       	ldd	r19, Y+5	; 0x05
    1432:	22 30       	cpi	r18, 0x02	; 2
    1434:	31 05       	cpc	r19, r1
    1436:	89 f0       	breq	.+34     	; 0x145a <prescaler_map+0x64>
    1438:	24 c0       	rjmp	.+72     	; 0x1482 <prescaler_map+0x8c>
    143a:	8c 81       	ldd	r24, Y+4	; 0x04
    143c:	9d 81       	ldd	r25, Y+5	; 0x05
    143e:	84 30       	cpi	r24, 0x04	; 4
    1440:	91 05       	cpc	r25, r1
    1442:	a9 f0       	breq	.+42     	; 0x146e <prescaler_map+0x78>
    1444:	2c 81       	ldd	r18, Y+4	; 0x04
    1446:	3d 81       	ldd	r19, Y+5	; 0x05
    1448:	25 30       	cpi	r18, 0x05	; 5
    144a:	31 05       	cpc	r19, r1
    144c:	a9 f0       	breq	.+42     	; 0x1478 <prescaler_map+0x82>
    144e:	19 c0       	rjmp	.+50     	; 0x1482 <prescaler_map+0x8c>
        case TIMER1_PRESCALER_DIV_1:return 1;
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	9b 83       	std	Y+3, r25	; 0x03
    1456:	8a 83       	std	Y+2, r24	; 0x02
    1458:	18 c0       	rjmp	.+48     	; 0x148a <prescaler_map+0x94>
        case TIMER1_PRESCALER_DIV_8:return 8;
    145a:	28 e0       	ldi	r18, 0x08	; 8
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	3b 83       	std	Y+3, r19	; 0x03
    1460:	2a 83       	std	Y+2, r18	; 0x02
    1462:	13 c0       	rjmp	.+38     	; 0x148a <prescaler_map+0x94>
        case TIMER1_PRESCALER_DIV_64:return 64;
    1464:	80 e4       	ldi	r24, 0x40	; 64
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	9b 83       	std	Y+3, r25	; 0x03
    146a:	8a 83       	std	Y+2, r24	; 0x02
    146c:	0e c0       	rjmp	.+28     	; 0x148a <prescaler_map+0x94>
        case TIMER1_PRESCALER_DIV_256:return 256;
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	31 e0       	ldi	r19, 0x01	; 1
    1472:	3b 83       	std	Y+3, r19	; 0x03
    1474:	2a 83       	std	Y+2, r18	; 0x02
    1476:	09 c0       	rjmp	.+18     	; 0x148a <prescaler_map+0x94>
        case TIMER1_PRESCALER_DIV_1024:return 1024;
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	94 e0       	ldi	r25, 0x04	; 4
    147c:	9b 83       	std	Y+3, r25	; 0x03
    147e:	8a 83       	std	Y+2, r24	; 0x02
    1480:	04 c0       	rjmp	.+8      	; 0x148a <prescaler_map+0x94>
        default:return 1;
    1482:	21 e0       	ldi	r18, 0x01	; 1
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	3b 83       	std	Y+3, r19	; 0x03
    1488:	2a 83       	std	Y+2, r18	; 0x02
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	9b 81       	ldd	r25, Y+3	; 0x03
    }
}
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <__vector_9>:

/* ---------------------------------------- ISRs ---------------------------- */
// Define the ISR function with attribute
void TIMER1_OVF_VECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER1_OVF_VECTOR(void)
{
    149e:	1f 92       	push	r1
    14a0:	0f 92       	push	r0
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	0f 92       	push	r0
    14a6:	11 24       	eor	r1, r1
    14a8:	2f 93       	push	r18
    14aa:	3f 93       	push	r19
    14ac:	4f 93       	push	r20
    14ae:	5f 93       	push	r21
    14b0:	6f 93       	push	r22
    14b2:	7f 93       	push	r23
    14b4:	8f 93       	push	r24
    14b6:	9f 93       	push	r25
    14b8:	af 93       	push	r26
    14ba:	bf 93       	push	r27
    14bc:	ef 93       	push	r30
    14be:	ff 93       	push	r31
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	TIMER1_CONTROL->TIFR1_CFG.TOV1_BIT = 0;
    14c8:	e6 e4       	ldi	r30, 0x46	; 70
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	82 89       	ldd	r24, Z+18	; 0x12
    14ce:	8b 7f       	andi	r24, 0xFB	; 251
    14d0:	82 8b       	std	Z+18, r24	; 0x12

	// execute ISR if it existed
	if(Timer1_Over_Flow_isr)
    14d2:	80 91 e0 02 	lds	r24, 0x02E0
    14d6:	90 91 e1 02 	lds	r25, 0x02E1
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	29 f0       	breq	.+10     	; 0x14e8 <__vector_9+0x4a>
	{
		Timer1_Over_Flow_isr();
    14de:	e0 91 e0 02 	lds	r30, 0x02E0
    14e2:	f0 91 e1 02 	lds	r31, 0x02E1
    14e6:	09 95       	icall
	}
}
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	ff 91       	pop	r31
    14ee:	ef 91       	pop	r30
    14f0:	bf 91       	pop	r27
    14f2:	af 91       	pop	r26
    14f4:	9f 91       	pop	r25
    14f6:	8f 91       	pop	r24
    14f8:	7f 91       	pop	r23
    14fa:	6f 91       	pop	r22
    14fc:	5f 91       	pop	r21
    14fe:	4f 91       	pop	r20
    1500:	3f 91       	pop	r19
    1502:	2f 91       	pop	r18
    1504:	0f 90       	pop	r0
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	0f 90       	pop	r0
    150a:	1f 90       	pop	r1
    150c:	18 95       	reti

0000150e <__vector_8>:


// Define the ISR function with attribute
void TIMER1_COMPBVECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER1_COMPBVECTOR(void)
{
    150e:	1f 92       	push	r1
    1510:	0f 92       	push	r0
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	0f 92       	push	r0
    1516:	11 24       	eor	r1, r1
    1518:	2f 93       	push	r18
    151a:	3f 93       	push	r19
    151c:	4f 93       	push	r20
    151e:	5f 93       	push	r21
    1520:	6f 93       	push	r22
    1522:	7f 93       	push	r23
    1524:	8f 93       	push	r24
    1526:	9f 93       	push	r25
    1528:	af 93       	push	r26
    152a:	bf 93       	push	r27
    152c:	ef 93       	push	r30
    152e:	ff 93       	push	r31
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	TIMER1_CONTROL->TIFR1_CFG.OCF1B_BIT = 0;
    1538:	e6 e4       	ldi	r30, 0x46	; 70
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	82 89       	ldd	r24, Z+18	; 0x12
    153e:	87 7f       	andi	r24, 0xF7	; 247
    1540:	82 8b       	std	Z+18, r24	; 0x12

	// execute ISR if it existed
	if(Timer1_CompB_isr)
    1542:	80 91 e2 02 	lds	r24, 0x02E2
    1546:	90 91 e3 02 	lds	r25, 0x02E3
    154a:	00 97       	sbiw	r24, 0x00	; 0
    154c:	29 f0       	breq	.+10     	; 0x1558 <__vector_8+0x4a>
	{
		Timer1_CompB_isr();
    154e:	e0 91 e2 02 	lds	r30, 0x02E2
    1552:	f0 91 e3 02 	lds	r31, 0x02E3
    1556:	09 95       	icall
	}
}
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	ff 91       	pop	r31
    155e:	ef 91       	pop	r30
    1560:	bf 91       	pop	r27
    1562:	af 91       	pop	r26
    1564:	9f 91       	pop	r25
    1566:	8f 91       	pop	r24
    1568:	7f 91       	pop	r23
    156a:	6f 91       	pop	r22
    156c:	5f 91       	pop	r21
    156e:	4f 91       	pop	r20
    1570:	3f 91       	pop	r19
    1572:	2f 91       	pop	r18
    1574:	0f 90       	pop	r0
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	0f 90       	pop	r0
    157a:	1f 90       	pop	r1
    157c:	18 95       	reti

0000157e <__vector_7>:


// Define the ISR function with attribute
void TIMER1_COMPAVECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER1_COMPAVECTOR(void)
{
    157e:	1f 92       	push	r1
    1580:	0f 92       	push	r0
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	0f 92       	push	r0
    1586:	11 24       	eor	r1, r1
    1588:	2f 93       	push	r18
    158a:	3f 93       	push	r19
    158c:	4f 93       	push	r20
    158e:	5f 93       	push	r21
    1590:	6f 93       	push	r22
    1592:	7f 93       	push	r23
    1594:	8f 93       	push	r24
    1596:	9f 93       	push	r25
    1598:	af 93       	push	r26
    159a:	bf 93       	push	r27
    159c:	ef 93       	push	r30
    159e:	ff 93       	push	r31
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	TIMER1_CONTROL->TIFR1_CFG.OCF1A_BIT = 0;
    15a8:	e6 e4       	ldi	r30, 0x46	; 70
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	82 89       	ldd	r24, Z+18	; 0x12
    15ae:	8f 7e       	andi	r24, 0xEF	; 239
    15b0:	82 8b       	std	Z+18, r24	; 0x12

	// execute ISR if it existed
	if(Timer1_CompA_isr)
    15b2:	80 91 e4 02 	lds	r24, 0x02E4
    15b6:	90 91 e5 02 	lds	r25, 0x02E5
    15ba:	00 97       	sbiw	r24, 0x00	; 0
    15bc:	29 f0       	breq	.+10     	; 0x15c8 <__vector_7+0x4a>
	{
		Timer1_CompA_isr();
    15be:	e0 91 e4 02 	lds	r30, 0x02E4
    15c2:	f0 91 e5 02 	lds	r31, 0x02E5
    15c6:	09 95       	icall
	}
}
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	ff 91       	pop	r31
    15ce:	ef 91       	pop	r30
    15d0:	bf 91       	pop	r27
    15d2:	af 91       	pop	r26
    15d4:	9f 91       	pop	r25
    15d6:	8f 91       	pop	r24
    15d8:	7f 91       	pop	r23
    15da:	6f 91       	pop	r22
    15dc:	5f 91       	pop	r21
    15de:	4f 91       	pop	r20
    15e0:	3f 91       	pop	r19
    15e2:	2f 91       	pop	r18
    15e4:	0f 90       	pop	r0
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	0f 90       	pop	r0
    15ea:	1f 90       	pop	r1
    15ec:	18 95       	reti

000015ee <__vector_6>:


// Define the ISR function with attribute
void TIMER1_CAPTVECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER1_CAPTVECTOR(void)
{
    15ee:	1f 92       	push	r1
    15f0:	0f 92       	push	r0
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	0f 92       	push	r0
    15f6:	11 24       	eor	r1, r1
    15f8:	2f 93       	push	r18
    15fa:	3f 93       	push	r19
    15fc:	4f 93       	push	r20
    15fe:	5f 93       	push	r21
    1600:	6f 93       	push	r22
    1602:	7f 93       	push	r23
    1604:	8f 93       	push	r24
    1606:	9f 93       	push	r25
    1608:	af 93       	push	r26
    160a:	bf 93       	push	r27
    160c:	ef 93       	push	r30
    160e:	ff 93       	push	r31
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	TIMER1_CONTROL->TIFR1_CFG.ICF1_BIT = 0;
    1618:	e6 e4       	ldi	r30, 0x46	; 70
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	82 89       	ldd	r24, Z+18	; 0x12
    161e:	8f 7d       	andi	r24, 0xDF	; 223
    1620:	82 8b       	std	Z+18, r24	; 0x12

	// execute ISR if it existed
	if(Timer1_Capt_isr)
    1622:	80 91 e6 02 	lds	r24, 0x02E6
    1626:	90 91 e7 02 	lds	r25, 0x02E7
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	29 f0       	breq	.+10     	; 0x1638 <__vector_6+0x4a>
	{
		Timer1_Capt_isr();
    162e:	e0 91 e6 02 	lds	r30, 0x02E6
    1632:	f0 91 e7 02 	lds	r31, 0x02E7
    1636:	09 95       	icall
	}
}
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	ff 91       	pop	r31
    163e:	ef 91       	pop	r30
    1640:	bf 91       	pop	r27
    1642:	af 91       	pop	r26
    1644:	9f 91       	pop	r25
    1646:	8f 91       	pop	r24
    1648:	7f 91       	pop	r23
    164a:	6f 91       	pop	r22
    164c:	5f 91       	pop	r21
    164e:	4f 91       	pop	r20
    1650:	3f 91       	pop	r19
    1652:	2f 91       	pop	r18
    1654:	0f 90       	pop	r0
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	0f 90       	pop	r0
    165a:	1f 90       	pop	r1
    165c:	18 95       	reti

0000165e <Timer0_Init>:
//u32 rem_counts = 0;
//static u32 countr_ovf = 0;


Error_Status_t Timer0_Init(const timer0_t *timer0_obj)
{
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	00 d0       	rcall	.+0      	; 0x1664 <Timer0_Init+0x6>
    1664:	0f 92       	push	r0
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	9b 83       	std	Y+3, r25	; 0x03
    166c:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    166e:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	9b 81       	ldd	r25, Y+3	; 0x03
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	19 f4       	brne	.+6      	; 0x167e <Timer0_Init+0x20>
	{
		ret_status = NULL_POINTER;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	89 83       	std	Y+1, r24	; 0x01
    167c:	4a c0       	rjmp	.+148    	; 0x1712 <Timer0_Init+0xb4>
	}
	else
	{
		// To select mode
		TIMER0_CONTROL->TCCR0_CFG.WGM00_BIT = (((timer0_obj->mode) >> 0) & 0x01);
    167e:	a2 e5       	ldi	r26, 0x52	; 82
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	ea 81       	ldd	r30, Y+2	; 0x02
    1684:	fb 81       	ldd	r31, Y+3	; 0x03
    1686:	84 81       	ldd	r24, Z+4	; 0x04
    1688:	86 95       	lsr	r24
    168a:	86 95       	lsr	r24
    168c:	86 95       	lsr	r24
    168e:	83 70       	andi	r24, 0x03	; 3
    1690:	81 70       	andi	r24, 0x01	; 1
    1692:	81 70       	andi	r24, 0x01	; 1
    1694:	81 70       	andi	r24, 0x01	; 1
    1696:	81 70       	andi	r24, 0x01	; 1
    1698:	98 2f       	mov	r25, r24
    169a:	92 95       	swap	r25
    169c:	99 0f       	add	r25, r25
    169e:	99 0f       	add	r25, r25
    16a0:	90 7c       	andi	r25, 0xC0	; 192
    16a2:	11 96       	adiw	r26, 0x01	; 1
    16a4:	8c 91       	ld	r24, X
    16a6:	11 97       	sbiw	r26, 0x01	; 1
    16a8:	8f 7b       	andi	r24, 0xBF	; 191
    16aa:	89 2b       	or	r24, r25
    16ac:	11 96       	adiw	r26, 0x01	; 1
    16ae:	8c 93       	st	X, r24
		TIMER0_CONTROL->TCCR0_CFG.WGM01_BIT = (((timer0_obj->mode) >> 1) & 0x01);
    16b0:	a2 e5       	ldi	r26, 0x52	; 82
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	ea 81       	ldd	r30, Y+2	; 0x02
    16b6:	fb 81       	ldd	r31, Y+3	; 0x03
    16b8:	84 81       	ldd	r24, Z+4	; 0x04
    16ba:	86 95       	lsr	r24
    16bc:	86 95       	lsr	r24
    16be:	86 95       	lsr	r24
    16c0:	83 70       	andi	r24, 0x03	; 3
    16c2:	88 2f       	mov	r24, r24
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	95 95       	asr	r25
    16c8:	87 95       	ror	r24
    16ca:	81 70       	andi	r24, 0x01	; 1
    16cc:	81 70       	andi	r24, 0x01	; 1
    16ce:	81 70       	andi	r24, 0x01	; 1
    16d0:	81 70       	andi	r24, 0x01	; 1
    16d2:	98 2f       	mov	r25, r24
    16d4:	99 0f       	add	r25, r25
    16d6:	99 0f       	add	r25, r25
    16d8:	99 0f       	add	r25, r25
    16da:	11 96       	adiw	r26, 0x01	; 1
    16dc:	8c 91       	ld	r24, X
    16de:	11 97       	sbiw	r26, 0x01	; 1
    16e0:	87 7f       	andi	r24, 0xF7	; 247
    16e2:	89 2b       	or	r24, r25
    16e4:	11 96       	adiw	r26, 0x01	; 1
    16e6:	8c 93       	st	X, r24

		// To select the output compare match pin
		TIMER0_CONTROL->TCCR0_CFG.COM0_BITS = timer0_obj->ctc_mode_cfg;
    16e8:	a2 e5       	ldi	r26, 0x52	; 82
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	ea 81       	ldd	r30, Y+2	; 0x02
    16ee:	fb 81       	ldd	r31, Y+3	; 0x03
    16f0:	84 81       	ldd	r24, Z+4	; 0x04
    16f2:	82 95       	swap	r24
    16f4:	86 95       	lsr	r24
    16f6:	87 70       	andi	r24, 0x07	; 7
    16f8:	83 70       	andi	r24, 0x03	; 3
    16fa:	83 70       	andi	r24, 0x03	; 3
    16fc:	98 2f       	mov	r25, r24
    16fe:	92 95       	swap	r25
    1700:	90 7f       	andi	r25, 0xF0	; 240
    1702:	11 96       	adiw	r26, 0x01	; 1
    1704:	8c 91       	ld	r24, X
    1706:	11 97       	sbiw	r26, 0x01	; 1
    1708:	8f 7c       	andi	r24, 0xCF	; 207
    170a:	89 2b       	or	r24, r25
    170c:	11 96       	adiw	r26, 0x01	; 1
    170e:	8c 93       	st	X, r24
    1710:	11 97       	sbiw	r26, 0x01	; 1
	}
	return ret_status;
    1712:	89 81       	ldd	r24, Y+1	; 0x01
}
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret

00001720 <Timer0_start>:


Error_Status_t Timer0_start(const timer0_t *timer0_obj)
{
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	00 d0       	rcall	.+0      	; 0x1726 <Timer0_start+0x6>
    1726:	0f 92       	push	r0
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	9b 83       	std	Y+3, r25	; 0x03
    172e:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1730:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	9b 81       	ldd	r25, Y+3	; 0x03
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	19 f4       	brne	.+6      	; 0x1740 <Timer0_start+0x20>
	{
		ret_status = NULL_POINTER;
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	2e c0       	rjmp	.+92     	; 0x179c <Timer0_start+0x7c>
	}
	else
	{
		if(TIMER0_NORMAL_MODE == timer0_obj->mode){
    1740:	ea 81       	ldd	r30, Y+2	; 0x02
    1742:	fb 81       	ldd	r31, Y+3	; 0x03
    1744:	84 81       	ldd	r24, Z+4	; 0x04
    1746:	88 71       	andi	r24, 0x18	; 24
    1748:	88 23       	and	r24, r24
    174a:	89 f4       	brne	.+34     	; 0x176e <Timer0_start+0x4e>
			TIMER0_CONTROL->TCCR0_CFG.CS0_BITS = timer0_obj->prescaler_select;
    174c:	a2 e5       	ldi	r26, 0x52	; 82
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	ea 81       	ldd	r30, Y+2	; 0x02
    1752:	fb 81       	ldd	r31, Y+3	; 0x03
    1754:	84 81       	ldd	r24, Z+4	; 0x04
    1756:	87 70       	andi	r24, 0x07	; 7
    1758:	98 2f       	mov	r25, r24
    175a:	97 70       	andi	r25, 0x07	; 7
    175c:	11 96       	adiw	r26, 0x01	; 1
    175e:	8c 91       	ld	r24, X
    1760:	11 97       	sbiw	r26, 0x01	; 1
    1762:	88 7f       	andi	r24, 0xF8	; 248
    1764:	89 2b       	or	r24, r25
    1766:	11 96       	adiw	r26, 0x01	; 1
    1768:	8c 93       	st	X, r24
    176a:	11 97       	sbiw	r26, 0x01	; 1
    176c:	17 c0       	rjmp	.+46     	; 0x179c <Timer0_start+0x7c>
		}
		else
		{
			TIMER0_CONTROL->TCCR0_CFG.CS0_BITS = timer0_obj->prescaler_select;
    176e:	a2 e5       	ldi	r26, 0x52	; 82
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	ea 81       	ldd	r30, Y+2	; 0x02
    1774:	fb 81       	ldd	r31, Y+3	; 0x03
    1776:	84 81       	ldd	r24, Z+4	; 0x04
    1778:	87 70       	andi	r24, 0x07	; 7
    177a:	98 2f       	mov	r25, r24
    177c:	97 70       	andi	r25, 0x07	; 7
    177e:	11 96       	adiw	r26, 0x01	; 1
    1780:	8c 91       	ld	r24, X
    1782:	11 97       	sbiw	r26, 0x01	; 1
    1784:	88 7f       	andi	r24, 0xF8	; 248
    1786:	89 2b       	or	r24, r25
    1788:	11 96       	adiw	r26, 0x01	; 1
    178a:	8c 93       	st	X, r24
			DIO_voidSetPinDirection(PORTB_INDEX, PIN3_INDEX, GPIO_DIRECTION_OUTPUT);
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	63 e0       	ldi	r22, 0x03	; 3
    1790:	41 e0       	ldi	r20, 0x01	; 1
    1792:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <DIO_voidSetPinDirection>
			TIMER0_CONTROL->OCR0_CFG = 0;
    1796:	e2 e5       	ldi	r30, 0x52	; 82
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	12 86       	std	Z+10, r1	; 0x0a
		}

	}
	return ret_status;
    179c:	89 81       	ldd	r24, Y+1	; 0x01
}
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <Timer0_stop>:
Error_Status_t Timer0_stop(const timer0_t *timer0_obj)
{
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <Timer0_stop+0x6>
    17b0:	0f 92       	push	r0
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
    17b6:	9b 83       	std	Y+3, r25	; 0x03
    17b8:	8a 83       	std	Y+2, r24	; 0x02

	Error_Status_t ret_status = NO_ERROR;
    17ba:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	9b 81       	ldd	r25, Y+3	; 0x03
    17c0:	00 97       	sbiw	r24, 0x00	; 0
    17c2:	19 f4       	brne	.+6      	; 0x17ca <Timer0_stop+0x20>
	{
		ret_status = NULL_POINTER;
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	89 83       	std	Y+1, r24	; 0x01
    17c8:	05 c0       	rjmp	.+10     	; 0x17d4 <Timer0_stop+0x2a>
	}
	else
	{
		// assign no pre-scaler to pre-scaler select bits
		TIMER0_CONTROL->TCCR0_CFG.CS0_BITS = TIMER0_STOP_TIMER;
    17ca:	e2 e5       	ldi	r30, 0x52	; 82
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	81 81       	ldd	r24, Z+1	; 0x01
    17d0:	88 7f       	andi	r24, 0xF8	; 248
    17d2:	81 83       	std	Z+1, r24	; 0x01
	}
	return ret_status;
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	cf 91       	pop	r28
    17de:	df 91       	pop	r29
    17e0:	08 95       	ret

000017e2 <Timer0_GetCounts>:
Error_Status_t Timer0_GetCounts(const timer0_t *timer0_obj, u8 *Num_of_count)
{
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	00 d0       	rcall	.+0      	; 0x17e8 <Timer0_GetCounts+0x6>
    17e8:	00 d0       	rcall	.+0      	; 0x17ea <Timer0_GetCounts+0x8>
    17ea:	0f 92       	push	r0
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	9b 83       	std	Y+3, r25	; 0x03
    17f2:	8a 83       	std	Y+2, r24	; 0x02
    17f4:	7d 83       	std	Y+5, r23	; 0x05
    17f6:	6c 83       	std	Y+4, r22	; 0x04
	Error_Status_t ret_status = NO_ERROR;
    17f8:	19 82       	std	Y+1, r1	; 0x01
	if((NULL == timer0_obj) || (NULL == Num_of_count))
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	9b 81       	ldd	r25, Y+3	; 0x03
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	21 f0       	breq	.+8      	; 0x180a <Timer0_GetCounts+0x28>
    1802:	8c 81       	ldd	r24, Y+4	; 0x04
    1804:	9d 81       	ldd	r25, Y+5	; 0x05
    1806:	00 97       	sbiw	r24, 0x00	; 0
    1808:	19 f4       	brne	.+6      	; 0x1810 <Timer0_GetCounts+0x2e>
	{
		ret_status = NULL_POINTER;
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	89 83       	std	Y+1, r24	; 0x01
    180e:	06 c0       	rjmp	.+12     	; 0x181c <Timer0_GetCounts+0x3a>
	}
	else
	{
		*Num_of_count = TIMER0_CONTROL->TCNT0_CFG;
    1810:	e2 e5       	ldi	r30, 0x52	; 82
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	ec 81       	ldd	r30, Y+4	; 0x04
    1818:	fd 81       	ldd	r31, Y+5	; 0x05
    181a:	80 83       	st	Z, r24
	}
	return ret_status;
    181c:	89 81       	ldd	r24, Y+1	; 0x01
}
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	cf 91       	pop	r28
    182a:	df 91       	pop	r29
    182c:	08 95       	ret

0000182e <Timer0_setDelayTimeMilliSec>:



Error_Status_t Timer0_setDelayTimeMilliSec(const timer0_t *timer0_obj , u8 Time_ms, u32 *num_of_ovfs, u32 *rem_counts)
{
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	2e 97       	sbiw	r28, 0x0e	; 14
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	9f 83       	std	Y+7, r25	; 0x07
    1844:	8e 83       	std	Y+6, r24	; 0x06
    1846:	68 87       	std	Y+8, r22	; 0x08
    1848:	5a 87       	std	Y+10, r21	; 0x0a
    184a:	49 87       	std	Y+9, r20	; 0x09
    184c:	3c 87       	std	Y+12, r19	; 0x0c
    184e:	2b 87       	std	Y+11, r18	; 0x0b
	Error_Status_t ret_status = NO_ERROR;
    1850:	1d 82       	std	Y+5, r1	; 0x05
	u32 Total_counts = 0;
    1852:	19 82       	std	Y+1, r1	; 0x01
    1854:	1a 82       	std	Y+2, r1	; 0x02
    1856:	1b 82       	std	Y+3, r1	; 0x03
    1858:	1c 82       	std	Y+4, r1	; 0x04

	if(NULL == timer0_obj)
    185a:	8e 81       	ldd	r24, Y+6	; 0x06
    185c:	9f 81       	ldd	r25, Y+7	; 0x07
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	19 f4       	brne	.+6      	; 0x1868 <Timer0_setDelayTimeMilliSec+0x3a>
	{
		ret_status = NULL_POINTER;
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	8d 83       	std	Y+5, r24	; 0x05
    1866:	d0 c0       	rjmp	.+416    	; 0x1a08 <Timer0_setDelayTimeMilliSec+0x1da>
	}
	else
	{
		if(TIMER0_NORMAL_MODE == timer0_obj->mode)
    1868:	ee 81       	ldd	r30, Y+6	; 0x06
    186a:	ff 81       	ldd	r31, Y+7	; 0x07
    186c:	84 81       	ldd	r24, Z+4	; 0x04
    186e:	88 71       	andi	r24, 0x18	; 24
    1870:	88 23       	and	r24, r24
    1872:	09 f0       	breq	.+2      	; 0x1876 <Timer0_setDelayTimeMilliSec+0x48>
    1874:	c9 c0       	rjmp	.+402    	; 0x1a08 <Timer0_setDelayTimeMilliSec+0x1da>
		{
			switch(timer0_obj->prescaler_select){
    1876:	ee 81       	ldd	r30, Y+6	; 0x06
    1878:	ff 81       	ldd	r31, Y+7	; 0x07
    187a:	84 81       	ldd	r24, Z+4	; 0x04
    187c:	87 70       	andi	r24, 0x07	; 7
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	3e 87       	std	Y+14, r19	; 0x0e
    1884:	2d 87       	std	Y+13, r18	; 0x0d
    1886:	8d 85       	ldd	r24, Y+13	; 0x0d
    1888:	9e 85       	ldd	r25, Y+14	; 0x0e
    188a:	83 30       	cpi	r24, 0x03	; 3
    188c:	91 05       	cpc	r25, r1
    188e:	09 f4       	brne	.+2      	; 0x1892 <Timer0_setDelayTimeMilliSec+0x64>
    1890:	4d c0       	rjmp	.+154    	; 0x192c <Timer0_setDelayTimeMilliSec+0xfe>
    1892:	2d 85       	ldd	r18, Y+13	; 0x0d
    1894:	3e 85       	ldd	r19, Y+14	; 0x0e
    1896:	24 30       	cpi	r18, 0x04	; 4
    1898:	31 05       	cpc	r19, r1
    189a:	5c f4       	brge	.+22     	; 0x18b2 <Timer0_setDelayTimeMilliSec+0x84>
    189c:	8d 85       	ldd	r24, Y+13	; 0x0d
    189e:	9e 85       	ldd	r25, Y+14	; 0x0e
    18a0:	81 30       	cpi	r24, 0x01	; 1
    18a2:	91 05       	cpc	r25, r1
    18a4:	99 f0       	breq	.+38     	; 0x18cc <Timer0_setDelayTimeMilliSec+0x9e>
    18a6:	2d 85       	ldd	r18, Y+13	; 0x0d
    18a8:	3e 85       	ldd	r19, Y+14	; 0x0e
    18aa:	22 30       	cpi	r18, 0x02	; 2
    18ac:	31 05       	cpc	r19, r1
    18ae:	11 f1       	breq	.+68     	; 0x18f4 <Timer0_setDelayTimeMilliSec+0xc6>
    18b0:	8e c0       	rjmp	.+284    	; 0x19ce <Timer0_setDelayTimeMilliSec+0x1a0>
    18b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b6:	84 30       	cpi	r24, 0x04	; 4
    18b8:	91 05       	cpc	r25, r1
    18ba:	09 f4       	brne	.+2      	; 0x18be <Timer0_setDelayTimeMilliSec+0x90>
    18bc:	53 c0       	rjmp	.+166    	; 0x1964 <Timer0_setDelayTimeMilliSec+0x136>
    18be:	2d 85       	ldd	r18, Y+13	; 0x0d
    18c0:	3e 85       	ldd	r19, Y+14	; 0x0e
    18c2:	25 30       	cpi	r18, 0x05	; 5
    18c4:	31 05       	cpc	r19, r1
    18c6:	09 f4       	brne	.+2      	; 0x18ca <Timer0_setDelayTimeMilliSec+0x9c>
    18c8:	65 c0       	rjmp	.+202    	; 0x1994 <Timer0_setDelayTimeMilliSec+0x166>
    18ca:	81 c0       	rjmp	.+258    	; 0x19ce <Timer0_setDelayTimeMilliSec+0x1a0>
			case TIMER0_PRESCALER_DIV_1:
				Total_counts = (F_CPU * Time_ms * 1000) / 1;    // 1 : prescaler
    18cc:	88 85       	ldd	r24, Y+8	; 0x08
    18ce:	88 2f       	mov	r24, r24
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	a0 e0       	ldi	r26, 0x00	; 0
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 ea       	ldi	r19, 0xA0	; 160
    18da:	4c ea       	ldi	r20, 0xAC	; 172
    18dc:	59 eb       	ldi	r21, 0xB9	; 185
    18de:	bc 01       	movw	r22, r24
    18e0:	cd 01       	movw	r24, r26
    18e2:	0e 94 d7 3c 	call	0x79ae	; 0x79ae <__mulsi3>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	89 83       	std	Y+1, r24	; 0x01
    18ec:	9a 83       	std	Y+2, r25	; 0x02
    18ee:	ab 83       	std	Y+3, r26	; 0x03
    18f0:	bc 83       	std	Y+4, r27	; 0x04
    18f2:	6f c0       	rjmp	.+222    	; 0x19d2 <Timer0_setDelayTimeMilliSec+0x1a4>
				break;
			case TIMER0_PRESCALER_DIV_8:
				Total_counts = (F_CPU * Time_ms * 1000) / 8;    // 8 : prescaler
    18f4:	88 85       	ldd	r24, Y+8	; 0x08
    18f6:	88 2f       	mov	r24, r24
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	a0 e0       	ldi	r26, 0x00	; 0
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 ea       	ldi	r19, 0xA0	; 160
    1902:	4c ea       	ldi	r20, 0xAC	; 172
    1904:	59 eb       	ldi	r21, 0xB9	; 185
    1906:	bc 01       	movw	r22, r24
    1908:	cd 01       	movw	r24, r26
    190a:	0e 94 d7 3c 	call	0x79ae	; 0x79ae <__mulsi3>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	68 94       	set
    1914:	12 f8       	bld	r1, 2
    1916:	b6 95       	lsr	r27
    1918:	a7 95       	ror	r26
    191a:	97 95       	ror	r25
    191c:	87 95       	ror	r24
    191e:	16 94       	lsr	r1
    1920:	d1 f7       	brne	.-12     	; 0x1916 <Timer0_setDelayTimeMilliSec+0xe8>
    1922:	89 83       	std	Y+1, r24	; 0x01
    1924:	9a 83       	std	Y+2, r25	; 0x02
    1926:	ab 83       	std	Y+3, r26	; 0x03
    1928:	bc 83       	std	Y+4, r27	; 0x04
    192a:	53 c0       	rjmp	.+166    	; 0x19d2 <Timer0_setDelayTimeMilliSec+0x1a4>
				break;
			case TIMER0_PRESCALER_DIV_64:
				Total_counts = (F_CPU * Time_ms * 1000) / 64;   // 64 : prescaler
    192c:	88 85       	ldd	r24, Y+8	; 0x08
    192e:	88 2f       	mov	r24, r24
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	a0 e0       	ldi	r26, 0x00	; 0
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 ea       	ldi	r19, 0xA0	; 160
    193a:	4c ea       	ldi	r20, 0xAC	; 172
    193c:	59 eb       	ldi	r21, 0xB9	; 185
    193e:	bc 01       	movw	r22, r24
    1940:	cd 01       	movw	r24, r26
    1942:	0e 94 d7 3c 	call	0x79ae	; 0x79ae <__mulsi3>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	68 94       	set
    194c:	15 f8       	bld	r1, 5
    194e:	b6 95       	lsr	r27
    1950:	a7 95       	ror	r26
    1952:	97 95       	ror	r25
    1954:	87 95       	ror	r24
    1956:	16 94       	lsr	r1
    1958:	d1 f7       	brne	.-12     	; 0x194e <Timer0_setDelayTimeMilliSec+0x120>
    195a:	89 83       	std	Y+1, r24	; 0x01
    195c:	9a 83       	std	Y+2, r25	; 0x02
    195e:	ab 83       	std	Y+3, r26	; 0x03
    1960:	bc 83       	std	Y+4, r27	; 0x04
    1962:	37 c0       	rjmp	.+110    	; 0x19d2 <Timer0_setDelayTimeMilliSec+0x1a4>
				break;
			case TIMER0_PRESCALER_DIV_256:
				Total_counts = (F_CPU * Time_ms * 1000) / 256;  // 256 : prescaler
    1964:	88 85       	ldd	r24, Y+8	; 0x08
    1966:	88 2f       	mov	r24, r24
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	a0 e0       	ldi	r26, 0x00	; 0
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 ea       	ldi	r19, 0xA0	; 160
    1972:	4c ea       	ldi	r20, 0xAC	; 172
    1974:	59 eb       	ldi	r21, 0xB9	; 185
    1976:	bc 01       	movw	r22, r24
    1978:	cd 01       	movw	r24, r26
    197a:	0e 94 d7 3c 	call	0x79ae	; 0x79ae <__mulsi3>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	89 2f       	mov	r24, r25
    1984:	9a 2f       	mov	r25, r26
    1986:	ab 2f       	mov	r26, r27
    1988:	bb 27       	eor	r27, r27
    198a:	89 83       	std	Y+1, r24	; 0x01
    198c:	9a 83       	std	Y+2, r25	; 0x02
    198e:	ab 83       	std	Y+3, r26	; 0x03
    1990:	bc 83       	std	Y+4, r27	; 0x04
    1992:	1f c0       	rjmp	.+62     	; 0x19d2 <Timer0_setDelayTimeMilliSec+0x1a4>
				break;
			case TIMER0_PRESCALER_DIV_1024:
				Total_counts = (F_CPU * Time_ms * 1000) / 1024;  // 1024 : prescaler
    1994:	88 85       	ldd	r24, Y+8	; 0x08
    1996:	88 2f       	mov	r24, r24
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	a0 e0       	ldi	r26, 0x00	; 0
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 ea       	ldi	r19, 0xA0	; 160
    19a2:	4c ea       	ldi	r20, 0xAC	; 172
    19a4:	59 eb       	ldi	r21, 0xB9	; 185
    19a6:	bc 01       	movw	r22, r24
    19a8:	cd 01       	movw	r24, r26
    19aa:	0e 94 d7 3c 	call	0x79ae	; 0x79ae <__mulsi3>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	07 2e       	mov	r0, r23
    19b4:	7a e0       	ldi	r23, 0x0A	; 10
    19b6:	b6 95       	lsr	r27
    19b8:	a7 95       	ror	r26
    19ba:	97 95       	ror	r25
    19bc:	87 95       	ror	r24
    19be:	7a 95       	dec	r23
    19c0:	d1 f7       	brne	.-12     	; 0x19b6 <Timer0_setDelayTimeMilliSec+0x188>
    19c2:	70 2d       	mov	r23, r0
    19c4:	89 83       	std	Y+1, r24	; 0x01
    19c6:	9a 83       	std	Y+2, r25	; 0x02
    19c8:	ab 83       	std	Y+3, r26	; 0x03
    19ca:	bc 83       	std	Y+4, r27	; 0x04
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <Timer0_setDelayTimeMilliSec+0x1a4>
				break;
			default:
				ret_status = OUT_OF_RANGE_VALUE;
    19ce:	82 e0       	ldi	r24, 0x02	; 2
    19d0:	8d 83       	std	Y+5, r24	; 0x05
				break;
			}
			*num_of_ovfs = (u32)(Total_counts / 256);
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	9a 81       	ldd	r25, Y+2	; 0x02
    19d6:	ab 81       	ldd	r26, Y+3	; 0x03
    19d8:	bc 81       	ldd	r27, Y+4	; 0x04
    19da:	89 2f       	mov	r24, r25
    19dc:	9a 2f       	mov	r25, r26
    19de:	ab 2f       	mov	r26, r27
    19e0:	bb 27       	eor	r27, r27
    19e2:	e9 85       	ldd	r30, Y+9	; 0x09
    19e4:	fa 85       	ldd	r31, Y+10	; 0x0a
    19e6:	80 83       	st	Z, r24
    19e8:	91 83       	std	Z+1, r25	; 0x01
    19ea:	a2 83       	std	Z+2, r26	; 0x02
    19ec:	b3 83       	std	Z+3, r27	; 0x03
			*rem_counts = Total_counts % 256;
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	9a 81       	ldd	r25, Y+2	; 0x02
    19f2:	ab 81       	ldd	r26, Y+3	; 0x03
    19f4:	bc 81       	ldd	r27, Y+4	; 0x04
    19f6:	90 70       	andi	r25, 0x00	; 0
    19f8:	a0 70       	andi	r26, 0x00	; 0
    19fa:	b0 70       	andi	r27, 0x00	; 0
    19fc:	eb 85       	ldd	r30, Y+11	; 0x0b
    19fe:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a00:	80 83       	st	Z, r24
    1a02:	91 83       	std	Z+1, r25	; 0x01
    1a04:	a2 83       	std	Z+2, r26	; 0x02
    1a06:	b3 83       	std	Z+3, r27	; 0x03
		{

		}
		else{/* Nothing */}
	}
	return ret_status;
    1a08:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1a0a:	2e 96       	adiw	r28, 0x0e	; 14
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	de bf       	out	0x3e, r29	; 62
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	cd bf       	out	0x3d, r28	; 61
    1a16:	cf 91       	pop	r28
    1a18:	df 91       	pop	r29
    1a1a:	08 95       	ret

00001a1c <Timer0_EnableInt>:




Error_Status_t Timer0_EnableInt(u8 Int_ID)
{
    1a1c:	df 93       	push	r29
    1a1e:	cf 93       	push	r28
    1a20:	00 d0       	rcall	.+0      	; 0x1a22 <Timer0_EnableInt+0x6>
    1a22:	0f 92       	push	r0
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
    1a28:	89 83       	std	Y+1, r24	; 0x01
	// Enable global interrupts

	// Enable timer0 overflow interrupt and compare match interrupt
	switch(Int_ID){
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	3b 83       	std	Y+3, r19	; 0x03
    1a32:	2a 83       	std	Y+2, r18	; 0x02
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	9b 81       	ldd	r25, Y+3	; 0x03
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	31 f0       	breq	.+12     	; 0x1a48 <Timer0_EnableInt+0x2c>
    1a3c:	2a 81       	ldd	r18, Y+2	; 0x02
    1a3e:	3b 81       	ldd	r19, Y+3	; 0x03
    1a40:	21 30       	cpi	r18, 0x01	; 1
    1a42:	31 05       	cpc	r19, r1
    1a44:	39 f0       	breq	.+14     	; 0x1a54 <Timer0_EnableInt+0x38>
    1a46:	0b c0       	rjmp	.+22     	; 0x1a5e <Timer0_EnableInt+0x42>
		case TIMER0_OVF_INT_ENABLE:
			TIMER0_CONTROL->TIMSK_CFG.TOIE0_BIT = 1;
    1a48:	e2 e5       	ldi	r30, 0x52	; 82
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	87 81       	ldd	r24, Z+7	; 0x07
    1a4e:	81 60       	ori	r24, 0x01	; 1
    1a50:	87 83       	std	Z+7, r24	; 0x07
    1a52:	05 c0       	rjmp	.+10     	; 0x1a5e <Timer0_EnableInt+0x42>
			break;
		case TIMER0_CTC_INT_ENABLE:
			TIMER0_CONTROL->TIMSK_CFG.OCIE0_BIT = 1;
    1a54:	e2 e5       	ldi	r30, 0x52	; 82
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	87 81       	ldd	r24, Z+7	; 0x07
    1a5a:	82 60       	ori	r24, 0x02	; 2
    1a5c:	87 83       	std	Z+7, r24	; 0x07
			break;
	}
	return NO_ERROR;
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
}
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret

00001a6c <Timer0_DisableInt>:




Error_Status_t Timer0_DisableInt(u8 Int_ID)
{
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <Timer0_DisableInt+0x6>
    1a72:	0f 92       	push	r0
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	89 83       	std	Y+1, r24	; 0x01
	// Disable timer0 overflow interrupt and compare match interrupt
	switch(Int_ID){
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	3b 83       	std	Y+3, r19	; 0x03
    1a82:	2a 83       	std	Y+2, r18	; 0x02
    1a84:	8a 81       	ldd	r24, Y+2	; 0x02
    1a86:	9b 81       	ldd	r25, Y+3	; 0x03
    1a88:	82 30       	cpi	r24, 0x02	; 2
    1a8a:	91 05       	cpc	r25, r1
    1a8c:	31 f0       	breq	.+12     	; 0x1a9a <Timer0_DisableInt+0x2e>
    1a8e:	2a 81       	ldd	r18, Y+2	; 0x02
    1a90:	3b 81       	ldd	r19, Y+3	; 0x03
    1a92:	23 30       	cpi	r18, 0x03	; 3
    1a94:	31 05       	cpc	r19, r1
    1a96:	39 f0       	breq	.+14     	; 0x1aa6 <Timer0_DisableInt+0x3a>
    1a98:	0b c0       	rjmp	.+22     	; 0x1ab0 <Timer0_DisableInt+0x44>
		case TIMER0_OVF_INT_DISABLE:
			TIMER0_CONTROL->TIMSK_CFG.TOIE0_BIT = 0;
    1a9a:	e2 e5       	ldi	r30, 0x52	; 82
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	87 81       	ldd	r24, Z+7	; 0x07
    1aa0:	8e 7f       	andi	r24, 0xFE	; 254
    1aa2:	87 83       	std	Z+7, r24	; 0x07
    1aa4:	05 c0       	rjmp	.+10     	; 0x1ab0 <Timer0_DisableInt+0x44>
			break;
		case TIMER0_CTC_INT_DISABLE:
			TIMER0_CONTROL->TIMSK_CFG.OCIE0_BIT = 0;
    1aa6:	e2 e5       	ldi	r30, 0x52	; 82
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	87 81       	ldd	r24, Z+7	; 0x07
    1aac:	8d 7f       	andi	r24, 0xFD	; 253
    1aae:	87 83       	std	Z+7, r24	; 0x07
			break;
	}
	return NO_ERROR;
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
}
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <Timer0_setCallBack>:



Error_Status_t Timer0_setCallBack(const timer0_t *timer0_obj)
{
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	00 d0       	rcall	.+0      	; 0x1ac4 <Timer0_setCallBack+0x6>
    1ac4:	0f 92       	push	r0
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    1aca:	9b 83       	std	Y+3, r25	; 0x03
    1acc:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1ace:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	19 f4       	brne	.+6      	; 0x1ade <Timer0_setCallBack+0x20>
	{
		ret_status = NULL_POINTER;
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	10 c0       	rjmp	.+32     	; 0x1afe <Timer0_setCallBack+0x40>
	}
	else
	{
		Timer0_Over_Flow_isr = timer0_obj->timer0_over_flow_isr;
    1ade:	ea 81       	ldd	r30, Y+2	; 0x02
    1ae0:	fb 81       	ldd	r31, Y+3	; 0x03
    1ae2:	80 81       	ld	r24, Z
    1ae4:	91 81       	ldd	r25, Z+1	; 0x01
    1ae6:	90 93 e9 02 	sts	0x02E9, r25
    1aea:	80 93 e8 02 	sts	0x02E8, r24
		Timer0_Comp_isr = timer0_obj->timer0_comp_isr;
    1aee:	ea 81       	ldd	r30, Y+2	; 0x02
    1af0:	fb 81       	ldd	r31, Y+3	; 0x03
    1af2:	82 81       	ldd	r24, Z+2	; 0x02
    1af4:	93 81       	ldd	r25, Z+3	; 0x03
    1af6:	90 93 eb 02 	sts	0x02EB, r25
    1afa:	80 93 ea 02 	sts	0x02EA, r24
	}
	return ret_status;
    1afe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <Timer0_setFastPWM>:
Error_Status_t Timer0_setFastPWM(const timer0_t *timer0_obj, u8 frequency ,u8 duty)
{
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	00 d0       	rcall	.+0      	; 0x1b12 <Timer0_setFastPWM+0x6>
    1b12:	00 d0       	rcall	.+0      	; 0x1b14 <Timer0_setFastPWM+0x8>
    1b14:	0f 92       	push	r0
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	9b 83       	std	Y+3, r25	; 0x03
    1b1c:	8a 83       	std	Y+2, r24	; 0x02
    1b1e:	6c 83       	std	Y+4, r22	; 0x04
    1b20:	4d 83       	std	Y+5, r20	; 0x05
	Error_Status_t ret_status = NO_ERROR;
    1b22:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	9b 81       	ldd	r25, Y+3	; 0x03
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	19 f4       	brne	.+6      	; 0x1b32 <Timer0_setFastPWM+0x26>
	{
		ret_status = NULL_POINTER;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	89 83       	std	Y+1, r24	; 0x01
    1b30:	49 c0       	rjmp	.+146    	; 0x1bc4 <Timer0_setFastPWM+0xb8>
	}
	else
	{
		if(TIMER0_FAST_PWM_MODE == timer0_obj->mode)
    1b32:	ea 81       	ldd	r30, Y+2	; 0x02
    1b34:	fb 81       	ldd	r31, Y+3	; 0x03
    1b36:	84 81       	ldd	r24, Z+4	; 0x04
    1b38:	88 71       	andi	r24, 0x18	; 24
    1b3a:	88 31       	cpi	r24, 0x18	; 24
    1b3c:	09 f0       	breq	.+2      	; 0x1b40 <Timer0_setFastPWM+0x34>
    1b3e:	42 c0       	rjmp	.+132    	; 0x1bc4 <Timer0_setFastPWM+0xb8>
		{
			if(TIMER0_FAST_PWM_CLEAR_OC0_ON_COMPARE_MATCH == timer0_obj->ctc_mode_cfg)
    1b40:	ea 81       	ldd	r30, Y+2	; 0x02
    1b42:	fb 81       	ldd	r31, Y+3	; 0x03
    1b44:	84 81       	ldd	r24, Z+4	; 0x04
    1b46:	80 76       	andi	r24, 0x60	; 96
    1b48:	80 34       	cpi	r24, 0x40	; 64
    1b4a:	d9 f4       	brne	.+54     	; 0x1b82 <Timer0_setFastPWM+0x76>
			{
				TIMER0_CONTROL->OCR0_CFG = (duty * 255) / 100;
    1b4c:	e2 e5       	ldi	r30, 0x52	; 82
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	8d 81       	ldd	r24, Y+5	; 0x05
    1b52:	48 2f       	mov	r20, r24
    1b54:	50 e0       	ldi	r21, 0x00	; 0
    1b56:	ca 01       	movw	r24, r20
    1b58:	9c 01       	movw	r18, r24
    1b5a:	22 0f       	add	r18, r18
    1b5c:	33 1f       	adc	r19, r19
    1b5e:	c9 01       	movw	r24, r18
    1b60:	96 95       	lsr	r25
    1b62:	98 2f       	mov	r25, r24
    1b64:	88 27       	eor	r24, r24
    1b66:	97 95       	ror	r25
    1b68:	87 95       	ror	r24
    1b6a:	82 1b       	sub	r24, r18
    1b6c:	93 0b       	sbc	r25, r19
    1b6e:	84 0f       	add	r24, r20
    1b70:	95 1f       	adc	r25, r21
    1b72:	24 e6       	ldi	r18, 0x64	; 100
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	b9 01       	movw	r22, r18
    1b78:	0e 94 02 3d 	call	0x7a04	; 0x7a04 <__divmodhi4>
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	82 87       	std	Z+10, r24	; 0x0a
    1b80:	21 c0       	rjmp	.+66     	; 0x1bc4 <Timer0_setFastPWM+0xb8>
			}
			else if(TIMER0_FAST_PWM_SET_OC0_ON_COMPARE_MATCH == timer0_obj->ctc_mode_cfg)
    1b82:	ea 81       	ldd	r30, Y+2	; 0x02
    1b84:	fb 81       	ldd	r31, Y+3	; 0x03
    1b86:	84 81       	ldd	r24, Z+4	; 0x04
    1b88:	80 76       	andi	r24, 0x60	; 96
    1b8a:	80 36       	cpi	r24, 0x60	; 96
    1b8c:	d9 f4       	brne	.+54     	; 0x1bc4 <Timer0_setFastPWM+0xb8>
			{
				//TIMER0_CONTROL->TCNT0_CFG =
				TIMER0_CONTROL->OCR0_CFG = 255 - ((duty * 255) / 100);
    1b8e:	e2 e5       	ldi	r30, 0x52	; 82
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	8d 81       	ldd	r24, Y+5	; 0x05
    1b94:	48 2f       	mov	r20, r24
    1b96:	50 e0       	ldi	r21, 0x00	; 0
    1b98:	ca 01       	movw	r24, r20
    1b9a:	9c 01       	movw	r18, r24
    1b9c:	22 0f       	add	r18, r18
    1b9e:	33 1f       	adc	r19, r19
    1ba0:	c9 01       	movw	r24, r18
    1ba2:	96 95       	lsr	r25
    1ba4:	98 2f       	mov	r25, r24
    1ba6:	88 27       	eor	r24, r24
    1ba8:	97 95       	ror	r25
    1baa:	87 95       	ror	r24
    1bac:	82 1b       	sub	r24, r18
    1bae:	93 0b       	sbc	r25, r19
    1bb0:	84 0f       	add	r24, r20
    1bb2:	95 1f       	adc	r25, r21
    1bb4:	24 e6       	ldi	r18, 0x64	; 100
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	b9 01       	movw	r22, r18
    1bba:	0e 94 02 3d 	call	0x7a04	; 0x7a04 <__divmodhi4>
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	80 95       	com	r24
    1bc2:	82 87       	std	Z+10, r24	; 0x0a
			}
			else{/* Nothing */}
		}
		else{/* Nothing */}
	}
	return ret_status;
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	cf 91       	pop	r28
    1bd2:	df 91       	pop	r29
    1bd4:	08 95       	ret

00001bd6 <Timer0_setphaseCorrectPWM>:


Error_Status_t Timer0_setphaseCorrectPWM(const timer0_t *timer0_obj, u8 frequency , u8 duty)
{
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	00 d0       	rcall	.+0      	; 0x1bdc <Timer0_setphaseCorrectPWM+0x6>
    1bdc:	00 d0       	rcall	.+0      	; 0x1bde <Timer0_setphaseCorrectPWM+0x8>
    1bde:	0f 92       	push	r0
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	9b 83       	std	Y+3, r25	; 0x03
    1be6:	8a 83       	std	Y+2, r24	; 0x02
    1be8:	6c 83       	std	Y+4, r22	; 0x04
    1bea:	4d 83       	std	Y+5, r20	; 0x05
	Error_Status_t ret_status = NO_ERROR;
    1bec:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == timer0_obj)
    1bee:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf0:	9b 81       	ldd	r25, Y+3	; 0x03
    1bf2:	00 97       	sbiw	r24, 0x00	; 0
    1bf4:	19 f4       	brne	.+6      	; 0x1bfc <Timer0_setphaseCorrectPWM+0x26>
	{
		ret_status = NULL_POINTER;
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	89 83       	std	Y+1, r24	; 0x01
    1bfa:	48 c0       	rjmp	.+144    	; 0x1c8c <Timer0_setphaseCorrectPWM+0xb6>
	}
	else
	{
		if(TIMER0_PWM_PHASE_CORRECT_MODE == timer0_obj->mode)
    1bfc:	ea 81       	ldd	r30, Y+2	; 0x02
    1bfe:	fb 81       	ldd	r31, Y+3	; 0x03
    1c00:	84 81       	ldd	r24, Z+4	; 0x04
    1c02:	88 71       	andi	r24, 0x18	; 24
    1c04:	88 30       	cpi	r24, 0x08	; 8
    1c06:	09 f0       	breq	.+2      	; 0x1c0a <Timer0_setphaseCorrectPWM+0x34>
    1c08:	41 c0       	rjmp	.+130    	; 0x1c8c <Timer0_setphaseCorrectPWM+0xb6>
		{
			if(TIMER0_PHASE_CORRECT_PWM_CLEAR_OC0_ON_COMPARE_MATCH == timer0_obj->ctc_mode_cfg)
    1c0a:	ea 81       	ldd	r30, Y+2	; 0x02
    1c0c:	fb 81       	ldd	r31, Y+3	; 0x03
    1c0e:	84 81       	ldd	r24, Z+4	; 0x04
    1c10:	80 76       	andi	r24, 0x60	; 96
    1c12:	80 34       	cpi	r24, 0x40	; 64
    1c14:	c9 f4       	brne	.+50     	; 0x1c48 <Timer0_setphaseCorrectPWM+0x72>
			{
				TIMER0_CONTROL->OCR0_CFG = (u8)(((u8)(duty * 255) / 100) / 2);
    1c16:	e2 e5       	ldi	r30, 0x52	; 82
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1c:	48 2f       	mov	r20, r24
    1c1e:	50 e0       	ldi	r21, 0x00	; 0
    1c20:	ca 01       	movw	r24, r20
    1c22:	9c 01       	movw	r18, r24
    1c24:	22 0f       	add	r18, r18
    1c26:	33 1f       	adc	r19, r19
    1c28:	c9 01       	movw	r24, r18
    1c2a:	96 95       	lsr	r25
    1c2c:	98 2f       	mov	r25, r24
    1c2e:	88 27       	eor	r24, r24
    1c30:	97 95       	ror	r25
    1c32:	87 95       	ror	r24
    1c34:	82 1b       	sub	r24, r18
    1c36:	93 0b       	sbc	r25, r19
    1c38:	84 0f       	add	r24, r20
    1c3a:	95 1f       	adc	r25, r21
    1c3c:	98 ec       	ldi	r25, 0xC8	; 200
    1c3e:	69 2f       	mov	r22, r25
    1c40:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <__udivmodqi4>
    1c44:	82 87       	std	Z+10, r24	; 0x0a
    1c46:	22 c0       	rjmp	.+68     	; 0x1c8c <Timer0_setphaseCorrectPWM+0xb6>
			}
			else if(TIMER0_PHASE_CORRECT_PWM_SET_OC0_ON_COMPARE_MATCH == timer0_obj->ctc_mode_cfg)
    1c48:	ea 81       	ldd	r30, Y+2	; 0x02
    1c4a:	fb 81       	ldd	r31, Y+3	; 0x03
    1c4c:	84 81       	ldd	r24, Z+4	; 0x04
    1c4e:	80 76       	andi	r24, 0x60	; 96
    1c50:	80 36       	cpi	r24, 0x60	; 96
    1c52:	e1 f4       	brne	.+56     	; 0x1c8c <Timer0_setphaseCorrectPWM+0xb6>
			{
				TIMER0_CONTROL->OCR0_CFG = (u8)(255 - ((u8)((duty * 255) / 100) / 2));
    1c54:	e2 e5       	ldi	r30, 0x52	; 82
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5a:	48 2f       	mov	r20, r24
    1c5c:	50 e0       	ldi	r21, 0x00	; 0
    1c5e:	ca 01       	movw	r24, r20
    1c60:	9c 01       	movw	r18, r24
    1c62:	22 0f       	add	r18, r18
    1c64:	33 1f       	adc	r19, r19
    1c66:	c9 01       	movw	r24, r18
    1c68:	96 95       	lsr	r25
    1c6a:	98 2f       	mov	r25, r24
    1c6c:	88 27       	eor	r24, r24
    1c6e:	97 95       	ror	r25
    1c70:	87 95       	ror	r24
    1c72:	82 1b       	sub	r24, r18
    1c74:	93 0b       	sbc	r25, r19
    1c76:	84 0f       	add	r24, r20
    1c78:	95 1f       	adc	r25, r21
    1c7a:	24 e6       	ldi	r18, 0x64	; 100
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	b9 01       	movw	r22, r18
    1c80:	0e 94 02 3d 	call	0x7a04	; 0x7a04 <__divmodhi4>
    1c84:	cb 01       	movw	r24, r22
    1c86:	86 95       	lsr	r24
    1c88:	80 95       	com	r24
    1c8a:	82 87       	std	Z+10, r24	; 0x0a
			}
			else{/* Nothing */}
		}
		else{/* Nothing */}
	}
	return ret_status;
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <__vector_11>:
/* ------------------------------------------------ Timer0 ISRs -------------------------------*/

// Define the ISR function with attribute
void TIMER0_OVF_VECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER0_OVF_VECTOR(void)
{
    1c9e:	1f 92       	push	r1
    1ca0:	0f 92       	push	r0
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	0f 92       	push	r0
    1ca6:	11 24       	eor	r1, r1
    1ca8:	2f 93       	push	r18
    1caa:	3f 93       	push	r19
    1cac:	4f 93       	push	r20
    1cae:	5f 93       	push	r21
    1cb0:	6f 93       	push	r22
    1cb2:	7f 93       	push	r23
    1cb4:	8f 93       	push	r24
    1cb6:	9f 93       	push	r25
    1cb8:	af 93       	push	r26
    1cba:	bf 93       	push	r27
    1cbc:	ef 93       	push	r30
    1cbe:	ff 93       	push	r31
    1cc0:	df 93       	push	r29
    1cc2:	cf 93       	push	r28
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	TIMER0_CONTROL->TIFR_CFG.TOF0_BIT = 0;
    1cc8:	e2 e5       	ldi	r30, 0x52	; 82
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	86 81       	ldd	r24, Z+6	; 0x06
    1cce:	8e 7f       	andi	r24, 0xFE	; 254
    1cd0:	86 83       	std	Z+6, r24	; 0x06
	//			Timer0_delay_callback();
	//		}
	//	}

	// execute ISR if it existed
	if(Timer0_Over_Flow_isr)
    1cd2:	80 91 e8 02 	lds	r24, 0x02E8
    1cd6:	90 91 e9 02 	lds	r25, 0x02E9
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	29 f0       	breq	.+10     	; 0x1ce8 <__vector_11+0x4a>
	{
		Timer0_Over_Flow_isr();
    1cde:	e0 91 e8 02 	lds	r30, 0x02E8
    1ce2:	f0 91 e9 02 	lds	r31, 0x02E9
    1ce6:	09 95       	icall
	}
}
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	ff 91       	pop	r31
    1cee:	ef 91       	pop	r30
    1cf0:	bf 91       	pop	r27
    1cf2:	af 91       	pop	r26
    1cf4:	9f 91       	pop	r25
    1cf6:	8f 91       	pop	r24
    1cf8:	7f 91       	pop	r23
    1cfa:	6f 91       	pop	r22
    1cfc:	5f 91       	pop	r21
    1cfe:	4f 91       	pop	r20
    1d00:	3f 91       	pop	r19
    1d02:	2f 91       	pop	r18
    1d04:	0f 90       	pop	r0
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	0f 90       	pop	r0
    1d0a:	1f 90       	pop	r1
    1d0c:	18 95       	reti

00001d0e <__vector_10>:


// Define the ISR function with attribute
void TIMER0_COMPA_VECTOR(void) __attribute__((signal, used, externally_visible));
void TIMER0_COMPA_VECTOR(void)
{
    1d0e:	1f 92       	push	r1
    1d10:	0f 92       	push	r0
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	0f 92       	push	r0
    1d16:	11 24       	eor	r1, r1
    1d18:	2f 93       	push	r18
    1d1a:	3f 93       	push	r19
    1d1c:	4f 93       	push	r20
    1d1e:	5f 93       	push	r21
    1d20:	6f 93       	push	r22
    1d22:	7f 93       	push	r23
    1d24:	8f 93       	push	r24
    1d26:	9f 93       	push	r25
    1d28:	af 93       	push	r26
    1d2a:	bf 93       	push	r27
    1d2c:	ef 93       	push	r30
    1d2e:	ff 93       	push	r31
    1d30:	df 93       	push	r29
    1d32:	cf 93       	push	r28
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
	// clear flag
	TIMER0_CONTROL->TIFR_CFG.OCF0_BIT = 0;
    1d38:	e2 e5       	ldi	r30, 0x52	; 82
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	86 81       	ldd	r24, Z+6	; 0x06
    1d3e:	8d 7f       	andi	r24, 0xFD	; 253
    1d40:	86 83       	std	Z+6, r24	; 0x06

	// execute ISR if it existed
	if(Timer0_Comp_isr)
    1d42:	80 91 ea 02 	lds	r24, 0x02EA
    1d46:	90 91 eb 02 	lds	r25, 0x02EB
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	29 f0       	breq	.+10     	; 0x1d58 <__vector_10+0x4a>
	{
		Timer0_Comp_isr();
    1d4e:	e0 91 ea 02 	lds	r30, 0x02EA
    1d52:	f0 91 eb 02 	lds	r31, 0x02EB
    1d56:	09 95       	icall
	}
}
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	ff 91       	pop	r31
    1d5e:	ef 91       	pop	r30
    1d60:	bf 91       	pop	r27
    1d62:	af 91       	pop	r26
    1d64:	9f 91       	pop	r25
    1d66:	8f 91       	pop	r24
    1d68:	7f 91       	pop	r23
    1d6a:	6f 91       	pop	r22
    1d6c:	5f 91       	pop	r21
    1d6e:	4f 91       	pop	r20
    1d70:	3f 91       	pop	r19
    1d72:	2f 91       	pop	r18
    1d74:	0f 90       	pop	r0
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	0f 90       	pop	r0
    1d7a:	1f 90       	pop	r1
    1d7c:	18 95       	reti

00001d7e <M_EXTI_voidEnable>:
void (*INT0_ISR)(void) = NULL;
void (*INT1_ISR)(void) = NULL;
void (*INT2_ISR)(void) = NULL;

Error_Status_t M_EXTI_voidEnable(const EXT_INTERRUPT_T *exti_obj)
{
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	00 d0       	rcall	.+0      	; 0x1d84 <M_EXTI_voidEnable+0x6>
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <M_EXTI_voidEnable+0x8>
    1d86:	0f 92       	push	r0
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	9b 83       	std	Y+3, r25	; 0x03
    1d8e:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1d90:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == exti_obj)
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	9b 81       	ldd	r25, Y+3	; 0x03
    1d96:	00 97       	sbiw	r24, 0x00	; 0
    1d98:	19 f4       	brne	.+6      	; 0x1da0 <M_EXTI_voidEnable+0x22>
	{
		ret_status = NULL_POINTER;
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	89 83       	std	Y+1, r24	; 0x01
    1d9e:	69 c0       	rjmp	.+210    	; 0x1e72 <M_EXTI_voidEnable+0xf4>
	}
	else
	{
		GIE_Enable();
    1da0:	ef e5       	ldi	r30, 0x5F	; 95
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	80 68       	ori	r24, 0x80	; 128
    1da8:	80 83       	st	Z, r24
		switch (exti_obj->INTx_select) {
    1daa:	ea 81       	ldd	r30, Y+2	; 0x02
    1dac:	fb 81       	ldd	r31, Y+3	; 0x03
    1dae:	82 81       	ldd	r24, Z+2	; 0x02
    1db0:	83 70       	andi	r24, 0x03	; 3
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	3d 83       	std	Y+5, r19	; 0x05
    1db8:	2c 83       	std	Y+4, r18	; 0x04
    1dba:	8c 81       	ldd	r24, Y+4	; 0x04
    1dbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1dbe:	81 30       	cpi	r24, 0x01	; 1
    1dc0:	91 05       	cpc	r25, r1
    1dc2:	11 f1       	breq	.+68     	; 0x1e08 <M_EXTI_voidEnable+0x8a>
    1dc4:	2c 81       	ldd	r18, Y+4	; 0x04
    1dc6:	3d 81       	ldd	r19, Y+5	; 0x05
    1dc8:	22 30       	cpi	r18, 0x02	; 2
    1dca:	31 05       	cpc	r19, r1
    1dcc:	b9 f1       	breq	.+110    	; 0x1e3c <M_EXTI_voidEnable+0xbe>
    1dce:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd2:	00 97       	sbiw	r24, 0x00	; 0
    1dd4:	09 f0       	breq	.+2      	; 0x1dd8 <M_EXTI_voidEnable+0x5a>
    1dd6:	4b c0       	rjmp	.+150    	; 0x1e6e <M_EXTI_voidEnable+0xf0>
			case EXTI_INT0_ID:
				EXT_INT_CONTROL->GICR_CFG.INT0_BIT = EXTI0_ENABLE;
    1dd8:	e4 e5       	ldi	r30, 0x54	; 84
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	87 81       	ldd	r24, Z+7	; 0x07
    1dde:	80 64       	ori	r24, 0x40	; 64
    1de0:	87 83       	std	Z+7, r24	; 0x07
				EXT_INT_CONTROL->MCUCR_CFG.ISC0_BITS = exti_obj->INTx_sense;
    1de2:	a4 e5       	ldi	r26, 0x54	; 84
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	ea 81       	ldd	r30, Y+2	; 0x02
    1de8:	fb 81       	ldd	r31, Y+3	; 0x03
    1dea:	82 81       	ldd	r24, Z+2	; 0x02
    1dec:	86 95       	lsr	r24
    1dee:	86 95       	lsr	r24
    1df0:	83 70       	andi	r24, 0x03	; 3
    1df2:	98 2f       	mov	r25, r24
    1df4:	93 70       	andi	r25, 0x03	; 3
    1df6:	11 96       	adiw	r26, 0x01	; 1
    1df8:	8c 91       	ld	r24, X
    1dfa:	11 97       	sbiw	r26, 0x01	; 1
    1dfc:	8c 7f       	andi	r24, 0xFC	; 252
    1dfe:	89 2b       	or	r24, r25
    1e00:	11 96       	adiw	r26, 0x01	; 1
    1e02:	8c 93       	st	X, r24
    1e04:	11 97       	sbiw	r26, 0x01	; 1
    1e06:	35 c0       	rjmp	.+106    	; 0x1e72 <M_EXTI_voidEnable+0xf4>
				break;
			case EXTI_INT1_ID:
				EXT_INT_CONTROL->GICR_CFG.INT1_BIT = EXTI1_ENABLE;
    1e08:	e4 e5       	ldi	r30, 0x54	; 84
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	87 81       	ldd	r24, Z+7	; 0x07
    1e0e:	80 68       	ori	r24, 0x80	; 128
    1e10:	87 83       	std	Z+7, r24	; 0x07
				EXT_INT_CONTROL->MCUCR_CFG.ISC1_BITS = exti_obj->INTx_sense;
    1e12:	a4 e5       	ldi	r26, 0x54	; 84
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	ea 81       	ldd	r30, Y+2	; 0x02
    1e18:	fb 81       	ldd	r31, Y+3	; 0x03
    1e1a:	82 81       	ldd	r24, Z+2	; 0x02
    1e1c:	86 95       	lsr	r24
    1e1e:	86 95       	lsr	r24
    1e20:	83 70       	andi	r24, 0x03	; 3
    1e22:	83 70       	andi	r24, 0x03	; 3
    1e24:	98 2f       	mov	r25, r24
    1e26:	99 0f       	add	r25, r25
    1e28:	99 0f       	add	r25, r25
    1e2a:	11 96       	adiw	r26, 0x01	; 1
    1e2c:	8c 91       	ld	r24, X
    1e2e:	11 97       	sbiw	r26, 0x01	; 1
    1e30:	83 7f       	andi	r24, 0xF3	; 243
    1e32:	89 2b       	or	r24, r25
    1e34:	11 96       	adiw	r26, 0x01	; 1
    1e36:	8c 93       	st	X, r24
    1e38:	11 97       	sbiw	r26, 0x01	; 1
    1e3a:	1b c0       	rjmp	.+54     	; 0x1e72 <M_EXTI_voidEnable+0xf4>
				break;
			case EXTI_INT2_ID:
				EXT_INT_CONTROL->GICR_CFG.INT2_BIT = EXTI2_ENABLE;
    1e3c:	e4 e5       	ldi	r30, 0x54	; 84
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	87 81       	ldd	r24, Z+7	; 0x07
    1e42:	80 62       	ori	r24, 0x20	; 32
    1e44:	87 83       	std	Z+7, r24	; 0x07
				EXT_INT_CONTROL->MCUCSR_CFG.ISC2_BIT = exti_obj->INTx_sense;
    1e46:	a4 e5       	ldi	r26, 0x54	; 84
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e4c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e4e:	82 81       	ldd	r24, Z+2	; 0x02
    1e50:	86 95       	lsr	r24
    1e52:	86 95       	lsr	r24
    1e54:	83 70       	andi	r24, 0x03	; 3
    1e56:	81 70       	andi	r24, 0x01	; 1
    1e58:	81 70       	andi	r24, 0x01	; 1
    1e5a:	98 2f       	mov	r25, r24
    1e5c:	92 95       	swap	r25
    1e5e:	99 0f       	add	r25, r25
    1e60:	99 0f       	add	r25, r25
    1e62:	90 7c       	andi	r25, 0xC0	; 192
    1e64:	8c 91       	ld	r24, X
    1e66:	8f 7b       	andi	r24, 0xBF	; 191
    1e68:	89 2b       	or	r24, r25
    1e6a:	8c 93       	st	X, r24
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <M_EXTI_voidEnable+0xf4>
				break;
			default:
				ret_status = OUT_OF_RANGE_VALUE;
    1e6e:	82 e0       	ldi	r24, 0x02	; 2
    1e70:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}
	return ret_status;
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	08 95       	ret

00001e84 <M_EXTI_voidDisable>:
Error_Status_t M_EXTI_voidDisable(const EXT_INTERRUPT_T *exti_obj)
{
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <M_EXTI_voidDisable+0x6>
    1e8a:	00 d0       	rcall	.+0      	; 0x1e8c <M_EXTI_voidDisable+0x8>
    1e8c:	0f 92       	push	r0
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
    1e92:	9b 83       	std	Y+3, r25	; 0x03
    1e94:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1e96:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == exti_obj)
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	19 f4       	brne	.+6      	; 0x1ea6 <M_EXTI_voidDisable+0x22>
	{
		ret_status = NULL_POINTER;
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	89 83       	std	Y+1, r24	; 0x01
    1ea4:	2f c0       	rjmp	.+94     	; 0x1f04 <M_EXTI_voidDisable+0x80>
	}
	else
	{
		GIE_Disable();
    1ea6:	ef e5       	ldi	r30, 0x5F	; 95
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	8f 77       	andi	r24, 0x7F	; 127
    1eae:	80 83       	st	Z, r24
		switch (exti_obj->INTx_select) {
    1eb0:	ea 81       	ldd	r30, Y+2	; 0x02
    1eb2:	fb 81       	ldd	r31, Y+3	; 0x03
    1eb4:	82 81       	ldd	r24, Z+2	; 0x02
    1eb6:	83 70       	andi	r24, 0x03	; 3
    1eb8:	28 2f       	mov	r18, r24
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	3d 83       	std	Y+5, r19	; 0x05
    1ebe:	2c 83       	std	Y+4, r18	; 0x04
    1ec0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec4:	81 30       	cpi	r24, 0x01	; 1
    1ec6:	91 05       	cpc	r25, r1
    1ec8:	79 f0       	breq	.+30     	; 0x1ee8 <M_EXTI_voidDisable+0x64>
    1eca:	2c 81       	ldd	r18, Y+4	; 0x04
    1ecc:	3d 81       	ldd	r19, Y+5	; 0x05
    1ece:	22 30       	cpi	r18, 0x02	; 2
    1ed0:	31 05       	cpc	r19, r1
    1ed2:	81 f0       	breq	.+32     	; 0x1ef4 <M_EXTI_voidDisable+0x70>
    1ed4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	91 f4       	brne	.+36     	; 0x1f00 <M_EXTI_voidDisable+0x7c>
			case EXTI_INT0_ID:
				EXT_INT_CONTROL->GICR_CFG.INT0_BIT = EXTI0_DISABLE;
    1edc:	e4 e5       	ldi	r30, 0x54	; 84
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	87 81       	ldd	r24, Z+7	; 0x07
    1ee2:	8f 7b       	andi	r24, 0xBF	; 191
    1ee4:	87 83       	std	Z+7, r24	; 0x07
    1ee6:	0e c0       	rjmp	.+28     	; 0x1f04 <M_EXTI_voidDisable+0x80>
				break;
			case EXTI_INT1_ID:
				EXT_INT_CONTROL->GICR_CFG.INT1_BIT = EXTI1_DISABLE;
    1ee8:	e4 e5       	ldi	r30, 0x54	; 84
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	87 81       	ldd	r24, Z+7	; 0x07
    1eee:	8f 77       	andi	r24, 0x7F	; 127
    1ef0:	87 83       	std	Z+7, r24	; 0x07
    1ef2:	08 c0       	rjmp	.+16     	; 0x1f04 <M_EXTI_voidDisable+0x80>
				break;
			case EXTI_INT2_ID:
				EXT_INT_CONTROL->GICR_CFG.INT2_BIT = EXTI2_DISABLE;
    1ef4:	e4 e5       	ldi	r30, 0x54	; 84
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	87 81       	ldd	r24, Z+7	; 0x07
    1efa:	8f 7d       	andi	r24, 0xDF	; 223
    1efc:	87 83       	std	Z+7, r24	; 0x07
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <M_EXTI_voidDisable+0x80>
				break;
			default:
				ret_status = OUT_OF_RANGE_VALUE;
    1f00:	82 e0       	ldi	r24, 0x02	; 2
    1f02:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}
	return ret_status;
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	cf 91       	pop	r28
    1f12:	df 91       	pop	r29
    1f14:	08 95       	ret

00001f16 <M_EXTI_voidSet_CallBack>:
Error_Status_t M_EXTI_voidSet_CallBack(const EXT_INTERRUPT_T *exti_obj)
{
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <M_EXTI_voidSet_CallBack+0x6>
    1f1c:	00 d0       	rcall	.+0      	; 0x1f1e <M_EXTI_voidSet_CallBack+0x8>
    1f1e:	0f 92       	push	r0
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
    1f24:	9b 83       	std	Y+3, r25	; 0x03
    1f26:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    1f28:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == exti_obj)
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2e:	00 97       	sbiw	r24, 0x00	; 0
    1f30:	19 f4       	brne	.+6      	; 0x1f38 <M_EXTI_voidSet_CallBack+0x22>
	{
		ret_status = NULL_POINTER;
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	89 83       	std	Y+1, r24	; 0x01
    1f36:	33 c0       	rjmp	.+102    	; 0x1f9e <M_EXTI_voidSet_CallBack+0x88>
	}
	else
	{
		switch (exti_obj->INTx_select) {
    1f38:	ea 81       	ldd	r30, Y+2	; 0x02
    1f3a:	fb 81       	ldd	r31, Y+3	; 0x03
    1f3c:	82 81       	ldd	r24, Z+2	; 0x02
    1f3e:	83 70       	andi	r24, 0x03	; 3
    1f40:	28 2f       	mov	r18, r24
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	3d 83       	std	Y+5, r19	; 0x05
    1f46:	2c 83       	std	Y+4, r18	; 0x04
    1f48:	8c 81       	ldd	r24, Y+4	; 0x04
    1f4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f4c:	81 30       	cpi	r24, 0x01	; 1
    1f4e:	91 05       	cpc	r25, r1
    1f50:	91 f0       	breq	.+36     	; 0x1f76 <M_EXTI_voidSet_CallBack+0x60>
    1f52:	2c 81       	ldd	r18, Y+4	; 0x04
    1f54:	3d 81       	ldd	r19, Y+5	; 0x05
    1f56:	22 30       	cpi	r18, 0x02	; 2
    1f58:	31 05       	cpc	r19, r1
    1f5a:	b1 f0       	breq	.+44     	; 0x1f88 <M_EXTI_voidSet_CallBack+0x72>
    1f5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f60:	00 97       	sbiw	r24, 0x00	; 0
    1f62:	d9 f4       	brne	.+54     	; 0x1f9a <M_EXTI_voidSet_CallBack+0x84>
			case EXTI_INT0_ID:
				INT0_ISR = exti_obj->EXT_INT_ISR;
    1f64:	ea 81       	ldd	r30, Y+2	; 0x02
    1f66:	fb 81       	ldd	r31, Y+3	; 0x03
    1f68:	80 81       	ld	r24, Z
    1f6a:	91 81       	ldd	r25, Z+1	; 0x01
    1f6c:	90 93 ed 02 	sts	0x02ED, r25
    1f70:	80 93 ec 02 	sts	0x02EC, r24
    1f74:	14 c0       	rjmp	.+40     	; 0x1f9e <M_EXTI_voidSet_CallBack+0x88>
				break;
			case EXTI_INT1_ID:
				INT1_ISR = exti_obj->EXT_INT_ISR;
    1f76:	ea 81       	ldd	r30, Y+2	; 0x02
    1f78:	fb 81       	ldd	r31, Y+3	; 0x03
    1f7a:	80 81       	ld	r24, Z
    1f7c:	91 81       	ldd	r25, Z+1	; 0x01
    1f7e:	90 93 ef 02 	sts	0x02EF, r25
    1f82:	80 93 ee 02 	sts	0x02EE, r24
    1f86:	0b c0       	rjmp	.+22     	; 0x1f9e <M_EXTI_voidSet_CallBack+0x88>
				break;
			case EXTI_INT2_ID:
				INT2_ISR = exti_obj->EXT_INT_ISR;
    1f88:	ea 81       	ldd	r30, Y+2	; 0x02
    1f8a:	fb 81       	ldd	r31, Y+3	; 0x03
    1f8c:	80 81       	ld	r24, Z
    1f8e:	91 81       	ldd	r25, Z+1	; 0x01
    1f90:	90 93 f1 02 	sts	0x02F1, r25
    1f94:	80 93 f0 02 	sts	0x02F0, r24
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <M_EXTI_voidSet_CallBack+0x88>
				break;
			default:
				ret_status = OUT_OF_RANGE_VALUE;
    1f9a:	82 e0       	ldi	r24, 0x02	; 2
    1f9c:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}
	return ret_status;
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	08 95       	ret

00001fb0 <__vector_1>:

/* ----------------------------------------- External Interrupt ISRs -------------------------- */
// Define the ISR function with attribute
void INT0_VECTOR(void) __attribute__((signal));
void INT0_VECTOR(void)
{
    1fb0:	1f 92       	push	r1
    1fb2:	0f 92       	push	r0
    1fb4:	0f b6       	in	r0, 0x3f	; 63
    1fb6:	0f 92       	push	r0
    1fb8:	11 24       	eor	r1, r1
    1fba:	2f 93       	push	r18
    1fbc:	3f 93       	push	r19
    1fbe:	4f 93       	push	r20
    1fc0:	5f 93       	push	r21
    1fc2:	6f 93       	push	r22
    1fc4:	7f 93       	push	r23
    1fc6:	8f 93       	push	r24
    1fc8:	9f 93       	push	r25
    1fca:	af 93       	push	r26
    1fcc:	bf 93       	push	r27
    1fce:	ef 93       	push	r30
    1fd0:	ff 93       	push	r31
    1fd2:	df 93       	push	r29
    1fd4:	cf 93       	push	r28
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
	// Clear flag
	EXT_INT_CONTROL->GIFR_CFG.INTF0_BIT = 0;
    1fda:	e4 e5       	ldi	r30, 0x54	; 84
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	86 81       	ldd	r24, Z+6	; 0x06
    1fe0:	8f 7b       	andi	r24, 0xBF	; 191
    1fe2:	86 83       	std	Z+6, r24	; 0x06
	// execute ISR if it existed
	if(INT0_ISR)
    1fe4:	80 91 ec 02 	lds	r24, 0x02EC
    1fe8:	90 91 ed 02 	lds	r25, 0x02ED
    1fec:	00 97       	sbiw	r24, 0x00	; 0
    1fee:	29 f0       	breq	.+10     	; 0x1ffa <__vector_1+0x4a>
	{
		INT0_ISR();
    1ff0:	e0 91 ec 02 	lds	r30, 0x02EC
    1ff4:	f0 91 ed 02 	lds	r31, 0x02ED
    1ff8:	09 95       	icall
	}
}
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	ff 91       	pop	r31
    2000:	ef 91       	pop	r30
    2002:	bf 91       	pop	r27
    2004:	af 91       	pop	r26
    2006:	9f 91       	pop	r25
    2008:	8f 91       	pop	r24
    200a:	7f 91       	pop	r23
    200c:	6f 91       	pop	r22
    200e:	5f 91       	pop	r21
    2010:	4f 91       	pop	r20
    2012:	3f 91       	pop	r19
    2014:	2f 91       	pop	r18
    2016:	0f 90       	pop	r0
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	0f 90       	pop	r0
    201c:	1f 90       	pop	r1
    201e:	18 95       	reti

00002020 <__vector_2>:


// Define the ISR function with attribute
void INT1_VECTOR(void) __attribute__((signal));
void INT1_VECTOR(void)
{
    2020:	1f 92       	push	r1
    2022:	0f 92       	push	r0
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	0f 92       	push	r0
    2028:	11 24       	eor	r1, r1
    202a:	2f 93       	push	r18
    202c:	3f 93       	push	r19
    202e:	4f 93       	push	r20
    2030:	5f 93       	push	r21
    2032:	6f 93       	push	r22
    2034:	7f 93       	push	r23
    2036:	8f 93       	push	r24
    2038:	9f 93       	push	r25
    203a:	af 93       	push	r26
    203c:	bf 93       	push	r27
    203e:	ef 93       	push	r30
    2040:	ff 93       	push	r31
    2042:	df 93       	push	r29
    2044:	cf 93       	push	r28
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
	// clear flag
	EXT_INT_CONTROL->GIFR_CFG.INTF1_BIT = 0;
    204a:	e4 e5       	ldi	r30, 0x54	; 84
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	86 81       	ldd	r24, Z+6	; 0x06
    2050:	8f 77       	andi	r24, 0x7F	; 127
    2052:	86 83       	std	Z+6, r24	; 0x06
	// execute ISR if it existed
	if(INT1_ISR)
    2054:	80 91 ee 02 	lds	r24, 0x02EE
    2058:	90 91 ef 02 	lds	r25, 0x02EF
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	29 f0       	breq	.+10     	; 0x206a <__vector_2+0x4a>
	{
		INT1_ISR();
    2060:	e0 91 ee 02 	lds	r30, 0x02EE
    2064:	f0 91 ef 02 	lds	r31, 0x02EF
    2068:	09 95       	icall
	}
}
    206a:	cf 91       	pop	r28
    206c:	df 91       	pop	r29
    206e:	ff 91       	pop	r31
    2070:	ef 91       	pop	r30
    2072:	bf 91       	pop	r27
    2074:	af 91       	pop	r26
    2076:	9f 91       	pop	r25
    2078:	8f 91       	pop	r24
    207a:	7f 91       	pop	r23
    207c:	6f 91       	pop	r22
    207e:	5f 91       	pop	r21
    2080:	4f 91       	pop	r20
    2082:	3f 91       	pop	r19
    2084:	2f 91       	pop	r18
    2086:	0f 90       	pop	r0
    2088:	0f be       	out	0x3f, r0	; 63
    208a:	0f 90       	pop	r0
    208c:	1f 90       	pop	r1
    208e:	18 95       	reti

00002090 <__vector_3>:


// Define the ISR function with attribute
void INT2_VECTOR(void) __attribute__((signal));
void INT2_VECTOR(void)
{
    2090:	1f 92       	push	r1
    2092:	0f 92       	push	r0
    2094:	0f b6       	in	r0, 0x3f	; 63
    2096:	0f 92       	push	r0
    2098:	11 24       	eor	r1, r1
    209a:	2f 93       	push	r18
    209c:	3f 93       	push	r19
    209e:	4f 93       	push	r20
    20a0:	5f 93       	push	r21
    20a2:	6f 93       	push	r22
    20a4:	7f 93       	push	r23
    20a6:	8f 93       	push	r24
    20a8:	9f 93       	push	r25
    20aa:	af 93       	push	r26
    20ac:	bf 93       	push	r27
    20ae:	ef 93       	push	r30
    20b0:	ff 93       	push	r31
    20b2:	df 93       	push	r29
    20b4:	cf 93       	push	r28
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
	// clear flag
	EXT_INT_CONTROL->GIFR_CFG.INTF2_BIT = 1;
    20ba:	e4 e5       	ldi	r30, 0x54	; 84
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	86 81       	ldd	r24, Z+6	; 0x06
    20c0:	80 62       	ori	r24, 0x20	; 32
    20c2:	86 83       	std	Z+6, r24	; 0x06
	// execute ISR if it existed
	if(INT2_ISR)
    20c4:	80 91 f0 02 	lds	r24, 0x02F0
    20c8:	90 91 f1 02 	lds	r25, 0x02F1
    20cc:	00 97       	sbiw	r24, 0x00	; 0
    20ce:	29 f0       	breq	.+10     	; 0x20da <__vector_3+0x4a>
	{
		INT2_ISR();
    20d0:	e0 91 f0 02 	lds	r30, 0x02F0
    20d4:	f0 91 f1 02 	lds	r31, 0x02F1
    20d8:	09 95       	icall
	}
}
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	ff 91       	pop	r31
    20e0:	ef 91       	pop	r30
    20e2:	bf 91       	pop	r27
    20e4:	af 91       	pop	r26
    20e6:	9f 91       	pop	r25
    20e8:	8f 91       	pop	r24
    20ea:	7f 91       	pop	r23
    20ec:	6f 91       	pop	r22
    20ee:	5f 91       	pop	r21
    20f0:	4f 91       	pop	r20
    20f2:	3f 91       	pop	r19
    20f4:	2f 91       	pop	r18
    20f6:	0f 90       	pop	r0
    20f8:	0f be       	out	0x3f, r0	; 63
    20fa:	0f 90       	pop	r0
    20fc:	1f 90       	pop	r1
    20fe:	18 95       	reti

00002100 <WDT_Enable>:

#include "WatchDog.h"


void WDT_Enable(void)
{
    2100:	df 93       	push	r29
    2102:	cf 93       	push	r28
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
	WATCHDOG_CONTROL->WDE_BIT = 1;
    2108:	e1 e4       	ldi	r30, 0x41	; 65
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	88 60       	ori	r24, 0x08	; 8
    2110:	80 83       	st	Z, r24
}
    2112:	cf 91       	pop	r28
    2114:	df 91       	pop	r29
    2116:	08 95       	ret

00002118 <WDT_Disable>:


void WDT_Disable(void)
{
    2118:	df 93       	push	r29
    211a:	cf 93       	push	r28
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
	/* Write logic one to WDTOE and WDE  */
	WDTCR_REG |= (1 << WDTOE_POS) | (1 << WDE_POS);
    2120:	a1 e4       	ldi	r26, 0x41	; 65
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	e1 e4       	ldi	r30, 0x41	; 65
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	88 61       	ori	r24, 0x18	; 24
    212c:	8c 93       	st	X, r24
	WDTCR_REG = 0x00;
    212e:	e1 e4       	ldi	r30, 0x41	; 65
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	10 82       	st	Z, r1
}
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	08 95       	ret

0000213a <WDT_sleep>:


void WDT_sleep(u8 sleepTime)
{
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	0f 92       	push	r0
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
    2144:	89 83       	std	Y+1, r24	; 0x01
	WDT_Enable();
    2146:	0e 94 80 10 	call	0x2100	; 0x2100 <WDT_Enable>
	WATCHDOG_CONTROL->WDP_BITS = sleepTime;
    214a:	e1 e4       	ldi	r30, 0x41	; 65
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	89 81       	ldd	r24, Y+1	; 0x01
    2150:	87 70       	andi	r24, 0x07	; 7
    2152:	98 2f       	mov	r25, r24
    2154:	97 70       	andi	r25, 0x07	; 7
    2156:	80 81       	ld	r24, Z
    2158:	88 7f       	andi	r24, 0xF8	; 248
    215a:	89 2b       	or	r24, r25
    215c:	80 83       	st	Z, r24
}
    215e:	0f 90       	pop	r0
    2160:	cf 91       	pop	r28
    2162:	df 91       	pop	r29
    2164:	08 95       	ret

00002166 <WDT_refresh>:

void WDT_refresh(void)
{
    2166:	df 93       	push	r29
    2168:	cf 93       	push	r28
    216a:	cd b7       	in	r28, 0x3d	; 61
    216c:	de b7       	in	r29, 0x3e	; 62
	asm volatile ("WDR");
    216e:	a8 95       	wdr
}
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	08 95       	ret

00002176 <UART_Init>:

#include "UART.h"


Error_Status_t UART_Init(u32 baud_rate)
{
    2176:	df 93       	push	r29
    2178:	cf 93       	push	r28
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	2b 97       	sbiw	r28, 0x0b	; 11
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	de bf       	out	0x3e, r29	; 62
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	cd bf       	out	0x3d, r28	; 61
    218a:	68 87       	std	Y+8, r22	; 0x08
    218c:	79 87       	std	Y+9, r23	; 0x09
    218e:	8a 87       	std	Y+10, r24	; 0x0a
    2190:	9b 87       	std	Y+11, r25	; 0x0b
	Error_Status_t ret_status = NO_ERROR;
    2192:	1f 82       	std	Y+7, r1	; 0x07

	//u8 baud = 51;
	//u8 baud = 107;
	u32 UBRR_value = UBRR_VALUE(baud_rate);
    2194:	88 85       	ldd	r24, Y+8	; 0x08
    2196:	99 85       	ldd	r25, Y+9	; 0x09
    2198:	aa 85       	ldd	r26, Y+10	; 0x0a
    219a:	bb 85       	ldd	r27, Y+11	; 0x0b
    219c:	88 0f       	add	r24, r24
    219e:	99 1f       	adc	r25, r25
    21a0:	aa 1f       	adc	r26, r26
    21a2:	bb 1f       	adc	r27, r27
    21a4:	88 0f       	add	r24, r24
    21a6:	99 1f       	adc	r25, r25
    21a8:	aa 1f       	adc	r26, r26
    21aa:	bb 1f       	adc	r27, r27
    21ac:	88 0f       	add	r24, r24
    21ae:	99 1f       	adc	r25, r25
    21b0:	aa 1f       	adc	r26, r26
    21b2:	bb 1f       	adc	r27, r27
    21b4:	88 0f       	add	r24, r24
    21b6:	99 1f       	adc	r25, r25
    21b8:	aa 1f       	adc	r26, r26
    21ba:	bb 1f       	adc	r27, r27
    21bc:	9c 01       	movw	r18, r24
    21be:	ad 01       	movw	r20, r26
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	94 e2       	ldi	r25, 0x24	; 36
    21c4:	a4 ef       	ldi	r26, 0xF4	; 244
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	bc 01       	movw	r22, r24
    21ca:	cd 01       	movw	r24, r26
    21cc:	0e 94 15 3d 	call	0x7a2a	; 0x7a2a <__udivmodsi4>
    21d0:	da 01       	movw	r26, r20
    21d2:	c9 01       	movw	r24, r18
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	a1 09       	sbc	r26, r1
    21d8:	b1 09       	sbc	r27, r1
    21da:	8b 83       	std	Y+3, r24	; 0x03
    21dc:	9c 83       	std	Y+4, r25	; 0x04
    21de:	ad 83       	std	Y+5, r26	; 0x05
    21e0:	be 83       	std	Y+6, r27	; 0x06

	// set baud rate
	UART_CONTROL->UBRRH_UCSRC_CFG = (u8)(UBRR_value >> 8);
    21e2:	e9 e2       	ldi	r30, 0x29	; 41
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	8b 81       	ldd	r24, Y+3	; 0x03
    21e8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ea:	ad 81       	ldd	r26, Y+5	; 0x05
    21ec:	be 81       	ldd	r27, Y+6	; 0x06
    21ee:	89 2f       	mov	r24, r25
    21f0:	9a 2f       	mov	r25, r26
    21f2:	ab 2f       	mov	r26, r27
    21f4:	bb 27       	eor	r27, r27
    21f6:	87 8b       	std	Z+23, r24	; 0x17
	UART_CONTROL->UBRRL_CFG = (u8)(UBRR_value);
    21f8:	e9 e2       	ldi	r30, 0x29	; 41
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	8b 81       	ldd	r24, Y+3	; 0x03
    21fe:	80 83       	st	Z, r24

	// Enable transmitter and receiver
	u8 rx_tx = (0x01<<4) | (0x01<<3);
    2200:	88 e1       	ldi	r24, 0x18	; 24
    2202:	8a 83       	std	Y+2, r24	; 0x02
	UART_CONTROL->UCSRB_CFG = rx_tx;
    2204:	e9 e2       	ldi	r30, 0x29	; 41
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	8a 81       	ldd	r24, Y+2	; 0x02
    220a:	81 83       	std	Z+1, r24	; 0x01

	// set frame format
	u8 frame_form = (0x01<<7) | (0x01<<3) | (0x03<<1);
    220c:	8e e8       	ldi	r24, 0x8E	; 142
    220e:	89 83       	std	Y+1, r24	; 0x01
	UART_CONTROL->UBRRH_UCSRC_CFG = frame_form;
    2210:	e9 e2       	ldi	r30, 0x29	; 41
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	87 8b       	std	Z+23, r24	; 0x17

	return ret_status;
    2218:	8f 81       	ldd	r24, Y+7	; 0x07
}
    221a:	2b 96       	adiw	r28, 0x0b	; 11
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	cf 91       	pop	r28
    2228:	df 91       	pop	r29
    222a:	08 95       	ret

0000222c <UART_SendByte>:


Error_Status_t UART_SendByte(u8 ch)
{
    222c:	df 93       	push	r29
    222e:	cf 93       	push	r28
    2230:	00 d0       	rcall	.+0      	; 0x2232 <UART_SendByte+0x6>
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
    2236:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    2238:	19 82       	std	Y+1, r1	; 0x01
	while(!(UART_CONTROL->UCSRA_CFG & (0x01 << 5)));
    223a:	e9 e2       	ldi	r30, 0x29	; 41
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	82 81       	ldd	r24, Z+2	; 0x02
    2240:	88 2f       	mov	r24, r24
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	80 72       	andi	r24, 0x20	; 32
    2246:	90 70       	andi	r25, 0x00	; 0
    2248:	00 97       	sbiw	r24, 0x00	; 0
    224a:	b9 f3       	breq	.-18     	; 0x223a <UART_SendByte+0xe>
	UART_CONTROL->UDR_CFG = ch;
    224c:	e9 e2       	ldi	r30, 0x29	; 41
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	8a 81       	ldd	r24, Y+2	; 0x02
    2252:	83 83       	std	Z+3, r24	; 0x03
	return ret_status;
    2254:	89 81       	ldd	r24, Y+1	; 0x01
}
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	cf 91       	pop	r28
    225c:	df 91       	pop	r29
    225e:	08 95       	ret

00002260 <UART_ReceiveByte>:


Error_Status_t UART_ReceiveByte(u8 *RecByte)
{
    2260:	df 93       	push	r29
    2262:	cf 93       	push	r28
    2264:	00 d0       	rcall	.+0      	; 0x2266 <UART_ReceiveByte+0x6>
    2266:	0f 92       	push	r0
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
    226c:	9b 83       	std	Y+3, r25	; 0x03
    226e:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    2270:	19 82       	std	Y+1, r1	; 0x01
	while(!(UART_CONTROL->UCSRA_CFG & (0x01 << 7)));
    2272:	e9 e2       	ldi	r30, 0x29	; 41
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	82 81       	ldd	r24, Z+2	; 0x02
    2278:	88 23       	and	r24, r24
    227a:	dc f7       	brge	.-10     	; 0x2272 <UART_ReceiveByte+0x12>
	*RecByte = UART_CONTROL->UDR_CFG;
    227c:	e9 e2       	ldi	r30, 0x29	; 41
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	83 81       	ldd	r24, Z+3	; 0x03
    2282:	ea 81       	ldd	r30, Y+2	; 0x02
    2284:	fb 81       	ldd	r31, Y+3	; 0x03
    2286:	80 83       	st	Z, r24
	return ret_status;
    2288:	89 81       	ldd	r24, Y+1	; 0x01
}
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	cf 91       	pop	r28
    2292:	df 91       	pop	r29
    2294:	08 95       	ret

00002296 <UART_SendString>:


Error_Status_t UART_SendString(u8 *Str)
{
    2296:	df 93       	push	r29
    2298:	cf 93       	push	r28
    229a:	00 d0       	rcall	.+0      	; 0x229c <UART_SendString+0x6>
    229c:	0f 92       	push	r0
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
    22a2:	9b 83       	std	Y+3, r25	; 0x03
    22a4:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    22a6:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Str)
    22a8:	8a 81       	ldd	r24, Y+2	; 0x02
    22aa:	9b 81       	ldd	r25, Y+3	; 0x03
    22ac:	00 97       	sbiw	r24, 0x00	; 0
    22ae:	71 f4       	brne	.+28     	; 0x22cc <UART_SendString+0x36>
	{
		ret_status = NULL_POINTER;
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	89 83       	std	Y+1, r24	; 0x01
    22b4:	10 c0       	rjmp	.+32     	; 0x22d6 <UART_SendString+0x40>
	}
	else
	{
		while(*Str)
		{
			ret_status = UART_SendByte(*Str);
    22b6:	ea 81       	ldd	r30, Y+2	; 0x02
    22b8:	fb 81       	ldd	r31, Y+3	; 0x03
    22ba:	80 81       	ld	r24, Z
    22bc:	0e 94 16 11 	call	0x222c	; 0x222c <UART_SendByte>
    22c0:	89 83       	std	Y+1, r24	; 0x01
			Str++;
    22c2:	8a 81       	ldd	r24, Y+2	; 0x02
    22c4:	9b 81       	ldd	r25, Y+3	; 0x03
    22c6:	01 96       	adiw	r24, 0x01	; 1
    22c8:	9b 83       	std	Y+3, r25	; 0x03
    22ca:	8a 83       	std	Y+2, r24	; 0x02
	{
		ret_status = NULL_POINTER;
	}
	else
	{
		while(*Str)
    22cc:	ea 81       	ldd	r30, Y+2	; 0x02
    22ce:	fb 81       	ldd	r31, Y+3	; 0x03
    22d0:	80 81       	ld	r24, Z
    22d2:	88 23       	and	r24, r24
    22d4:	81 f7       	brne	.-32     	; 0x22b6 <UART_SendString+0x20>
		{
			ret_status = UART_SendByte(*Str);
			Str++;
		}
	}
	return ret_status;
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	cf 91       	pop	r28
    22e0:	df 91       	pop	r29
    22e2:	08 95       	ret

000022e4 <SPI_Init>:

// SPI callback
void (*spi_callbackfun)(void) = NULL;

Error_Status_t SPI_Init(const SPI_T *spi_obj)
{
    22e4:	df 93       	push	r29
    22e6:	cf 93       	push	r28
    22e8:	00 d0       	rcall	.+0      	; 0x22ea <SPI_Init+0x6>
    22ea:	0f 92       	push	r0
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
    22f0:	9b 83       	std	Y+3, r25	; 0x03
    22f2:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    22f4:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == spi_obj)
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	9b 81       	ldd	r25, Y+3	; 0x03
    22fa:	00 97       	sbiw	r24, 0x00	; 0
    22fc:	19 f4       	brne	.+6      	; 0x2304 <SPI_Init+0x20>
	{
		ret_status = NULL_POINTER;
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	89 83       	std	Y+1, r24	; 0x01
    2302:	22 c0       	rjmp	.+68     	; 0x2348 <SPI_Init+0x64>
	}
	else
	{
		if(MASTER_CONFIG == spi_obj->MasterSlaveSelect)
    2304:	ea 81       	ldd	r30, Y+2	; 0x02
    2306:	fb 81       	ldd	r31, Y+3	; 0x03
    2308:	82 81       	ldd	r24, Z+2	; 0x02
    230a:	88 23       	and	r24, r24
    230c:	79 f4       	brne	.+30     	; 0x232c <SPI_Init+0x48>
		{
			DIO_voidSetPinDirection(PORTB_INDEX, PIN5_INDEX, GPIO_DIRECTION_OUTPUT);
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	65 e0       	ldi	r22, 0x05	; 5
    2312:	41 e0       	ldi	r20, 0x01	; 1
    2314:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <DIO_voidSetPinDirection>
			DIO_voidSetPinDirection(PORTB_INDEX, PIN7_INDEX, GPIO_DIRECTION_OUTPUT);
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	67 e0       	ldi	r22, 0x07	; 7
    231c:	41 e0       	ldi	r20, 0x01	; 1
    231e:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <DIO_voidSetPinDirection>
			SPI_MAP->SPCR_CFG = (0x01 << 6) | (0x01 << 4) | (0x01 << 0);
    2322:	ed e2       	ldi	r30, 0x2D	; 45
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	81 e5       	ldi	r24, 0x51	; 81
    2328:	80 83       	st	Z, r24
    232a:	0e c0       	rjmp	.+28     	; 0x2348 <SPI_Init+0x64>
		}
		else if(SLAVE_CONFIG == spi_obj->MasterSlaveSelect)
    232c:	ea 81       	ldd	r30, Y+2	; 0x02
    232e:	fb 81       	ldd	r31, Y+3	; 0x03
    2330:	82 81       	ldd	r24, Z+2	; 0x02
    2332:	81 30       	cpi	r24, 0x01	; 1
    2334:	49 f4       	brne	.+18     	; 0x2348 <SPI_Init+0x64>
		{
			DIO_voidSetPinDirection(PORTB_INDEX, PIN6_INDEX, GPIO_DIRECTION_OUTPUT);
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	66 e0       	ldi	r22, 0x06	; 6
    233a:	41 e0       	ldi	r20, 0x01	; 1
    233c:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <DIO_voidSetPinDirection>
			SPI_MAP->SPCR_CFG = (0x01 <<6);
    2340:	ed e2       	ldi	r30, 0x2D	; 45
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	80 e4       	ldi	r24, 0x40	; 64
    2346:	80 83       	st	Z, r24
		}
	}
	return ret_status;
    2348:	89 81       	ldd	r24, Y+1	; 0x01
}
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	08 95       	ret

00002356 <SPI_Transfere>:
Error_Status_t SPI_Transfere(u8 Copy_u8Ch, u8 *pch)
{
    2356:	df 93       	push	r29
    2358:	cf 93       	push	r28
    235a:	00 d0       	rcall	.+0      	; 0x235c <SPI_Transfere+0x6>
    235c:	00 d0       	rcall	.+0      	; 0x235e <SPI_Transfere+0x8>
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
    2362:	8a 83       	std	Y+2, r24	; 0x02
    2364:	7c 83       	std	Y+4, r23	; 0x04
    2366:	6b 83       	std	Y+3, r22	; 0x03
	Error_Status_t ret_status = NO_ERROR;
    2368:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == pch)
    236a:	8b 81       	ldd	r24, Y+3	; 0x03
    236c:	9c 81       	ldd	r25, Y+4	; 0x04
    236e:	00 97       	sbiw	r24, 0x00	; 0
    2370:	19 f4       	brne	.+6      	; 0x2378 <SPI_Transfere+0x22>
	{
		ret_status = NULL_POINTER;
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	89 83       	std	Y+1, r24	; 0x01
    2376:	0f c0       	rjmp	.+30     	; 0x2396 <SPI_Transfere+0x40>
	}
	else
	{
		SPI_MAP->SPDR_CFG = Copy_u8Ch;
    2378:	ed e2       	ldi	r30, 0x2D	; 45
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	8a 81       	ldd	r24, Y+2	; 0x02
    237e:	82 83       	std	Z+2, r24	; 0x02
		while(!(SPI_MAP->SPSR_CFG & (0x01<<7)));
    2380:	ed e2       	ldi	r30, 0x2D	; 45
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	81 81       	ldd	r24, Z+1	; 0x01
    2386:	88 23       	and	r24, r24
    2388:	dc f7       	brge	.-10     	; 0x2380 <SPI_Transfere+0x2a>
		*pch = SPI_MAP->SPDR_CFG;
    238a:	ed e2       	ldi	r30, 0x2D	; 45
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	82 81       	ldd	r24, Z+2	; 0x02
    2390:	eb 81       	ldd	r30, Y+3	; 0x03
    2392:	fc 81       	ldd	r31, Y+4	; 0x04
    2394:	80 83       	st	Z, r24
	}
	return ret_status;
    2396:	89 81       	ldd	r24, Y+1	; 0x01
}
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	cf 91       	pop	r28
    23a2:	df 91       	pop	r29
    23a4:	08 95       	ret

000023a6 <SPI_AsynchCallBack>:

Error_Status_t SPI_AsynchCallBack(void (*spi_callback)(void), u8 ch)
{
    23a6:	df 93       	push	r29
    23a8:	cf 93       	push	r28
    23aa:	00 d0       	rcall	.+0      	; 0x23ac <SPI_AsynchCallBack+0x6>
    23ac:	00 d0       	rcall	.+0      	; 0x23ae <SPI_AsynchCallBack+0x8>
    23ae:	cd b7       	in	r28, 0x3d	; 61
    23b0:	de b7       	in	r29, 0x3e	; 62
    23b2:	9b 83       	std	Y+3, r25	; 0x03
    23b4:	8a 83       	std	Y+2, r24	; 0x02
    23b6:	6c 83       	std	Y+4, r22	; 0x04
	Error_Status_t ret_status = NO_ERROR;
    23b8:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == spi_callback)
    23ba:	8a 81       	ldd	r24, Y+2	; 0x02
    23bc:	9b 81       	ldd	r25, Y+3	; 0x03
    23be:	00 97       	sbiw	r24, 0x00	; 0
    23c0:	19 f4       	brne	.+6      	; 0x23c8 <SPI_AsynchCallBack+0x22>
	{
		ret_status = NULL_POINTER;
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	89 83       	std	Y+1, r24	; 0x01
    23c6:	16 c0       	rjmp	.+44     	; 0x23f4 <SPI_AsynchCallBack+0x4e>
	}
	else
	{
		SPI_MAP->SPCR_CFG |= (0x01<<7);
    23c8:	ad e2       	ldi	r26, 0x2D	; 45
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	ed e2       	ldi	r30, 0x2D	; 45
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	80 68       	ori	r24, 0x80	; 128
    23d4:	8c 93       	st	X, r24
		spi_callbackfun = spi_callback;
    23d6:	8a 81       	ldd	r24, Y+2	; 0x02
    23d8:	9b 81       	ldd	r25, Y+3	; 0x03
    23da:	90 93 f4 02 	sts	0x02F4, r25
    23de:	80 93 f3 02 	sts	0x02F3, r24
		SPI_MAP->SPDR_CFG = ch;
    23e2:	ed e2       	ldi	r30, 0x2D	; 45
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	8c 81       	ldd	r24, Y+4	; 0x04
    23e8:	82 83       	std	Z+2, r24	; 0x02
		while(!(SPI_MAP->SPSR_CFG & (0x01<<7)));
    23ea:	ed e2       	ldi	r30, 0x2D	; 45
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	81 81       	ldd	r24, Z+1	; 0x01
    23f0:	88 23       	and	r24, r24
    23f2:	dc f7       	brge	.-10     	; 0x23ea <SPI_AsynchCallBack+0x44>
	}
	return ret_status;
    23f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	cf 91       	pop	r28
    2400:	df 91       	pop	r29
    2402:	08 95       	ret

00002404 <SPI_Send_String>:

Error_Status_t SPI_Send_String(u8 *Str)
{
    2404:	df 93       	push	r29
    2406:	cf 93       	push	r28
    2408:	00 d0       	rcall	.+0      	; 0x240a <SPI_Send_String+0x6>
    240a:	00 d0       	rcall	.+0      	; 0x240c <SPI_Send_String+0x8>
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
    2410:	9c 83       	std	Y+4, r25	; 0x04
    2412:	8b 83       	std	Y+3, r24	; 0x03
	Error_Status_t ret_status = NO_ERROR;
    2414:	19 82       	std	Y+1, r1	; 0x01
	u8 dummy_var;
	if(NULL == Str)
    2416:	8b 81       	ldd	r24, Y+3	; 0x03
    2418:	9c 81       	ldd	r25, Y+4	; 0x04
    241a:	00 97       	sbiw	r24, 0x00	; 0
    241c:	91 f4       	brne	.+36     	; 0x2442 <SPI_Send_String+0x3e>
	{
		ret_status = NULL_POINTER;
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	89 83       	std	Y+1, r24	; 0x01
    2422:	14 c0       	rjmp	.+40     	; 0x244c <SPI_Send_String+0x48>
	}
	else
	{
		while(*Str)
		{
			ret_status = SPI_Transfere(*Str, &dummy_var);
    2424:	eb 81       	ldd	r30, Y+3	; 0x03
    2426:	fc 81       	ldd	r31, Y+4	; 0x04
    2428:	80 81       	ld	r24, Z
    242a:	9e 01       	movw	r18, r28
    242c:	2e 5f       	subi	r18, 0xFE	; 254
    242e:	3f 4f       	sbci	r19, 0xFF	; 255
    2430:	b9 01       	movw	r22, r18
    2432:	0e 94 ab 11 	call	0x2356	; 0x2356 <SPI_Transfere>
    2436:	89 83       	std	Y+1, r24	; 0x01
			Str++;
    2438:	8b 81       	ldd	r24, Y+3	; 0x03
    243a:	9c 81       	ldd	r25, Y+4	; 0x04
    243c:	01 96       	adiw	r24, 0x01	; 1
    243e:	9c 83       	std	Y+4, r25	; 0x04
    2440:	8b 83       	std	Y+3, r24	; 0x03
	{
		ret_status = NULL_POINTER;
	}
	else
	{
		while(*Str)
    2442:	eb 81       	ldd	r30, Y+3	; 0x03
    2444:	fc 81       	ldd	r31, Y+4	; 0x04
    2446:	80 81       	ld	r24, Z
    2448:	88 23       	and	r24, r24
    244a:	61 f7       	brne	.-40     	; 0x2424 <SPI_Send_String+0x20>
		{
			ret_status = SPI_Transfere(*Str, &dummy_var);
			Str++;
		}
	}
	return ret_status;
    244c:	89 81       	ldd	r24, Y+1	; 0x01
}
    244e:	0f 90       	pop	r0
    2450:	0f 90       	pop	r0
    2452:	0f 90       	pop	r0
    2454:	0f 90       	pop	r0
    2456:	cf 91       	pop	r28
    2458:	df 91       	pop	r29
    245a:	08 95       	ret

0000245c <__vector_12>:


// Define the ISR function with attribute
void SPI_VECTOR(void) __attribute__((signal));
void SPI_VECTOR(void)
{
    245c:	1f 92       	push	r1
    245e:	0f 92       	push	r0
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	0f 92       	push	r0
    2464:	11 24       	eor	r1, r1
    2466:	2f 93       	push	r18
    2468:	3f 93       	push	r19
    246a:	4f 93       	push	r20
    246c:	5f 93       	push	r21
    246e:	6f 93       	push	r22
    2470:	7f 93       	push	r23
    2472:	8f 93       	push	r24
    2474:	9f 93       	push	r25
    2476:	af 93       	push	r26
    2478:	bf 93       	push	r27
    247a:	ef 93       	push	r30
    247c:	ff 93       	push	r31
    247e:	df 93       	push	r29
    2480:	cf 93       	push	r28
    2482:	cd b7       	in	r28, 0x3d	; 61
    2484:	de b7       	in	r29, 0x3e	; 62
	// Clear flag

	// execute ISR if it existed
	dum = SPI_MAP->SPDR_CFG;
    2486:	ed e2       	ldi	r30, 0x2D	; 45
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	82 81       	ldd	r24, Z+2	; 0x02
    248c:	80 93 f2 02 	sts	0x02F2, r24
//	CLEAR_BIT(SPI_MAP->SPCR_CFG, 7);

	if(spi_callbackfun)
    2490:	80 91 f3 02 	lds	r24, 0x02F3
    2494:	90 91 f4 02 	lds	r25, 0x02F4
    2498:	00 97       	sbiw	r24, 0x00	; 0
    249a:	29 f0       	breq	.+10     	; 0x24a6 <__vector_12+0x4a>
	{
		spi_callbackfun();
    249c:	e0 91 f3 02 	lds	r30, 0x02F3
    24a0:	f0 91 f4 02 	lds	r31, 0x02F4
    24a4:	09 95       	icall
	}
}
    24a6:	cf 91       	pop	r28
    24a8:	df 91       	pop	r29
    24aa:	ff 91       	pop	r31
    24ac:	ef 91       	pop	r30
    24ae:	bf 91       	pop	r27
    24b0:	af 91       	pop	r26
    24b2:	9f 91       	pop	r25
    24b4:	8f 91       	pop	r24
    24b6:	7f 91       	pop	r23
    24b8:	6f 91       	pop	r22
    24ba:	5f 91       	pop	r21
    24bc:	4f 91       	pop	r20
    24be:	3f 91       	pop	r19
    24c0:	2f 91       	pop	r18
    24c2:	0f 90       	pop	r0
    24c4:	0f be       	out	0x3f, r0	; 63
    24c6:	0f 90       	pop	r0
    24c8:	1f 90       	pop	r1
    24ca:	18 95       	reti

000024cc <I2C_Init>:
 */

#include "I2C.h"

Error_Status_t I2C_Init(const i2c_t *i2c_obj)
{
    24cc:	df 93       	push	r29
    24ce:	cf 93       	push	r28
    24d0:	00 d0       	rcall	.+0      	; 0x24d2 <I2C_Init+0x6>
    24d2:	00 d0       	rcall	.+0      	; 0x24d4 <I2C_Init+0x8>
    24d4:	0f 92       	push	r0
    24d6:	cd b7       	in	r28, 0x3d	; 61
    24d8:	de b7       	in	r29, 0x3e	; 62
    24da:	9b 83       	std	Y+3, r25	; 0x03
    24dc:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    24de:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == i2c_obj)
    24e0:	8a 81       	ldd	r24, Y+2	; 0x02
    24e2:	9b 81       	ldd	r25, Y+3	; 0x03
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	19 f4       	brne	.+6      	; 0x24ee <I2C_Init+0x22>
	{
		ret_status = NULL_POINTER;
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	89 83       	std	Y+1, r24	; 0x01
    24ec:	2f c0       	rjmp	.+94     	; 0x254c <I2C_Init+0x80>
	}
	else
	{
		// to set prescaler to be one
		I2C_CONTROL->TWSR_REG &= ~(1 << 0);
    24ee:	a0 e2       	ldi	r26, 0x20	; 32
    24f0:	b0 e0       	ldi	r27, 0x00	; 0
    24f2:	e0 e2       	ldi	r30, 0x20	; 32
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	81 81       	ldd	r24, Z+1	; 0x01
    24f8:	8e 7f       	andi	r24, 0xFE	; 254
    24fa:	11 96       	adiw	r26, 0x01	; 1
    24fc:	8c 93       	st	X, r24
		I2C_CONTROL->TWSR_REG &= ~(1 << 1);
    24fe:	a0 e2       	ldi	r26, 0x20	; 32
    2500:	b0 e0       	ldi	r27, 0x00	; 0
    2502:	e0 e2       	ldi	r30, 0x20	; 32
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	81 81       	ldd	r24, Z+1	; 0x01
    2508:	8d 7f       	andi	r24, 0xFD	; 253
    250a:	11 96       	adiw	r26, 0x01	; 1
    250c:	8c 93       	st	X, r24
    250e:	11 97       	sbiw	r26, 0x01	; 1

		// to set bit rate register
		switch (i2c_obj->frequency)
    2510:	ea 81       	ldd	r30, Y+2	; 0x02
    2512:	fb 81       	ldd	r31, Y+3	; 0x03
    2514:	81 81       	ldd	r24, Z+1	; 0x01
    2516:	28 2f       	mov	r18, r24
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	3d 83       	std	Y+5, r19	; 0x05
    251c:	2c 83       	std	Y+4, r18	; 0x04
    251e:	8c 81       	ldd	r24, Y+4	; 0x04
    2520:	9d 81       	ldd	r25, Y+5	; 0x05
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	31 f0       	breq	.+12     	; 0x2532 <I2C_Init+0x66>
    2526:	2c 81       	ldd	r18, Y+4	; 0x04
    2528:	3d 81       	ldd	r19, Y+5	; 0x05
    252a:	21 30       	cpi	r18, 0x01	; 1
    252c:	31 05       	cpc	r19, r1
    252e:	31 f0       	breq	.+12     	; 0x253c <I2C_Init+0x70>
    2530:	09 c0       	rjmp	.+18     	; 0x2544 <I2C_Init+0x78>
		{
		case I2C_FREQ_100HZ:
			I2C_CONTROL->TWBR_REG = 72;
    2532:	e0 e2       	ldi	r30, 0x20	; 32
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	88 e4       	ldi	r24, 0x48	; 72
    2538:	80 83       	st	Z, r24
    253a:	04 c0       	rjmp	.+8      	; 0x2544 <I2C_Init+0x78>
			break;
		case I2C_FERQ_400HZ:
			I2C_CONTROL->TWBR_REG = 12;
    253c:	e0 e2       	ldi	r30, 0x20	; 32
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	8c e0       	ldi	r24, 0x0C	; 12
    2542:	80 83       	st	Z, r24

			break;
		}

		// Enable TWI
		I2C_CONTROL->TWCR_REG = (1 << 0) | (1 << 6);
    2544:	e0 e2       	ldi	r30, 0x20	; 32
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	81 e4       	ldi	r24, 0x41	; 65
    254a:	86 ab       	std	Z+54, r24	; 0x36
	}
	return ret_status;
    254c:	89 81       	ldd	r24, Y+1	; 0x01
}
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	0f 90       	pop	r0
    2554:	0f 90       	pop	r0
    2556:	0f 90       	pop	r0
    2558:	cf 91       	pop	r28
    255a:	df 91       	pop	r29
    255c:	08 95       	ret

0000255e <I2C_SendByte>:



Error_Status_t I2C_SendByte(u8 Copy_u8data)
{
    255e:	df 93       	push	r29
    2560:	cf 93       	push	r28
    2562:	00 d0       	rcall	.+0      	; 0x2564 <I2C_SendByte+0x6>
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62
    2568:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NULL_POINTER;
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	89 83       	std	Y+1, r24	; 0x01
	I2C_CONTROL->TWDR_REG = Copy_u8data;
    256e:	e0 e2       	ldi	r30, 0x20	; 32
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	8a 81       	ldd	r24, Y+2	; 0x02
    2574:	83 83       	std	Z+3, r24	; 0x03
	I2C_CONTROL->TWCR_REG = (1 << 7) | (1 << 2);
    2576:	e0 e2       	ldi	r30, 0x20	; 32
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	84 e8       	ldi	r24, 0x84	; 132
    257c:	86 ab       	std	Z+54, r24	; 0x36
	while(!(I2C_CONTROL->TWCR_REG & (1 << 7)));
    257e:	e0 e2       	ldi	r30, 0x20	; 32
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	86 a9       	ldd	r24, Z+54	; 0x36
    2584:	88 23       	and	r24, r24
    2586:	dc f7       	brge	.-10     	; 0x257e <I2C_SendByte+0x20>
	return ret_status;
    2588:	89 81       	ldd	r24, Y+1	; 0x01
}
    258a:	0f 90       	pop	r0
    258c:	0f 90       	pop	r0
    258e:	cf 91       	pop	r28
    2590:	df 91       	pop	r29
    2592:	08 95       	ret

00002594 <I2C_SendStart>:



Error_Status_t I2C_SendStart(void)
{
    2594:	df 93       	push	r29
    2596:	cf 93       	push	r28
    2598:	0f 92       	push	r0
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NULL_POINTER;
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	89 83       	std	Y+1, r24	; 0x01
	I2C_CONTROL->TWCR_REG = (1 << 5) | (1 << 7) | (1 << 2);
    25a2:	e0 e2       	ldi	r30, 0x20	; 32
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	84 ea       	ldi	r24, 0xA4	; 164
    25a8:	86 ab       	std	Z+54, r24	; 0x36
	while(!(I2C_CONTROL->TWCR_REG & (1 << 7)));
    25aa:	e0 e2       	ldi	r30, 0x20	; 32
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	86 a9       	ldd	r24, Z+54	; 0x36
    25b0:	88 23       	and	r24, r24
    25b2:	dc f7       	brge	.-10     	; 0x25aa <I2C_SendStart+0x16>
	return ret_status;
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    25b6:	0f 90       	pop	r0
    25b8:	cf 91       	pop	r28
    25ba:	df 91       	pop	r29
    25bc:	08 95       	ret

000025be <I2C_SendStop>:



Error_Status_t I2C_SendStop(void)
{
    25be:	df 93       	push	r29
    25c0:	cf 93       	push	r28
    25c2:	0f 92       	push	r0
    25c4:	cd b7       	in	r28, 0x3d	; 61
    25c6:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NULL_POINTER;
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	89 83       	std	Y+1, r24	; 0x01
	I2C_CONTROL->TWCR_REG = (1 << 4) | (1 << 7) | (1 << 2);
    25cc:	e0 e2       	ldi	r30, 0x20	; 32
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	84 e9       	ldi	r24, 0x94	; 148
    25d2:	86 ab       	std	Z+54, r24	; 0x36
	return ret_status;
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    25d6:	0f 90       	pop	r0
    25d8:	cf 91       	pop	r28
    25da:	df 91       	pop	r29
    25dc:	08 95       	ret

000025de <I2C_ReceiveByte_ACK>:


Error_Status_t I2C_ReceiveByte_ACK(u8 *ptr)
{
    25de:	df 93       	push	r29
    25e0:	cf 93       	push	r28
    25e2:	00 d0       	rcall	.+0      	; 0x25e4 <I2C_ReceiveByte_ACK+0x6>
    25e4:	0f 92       	push	r0
    25e6:	cd b7       	in	r28, 0x3d	; 61
    25e8:	de b7       	in	r29, 0x3e	; 62
    25ea:	9b 83       	std	Y+3, r25	; 0x03
    25ec:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NULL_POINTER;
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == ptr)
    25f2:	8a 81       	ldd	r24, Y+2	; 0x02
    25f4:	9b 81       	ldd	r25, Y+3	; 0x03
    25f6:	00 97       	sbiw	r24, 0x00	; 0
    25f8:	19 f4       	brne	.+6      	; 0x2600 <I2C_ReceiveByte_ACK+0x22>
	{
		ret_status = NULL_POINTER;
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	89 83       	std	Y+1, r24	; 0x01
    25fe:	0f c0       	rjmp	.+30     	; 0x261e <I2C_ReceiveByte_ACK+0x40>
	}
	else
	{
		I2C_CONTROL->TWCR_REG = (1 << 7) | (1 << 6) | (1 << 2);
    2600:	e0 e2       	ldi	r30, 0x20	; 32
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	84 ec       	ldi	r24, 0xC4	; 196
    2606:	86 ab       	std	Z+54, r24	; 0x36
		while(!(I2C_CONTROL->TWCR_REG & (1 << 7)));
    2608:	e0 e2       	ldi	r30, 0x20	; 32
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	86 a9       	ldd	r24, Z+54	; 0x36
    260e:	88 23       	and	r24, r24
    2610:	dc f7       	brge	.-10     	; 0x2608 <I2C_ReceiveByte_ACK+0x2a>
		*ptr = I2C_CONTROL->TWDR_REG;
    2612:	e0 e2       	ldi	r30, 0x20	; 32
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	83 81       	ldd	r24, Z+3	; 0x03
    2618:	ea 81       	ldd	r30, Y+2	; 0x02
    261a:	fb 81       	ldd	r31, Y+3	; 0x03
    261c:	80 83       	st	Z, r24
	}
	return ret_status;
    261e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	cf 91       	pop	r28
    2628:	df 91       	pop	r29
    262a:	08 95       	ret

0000262c <I2C_ReceiveByte_NoACK>:


Error_Status_t I2C_ReceiveByte_NoACK(u8 *ptr)
{
    262c:	df 93       	push	r29
    262e:	cf 93       	push	r28
    2630:	00 d0       	rcall	.+0      	; 0x2632 <I2C_ReceiveByte_NoACK+0x6>
    2632:	0f 92       	push	r0
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
    2638:	9b 83       	std	Y+3, r25	; 0x03
    263a:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    263c:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == ptr)
    263e:	8a 81       	ldd	r24, Y+2	; 0x02
    2640:	9b 81       	ldd	r25, Y+3	; 0x03
    2642:	00 97       	sbiw	r24, 0x00	; 0
    2644:	19 f4       	brne	.+6      	; 0x264c <I2C_ReceiveByte_NoACK+0x20>
	{
		ret_status = NULL_POINTER;
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	89 83       	std	Y+1, r24	; 0x01
    264a:	0f c0       	rjmp	.+30     	; 0x266a <I2C_ReceiveByte_NoACK+0x3e>
	}
	else
	{
		I2C_CONTROL->TWCR_REG = (1 << 7) | (1 << 2);
    264c:	e0 e2       	ldi	r30, 0x20	; 32
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	84 e8       	ldi	r24, 0x84	; 132
    2652:	86 ab       	std	Z+54, r24	; 0x36
		while(!(I2C_CONTROL->TWCR_REG & (1 << 7)));
    2654:	e0 e2       	ldi	r30, 0x20	; 32
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	86 a9       	ldd	r24, Z+54	; 0x36
    265a:	88 23       	and	r24, r24
    265c:	dc f7       	brge	.-10     	; 0x2654 <I2C_ReceiveByte_NoACK+0x28>
		*ptr = I2C_CONTROL->TWDR_REG;
    265e:	e0 e2       	ldi	r30, 0x20	; 32
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	83 81       	ldd	r24, Z+3	; 0x03
    2664:	ea 81       	ldd	r30, Y+2	; 0x02
    2666:	fb 81       	ldd	r31, Y+3	; 0x03
    2668:	80 83       	st	Z, r24
	}
	return ret_status;
    266a:	89 81       	ldd	r24, Y+1	; 0x01
}
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	0f 90       	pop	r0
    2672:	cf 91       	pop	r28
    2674:	df 91       	pop	r29
    2676:	08 95       	ret

00002678 <I2C_GetStatus>:
Error_Status_t I2C_GetStatus(u8 *status)
{
    2678:	df 93       	push	r29
    267a:	cf 93       	push	r28
    267c:	00 d0       	rcall	.+0      	; 0x267e <I2C_GetStatus+0x6>
    267e:	0f 92       	push	r0
    2680:	cd b7       	in	r28, 0x3d	; 61
    2682:	de b7       	in	r29, 0x3e	; 62
    2684:	9b 83       	std	Y+3, r25	; 0x03
    2686:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    2688:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == status)
    268a:	8a 81       	ldd	r24, Y+2	; 0x02
    268c:	9b 81       	ldd	r25, Y+3	; 0x03
    268e:	00 97       	sbiw	r24, 0x00	; 0
    2690:	19 f4       	brne	.+6      	; 0x2698 <I2C_GetStatus+0x20>
	{
		ret_status = NULL_POINTER;
    2692:	81 e0       	ldi	r24, 0x01	; 1
    2694:	89 83       	std	Y+1, r24	; 0x01
    2696:	07 c0       	rjmp	.+14     	; 0x26a6 <I2C_GetStatus+0x2e>
	}
	else
	{
		*status = (I2C_CONTROL->TWSR_REG & 0xF8);
    2698:	e0 e2       	ldi	r30, 0x20	; 32
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	81 81       	ldd	r24, Z+1	; 0x01
    269e:	88 7f       	andi	r24, 0xF8	; 248
    26a0:	ea 81       	ldd	r30, Y+2	; 0x02
    26a2:	fb 81       	ldd	r31, Y+3	; 0x03
    26a4:	80 83       	st	Z, r24
	}
	return ret_status;
    26a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    26a8:	0f 90       	pop	r0
    26aa:	0f 90       	pop	r0
    26ac:	0f 90       	pop	r0
    26ae:	cf 91       	pop	r28
    26b0:	df 91       	pop	r29
    26b2:	08 95       	ret

000026b4 <DIO_voidSetPinDirection>:

volatile DIO_t *Ports_index[NUM_PORTS] = {GPIO_PINS_A, GPIO_PINS_B, GPIO_PINS_C, GPIO_PINS_D};


void DIO_voidSetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId,  u8 Copy_u8Direction)
{
    26b4:	df 93       	push	r29
    26b6:	cf 93       	push	r28
    26b8:	00 d0       	rcall	.+0      	; 0x26ba <DIO_voidSetPinDirection+0x6>
    26ba:	00 d0       	rcall	.+0      	; 0x26bc <DIO_voidSetPinDirection+0x8>
    26bc:	0f 92       	push	r0
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
    26c2:	89 83       	std	Y+1, r24	; 0x01
    26c4:	6a 83       	std	Y+2, r22	; 0x02
    26c6:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_u8PortId <= NUM_PORTS-1) && Copy_u8PinId <= NUM_PINS-1)
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	84 30       	cpi	r24, 0x04	; 4
    26cc:	08 f0       	brcs	.+2      	; 0x26d0 <DIO_voidSetPinDirection+0x1c>
    26ce:	61 c0       	rjmp	.+194    	; 0x2792 <DIO_voidSetPinDirection+0xde>
    26d0:	8a 81       	ldd	r24, Y+2	; 0x02
    26d2:	88 30       	cpi	r24, 0x08	; 8
    26d4:	08 f0       	brcs	.+2      	; 0x26d8 <DIO_voidSetPinDirection+0x24>
    26d6:	5d c0       	rjmp	.+186    	; 0x2792 <DIO_voidSetPinDirection+0xde>
	{
		switch(Copy_u8Direction){
    26d8:	8b 81       	ldd	r24, Y+3	; 0x03
    26da:	28 2f       	mov	r18, r24
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	3d 83       	std	Y+5, r19	; 0x05
    26e0:	2c 83       	std	Y+4, r18	; 0x04
    26e2:	8c 81       	ldd	r24, Y+4	; 0x04
    26e4:	9d 81       	ldd	r25, Y+5	; 0x05
    26e6:	00 97       	sbiw	r24, 0x00	; 0
    26e8:	69 f1       	breq	.+90     	; 0x2744 <DIO_voidSetPinDirection+0x90>
    26ea:	2c 81       	ldd	r18, Y+4	; 0x04
    26ec:	3d 81       	ldd	r19, Y+5	; 0x05
    26ee:	21 30       	cpi	r18, 0x01	; 1
    26f0:	31 05       	cpc	r19, r1
    26f2:	09 f0       	breq	.+2      	; 0x26f6 <DIO_voidSetPinDirection+0x42>
    26f4:	4e c0       	rjmp	.+156    	; 0x2792 <DIO_voidSetPinDirection+0xde>
		case(GPIO_DIRECTION_OUTPUT):
						SET_BIT(Ports_index[Copy_u8PortId]->DDRx, Copy_u8PinId);
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
    26f8:	88 2f       	mov	r24, r24
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	88 0f       	add	r24, r24
    26fe:	99 1f       	adc	r25, r25
    2700:	fc 01       	movw	r30, r24
    2702:	e9 53       	subi	r30, 0x39	; 57
    2704:	fe 4f       	sbci	r31, 0xFE	; 254
    2706:	a0 81       	ld	r26, Z
    2708:	b1 81       	ldd	r27, Z+1	; 0x01
    270a:	89 81       	ldd	r24, Y+1	; 0x01
    270c:	88 2f       	mov	r24, r24
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	88 0f       	add	r24, r24
    2712:	99 1f       	adc	r25, r25
    2714:	fc 01       	movw	r30, r24
    2716:	e9 53       	subi	r30, 0x39	; 57
    2718:	fe 4f       	sbci	r31, 0xFE	; 254
    271a:	01 90       	ld	r0, Z+
    271c:	f0 81       	ld	r31, Z
    271e:	e0 2d       	mov	r30, r0
    2720:	81 81       	ldd	r24, Z+1	; 0x01
    2722:	48 2f       	mov	r20, r24
    2724:	8a 81       	ldd	r24, Y+2	; 0x02
    2726:	28 2f       	mov	r18, r24
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	02 2e       	mov	r0, r18
    2730:	02 c0       	rjmp	.+4      	; 0x2736 <DIO_voidSetPinDirection+0x82>
    2732:	88 0f       	add	r24, r24
    2734:	99 1f       	adc	r25, r25
    2736:	0a 94       	dec	r0
    2738:	e2 f7       	brpl	.-8      	; 0x2732 <DIO_voidSetPinDirection+0x7e>
    273a:	84 2b       	or	r24, r20
    273c:	11 96       	adiw	r26, 0x01	; 1
    273e:	8c 93       	st	X, r24
    2740:	11 97       	sbiw	r26, 0x01	; 1
    2742:	27 c0       	rjmp	.+78     	; 0x2792 <DIO_voidSetPinDirection+0xde>
		break;
		case(GPIO_DIRECTION_INPUT):
						CLEAR_BIT(Ports_index[Copy_u8PortId]->DDRx, Copy_u8PinId);
    2744:	89 81       	ldd	r24, Y+1	; 0x01
    2746:	88 2f       	mov	r24, r24
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	88 0f       	add	r24, r24
    274c:	99 1f       	adc	r25, r25
    274e:	fc 01       	movw	r30, r24
    2750:	e9 53       	subi	r30, 0x39	; 57
    2752:	fe 4f       	sbci	r31, 0xFE	; 254
    2754:	a0 81       	ld	r26, Z
    2756:	b1 81       	ldd	r27, Z+1	; 0x01
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	88 2f       	mov	r24, r24
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	88 0f       	add	r24, r24
    2760:	99 1f       	adc	r25, r25
    2762:	fc 01       	movw	r30, r24
    2764:	e9 53       	subi	r30, 0x39	; 57
    2766:	fe 4f       	sbci	r31, 0xFE	; 254
    2768:	01 90       	ld	r0, Z+
    276a:	f0 81       	ld	r31, Z
    276c:	e0 2d       	mov	r30, r0
    276e:	81 81       	ldd	r24, Z+1	; 0x01
    2770:	48 2f       	mov	r20, r24
    2772:	8a 81       	ldd	r24, Y+2	; 0x02
    2774:	28 2f       	mov	r18, r24
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	02 2e       	mov	r0, r18
    277e:	02 c0       	rjmp	.+4      	; 0x2784 <DIO_voidSetPinDirection+0xd0>
    2780:	88 0f       	add	r24, r24
    2782:	99 1f       	adc	r25, r25
    2784:	0a 94       	dec	r0
    2786:	e2 f7       	brpl	.-8      	; 0x2780 <DIO_voidSetPinDirection+0xcc>
    2788:	80 95       	com	r24
    278a:	84 23       	and	r24, r20
    278c:	11 96       	adiw	r26, 0x01	; 1
    278e:	8c 93       	st	X, r24
    2790:	11 97       	sbiw	r26, 0x01	; 1
		break;
		}
	}
	else{/* Nothing */}
}
    2792:	0f 90       	pop	r0
    2794:	0f 90       	pop	r0
    2796:	0f 90       	pop	r0
    2798:	0f 90       	pop	r0
    279a:	0f 90       	pop	r0
    279c:	cf 91       	pop	r28
    279e:	df 91       	pop	r29
    27a0:	08 95       	ret

000027a2 <DIO_voidSetPinValue>:


void DIO_voidSetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8Value)
{
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	00 d0       	rcall	.+0      	; 0x27a8 <DIO_voidSetPinValue+0x6>
    27a8:	00 d0       	rcall	.+0      	; 0x27aa <DIO_voidSetPinValue+0x8>
    27aa:	0f 92       	push	r0
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62
    27b0:	89 83       	std	Y+1, r24	; 0x01
    27b2:	6a 83       	std	Y+2, r22	; 0x02
    27b4:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_u8PortId <= NUM_PORTS-1) && (Copy_u8PinId <= NUM_PINS-1))
    27b6:	89 81       	ldd	r24, Y+1	; 0x01
    27b8:	84 30       	cpi	r24, 0x04	; 4
    27ba:	08 f0       	brcs	.+2      	; 0x27be <DIO_voidSetPinValue+0x1c>
    27bc:	61 c0       	rjmp	.+194    	; 0x2880 <DIO_voidSetPinValue+0xde>
    27be:	8a 81       	ldd	r24, Y+2	; 0x02
    27c0:	88 30       	cpi	r24, 0x08	; 8
    27c2:	08 f0       	brcs	.+2      	; 0x27c6 <DIO_voidSetPinValue+0x24>
    27c4:	5d c0       	rjmp	.+186    	; 0x2880 <DIO_voidSetPinValue+0xde>
	{
		switch(Copy_u8Value){
    27c6:	8b 81       	ldd	r24, Y+3	; 0x03
    27c8:	28 2f       	mov	r18, r24
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	3d 83       	std	Y+5, r19	; 0x05
    27ce:	2c 83       	std	Y+4, r18	; 0x04
    27d0:	8c 81       	ldd	r24, Y+4	; 0x04
    27d2:	9d 81       	ldd	r25, Y+5	; 0x05
    27d4:	00 97       	sbiw	r24, 0x00	; 0
    27d6:	69 f1       	breq	.+90     	; 0x2832 <DIO_voidSetPinValue+0x90>
    27d8:	2c 81       	ldd	r18, Y+4	; 0x04
    27da:	3d 81       	ldd	r19, Y+5	; 0x05
    27dc:	21 30       	cpi	r18, 0x01	; 1
    27de:	31 05       	cpc	r19, r1
    27e0:	09 f0       	breq	.+2      	; 0x27e4 <DIO_voidSetPinValue+0x42>
    27e2:	4e c0       	rjmp	.+156    	; 0x2880 <DIO_voidSetPinValue+0xde>
		case(GPIO_HIGH):
				SET_BIT(Ports_index[Copy_u8PortId]->PORTx, Copy_u8PinId);
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	88 2f       	mov	r24, r24
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	88 0f       	add	r24, r24
    27ec:	99 1f       	adc	r25, r25
    27ee:	fc 01       	movw	r30, r24
    27f0:	e9 53       	subi	r30, 0x39	; 57
    27f2:	fe 4f       	sbci	r31, 0xFE	; 254
    27f4:	a0 81       	ld	r26, Z
    27f6:	b1 81       	ldd	r27, Z+1	; 0x01
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	88 2f       	mov	r24, r24
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	88 0f       	add	r24, r24
    2800:	99 1f       	adc	r25, r25
    2802:	fc 01       	movw	r30, r24
    2804:	e9 53       	subi	r30, 0x39	; 57
    2806:	fe 4f       	sbci	r31, 0xFE	; 254
    2808:	01 90       	ld	r0, Z+
    280a:	f0 81       	ld	r31, Z
    280c:	e0 2d       	mov	r30, r0
    280e:	82 81       	ldd	r24, Z+2	; 0x02
    2810:	48 2f       	mov	r20, r24
    2812:	8a 81       	ldd	r24, Y+2	; 0x02
    2814:	28 2f       	mov	r18, r24
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	02 2e       	mov	r0, r18
    281e:	02 c0       	rjmp	.+4      	; 0x2824 <DIO_voidSetPinValue+0x82>
    2820:	88 0f       	add	r24, r24
    2822:	99 1f       	adc	r25, r25
    2824:	0a 94       	dec	r0
    2826:	e2 f7       	brpl	.-8      	; 0x2820 <DIO_voidSetPinValue+0x7e>
    2828:	84 2b       	or	r24, r20
    282a:	12 96       	adiw	r26, 0x02	; 2
    282c:	8c 93       	st	X, r24
    282e:	12 97       	sbiw	r26, 0x02	; 2
    2830:	27 c0       	rjmp	.+78     	; 0x2880 <DIO_voidSetPinValue+0xde>
		break;
		case(GPIO_LOW):
				CLEAR_BIT(Ports_index[Copy_u8PortId]->PORTx, Copy_u8PinId);
    2832:	89 81       	ldd	r24, Y+1	; 0x01
    2834:	88 2f       	mov	r24, r24
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	88 0f       	add	r24, r24
    283a:	99 1f       	adc	r25, r25
    283c:	fc 01       	movw	r30, r24
    283e:	e9 53       	subi	r30, 0x39	; 57
    2840:	fe 4f       	sbci	r31, 0xFE	; 254
    2842:	a0 81       	ld	r26, Z
    2844:	b1 81       	ldd	r27, Z+1	; 0x01
    2846:	89 81       	ldd	r24, Y+1	; 0x01
    2848:	88 2f       	mov	r24, r24
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	88 0f       	add	r24, r24
    284e:	99 1f       	adc	r25, r25
    2850:	fc 01       	movw	r30, r24
    2852:	e9 53       	subi	r30, 0x39	; 57
    2854:	fe 4f       	sbci	r31, 0xFE	; 254
    2856:	01 90       	ld	r0, Z+
    2858:	f0 81       	ld	r31, Z
    285a:	e0 2d       	mov	r30, r0
    285c:	82 81       	ldd	r24, Z+2	; 0x02
    285e:	48 2f       	mov	r20, r24
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
    2862:	28 2f       	mov	r18, r24
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	02 2e       	mov	r0, r18
    286c:	02 c0       	rjmp	.+4      	; 0x2872 <DIO_voidSetPinValue+0xd0>
    286e:	88 0f       	add	r24, r24
    2870:	99 1f       	adc	r25, r25
    2872:	0a 94       	dec	r0
    2874:	e2 f7       	brpl	.-8      	; 0x286e <DIO_voidSetPinValue+0xcc>
    2876:	80 95       	com	r24
    2878:	84 23       	and	r24, r20
    287a:	12 96       	adiw	r26, 0x02	; 2
    287c:	8c 93       	st	X, r24
    287e:	12 97       	sbiw	r26, 0x02	; 2
		break;
		}
	}
	else{/* Nothing */}
}
    2880:	0f 90       	pop	r0
    2882:	0f 90       	pop	r0
    2884:	0f 90       	pop	r0
    2886:	0f 90       	pop	r0
    2888:	0f 90       	pop	r0
    288a:	cf 91       	pop	r28
    288c:	df 91       	pop	r29
    288e:	08 95       	ret

00002890 <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue(u8 Copy_u8PortId, u8 Copy_u8PinId)
{
    2890:	df 93       	push	r29
    2892:	cf 93       	push	r28
    2894:	00 d0       	rcall	.+0      	; 0x2896 <DIO_voidTogglePinValue+0x6>
    2896:	cd b7       	in	r28, 0x3d	; 61
    2898:	de b7       	in	r29, 0x3e	; 62
    289a:	89 83       	std	Y+1, r24	; 0x01
    289c:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8PortId <= NUM_PORTS-1) && (Copy_u8PinId <= NUM_PINS-1))
    289e:	89 81       	ldd	r24, Y+1	; 0x01
    28a0:	84 30       	cpi	r24, 0x04	; 4
    28a2:	48 f5       	brcc	.+82     	; 0x28f6 <DIO_voidTogglePinValue+0x66>
    28a4:	8a 81       	ldd	r24, Y+2	; 0x02
    28a6:	88 30       	cpi	r24, 0x08	; 8
    28a8:	30 f5       	brcc	.+76     	; 0x28f6 <DIO_voidTogglePinValue+0x66>
	{
		TOGGLE_BIT(Ports_index[Copy_u8PortId]->PORTx,Copy_u8PinId);
    28aa:	89 81       	ldd	r24, Y+1	; 0x01
    28ac:	88 2f       	mov	r24, r24
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	88 0f       	add	r24, r24
    28b2:	99 1f       	adc	r25, r25
    28b4:	fc 01       	movw	r30, r24
    28b6:	e9 53       	subi	r30, 0x39	; 57
    28b8:	fe 4f       	sbci	r31, 0xFE	; 254
    28ba:	a0 81       	ld	r26, Z
    28bc:	b1 81       	ldd	r27, Z+1	; 0x01
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	88 2f       	mov	r24, r24
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	88 0f       	add	r24, r24
    28c6:	99 1f       	adc	r25, r25
    28c8:	fc 01       	movw	r30, r24
    28ca:	e9 53       	subi	r30, 0x39	; 57
    28cc:	fe 4f       	sbci	r31, 0xFE	; 254
    28ce:	01 90       	ld	r0, Z+
    28d0:	f0 81       	ld	r31, Z
    28d2:	e0 2d       	mov	r30, r0
    28d4:	82 81       	ldd	r24, Z+2	; 0x02
    28d6:	48 2f       	mov	r20, r24
    28d8:	8a 81       	ldd	r24, Y+2	; 0x02
    28da:	28 2f       	mov	r18, r24
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	02 2e       	mov	r0, r18
    28e4:	02 c0       	rjmp	.+4      	; 0x28ea <DIO_voidTogglePinValue+0x5a>
    28e6:	88 0f       	add	r24, r24
    28e8:	99 1f       	adc	r25, r25
    28ea:	0a 94       	dec	r0
    28ec:	e2 f7       	brpl	.-8      	; 0x28e6 <DIO_voidTogglePinValue+0x56>
    28ee:	84 27       	eor	r24, r20
    28f0:	12 96       	adiw	r26, 0x02	; 2
    28f2:	8c 93       	st	X, r24
    28f4:	12 97       	sbiw	r26, 0x02	; 2
	}
	else{/* Nothing */}
}
    28f6:	0f 90       	pop	r0
    28f8:	0f 90       	pop	r0
    28fa:	cf 91       	pop	r28
    28fc:	df 91       	pop	r29
    28fe:	08 95       	ret

00002900 <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId)
{
    2900:	df 93       	push	r29
    2902:	cf 93       	push	r28
    2904:	00 d0       	rcall	.+0      	; 0x2906 <DIO_u8GetPinValue+0x6>
    2906:	0f 92       	push	r0
    2908:	cd b7       	in	r28, 0x3d	; 61
    290a:	de b7       	in	r29, 0x3e	; 62
    290c:	8a 83       	std	Y+2, r24	; 0x02
    290e:	6b 83       	std	Y+3, r22	; 0x03
	u8 ret_val = 0;
    2910:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8PortId <= NUM_PORTS-1) && (Copy_u8PinId <= NUM_PINS-1)){
    2912:	8a 81       	ldd	r24, Y+2	; 0x02
    2914:	84 30       	cpi	r24, 0x04	; 4
    2916:	e8 f4       	brcc	.+58     	; 0x2952 <DIO_u8GetPinValue+0x52>
    2918:	8b 81       	ldd	r24, Y+3	; 0x03
    291a:	88 30       	cpi	r24, 0x08	; 8
    291c:	d0 f4       	brcc	.+52     	; 0x2952 <DIO_u8GetPinValue+0x52>
		ret_val = READ_BIT(Ports_index[Copy_u8PortId]->PINx, Copy_u8PinId);
    291e:	8a 81       	ldd	r24, Y+2	; 0x02
    2920:	88 2f       	mov	r24, r24
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	88 0f       	add	r24, r24
    2926:	99 1f       	adc	r25, r25
    2928:	fc 01       	movw	r30, r24
    292a:	e9 53       	subi	r30, 0x39	; 57
    292c:	fe 4f       	sbci	r31, 0xFE	; 254
    292e:	01 90       	ld	r0, Z+
    2930:	f0 81       	ld	r31, Z
    2932:	e0 2d       	mov	r30, r0
    2934:	80 81       	ld	r24, Z
    2936:	28 2f       	mov	r18, r24
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	8b 81       	ldd	r24, Y+3	; 0x03
    293c:	88 2f       	mov	r24, r24
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	a9 01       	movw	r20, r18
    2942:	02 c0       	rjmp	.+4      	; 0x2948 <DIO_u8GetPinValue+0x48>
    2944:	55 95       	asr	r21
    2946:	47 95       	ror	r20
    2948:	8a 95       	dec	r24
    294a:	e2 f7       	brpl	.-8      	; 0x2944 <DIO_u8GetPinValue+0x44>
    294c:	ca 01       	movw	r24, r20
    294e:	81 70       	andi	r24, 0x01	; 1
    2950:	89 83       	std	Y+1, r24	; 0x01
	}else{/* Nothing */}
	return ret_val;
    2952:	89 81       	ldd	r24, Y+1	; 0x01
}
    2954:	0f 90       	pop	r0
    2956:	0f 90       	pop	r0
    2958:	0f 90       	pop	r0
    295a:	cf 91       	pop	r28
    295c:	df 91       	pop	r29
    295e:	08 95       	ret

00002960 <DIO_voidSetPortDirection>:


void DIO_voidSetPortDirection(u8 Copy_u8PortId,  u8 Copy_u8Direction)
{
    2960:	df 93       	push	r29
    2962:	cf 93       	push	r28
    2964:	00 d0       	rcall	.+0      	; 0x2966 <DIO_voidSetPortDirection+0x6>
    2966:	cd b7       	in	r28, 0x3d	; 61
    2968:	de b7       	in	r29, 0x3e	; 62
    296a:	89 83       	std	Y+1, r24	; 0x01
    296c:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortId <= NUM_PORTS-1){
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	84 30       	cpi	r24, 0x04	; 4
    2972:	68 f4       	brcc	.+26     	; 0x298e <DIO_voidSetPortDirection+0x2e>
		Ports_index[Copy_u8PortId]->DDRx = Copy_u8Direction;
    2974:	89 81       	ldd	r24, Y+1	; 0x01
    2976:	88 2f       	mov	r24, r24
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	88 0f       	add	r24, r24
    297c:	99 1f       	adc	r25, r25
    297e:	fc 01       	movw	r30, r24
    2980:	e9 53       	subi	r30, 0x39	; 57
    2982:	fe 4f       	sbci	r31, 0xFE	; 254
    2984:	01 90       	ld	r0, Z+
    2986:	f0 81       	ld	r31, Z
    2988:	e0 2d       	mov	r30, r0
    298a:	8a 81       	ldd	r24, Y+2	; 0x02
    298c:	81 83       	std	Z+1, r24	; 0x01
	}
	else{/* Nothing */}
}
    298e:	0f 90       	pop	r0
    2990:	0f 90       	pop	r0
    2992:	cf 91       	pop	r28
    2994:	df 91       	pop	r29
    2996:	08 95       	ret

00002998 <DIO_voidSetPortValues>:


void DIO_voidSetPortValues(u8 Copy_u8PortId, u8 Copy_u8Value)
{
    2998:	df 93       	push	r29
    299a:	cf 93       	push	r28
    299c:	00 d0       	rcall	.+0      	; 0x299e <DIO_voidSetPortValues+0x6>
    299e:	cd b7       	in	r28, 0x3d	; 61
    29a0:	de b7       	in	r29, 0x3e	; 62
    29a2:	89 83       	std	Y+1, r24	; 0x01
    29a4:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortId <= NUM_PORTS-1){
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	84 30       	cpi	r24, 0x04	; 4
    29aa:	68 f4       	brcc	.+26     	; 0x29c6 <DIO_voidSetPortValues+0x2e>
		Ports_index[Copy_u8PortId]->PORTx = Copy_u8Value;
    29ac:	89 81       	ldd	r24, Y+1	; 0x01
    29ae:	88 2f       	mov	r24, r24
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	88 0f       	add	r24, r24
    29b4:	99 1f       	adc	r25, r25
    29b6:	fc 01       	movw	r30, r24
    29b8:	e9 53       	subi	r30, 0x39	; 57
    29ba:	fe 4f       	sbci	r31, 0xFE	; 254
    29bc:	01 90       	ld	r0, Z+
    29be:	f0 81       	ld	r31, Z
    29c0:	e0 2d       	mov	r30, r0
    29c2:	8a 81       	ldd	r24, Y+2	; 0x02
    29c4:	82 83       	std	Z+2, r24	; 0x02
	}
	else{/* Nothing */}
}
    29c6:	0f 90       	pop	r0
    29c8:	0f 90       	pop	r0
    29ca:	cf 91       	pop	r28
    29cc:	df 91       	pop	r29
    29ce:	08 95       	ret

000029d0 <DIO_u8GetPortValues>:


u8 DIO_u8GetPortValues(u8 Copy_u8PortId)
{
    29d0:	df 93       	push	r29
    29d2:	cf 93       	push	r28
    29d4:	00 d0       	rcall	.+0      	; 0x29d6 <DIO_u8GetPortValues+0x6>
    29d6:	cd b7       	in	r28, 0x3d	; 61
    29d8:	de b7       	in	r29, 0x3e	; 62
    29da:	8a 83       	std	Y+2, r24	; 0x02
	u8 ret_val = 0;
    29dc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortId <= NUM_PORTS-1){
    29de:	8a 81       	ldd	r24, Y+2	; 0x02
    29e0:	84 30       	cpi	r24, 0x04	; 4
    29e2:	68 f4       	brcc	.+26     	; 0x29fe <DIO_u8GetPortValues+0x2e>
		ret_val = (Ports_index[Copy_u8PortId]->PINx);
    29e4:	8a 81       	ldd	r24, Y+2	; 0x02
    29e6:	88 2f       	mov	r24, r24
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	88 0f       	add	r24, r24
    29ec:	99 1f       	adc	r25, r25
    29ee:	fc 01       	movw	r30, r24
    29f0:	e9 53       	subi	r30, 0x39	; 57
    29f2:	fe 4f       	sbci	r31, 0xFE	; 254
    29f4:	01 90       	ld	r0, Z+
    29f6:	f0 81       	ld	r31, Z
    29f8:	e0 2d       	mov	r30, r0
    29fa:	80 81       	ld	r24, Z
    29fc:	89 83       	std	Y+1, r24	; 0x01
	}else{/* Nothing */}
	return ret_val;
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a00:	0f 90       	pop	r0
    2a02:	0f 90       	pop	r0
    2a04:	cf 91       	pop	r28
    2a06:	df 91       	pop	r29
    2a08:	08 95       	ret

00002a0a <ADC_voidInit>:
 */

#include "ADC.h"

void ADC_voidInit(const ADC_cfg_t *ADC_obj)
{
    2a0a:	df 93       	push	r29
    2a0c:	cf 93       	push	r28
    2a0e:	00 d0       	rcall	.+0      	; 0x2a10 <ADC_voidInit+0x6>
    2a10:	cd b7       	in	r28, 0x3d	; 61
    2a12:	de b7       	in	r29, 0x3e	; 62
    2a14:	9a 83       	std	Y+2, r25	; 0x02
    2a16:	89 83       	std	Y+1, r24	; 0x01
	if(NULL != ADC_obj)
    2a18:	89 81       	ldd	r24, Y+1	; 0x01
    2a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a1c:	00 97       	sbiw	r24, 0x00	; 0
    2a1e:	09 f4       	brne	.+2      	; 0x2a22 <ADC_voidInit+0x18>
    2a20:	5f c0       	rjmp	.+190    	; 0x2ae0 <ADC_voidInit+0xd6>
	{
		/* Disable ADC */
		ADC_DISABLE_CFG();
    2a22:	e4 e2       	ldi	r30, 0x24	; 36
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	82 81       	ldd	r24, Z+2	; 0x02
    2a28:	8f 77       	andi	r24, 0x7F	; 127
    2a2a:	82 83       	std	Z+2, r24	; 0x02

		/* Configure ADC based on ADC_obj that has all configurations */
		ADC_SELECT_VOLTAGE_REF_CFG(ADC_obj->voltage_reference_select);
    2a2c:	a4 e2       	ldi	r26, 0x24	; 36
    2a2e:	b0 e0       	ldi	r27, 0x00	; 0
    2a30:	e9 81       	ldd	r30, Y+1	; 0x01
    2a32:	fa 81       	ldd	r31, Y+2	; 0x02
    2a34:	80 81       	ld	r24, Z
    2a36:	86 95       	lsr	r24
    2a38:	86 95       	lsr	r24
    2a3a:	86 95       	lsr	r24
    2a3c:	83 70       	andi	r24, 0x03	; 3
    2a3e:	98 2f       	mov	r25, r24
    2a40:	92 95       	swap	r25
    2a42:	99 0f       	add	r25, r25
    2a44:	99 0f       	add	r25, r25
    2a46:	90 7c       	andi	r25, 0xC0	; 192
    2a48:	13 96       	adiw	r26, 0x03	; 3
    2a4a:	8c 91       	ld	r24, X
    2a4c:	13 97       	sbiw	r26, 0x03	; 3
    2a4e:	8f 73       	andi	r24, 0x3F	; 63
    2a50:	89 2b       	or	r24, r25
    2a52:	13 96       	adiw	r26, 0x03	; 3
    2a54:	8c 93       	st	X, r24
		ADC_SELECT_PRESCALER(ADC_obj->prescaler_select);
    2a56:	a4 e2       	ldi	r26, 0x24	; 36
    2a58:	b0 e0       	ldi	r27, 0x00	; 0
    2a5a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a5c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a5e:	80 81       	ld	r24, Z
    2a60:	82 95       	swap	r24
    2a62:	86 95       	lsr	r24
    2a64:	86 95       	lsr	r24
    2a66:	83 70       	andi	r24, 0x03	; 3
    2a68:	81 70       	andi	r24, 0x01	; 1
    2a6a:	87 70       	andi	r24, 0x07	; 7
    2a6c:	98 2f       	mov	r25, r24
    2a6e:	97 70       	andi	r25, 0x07	; 7
    2a70:	12 96       	adiw	r26, 0x02	; 2
    2a72:	8c 91       	ld	r24, X
    2a74:	12 97       	sbiw	r26, 0x02	; 2
    2a76:	88 7f       	andi	r24, 0xF8	; 248
    2a78:	89 2b       	or	r24, r25
    2a7a:	12 96       	adiw	r26, 0x02	; 2
    2a7c:	8c 93       	st	X, r24
		ADC_AUTO_TRIGGER_ENABLE_CONFIG();
    2a7e:	e4 e2       	ldi	r30, 0x24	; 36
    2a80:	f0 e0       	ldi	r31, 0x00	; 0
    2a82:	82 81       	ldd	r24, Z+2	; 0x02
    2a84:	80 62       	ori	r24, 0x20	; 32
    2a86:	82 83       	std	Z+2, r24	; 0x02
		ADC_SELECT_TRIGGER_SOURCE_EVENT(ADC_obj->select_trigger_source);
    2a88:	a4 e2       	ldi	r26, 0x24	; 36
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a8e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a90:	80 81       	ld	r24, Z
    2a92:	87 70       	andi	r24, 0x07	; 7
    2a94:	98 2f       	mov	r25, r24
    2a96:	92 95       	swap	r25
    2a98:	99 0f       	add	r25, r25
    2a9a:	90 7e       	andi	r25, 0xE0	; 224
    2a9c:	9c 96       	adiw	r26, 0x2c	; 44
    2a9e:	8c 91       	ld	r24, X
    2aa0:	9c 97       	sbiw	r26, 0x2c	; 44
    2aa2:	8f 71       	andi	r24, 0x1F	; 31
    2aa4:	89 2b       	or	r24, r25
    2aa6:	9c 96       	adiw	r26, 0x2c	; 44
    2aa8:	8c 93       	st	X, r24
		ADC_SELECT_ADJUSTTFICATION(ADC_obj->adjustification_select);
    2aaa:	a4 e2       	ldi	r26, 0x24	; 36
    2aac:	b0 e0       	ldi	r27, 0x00	; 0
    2aae:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab2:	80 81       	ld	r24, Z
    2ab4:	82 95       	swap	r24
    2ab6:	86 95       	lsr	r24
    2ab8:	87 70       	andi	r24, 0x07	; 7
    2aba:	81 70       	andi	r24, 0x01	; 1
    2abc:	81 70       	andi	r24, 0x01	; 1
    2abe:	98 2f       	mov	r25, r24
    2ac0:	92 95       	swap	r25
    2ac2:	99 0f       	add	r25, r25
    2ac4:	90 7e       	andi	r25, 0xE0	; 224
    2ac6:	13 96       	adiw	r26, 0x03	; 3
    2ac8:	8c 91       	ld	r24, X
    2aca:	13 97       	sbiw	r26, 0x03	; 3
    2acc:	8f 7d       	andi	r24, 0xDF	; 223
    2ace:	89 2b       	or	r24, r25
    2ad0:	13 96       	adiw	r26, 0x03	; 3
    2ad2:	8c 93       	st	X, r24
    2ad4:	13 97       	sbiw	r26, 0x03	; 3

		/* Enable ADC */
		ADC_ENABLE_CFG();
    2ad6:	e4 e2       	ldi	r30, 0x24	; 36
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	82 81       	ldd	r24, Z+2	; 0x02
    2adc:	80 68       	ori	r24, 0x80	; 128
    2ade:	82 83       	std	Z+2, r24	; 0x02
	}
	else{/* Nothing */}
}
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	cf 91       	pop	r28
    2ae6:	df 91       	pop	r29
    2ae8:	08 95       	ret

00002aea <ADC_getDigitalValueSynchNonBlocking>:

void ADC_getDigitalValueSynchNonBlocking(const ADC_cfg_t *ADC_obj, u8 Copy_u8Channel, u16 *result)
{
    2aea:	df 93       	push	r29
    2aec:	cf 93       	push	r28
    2aee:	cd b7       	in	r28, 0x3d	; 61
    2af0:	de b7       	in	r29, 0x3e	; 62
    2af2:	a1 97       	sbiw	r28, 0x21	; 33
    2af4:	0f b6       	in	r0, 0x3f	; 63
    2af6:	f8 94       	cli
    2af8:	de bf       	out	0x3e, r29	; 62
    2afa:	0f be       	out	0x3f, r0	; 63
    2afc:	cd bf       	out	0x3d, r28	; 61
    2afe:	9e 8f       	std	Y+30, r25	; 0x1e
    2b00:	8d 8f       	std	Y+29, r24	; 0x1d
    2b02:	6f 8f       	std	Y+31, r22	; 0x1f
    2b04:	59 a3       	std	Y+33, r21	; 0x21
    2b06:	48 a3       	std	Y+32, r20	; 0x20
	// select the channel
	ADC_SELECT_CHANNEL_CFG(Copy_u8Channel);
    2b08:	e4 e2       	ldi	r30, 0x24	; 36
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b0e:	8f 71       	andi	r24, 0x1F	; 31
    2b10:	98 2f       	mov	r25, r24
    2b12:	9f 71       	andi	r25, 0x1F	; 31
    2b14:	83 81       	ldd	r24, Z+3	; 0x03
    2b16:	80 7e       	andi	r24, 0xE0	; 224
    2b18:	89 2b       	or	r24, r25
    2b1a:	83 83       	std	Z+3, r24	; 0x03

	/* Enable ADC */
	ADC_ENABLE_CFG();
    2b1c:	e4 e2       	ldi	r30, 0x24	; 36
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	82 81       	ldd	r24, Z+2	; 0x02
    2b22:	80 68       	ori	r24, 0x80	; 128
    2b24:	82 83       	std	Z+2, r24	; 0x02
    2b26:	80 e0       	ldi	r24, 0x00	; 0
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	a0 e8       	ldi	r26, 0x80	; 128
    2b2c:	bf e3       	ldi	r27, 0x3F	; 63
    2b2e:	89 8f       	std	Y+25, r24	; 0x19
    2b30:	9a 8f       	std	Y+26, r25	; 0x1a
    2b32:	ab 8f       	std	Y+27, r26	; 0x1b
    2b34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b36:	69 8d       	ldd	r22, Y+25	; 0x19
    2b38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	4a e7       	ldi	r20, 0x7A	; 122
    2b44:	55 e4       	ldi	r21, 0x45	; 69
    2b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4a:	dc 01       	movw	r26, r24
    2b4c:	cb 01       	movw	r24, r22
    2b4e:	8d 8b       	std	Y+21, r24	; 0x15
    2b50:	9e 8b       	std	Y+22, r25	; 0x16
    2b52:	af 8b       	std	Y+23, r26	; 0x17
    2b54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b56:	6d 89       	ldd	r22, Y+21	; 0x15
    2b58:	7e 89       	ldd	r23, Y+22	; 0x16
    2b5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	40 e8       	ldi	r20, 0x80	; 128
    2b64:	5f e3       	ldi	r21, 0x3F	; 63
    2b66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b6a:	88 23       	and	r24, r24
    2b6c:	2c f4       	brge	.+10     	; 0x2b78 <ADC_getDigitalValueSynchNonBlocking+0x8e>
		__ticks = 1;
    2b6e:	81 e0       	ldi	r24, 0x01	; 1
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	9c 8b       	std	Y+20, r25	; 0x14
    2b74:	8b 8b       	std	Y+19, r24	; 0x13
    2b76:	3f c0       	rjmp	.+126    	; 0x2bf6 <ADC_getDigitalValueSynchNonBlocking+0x10c>
	else if (__tmp > 65535)
    2b78:	6d 89       	ldd	r22, Y+21	; 0x15
    2b7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	3f ef       	ldi	r19, 0xFF	; 255
    2b84:	4f e7       	ldi	r20, 0x7F	; 127
    2b86:	57 e4       	ldi	r21, 0x47	; 71
    2b88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b8c:	18 16       	cp	r1, r24
    2b8e:	4c f5       	brge	.+82     	; 0x2be2 <ADC_getDigitalValueSynchNonBlocking+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b90:	69 8d       	ldd	r22, Y+25	; 0x19
    2b92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	40 e2       	ldi	r20, 0x20	; 32
    2b9e:	51 e4       	ldi	r21, 0x41	; 65
    2ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	bc 01       	movw	r22, r24
    2baa:	cd 01       	movw	r24, r26
    2bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	9c 8b       	std	Y+20, r25	; 0x14
    2bb6:	8b 8b       	std	Y+19, r24	; 0x13
    2bb8:	0f c0       	rjmp	.+30     	; 0x2bd8 <ADC_getDigitalValueSynchNonBlocking+0xee>
    2bba:	80 e9       	ldi	r24, 0x90	; 144
    2bbc:	91 e0       	ldi	r25, 0x01	; 1
    2bbe:	9a 8b       	std	Y+18, r25	; 0x12
    2bc0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2bc2:	89 89       	ldd	r24, Y+17	; 0x11
    2bc4:	9a 89       	ldd	r25, Y+18	; 0x12
    2bc6:	01 97       	sbiw	r24, 0x01	; 1
    2bc8:	f1 f7       	brne	.-4      	; 0x2bc6 <ADC_getDigitalValueSynchNonBlocking+0xdc>
    2bca:	9a 8b       	std	Y+18, r25	; 0x12
    2bcc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bce:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd0:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd2:	01 97       	sbiw	r24, 0x01	; 1
    2bd4:	9c 8b       	std	Y+20, r25	; 0x14
    2bd6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd8:	8b 89       	ldd	r24, Y+19	; 0x13
    2bda:	9c 89       	ldd	r25, Y+20	; 0x14
    2bdc:	00 97       	sbiw	r24, 0x00	; 0
    2bde:	69 f7       	brne	.-38     	; 0x2bba <ADC_getDigitalValueSynchNonBlocking+0xd0>
    2be0:	14 c0       	rjmp	.+40     	; 0x2c0a <ADC_getDigitalValueSynchNonBlocking+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be2:	6d 89       	ldd	r22, Y+21	; 0x15
    2be4:	7e 89       	ldd	r23, Y+22	; 0x16
    2be6:	8f 89       	ldd	r24, Y+23	; 0x17
    2be8:	98 8d       	ldd	r25, Y+24	; 0x18
    2bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bee:	dc 01       	movw	r26, r24
    2bf0:	cb 01       	movw	r24, r22
    2bf2:	9c 8b       	std	Y+20, r25	; 0x14
    2bf4:	8b 8b       	std	Y+19, r24	; 0x13
    2bf6:	8b 89       	ldd	r24, Y+19	; 0x13
    2bf8:	9c 89       	ldd	r25, Y+20	; 0x14
    2bfa:	98 8b       	std	Y+16, r25	; 0x10
    2bfc:	8f 87       	std	Y+15, r24	; 0x0f
    2bfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c00:	98 89       	ldd	r25, Y+16	; 0x10
    2c02:	01 97       	sbiw	r24, 0x01	; 1
    2c04:	f1 f7       	brne	.-4      	; 0x2c02 <ADC_getDigitalValueSynchNonBlocking+0x118>
    2c06:	98 8b       	std	Y+16, r25	; 0x10
    2c08:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);  // Add a short delay here

	// start conversion
	ADC_START_CONVERSION_CFG();
    2c0a:	e4 e2       	ldi	r30, 0x24	; 36
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	82 81       	ldd	r24, Z+2	; 0x02
    2c10:	80 64       	ori	r24, 0x40	; 64
    2c12:	82 83       	std	Z+2, r24	; 0x02

	// Wait for conversion to complete (polling)
	while (ADC_CONTROL->ADCSRA_REG.ADIF_BIT == 0);
    2c14:	e4 e2       	ldi	r30, 0x24	; 36
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	82 81       	ldd	r24, Z+2	; 0x02
    2c1a:	80 71       	andi	r24, 0x10	; 16
    2c1c:	88 23       	and	r24, r24
    2c1e:	d1 f3       	breq	.-12     	; 0x2c14 <ADC_getDigitalValueSynchNonBlocking+0x12a>

	/* ------------------------ Clear flag ------------------------- */
	ADC_CONTROL->ADCSRA_REG.ADIF_BIT = 0;
    2c20:	e4 e2       	ldi	r30, 0x24	; 36
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	82 81       	ldd	r24, Z+2	; 0x02
    2c26:	8f 7e       	andi	r24, 0xEF	; 239
    2c28:	82 83       	std	Z+2, r24	; 0x02
    2c2a:	80 e0       	ldi	r24, 0x00	; 0
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	a0 e8       	ldi	r26, 0x80	; 128
    2c30:	bf e3       	ldi	r27, 0x3F	; 63
    2c32:	8b 87       	std	Y+11, r24	; 0x0b
    2c34:	9c 87       	std	Y+12, r25	; 0x0c
    2c36:	ad 87       	std	Y+13, r26	; 0x0d
    2c38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c40:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	4a e7       	ldi	r20, 0x7A	; 122
    2c48:	55 e4       	ldi	r21, 0x45	; 69
    2c4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4e:	dc 01       	movw	r26, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	8f 83       	std	Y+7, r24	; 0x07
    2c54:	98 87       	std	Y+8, r25	; 0x08
    2c56:	a9 87       	std	Y+9, r26	; 0x09
    2c58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c5c:	78 85       	ldd	r23, Y+8	; 0x08
    2c5e:	89 85       	ldd	r24, Y+9	; 0x09
    2c60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	40 e8       	ldi	r20, 0x80	; 128
    2c68:	5f e3       	ldi	r21, 0x3F	; 63
    2c6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c6e:	88 23       	and	r24, r24
    2c70:	2c f4       	brge	.+10     	; 0x2c7c <ADC_getDigitalValueSynchNonBlocking+0x192>
		__ticks = 1;
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	9e 83       	std	Y+6, r25	; 0x06
    2c78:	8d 83       	std	Y+5, r24	; 0x05
    2c7a:	3f c0       	rjmp	.+126    	; 0x2cfa <ADC_getDigitalValueSynchNonBlocking+0x210>
	else if (__tmp > 65535)
    2c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7e:	78 85       	ldd	r23, Y+8	; 0x08
    2c80:	89 85       	ldd	r24, Y+9	; 0x09
    2c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	3f ef       	ldi	r19, 0xFF	; 255
    2c88:	4f e7       	ldi	r20, 0x7F	; 127
    2c8a:	57 e4       	ldi	r21, 0x47	; 71
    2c8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c90:	18 16       	cp	r1, r24
    2c92:	4c f5       	brge	.+82     	; 0x2ce6 <ADC_getDigitalValueSynchNonBlocking+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c94:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c96:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	40 e2       	ldi	r20, 0x20	; 32
    2ca2:	51 e4       	ldi	r21, 0x41	; 65
    2ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	bc 01       	movw	r22, r24
    2cae:	cd 01       	movw	r24, r26
    2cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	cb 01       	movw	r24, r22
    2cb8:	9e 83       	std	Y+6, r25	; 0x06
    2cba:	8d 83       	std	Y+5, r24	; 0x05
    2cbc:	0f c0       	rjmp	.+30     	; 0x2cdc <ADC_getDigitalValueSynchNonBlocking+0x1f2>
    2cbe:	80 e9       	ldi	r24, 0x90	; 144
    2cc0:	91 e0       	ldi	r25, 0x01	; 1
    2cc2:	9c 83       	std	Y+4, r25	; 0x04
    2cc4:	8b 83       	std	Y+3, r24	; 0x03
    2cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cca:	01 97       	sbiw	r24, 0x01	; 1
    2ccc:	f1 f7       	brne	.-4      	; 0x2cca <ADC_getDigitalValueSynchNonBlocking+0x1e0>
    2cce:	9c 83       	std	Y+4, r25	; 0x04
    2cd0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd6:	01 97       	sbiw	r24, 0x01	; 1
    2cd8:	9e 83       	std	Y+6, r25	; 0x06
    2cda:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cde:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce0:	00 97       	sbiw	r24, 0x00	; 0
    2ce2:	69 f7       	brne	.-38     	; 0x2cbe <ADC_getDigitalValueSynchNonBlocking+0x1d4>
    2ce4:	14 c0       	rjmp	.+40     	; 0x2d0e <ADC_getDigitalValueSynchNonBlocking+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce8:	78 85       	ldd	r23, Y+8	; 0x08
    2cea:	89 85       	ldd	r24, Y+9	; 0x09
    2cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	9e 83       	std	Y+6, r25	; 0x06
    2cf8:	8d 83       	std	Y+5, r24	; 0x05
    2cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cfe:	9a 83       	std	Y+2, r25	; 0x02
    2d00:	89 83       	std	Y+1, r24	; 0x01
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
    2d04:	9a 81       	ldd	r25, Y+2	; 0x02
    2d06:	01 97       	sbiw	r24, 0x01	; 1
    2d08:	f1 f7       	brne	.-4      	; 0x2d06 <ADC_getDigitalValueSynchNonBlocking+0x21c>
    2d0a:	9a 83       	std	Y+2, r25	; 0x02
    2d0c:	89 83       	std	Y+1, r24	; 0x01
	/* -------------------------------------------------------------- */

	_delay_ms(1);

	if(ADC_obj->adjustification_select == ADC_RIGHT_JUSTIFY)
    2d0e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2d10:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2d12:	80 81       	ld	r24, Z
    2d14:	80 72       	andi	r24, 0x20	; 32
    2d16:	88 23       	and	r24, r24
    2d18:	49 f4       	brne	.+18     	; 0x2d2c <ADC_getDigitalValueSynchNonBlocking+0x242>
	{
		//*result = (u16)((u16)(ADC_CONTROL->ADCH_REG << 8) + (u16)ADC_CONTROL->ADCL_REG);
		*result = ADCW;
    2d1a:	e4 e2       	ldi	r30, 0x24	; 36
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	80 81       	ld	r24, Z
    2d20:	91 81       	ldd	r25, Z+1	; 0x01
    2d22:	e8 a1       	ldd	r30, Y+32	; 0x20
    2d24:	f9 a1       	ldd	r31, Y+33	; 0x21
    2d26:	91 83       	std	Z+1, r25	; 0x01
    2d28:	80 83       	st	Z, r24
    2d2a:	0e c0       	rjmp	.+28     	; 0x2d48 <ADC_getDigitalValueSynchNonBlocking+0x25e>

	}
	else if(ADC_obj->adjustification_select == ADC_LEFT_JUSTIFY)
    2d2c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2d2e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2d30:	80 81       	ld	r24, Z
    2d32:	80 72       	andi	r24, 0x20	; 32
    2d34:	88 23       	and	r24, r24
    2d36:	41 f0       	breq	.+16     	; 0x2d48 <ADC_getDigitalValueSynchNonBlocking+0x25e>
	{
		//*result = (u16)(((u16)ADC_CONTROL->ADCH_REG << 8) + (u16)ADC_CONTROL->ADCL_REG) >> 6;
		*result = ADCW;
    2d38:	e4 e2       	ldi	r30, 0x24	; 36
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	80 81       	ld	r24, Z
    2d3e:	91 81       	ldd	r25, Z+1	; 0x01
    2d40:	e8 a1       	ldd	r30, Y+32	; 0x20
    2d42:	f9 a1       	ldd	r31, Y+33	; 0x21
    2d44:	91 83       	std	Z+1, r25	; 0x01
    2d46:	80 83       	st	Z, r24
	}
	else{/* Nothing */}
}
    2d48:	a1 96       	adiw	r28, 0x21	; 33
    2d4a:	0f b6       	in	r0, 0x3f	; 63
    2d4c:	f8 94       	cli
    2d4e:	de bf       	out	0x3e, r29	; 62
    2d50:	0f be       	out	0x3f, r0	; 63
    2d52:	cd bf       	out	0x3d, r28	; 61
    2d54:	cf 91       	pop	r28
    2d56:	df 91       	pop	r29
    2d58:	08 95       	ret

00002d5a <H_LCD_void_Init>:
#include "char_lcd.h"

u8 countDigits(s32 number);

void H_LCD_void_Init(void)
{
    2d5a:	df 93       	push	r29
    2d5c:	cf 93       	push	r28
    2d5e:	cd b7       	in	r28, 0x3d	; 61
    2d60:	de b7       	in	r29, 0x3e	; 62
    2d62:	aa 97       	sbiw	r28, 0x2a	; 42
    2d64:	0f b6       	in	r0, 0x3f	; 63
    2d66:	f8 94       	cli
    2d68:	de bf       	out	0x3e, r29	; 62
    2d6a:	0f be       	out	0x3f, r0	; 63
    2d6c:	cd bf       	out	0x3d, r28	; 61
#if LCD_MODE_SELECT == LCD_4_BIT_MODE_SELECT

	// configure enale and rs and data pins
	DIO_voidSetPinDirection(LCD_4BIT_RS_PIN_PORT, LCD_4BIT_RS_PIN, GPIO_DIRECTION_OUTPUT);
    2d6e:	80 e0       	ldi	r24, 0x00	; 0
    2d70:	63 e0       	ldi	r22, 0x03	; 3
    2d72:	41 e0       	ldi	r20, 0x01	; 1
    2d74:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_DIRECTION_OUTPUT);
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	62 e0       	ldi	r22, 0x02	; 2
    2d7c:	41 e0       	ldi	r20, 0x01	; 1
    2d7e:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_4BIT_D7_PIN_PORT, LCD_4_BIT_D7_PIN, GPIO_DIRECTION_OUTPUT);
    2d82:	81 e0       	ldi	r24, 0x01	; 1
    2d84:	60 e0       	ldi	r22, 0x00	; 0
    2d86:	41 e0       	ldi	r20, 0x01	; 1
    2d88:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_4BIT_D6_PIN_PORT, LCD_4_BIT_D6_PIN, GPIO_DIRECTION_OUTPUT);
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	61 e0       	ldi	r22, 0x01	; 1
    2d90:	41 e0       	ldi	r20, 0x01	; 1
    2d92:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_4BIT_D5_PIN_PORT, LCD_4_BIT_D5_PIN, GPIO_DIRECTION_OUTPUT);
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	62 e0       	ldi	r22, 0x02	; 2
    2d9a:	41 e0       	ldi	r20, 0x01	; 1
    2d9c:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_4BIT_D4_PIN_PORT, LCD_4_BIT_D4_PIN, GPIO_DIRECTION_OUTPUT);
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	64 e0       	ldi	r22, 0x04	; 4
    2da4:	41 e0       	ldi	r20, 0x01	; 1
    2da6:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <DIO_voidSetPinDirection>
    2daa:	80 e0       	ldi	r24, 0x00	; 0
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	a0 ea       	ldi	r26, 0xA0	; 160
    2db0:	b1 e4       	ldi	r27, 0x41	; 65
    2db2:	8f a3       	std	Y+39, r24	; 0x27
    2db4:	98 a7       	std	Y+40, r25	; 0x28
    2db6:	a9 a7       	std	Y+41, r26	; 0x29
    2db8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dba:	6f a1       	ldd	r22, Y+39	; 0x27
    2dbc:	78 a5       	ldd	r23, Y+40	; 0x28
    2dbe:	89 a5       	ldd	r24, Y+41	; 0x29
    2dc0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	4a e7       	ldi	r20, 0x7A	; 122
    2dc8:	55 e4       	ldi	r21, 0x45	; 69
    2dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	8b a3       	std	Y+35, r24	; 0x23
    2dd4:	9c a3       	std	Y+36, r25	; 0x24
    2dd6:	ad a3       	std	Y+37, r26	; 0x25
    2dd8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2dda:	6b a1       	ldd	r22, Y+35	; 0x23
    2ddc:	7c a1       	ldd	r23, Y+36	; 0x24
    2dde:	8d a1       	ldd	r24, Y+37	; 0x25
    2de0:	9e a1       	ldd	r25, Y+38	; 0x26
    2de2:	20 e0       	ldi	r18, 0x00	; 0
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	40 e8       	ldi	r20, 0x80	; 128
    2de8:	5f e3       	ldi	r21, 0x3F	; 63
    2dea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dee:	88 23       	and	r24, r24
    2df0:	2c f4       	brge	.+10     	; 0x2dfc <H_LCD_void_Init+0xa2>
		__ticks = 1;
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	9a a3       	std	Y+34, r25	; 0x22
    2df8:	89 a3       	std	Y+33, r24	; 0x21
    2dfa:	3f c0       	rjmp	.+126    	; 0x2e7a <H_LCD_void_Init+0x120>
	else if (__tmp > 65535)
    2dfc:	6b a1       	ldd	r22, Y+35	; 0x23
    2dfe:	7c a1       	ldd	r23, Y+36	; 0x24
    2e00:	8d a1       	ldd	r24, Y+37	; 0x25
    2e02:	9e a1       	ldd	r25, Y+38	; 0x26
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	3f ef       	ldi	r19, 0xFF	; 255
    2e08:	4f e7       	ldi	r20, 0x7F	; 127
    2e0a:	57 e4       	ldi	r21, 0x47	; 71
    2e0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e10:	18 16       	cp	r1, r24
    2e12:	4c f5       	brge	.+82     	; 0x2e66 <H_LCD_void_Init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e14:	6f a1       	ldd	r22, Y+39	; 0x27
    2e16:	78 a5       	ldd	r23, Y+40	; 0x28
    2e18:	89 a5       	ldd	r24, Y+41	; 0x29
    2e1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	40 e2       	ldi	r20, 0x20	; 32
    2e22:	51 e4       	ldi	r21, 0x41	; 65
    2e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	bc 01       	movw	r22, r24
    2e2e:	cd 01       	movw	r24, r26
    2e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	9a a3       	std	Y+34, r25	; 0x22
    2e3a:	89 a3       	std	Y+33, r24	; 0x21
    2e3c:	0f c0       	rjmp	.+30     	; 0x2e5c <H_LCD_void_Init+0x102>
    2e3e:	80 e9       	ldi	r24, 0x90	; 144
    2e40:	91 e0       	ldi	r25, 0x01	; 1
    2e42:	98 a3       	std	Y+32, r25	; 0x20
    2e44:	8f 8f       	std	Y+31, r24	; 0x1f
    2e46:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e48:	98 a1       	ldd	r25, Y+32	; 0x20
    2e4a:	01 97       	sbiw	r24, 0x01	; 1
    2e4c:	f1 f7       	brne	.-4      	; 0x2e4a <H_LCD_void_Init+0xf0>
    2e4e:	98 a3       	std	Y+32, r25	; 0x20
    2e50:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e52:	89 a1       	ldd	r24, Y+33	; 0x21
    2e54:	9a a1       	ldd	r25, Y+34	; 0x22
    2e56:	01 97       	sbiw	r24, 0x01	; 1
    2e58:	9a a3       	std	Y+34, r25	; 0x22
    2e5a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e5c:	89 a1       	ldd	r24, Y+33	; 0x21
    2e5e:	9a a1       	ldd	r25, Y+34	; 0x22
    2e60:	00 97       	sbiw	r24, 0x00	; 0
    2e62:	69 f7       	brne	.-38     	; 0x2e3e <H_LCD_void_Init+0xe4>
    2e64:	14 c0       	rjmp	.+40     	; 0x2e8e <H_LCD_void_Init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e66:	6b a1       	ldd	r22, Y+35	; 0x23
    2e68:	7c a1       	ldd	r23, Y+36	; 0x24
    2e6a:	8d a1       	ldd	r24, Y+37	; 0x25
    2e6c:	9e a1       	ldd	r25, Y+38	; 0x26
    2e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	9a a3       	std	Y+34, r25	; 0x22
    2e78:	89 a3       	std	Y+33, r24	; 0x21
    2e7a:	89 a1       	ldd	r24, Y+33	; 0x21
    2e7c:	9a a1       	ldd	r25, Y+34	; 0x22
    2e7e:	9e 8f       	std	Y+30, r25	; 0x1e
    2e80:	8d 8f       	std	Y+29, r24	; 0x1d
    2e82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e86:	01 97       	sbiw	r24, 0x01	; 1
    2e88:	f1 f7       	brne	.-4      	; 0x2e86 <H_LCD_void_Init+0x12c>
    2e8a:	9e 8f       	std	Y+30, r25	; 0x1e
    2e8c:	8d 8f       	std	Y+29, r24	; 0x1d

	// delay before any start
	_delay_ms(20);
	H_LCD_void_SendCommand(LCD_8BIT_MODE_2_LINE);
    2e8e:	88 e3       	ldi	r24, 0x38	; 56
    2e90:	0e 94 4f 18 	call	0x309e	; 0x309e <H_LCD_void_SendCommand>
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	a0 ea       	ldi	r26, 0xA0	; 160
    2e9a:	b0 e4       	ldi	r27, 0x40	; 64
    2e9c:	89 8f       	std	Y+25, r24	; 0x19
    2e9e:	9a 8f       	std	Y+26, r25	; 0x1a
    2ea0:	ab 8f       	std	Y+27, r26	; 0x1b
    2ea2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ea6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ea8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eaa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2eac:	20 e0       	ldi	r18, 0x00	; 0
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	4a e7       	ldi	r20, 0x7A	; 122
    2eb2:	55 e4       	ldi	r21, 0x45	; 69
    2eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	8d 8b       	std	Y+21, r24	; 0x15
    2ebe:	9e 8b       	std	Y+22, r25	; 0x16
    2ec0:	af 8b       	std	Y+23, r26	; 0x17
    2ec2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ec4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ec6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ec8:	8f 89       	ldd	r24, Y+23	; 0x17
    2eca:	98 8d       	ldd	r25, Y+24	; 0x18
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	40 e8       	ldi	r20, 0x80	; 128
    2ed2:	5f e3       	ldi	r21, 0x3F	; 63
    2ed4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ed8:	88 23       	and	r24, r24
    2eda:	2c f4       	brge	.+10     	; 0x2ee6 <H_LCD_void_Init+0x18c>
		__ticks = 1;
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	9c 8b       	std	Y+20, r25	; 0x14
    2ee2:	8b 8b       	std	Y+19, r24	; 0x13
    2ee4:	3f c0       	rjmp	.+126    	; 0x2f64 <H_LCD_void_Init+0x20a>
	else if (__tmp > 65535)
    2ee6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ee8:	7e 89       	ldd	r23, Y+22	; 0x16
    2eea:	8f 89       	ldd	r24, Y+23	; 0x17
    2eec:	98 8d       	ldd	r25, Y+24	; 0x18
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	3f ef       	ldi	r19, 0xFF	; 255
    2ef2:	4f e7       	ldi	r20, 0x7F	; 127
    2ef4:	57 e4       	ldi	r21, 0x47	; 71
    2ef6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2efa:	18 16       	cp	r1, r24
    2efc:	4c f5       	brge	.+82     	; 0x2f50 <H_LCD_void_Init+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2efe:	69 8d       	ldd	r22, Y+25	; 0x19
    2f00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f06:	20 e0       	ldi	r18, 0x00	; 0
    2f08:	30 e0       	ldi	r19, 0x00	; 0
    2f0a:	40 e2       	ldi	r20, 0x20	; 32
    2f0c:	51 e4       	ldi	r21, 0x41	; 65
    2f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	bc 01       	movw	r22, r24
    2f18:	cd 01       	movw	r24, r26
    2f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1e:	dc 01       	movw	r26, r24
    2f20:	cb 01       	movw	r24, r22
    2f22:	9c 8b       	std	Y+20, r25	; 0x14
    2f24:	8b 8b       	std	Y+19, r24	; 0x13
    2f26:	0f c0       	rjmp	.+30     	; 0x2f46 <H_LCD_void_Init+0x1ec>
    2f28:	80 e9       	ldi	r24, 0x90	; 144
    2f2a:	91 e0       	ldi	r25, 0x01	; 1
    2f2c:	9a 8b       	std	Y+18, r25	; 0x12
    2f2e:	89 8b       	std	Y+17, r24	; 0x11
    2f30:	89 89       	ldd	r24, Y+17	; 0x11
    2f32:	9a 89       	ldd	r25, Y+18	; 0x12
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	f1 f7       	brne	.-4      	; 0x2f34 <H_LCD_void_Init+0x1da>
    2f38:	9a 8b       	std	Y+18, r25	; 0x12
    2f3a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f40:	01 97       	sbiw	r24, 0x01	; 1
    2f42:	9c 8b       	std	Y+20, r25	; 0x14
    2f44:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f46:	8b 89       	ldd	r24, Y+19	; 0x13
    2f48:	9c 89       	ldd	r25, Y+20	; 0x14
    2f4a:	00 97       	sbiw	r24, 0x00	; 0
    2f4c:	69 f7       	brne	.-38     	; 0x2f28 <H_LCD_void_Init+0x1ce>
    2f4e:	14 c0       	rjmp	.+40     	; 0x2f78 <H_LCD_void_Init+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f50:	6d 89       	ldd	r22, Y+21	; 0x15
    2f52:	7e 89       	ldd	r23, Y+22	; 0x16
    2f54:	8f 89       	ldd	r24, Y+23	; 0x17
    2f56:	98 8d       	ldd	r25, Y+24	; 0x18
    2f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	cb 01       	movw	r24, r22
    2f60:	9c 8b       	std	Y+20, r25	; 0x14
    2f62:	8b 8b       	std	Y+19, r24	; 0x13
    2f64:	8b 89       	ldd	r24, Y+19	; 0x13
    2f66:	9c 89       	ldd	r25, Y+20	; 0x14
    2f68:	98 8b       	std	Y+16, r25	; 0x10
    2f6a:	8f 87       	std	Y+15, r24	; 0x0f
    2f6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f6e:	98 89       	ldd	r25, Y+16	; 0x10
    2f70:	01 97       	sbiw	r24, 0x01	; 1
    2f72:	f1 f7       	brne	.-4      	; 0x2f70 <H_LCD_void_Init+0x216>
    2f74:	98 8b       	std	Y+16, r25	; 0x10
    2f76:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	H_LCD_void_SendCommand(LCD_8BIT_MODE_2_LINE);
    2f78:	88 e3       	ldi	r24, 0x38	; 56
    2f7a:	0e 94 4f 18 	call	0x309e	; 0x309e <H_LCD_void_SendCommand>
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	a6 e1       	ldi	r26, 0x16	; 22
    2f84:	b3 e4       	ldi	r27, 0x43	; 67
    2f86:	8b 87       	std	Y+11, r24	; 0x0b
    2f88:	9c 87       	std	Y+12, r25	; 0x0c
    2f8a:	ad 87       	std	Y+13, r26	; 0x0d
    2f8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	4a e7       	ldi	r20, 0x7A	; 122
    2f9c:	55 e4       	ldi	r21, 0x45	; 69
    2f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	8f 83       	std	Y+7, r24	; 0x07
    2fa8:	98 87       	std	Y+8, r25	; 0x08
    2faa:	a9 87       	std	Y+9, r26	; 0x09
    2fac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fae:	6f 81       	ldd	r22, Y+7	; 0x07
    2fb0:	78 85       	ldd	r23, Y+8	; 0x08
    2fb2:	89 85       	ldd	r24, Y+9	; 0x09
    2fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	40 e8       	ldi	r20, 0x80	; 128
    2fbc:	5f e3       	ldi	r21, 0x3F	; 63
    2fbe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fc2:	88 23       	and	r24, r24
    2fc4:	2c f4       	brge	.+10     	; 0x2fd0 <H_LCD_void_Init+0x276>
		__ticks = 1;
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	9e 83       	std	Y+6, r25	; 0x06
    2fcc:	8d 83       	std	Y+5, r24	; 0x05
    2fce:	3f c0       	rjmp	.+126    	; 0x304e <H_LCD_void_Init+0x2f4>
	else if (__tmp > 65535)
    2fd0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fd2:	78 85       	ldd	r23, Y+8	; 0x08
    2fd4:	89 85       	ldd	r24, Y+9	; 0x09
    2fd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd8:	20 e0       	ldi	r18, 0x00	; 0
    2fda:	3f ef       	ldi	r19, 0xFF	; 255
    2fdc:	4f e7       	ldi	r20, 0x7F	; 127
    2fde:	57 e4       	ldi	r21, 0x47	; 71
    2fe0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fe4:	18 16       	cp	r1, r24
    2fe6:	4c f5       	brge	.+82     	; 0x303a <H_LCD_void_Init+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fe8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fea:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fee:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	40 e2       	ldi	r20, 0x20	; 32
    2ff6:	51 e4       	ldi	r21, 0x41	; 65
    2ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	bc 01       	movw	r22, r24
    3002:	cd 01       	movw	r24, r26
    3004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3008:	dc 01       	movw	r26, r24
    300a:	cb 01       	movw	r24, r22
    300c:	9e 83       	std	Y+6, r25	; 0x06
    300e:	8d 83       	std	Y+5, r24	; 0x05
    3010:	0f c0       	rjmp	.+30     	; 0x3030 <H_LCD_void_Init+0x2d6>
    3012:	80 e9       	ldi	r24, 0x90	; 144
    3014:	91 e0       	ldi	r25, 0x01	; 1
    3016:	9c 83       	std	Y+4, r25	; 0x04
    3018:	8b 83       	std	Y+3, r24	; 0x03
    301a:	8b 81       	ldd	r24, Y+3	; 0x03
    301c:	9c 81       	ldd	r25, Y+4	; 0x04
    301e:	01 97       	sbiw	r24, 0x01	; 1
    3020:	f1 f7       	brne	.-4      	; 0x301e <H_LCD_void_Init+0x2c4>
    3022:	9c 83       	std	Y+4, r25	; 0x04
    3024:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3026:	8d 81       	ldd	r24, Y+5	; 0x05
    3028:	9e 81       	ldd	r25, Y+6	; 0x06
    302a:	01 97       	sbiw	r24, 0x01	; 1
    302c:	9e 83       	std	Y+6, r25	; 0x06
    302e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3030:	8d 81       	ldd	r24, Y+5	; 0x05
    3032:	9e 81       	ldd	r25, Y+6	; 0x06
    3034:	00 97       	sbiw	r24, 0x00	; 0
    3036:	69 f7       	brne	.-38     	; 0x3012 <H_LCD_void_Init+0x2b8>
    3038:	14 c0       	rjmp	.+40     	; 0x3062 <H_LCD_void_Init+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    303a:	6f 81       	ldd	r22, Y+7	; 0x07
    303c:	78 85       	ldd	r23, Y+8	; 0x08
    303e:	89 85       	ldd	r24, Y+9	; 0x09
    3040:	9a 85       	ldd	r25, Y+10	; 0x0a
    3042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3046:	dc 01       	movw	r26, r24
    3048:	cb 01       	movw	r24, r22
    304a:	9e 83       	std	Y+6, r25	; 0x06
    304c:	8d 83       	std	Y+5, r24	; 0x05
    304e:	8d 81       	ldd	r24, Y+5	; 0x05
    3050:	9e 81       	ldd	r25, Y+6	; 0x06
    3052:	9a 83       	std	Y+2, r25	; 0x02
    3054:	89 83       	std	Y+1, r24	; 0x01
    3056:	89 81       	ldd	r24, Y+1	; 0x01
    3058:	9a 81       	ldd	r25, Y+2	; 0x02
    305a:	01 97       	sbiw	r24, 0x01	; 1
    305c:	f1 f7       	brne	.-4      	; 0x305a <H_LCD_void_Init+0x300>
    305e:	9a 83       	std	Y+2, r25	; 0x02
    3060:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(150);
	H_LCD_void_SendCommand(LCD_8BIT_MODE_2_LINE);
    3062:	88 e3       	ldi	r24, 0x38	; 56
    3064:	0e 94 4f 18 	call	0x309e	; 0x309e <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_CLEAR);
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	0e 94 4f 18 	call	0x309e	; 0x309e <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_RETURN_HOME);
    306e:	82 e0       	ldi	r24, 0x02	; 2
    3070:	0e 94 4f 18 	call	0x309e	; 0x309e <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_ENTRY_MODE);
    3074:	86 e0       	ldi	r24, 0x06	; 6
    3076:	0e 94 4f 18 	call	0x309e	; 0x309e <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_CURSOR_OFF_DISPLAY_ON);
    307a:	8c e0       	ldi	r24, 0x0C	; 12
    307c:	0e 94 4f 18 	call	0x309e	; 0x309e <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_4BIT_MODE_2_LINE);
    3080:	88 e2       	ldi	r24, 0x28	; 40
    3082:	0e 94 4f 18 	call	0x309e	; 0x309e <H_LCD_void_SendCommand>
	H_LCD_void_SendCommand(LCD_DDRAM_START); // start column
    3086:	80 e8       	ldi	r24, 0x80	; 128
    3088:	0e 94 4f 18 	call	0x309e	; 0x309e <H_LCD_void_SendCommand>

#elif LCD_MODE_SELECT == LCD_8_BIT_MODE_SELECT


#endif
}
    308c:	aa 96       	adiw	r28, 0x2a	; 42
    308e:	0f b6       	in	r0, 0x3f	; 63
    3090:	f8 94       	cli
    3092:	de bf       	out	0x3e, r29	; 62
    3094:	0f be       	out	0x3f, r0	; 63
    3096:	cd bf       	out	0x3d, r28	; 61
    3098:	cf 91       	pop	r28
    309a:	df 91       	pop	r29
    309c:	08 95       	ret

0000309e <H_LCD_void_SendCommand>:



void H_LCD_void_SendCommand(u8 Copy_u8Command)
{
    309e:	df 93       	push	r29
    30a0:	cf 93       	push	r28
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
    30a6:	6d 97       	sbiw	r28, 0x1d	; 29
    30a8:	0f b6       	in	r0, 0x3f	; 63
    30aa:	f8 94       	cli
    30ac:	de bf       	out	0x3e, r29	; 62
    30ae:	0f be       	out	0x3f, r0	; 63
    30b0:	cd bf       	out	0x3d, r28	; 61
    30b2:	8d 8f       	std	Y+29, r24	; 0x1d
#if LCD_MODE_SELECT == LCD_4_BIT_MODE_SELECT
	// write logic low to rs pin
	DIO_voidSetPinValue(LCD_4BIT_RS_PIN_PORT, LCD_4BIT_RS_PIN, GPIO_LOW);
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	63 e0       	ldi	r22, 0x03	; 3
    30b8:	40 e0       	ldi	r20, 0x00	; 0
    30ba:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>

	// Sending most significant nibble of command through data pins
	DIO_voidSetPinValue(LCD_4BIT_D7_PIN_PORT, LCD_4_BIT_D7_PIN, (Copy_u8Command >> 4)&(u8)1);
    30be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30c0:	82 95       	swap	r24
    30c2:	8f 70       	andi	r24, 0x0F	; 15
    30c4:	98 2f       	mov	r25, r24
    30c6:	91 70       	andi	r25, 0x01	; 1
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	60 e0       	ldi	r22, 0x00	; 0
    30cc:	49 2f       	mov	r20, r25
    30ce:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D6_PIN_PORT, LCD_4_BIT_D6_PIN, (Copy_u8Command >> 5)&(u8)1);
    30d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30d4:	82 95       	swap	r24
    30d6:	86 95       	lsr	r24
    30d8:	87 70       	andi	r24, 0x07	; 7
    30da:	98 2f       	mov	r25, r24
    30dc:	91 70       	andi	r25, 0x01	; 1
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	61 e0       	ldi	r22, 0x01	; 1
    30e2:	49 2f       	mov	r20, r25
    30e4:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D5_PIN_PORT, LCD_4_BIT_D5_PIN, (Copy_u8Command >> 6)&(u8)1);
    30e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30ea:	82 95       	swap	r24
    30ec:	86 95       	lsr	r24
    30ee:	86 95       	lsr	r24
    30f0:	83 70       	andi	r24, 0x03	; 3
    30f2:	98 2f       	mov	r25, r24
    30f4:	91 70       	andi	r25, 0x01	; 1
    30f6:	81 e0       	ldi	r24, 0x01	; 1
    30f8:	62 e0       	ldi	r22, 0x02	; 2
    30fa:	49 2f       	mov	r20, r25
    30fc:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D4_PIN_PORT, LCD_4_BIT_D4_PIN, (Copy_u8Command >> 7)&(u8)1);
    3100:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3102:	98 2f       	mov	r25, r24
    3104:	99 1f       	adc	r25, r25
    3106:	99 27       	eor	r25, r25
    3108:	99 1f       	adc	r25, r25
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	64 e0       	ldi	r22, 0x04	; 4
    310e:	49 2f       	mov	r20, r25
    3110:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>

	// send enable signal
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_HIGH);
    3114:	80 e0       	ldi	r24, 0x00	; 0
    3116:	62 e0       	ldi	r22, 0x02	; 2
    3118:	41 e0       	ldi	r20, 0x01	; 1
    311a:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
    311e:	80 e0       	ldi	r24, 0x00	; 0
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	a0 ea       	ldi	r26, 0xA0	; 160
    3124:	b0 e4       	ldi	r27, 0x40	; 64
    3126:	89 8f       	std	Y+25, r24	; 0x19
    3128:	9a 8f       	std	Y+26, r25	; 0x1a
    312a:	ab 8f       	std	Y+27, r26	; 0x1b
    312c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    312e:	69 8d       	ldd	r22, Y+25	; 0x19
    3130:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3132:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3134:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	4a e7       	ldi	r20, 0x7A	; 122
    313c:	55 e4       	ldi	r21, 0x45	; 69
    313e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3142:	dc 01       	movw	r26, r24
    3144:	cb 01       	movw	r24, r22
    3146:	8d 8b       	std	Y+21, r24	; 0x15
    3148:	9e 8b       	std	Y+22, r25	; 0x16
    314a:	af 8b       	std	Y+23, r26	; 0x17
    314c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    314e:	6d 89       	ldd	r22, Y+21	; 0x15
    3150:	7e 89       	ldd	r23, Y+22	; 0x16
    3152:	8f 89       	ldd	r24, Y+23	; 0x17
    3154:	98 8d       	ldd	r25, Y+24	; 0x18
    3156:	20 e0       	ldi	r18, 0x00	; 0
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	40 e8       	ldi	r20, 0x80	; 128
    315c:	5f e3       	ldi	r21, 0x3F	; 63
    315e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3162:	88 23       	and	r24, r24
    3164:	2c f4       	brge	.+10     	; 0x3170 <H_LCD_void_SendCommand+0xd2>
		__ticks = 1;
    3166:	81 e0       	ldi	r24, 0x01	; 1
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	9c 8b       	std	Y+20, r25	; 0x14
    316c:	8b 8b       	std	Y+19, r24	; 0x13
    316e:	3f c0       	rjmp	.+126    	; 0x31ee <H_LCD_void_SendCommand+0x150>
	else if (__tmp > 65535)
    3170:	6d 89       	ldd	r22, Y+21	; 0x15
    3172:	7e 89       	ldd	r23, Y+22	; 0x16
    3174:	8f 89       	ldd	r24, Y+23	; 0x17
    3176:	98 8d       	ldd	r25, Y+24	; 0x18
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	3f ef       	ldi	r19, 0xFF	; 255
    317c:	4f e7       	ldi	r20, 0x7F	; 127
    317e:	57 e4       	ldi	r21, 0x47	; 71
    3180:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3184:	18 16       	cp	r1, r24
    3186:	4c f5       	brge	.+82     	; 0x31da <H_LCD_void_SendCommand+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3188:	69 8d       	ldd	r22, Y+25	; 0x19
    318a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    318c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    318e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	40 e2       	ldi	r20, 0x20	; 32
    3196:	51 e4       	ldi	r21, 0x41	; 65
    3198:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    319c:	dc 01       	movw	r26, r24
    319e:	cb 01       	movw	r24, r22
    31a0:	bc 01       	movw	r22, r24
    31a2:	cd 01       	movw	r24, r26
    31a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a8:	dc 01       	movw	r26, r24
    31aa:	cb 01       	movw	r24, r22
    31ac:	9c 8b       	std	Y+20, r25	; 0x14
    31ae:	8b 8b       	std	Y+19, r24	; 0x13
    31b0:	0f c0       	rjmp	.+30     	; 0x31d0 <H_LCD_void_SendCommand+0x132>
    31b2:	80 e9       	ldi	r24, 0x90	; 144
    31b4:	91 e0       	ldi	r25, 0x01	; 1
    31b6:	9a 8b       	std	Y+18, r25	; 0x12
    31b8:	89 8b       	std	Y+17, r24	; 0x11
    31ba:	89 89       	ldd	r24, Y+17	; 0x11
    31bc:	9a 89       	ldd	r25, Y+18	; 0x12
    31be:	01 97       	sbiw	r24, 0x01	; 1
    31c0:	f1 f7       	brne	.-4      	; 0x31be <H_LCD_void_SendCommand+0x120>
    31c2:	9a 8b       	std	Y+18, r25	; 0x12
    31c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31c6:	8b 89       	ldd	r24, Y+19	; 0x13
    31c8:	9c 89       	ldd	r25, Y+20	; 0x14
    31ca:	01 97       	sbiw	r24, 0x01	; 1
    31cc:	9c 8b       	std	Y+20, r25	; 0x14
    31ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31d0:	8b 89       	ldd	r24, Y+19	; 0x13
    31d2:	9c 89       	ldd	r25, Y+20	; 0x14
    31d4:	00 97       	sbiw	r24, 0x00	; 0
    31d6:	69 f7       	brne	.-38     	; 0x31b2 <H_LCD_void_SendCommand+0x114>
    31d8:	14 c0       	rjmp	.+40     	; 0x3202 <H_LCD_void_SendCommand+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31da:	6d 89       	ldd	r22, Y+21	; 0x15
    31dc:	7e 89       	ldd	r23, Y+22	; 0x16
    31de:	8f 89       	ldd	r24, Y+23	; 0x17
    31e0:	98 8d       	ldd	r25, Y+24	; 0x18
    31e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	9c 8b       	std	Y+20, r25	; 0x14
    31ec:	8b 8b       	std	Y+19, r24	; 0x13
    31ee:	8b 89       	ldd	r24, Y+19	; 0x13
    31f0:	9c 89       	ldd	r25, Y+20	; 0x14
    31f2:	98 8b       	std	Y+16, r25	; 0x10
    31f4:	8f 87       	std	Y+15, r24	; 0x0f
    31f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    31f8:	98 89       	ldd	r25, Y+16	; 0x10
    31fa:	01 97       	sbiw	r24, 0x01	; 1
    31fc:	f1 f7       	brne	.-4      	; 0x31fa <H_LCD_void_SendCommand+0x15c>
    31fe:	98 8b       	std	Y+16, r25	; 0x10
    3200:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_LOW);
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	62 e0       	ldi	r22, 0x02	; 2
    3206:	40 e0       	ldi	r20, 0x00	; 0
    3208:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>

	// Sending least significant nibble of command through data pins
	DIO_voidSetPinValue(LCD_4BIT_D7_PIN_PORT, LCD_4_BIT_D7_PIN, ((Copy_u8Command) >> 0)&(u8)1);
    320c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    320e:	98 2f       	mov	r25, r24
    3210:	91 70       	andi	r25, 0x01	; 1
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	60 e0       	ldi	r22, 0x00	; 0
    3216:	49 2f       	mov	r20, r25
    3218:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D6_PIN_PORT, LCD_4_BIT_D6_PIN, ((Copy_u8Command) >> 1)&(u8)1);
    321c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    321e:	86 95       	lsr	r24
    3220:	98 2f       	mov	r25, r24
    3222:	91 70       	andi	r25, 0x01	; 1
    3224:	81 e0       	ldi	r24, 0x01	; 1
    3226:	61 e0       	ldi	r22, 0x01	; 1
    3228:	49 2f       	mov	r20, r25
    322a:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D5_PIN_PORT, LCD_4_BIT_D5_PIN, ((Copy_u8Command) >> 2)&(u8)1);
    322e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3230:	86 95       	lsr	r24
    3232:	86 95       	lsr	r24
    3234:	98 2f       	mov	r25, r24
    3236:	91 70       	andi	r25, 0x01	; 1
    3238:	81 e0       	ldi	r24, 0x01	; 1
    323a:	62 e0       	ldi	r22, 0x02	; 2
    323c:	49 2f       	mov	r20, r25
    323e:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D4_PIN_PORT, LCD_4_BIT_D4_PIN, ((Copy_u8Command) >> 3)&(u8)1);
    3242:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3244:	86 95       	lsr	r24
    3246:	86 95       	lsr	r24
    3248:	86 95       	lsr	r24
    324a:	98 2f       	mov	r25, r24
    324c:	91 70       	andi	r25, 0x01	; 1
    324e:	81 e0       	ldi	r24, 0x01	; 1
    3250:	64 e0       	ldi	r22, 0x04	; 4
    3252:	49 2f       	mov	r20, r25
    3254:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>

	// send enable signal
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_HIGH);
    3258:	80 e0       	ldi	r24, 0x00	; 0
    325a:	62 e0       	ldi	r22, 0x02	; 2
    325c:	41 e0       	ldi	r20, 0x01	; 1
    325e:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	a0 ea       	ldi	r26, 0xA0	; 160
    3268:	b0 e4       	ldi	r27, 0x40	; 64
    326a:	8b 87       	std	Y+11, r24	; 0x0b
    326c:	9c 87       	std	Y+12, r25	; 0x0c
    326e:	ad 87       	std	Y+13, r26	; 0x0d
    3270:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3272:	6b 85       	ldd	r22, Y+11	; 0x0b
    3274:	7c 85       	ldd	r23, Y+12	; 0x0c
    3276:	8d 85       	ldd	r24, Y+13	; 0x0d
    3278:	9e 85       	ldd	r25, Y+14	; 0x0e
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	4a e7       	ldi	r20, 0x7A	; 122
    3280:	55 e4       	ldi	r21, 0x45	; 69
    3282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	8f 83       	std	Y+7, r24	; 0x07
    328c:	98 87       	std	Y+8, r25	; 0x08
    328e:	a9 87       	std	Y+9, r26	; 0x09
    3290:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3292:	6f 81       	ldd	r22, Y+7	; 0x07
    3294:	78 85       	ldd	r23, Y+8	; 0x08
    3296:	89 85       	ldd	r24, Y+9	; 0x09
    3298:	9a 85       	ldd	r25, Y+10	; 0x0a
    329a:	20 e0       	ldi	r18, 0x00	; 0
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	40 e8       	ldi	r20, 0x80	; 128
    32a0:	5f e3       	ldi	r21, 0x3F	; 63
    32a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32a6:	88 23       	and	r24, r24
    32a8:	2c f4       	brge	.+10     	; 0x32b4 <H_LCD_void_SendCommand+0x216>
		__ticks = 1;
    32aa:	81 e0       	ldi	r24, 0x01	; 1
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	9e 83       	std	Y+6, r25	; 0x06
    32b0:	8d 83       	std	Y+5, r24	; 0x05
    32b2:	3f c0       	rjmp	.+126    	; 0x3332 <H_LCD_void_SendCommand+0x294>
	else if (__tmp > 65535)
    32b4:	6f 81       	ldd	r22, Y+7	; 0x07
    32b6:	78 85       	ldd	r23, Y+8	; 0x08
    32b8:	89 85       	ldd	r24, Y+9	; 0x09
    32ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	3f ef       	ldi	r19, 0xFF	; 255
    32c0:	4f e7       	ldi	r20, 0x7F	; 127
    32c2:	57 e4       	ldi	r21, 0x47	; 71
    32c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32c8:	18 16       	cp	r1, r24
    32ca:	4c f5       	brge	.+82     	; 0x331e <H_LCD_void_SendCommand+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    32d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    32d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    32d4:	20 e0       	ldi	r18, 0x00	; 0
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	40 e2       	ldi	r20, 0x20	; 32
    32da:	51 e4       	ldi	r21, 0x41	; 65
    32dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e0:	dc 01       	movw	r26, r24
    32e2:	cb 01       	movw	r24, r22
    32e4:	bc 01       	movw	r22, r24
    32e6:	cd 01       	movw	r24, r26
    32e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ec:	dc 01       	movw	r26, r24
    32ee:	cb 01       	movw	r24, r22
    32f0:	9e 83       	std	Y+6, r25	; 0x06
    32f2:	8d 83       	std	Y+5, r24	; 0x05
    32f4:	0f c0       	rjmp	.+30     	; 0x3314 <H_LCD_void_SendCommand+0x276>
    32f6:	80 e9       	ldi	r24, 0x90	; 144
    32f8:	91 e0       	ldi	r25, 0x01	; 1
    32fa:	9c 83       	std	Y+4, r25	; 0x04
    32fc:	8b 83       	std	Y+3, r24	; 0x03
    32fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3300:	9c 81       	ldd	r25, Y+4	; 0x04
    3302:	01 97       	sbiw	r24, 0x01	; 1
    3304:	f1 f7       	brne	.-4      	; 0x3302 <H_LCD_void_SendCommand+0x264>
    3306:	9c 83       	std	Y+4, r25	; 0x04
    3308:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    330a:	8d 81       	ldd	r24, Y+5	; 0x05
    330c:	9e 81       	ldd	r25, Y+6	; 0x06
    330e:	01 97       	sbiw	r24, 0x01	; 1
    3310:	9e 83       	std	Y+6, r25	; 0x06
    3312:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3314:	8d 81       	ldd	r24, Y+5	; 0x05
    3316:	9e 81       	ldd	r25, Y+6	; 0x06
    3318:	00 97       	sbiw	r24, 0x00	; 0
    331a:	69 f7       	brne	.-38     	; 0x32f6 <H_LCD_void_SendCommand+0x258>
    331c:	14 c0       	rjmp	.+40     	; 0x3346 <H_LCD_void_SendCommand+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    331e:	6f 81       	ldd	r22, Y+7	; 0x07
    3320:	78 85       	ldd	r23, Y+8	; 0x08
    3322:	89 85       	ldd	r24, Y+9	; 0x09
    3324:	9a 85       	ldd	r25, Y+10	; 0x0a
    3326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332a:	dc 01       	movw	r26, r24
    332c:	cb 01       	movw	r24, r22
    332e:	9e 83       	std	Y+6, r25	; 0x06
    3330:	8d 83       	std	Y+5, r24	; 0x05
    3332:	8d 81       	ldd	r24, Y+5	; 0x05
    3334:	9e 81       	ldd	r25, Y+6	; 0x06
    3336:	9a 83       	std	Y+2, r25	; 0x02
    3338:	89 83       	std	Y+1, r24	; 0x01
    333a:	89 81       	ldd	r24, Y+1	; 0x01
    333c:	9a 81       	ldd	r25, Y+2	; 0x02
    333e:	01 97       	sbiw	r24, 0x01	; 1
    3340:	f1 f7       	brne	.-4      	; 0x333e <H_LCD_void_SendCommand+0x2a0>
    3342:	9a 83       	std	Y+2, r25	; 0x02
    3344:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_LOW);
    3346:	80 e0       	ldi	r24, 0x00	; 0
    3348:	62 e0       	ldi	r22, 0x02	; 2
    334a:	40 e0       	ldi	r20, 0x00	; 0
    334c:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
#elif LCD_MODE_SELECT == LCD_8_BIT_MODE_SELECT


#endif

}
    3350:	6d 96       	adiw	r28, 0x1d	; 29
    3352:	0f b6       	in	r0, 0x3f	; 63
    3354:	f8 94       	cli
    3356:	de bf       	out	0x3e, r29	; 62
    3358:	0f be       	out	0x3f, r0	; 63
    335a:	cd bf       	out	0x3d, r28	; 61
    335c:	cf 91       	pop	r28
    335e:	df 91       	pop	r29
    3360:	08 95       	ret

00003362 <H_LCD_void_SendData>:
void H_LCD_void_SendData(u8 Copy_u8Data)
{
    3362:	df 93       	push	r29
    3364:	cf 93       	push	r28
    3366:	cd b7       	in	r28, 0x3d	; 61
    3368:	de b7       	in	r29, 0x3e	; 62
    336a:	6d 97       	sbiw	r28, 0x1d	; 29
    336c:	0f b6       	in	r0, 0x3f	; 63
    336e:	f8 94       	cli
    3370:	de bf       	out	0x3e, r29	; 62
    3372:	0f be       	out	0x3f, r0	; 63
    3374:	cd bf       	out	0x3d, r28	; 61
    3376:	8d 8f       	std	Y+29, r24	; 0x1d
#if LCD_MODE_SELECT == LCD_4_BIT_MODE_SELECT
	// write logic high to rs pin
	DIO_voidSetPinValue(LCD_4BIT_RS_PIN_PORT, LCD_4BIT_RS_PIN, GPIO_HIGH);
    3378:	80 e0       	ldi	r24, 0x00	; 0
    337a:	63 e0       	ldi	r22, 0x03	; 3
    337c:	41 e0       	ldi	r20, 0x01	; 1
    337e:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>

	// Sending most significant nibble of command through data pins
	DIO_voidSetPinValue(LCD_4BIT_D7_PIN_PORT, LCD_4_BIT_D7_PIN, (Copy_u8Data >> 4)&(u8)1);
    3382:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3384:	82 95       	swap	r24
    3386:	8f 70       	andi	r24, 0x0F	; 15
    3388:	98 2f       	mov	r25, r24
    338a:	91 70       	andi	r25, 0x01	; 1
    338c:	81 e0       	ldi	r24, 0x01	; 1
    338e:	60 e0       	ldi	r22, 0x00	; 0
    3390:	49 2f       	mov	r20, r25
    3392:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D6_PIN_PORT, LCD_4_BIT_D6_PIN, (Copy_u8Data >> 5)&(u8)1);
    3396:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3398:	82 95       	swap	r24
    339a:	86 95       	lsr	r24
    339c:	87 70       	andi	r24, 0x07	; 7
    339e:	98 2f       	mov	r25, r24
    33a0:	91 70       	andi	r25, 0x01	; 1
    33a2:	81 e0       	ldi	r24, 0x01	; 1
    33a4:	61 e0       	ldi	r22, 0x01	; 1
    33a6:	49 2f       	mov	r20, r25
    33a8:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D5_PIN_PORT, LCD_4_BIT_D5_PIN, (Copy_u8Data >> 6)&(u8)1);
    33ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33ae:	82 95       	swap	r24
    33b0:	86 95       	lsr	r24
    33b2:	86 95       	lsr	r24
    33b4:	83 70       	andi	r24, 0x03	; 3
    33b6:	98 2f       	mov	r25, r24
    33b8:	91 70       	andi	r25, 0x01	; 1
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	62 e0       	ldi	r22, 0x02	; 2
    33be:	49 2f       	mov	r20, r25
    33c0:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D4_PIN_PORT, LCD_4_BIT_D4_PIN, (Copy_u8Data >> 7)&(u8)1);
    33c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33c6:	98 2f       	mov	r25, r24
    33c8:	99 1f       	adc	r25, r25
    33ca:	99 27       	eor	r25, r25
    33cc:	99 1f       	adc	r25, r25
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	64 e0       	ldi	r22, 0x04	; 4
    33d2:	49 2f       	mov	r20, r25
    33d4:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>

	// send enable signal
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_HIGH);
    33d8:	80 e0       	ldi	r24, 0x00	; 0
    33da:	62 e0       	ldi	r22, 0x02	; 2
    33dc:	41 e0       	ldi	r20, 0x01	; 1
    33de:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
    33e2:	80 e0       	ldi	r24, 0x00	; 0
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	a0 ea       	ldi	r26, 0xA0	; 160
    33e8:	b0 e4       	ldi	r27, 0x40	; 64
    33ea:	89 8f       	std	Y+25, r24	; 0x19
    33ec:	9a 8f       	std	Y+26, r25	; 0x1a
    33ee:	ab 8f       	std	Y+27, r26	; 0x1b
    33f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33f2:	69 8d       	ldd	r22, Y+25	; 0x19
    33f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33fa:	20 e0       	ldi	r18, 0x00	; 0
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	4a e7       	ldi	r20, 0x7A	; 122
    3400:	55 e4       	ldi	r21, 0x45	; 69
    3402:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3406:	dc 01       	movw	r26, r24
    3408:	cb 01       	movw	r24, r22
    340a:	8d 8b       	std	Y+21, r24	; 0x15
    340c:	9e 8b       	std	Y+22, r25	; 0x16
    340e:	af 8b       	std	Y+23, r26	; 0x17
    3410:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3412:	6d 89       	ldd	r22, Y+21	; 0x15
    3414:	7e 89       	ldd	r23, Y+22	; 0x16
    3416:	8f 89       	ldd	r24, Y+23	; 0x17
    3418:	98 8d       	ldd	r25, Y+24	; 0x18
    341a:	20 e0       	ldi	r18, 0x00	; 0
    341c:	30 e0       	ldi	r19, 0x00	; 0
    341e:	40 e8       	ldi	r20, 0x80	; 128
    3420:	5f e3       	ldi	r21, 0x3F	; 63
    3422:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3426:	88 23       	and	r24, r24
    3428:	2c f4       	brge	.+10     	; 0x3434 <H_LCD_void_SendData+0xd2>
		__ticks = 1;
    342a:	81 e0       	ldi	r24, 0x01	; 1
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	9c 8b       	std	Y+20, r25	; 0x14
    3430:	8b 8b       	std	Y+19, r24	; 0x13
    3432:	3f c0       	rjmp	.+126    	; 0x34b2 <H_LCD_void_SendData+0x150>
	else if (__tmp > 65535)
    3434:	6d 89       	ldd	r22, Y+21	; 0x15
    3436:	7e 89       	ldd	r23, Y+22	; 0x16
    3438:	8f 89       	ldd	r24, Y+23	; 0x17
    343a:	98 8d       	ldd	r25, Y+24	; 0x18
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	3f ef       	ldi	r19, 0xFF	; 255
    3440:	4f e7       	ldi	r20, 0x7F	; 127
    3442:	57 e4       	ldi	r21, 0x47	; 71
    3444:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3448:	18 16       	cp	r1, r24
    344a:	4c f5       	brge	.+82     	; 0x349e <H_LCD_void_SendData+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    344c:	69 8d       	ldd	r22, Y+25	; 0x19
    344e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3450:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3452:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3454:	20 e0       	ldi	r18, 0x00	; 0
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	40 e2       	ldi	r20, 0x20	; 32
    345a:	51 e4       	ldi	r21, 0x41	; 65
    345c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3460:	dc 01       	movw	r26, r24
    3462:	cb 01       	movw	r24, r22
    3464:	bc 01       	movw	r22, r24
    3466:	cd 01       	movw	r24, r26
    3468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346c:	dc 01       	movw	r26, r24
    346e:	cb 01       	movw	r24, r22
    3470:	9c 8b       	std	Y+20, r25	; 0x14
    3472:	8b 8b       	std	Y+19, r24	; 0x13
    3474:	0f c0       	rjmp	.+30     	; 0x3494 <H_LCD_void_SendData+0x132>
    3476:	80 e9       	ldi	r24, 0x90	; 144
    3478:	91 e0       	ldi	r25, 0x01	; 1
    347a:	9a 8b       	std	Y+18, r25	; 0x12
    347c:	89 8b       	std	Y+17, r24	; 0x11
    347e:	89 89       	ldd	r24, Y+17	; 0x11
    3480:	9a 89       	ldd	r25, Y+18	; 0x12
    3482:	01 97       	sbiw	r24, 0x01	; 1
    3484:	f1 f7       	brne	.-4      	; 0x3482 <H_LCD_void_SendData+0x120>
    3486:	9a 8b       	std	Y+18, r25	; 0x12
    3488:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    348a:	8b 89       	ldd	r24, Y+19	; 0x13
    348c:	9c 89       	ldd	r25, Y+20	; 0x14
    348e:	01 97       	sbiw	r24, 0x01	; 1
    3490:	9c 8b       	std	Y+20, r25	; 0x14
    3492:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3494:	8b 89       	ldd	r24, Y+19	; 0x13
    3496:	9c 89       	ldd	r25, Y+20	; 0x14
    3498:	00 97       	sbiw	r24, 0x00	; 0
    349a:	69 f7       	brne	.-38     	; 0x3476 <H_LCD_void_SendData+0x114>
    349c:	14 c0       	rjmp	.+40     	; 0x34c6 <H_LCD_void_SendData+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    349e:	6d 89       	ldd	r22, Y+21	; 0x15
    34a0:	7e 89       	ldd	r23, Y+22	; 0x16
    34a2:	8f 89       	ldd	r24, Y+23	; 0x17
    34a4:	98 8d       	ldd	r25, Y+24	; 0x18
    34a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34aa:	dc 01       	movw	r26, r24
    34ac:	cb 01       	movw	r24, r22
    34ae:	9c 8b       	std	Y+20, r25	; 0x14
    34b0:	8b 8b       	std	Y+19, r24	; 0x13
    34b2:	8b 89       	ldd	r24, Y+19	; 0x13
    34b4:	9c 89       	ldd	r25, Y+20	; 0x14
    34b6:	98 8b       	std	Y+16, r25	; 0x10
    34b8:	8f 87       	std	Y+15, r24	; 0x0f
    34ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    34bc:	98 89       	ldd	r25, Y+16	; 0x10
    34be:	01 97       	sbiw	r24, 0x01	; 1
    34c0:	f1 f7       	brne	.-4      	; 0x34be <H_LCD_void_SendData+0x15c>
    34c2:	98 8b       	std	Y+16, r25	; 0x10
    34c4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_LOW);
    34c6:	80 e0       	ldi	r24, 0x00	; 0
    34c8:	62 e0       	ldi	r22, 0x02	; 2
    34ca:	40 e0       	ldi	r20, 0x00	; 0
    34cc:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>

	// Sending least significant nibble of command through data pins
	DIO_voidSetPinValue(LCD_4BIT_D7_PIN_PORT, LCD_4_BIT_D7_PIN, ((Copy_u8Data) >> 0)&(u8)1);
    34d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34d2:	98 2f       	mov	r25, r24
    34d4:	91 70       	andi	r25, 0x01	; 1
    34d6:	81 e0       	ldi	r24, 0x01	; 1
    34d8:	60 e0       	ldi	r22, 0x00	; 0
    34da:	49 2f       	mov	r20, r25
    34dc:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D6_PIN_PORT, LCD_4_BIT_D6_PIN, ((Copy_u8Data) >> 1)&(u8)1);
    34e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34e2:	86 95       	lsr	r24
    34e4:	98 2f       	mov	r25, r24
    34e6:	91 70       	andi	r25, 0x01	; 1
    34e8:	81 e0       	ldi	r24, 0x01	; 1
    34ea:	61 e0       	ldi	r22, 0x01	; 1
    34ec:	49 2f       	mov	r20, r25
    34ee:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D5_PIN_PORT, LCD_4_BIT_D5_PIN, ((Copy_u8Data) >> 2)&(u8)1);
    34f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34f4:	86 95       	lsr	r24
    34f6:	86 95       	lsr	r24
    34f8:	98 2f       	mov	r25, r24
    34fa:	91 70       	andi	r25, 0x01	; 1
    34fc:	81 e0       	ldi	r24, 0x01	; 1
    34fe:	62 e0       	ldi	r22, 0x02	; 2
    3500:	49 2f       	mov	r20, r25
    3502:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_4BIT_D4_PIN_PORT, LCD_4_BIT_D4_PIN, ((Copy_u8Data) >> 3)&(u8)1);
    3506:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3508:	86 95       	lsr	r24
    350a:	86 95       	lsr	r24
    350c:	86 95       	lsr	r24
    350e:	98 2f       	mov	r25, r24
    3510:	91 70       	andi	r25, 0x01	; 1
    3512:	81 e0       	ldi	r24, 0x01	; 1
    3514:	64 e0       	ldi	r22, 0x04	; 4
    3516:	49 2f       	mov	r20, r25
    3518:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>

	// send enable signal
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_HIGH);
    351c:	80 e0       	ldi	r24, 0x00	; 0
    351e:	62 e0       	ldi	r22, 0x02	; 2
    3520:	41 e0       	ldi	r20, 0x01	; 1
    3522:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
    3526:	80 e0       	ldi	r24, 0x00	; 0
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	a0 ea       	ldi	r26, 0xA0	; 160
    352c:	b0 e4       	ldi	r27, 0x40	; 64
    352e:	8b 87       	std	Y+11, r24	; 0x0b
    3530:	9c 87       	std	Y+12, r25	; 0x0c
    3532:	ad 87       	std	Y+13, r26	; 0x0d
    3534:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3536:	6b 85       	ldd	r22, Y+11	; 0x0b
    3538:	7c 85       	ldd	r23, Y+12	; 0x0c
    353a:	8d 85       	ldd	r24, Y+13	; 0x0d
    353c:	9e 85       	ldd	r25, Y+14	; 0x0e
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	4a e7       	ldi	r20, 0x7A	; 122
    3544:	55 e4       	ldi	r21, 0x45	; 69
    3546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    354a:	dc 01       	movw	r26, r24
    354c:	cb 01       	movw	r24, r22
    354e:	8f 83       	std	Y+7, r24	; 0x07
    3550:	98 87       	std	Y+8, r25	; 0x08
    3552:	a9 87       	std	Y+9, r26	; 0x09
    3554:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3556:	6f 81       	ldd	r22, Y+7	; 0x07
    3558:	78 85       	ldd	r23, Y+8	; 0x08
    355a:	89 85       	ldd	r24, Y+9	; 0x09
    355c:	9a 85       	ldd	r25, Y+10	; 0x0a
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	40 e8       	ldi	r20, 0x80	; 128
    3564:	5f e3       	ldi	r21, 0x3F	; 63
    3566:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    356a:	88 23       	and	r24, r24
    356c:	2c f4       	brge	.+10     	; 0x3578 <H_LCD_void_SendData+0x216>
		__ticks = 1;
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	9e 83       	std	Y+6, r25	; 0x06
    3574:	8d 83       	std	Y+5, r24	; 0x05
    3576:	3f c0       	rjmp	.+126    	; 0x35f6 <H_LCD_void_SendData+0x294>
	else if (__tmp > 65535)
    3578:	6f 81       	ldd	r22, Y+7	; 0x07
    357a:	78 85       	ldd	r23, Y+8	; 0x08
    357c:	89 85       	ldd	r24, Y+9	; 0x09
    357e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3580:	20 e0       	ldi	r18, 0x00	; 0
    3582:	3f ef       	ldi	r19, 0xFF	; 255
    3584:	4f e7       	ldi	r20, 0x7F	; 127
    3586:	57 e4       	ldi	r21, 0x47	; 71
    3588:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    358c:	18 16       	cp	r1, r24
    358e:	4c f5       	brge	.+82     	; 0x35e2 <H_LCD_void_SendData+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3590:	6b 85       	ldd	r22, Y+11	; 0x0b
    3592:	7c 85       	ldd	r23, Y+12	; 0x0c
    3594:	8d 85       	ldd	r24, Y+13	; 0x0d
    3596:	9e 85       	ldd	r25, Y+14	; 0x0e
    3598:	20 e0       	ldi	r18, 0x00	; 0
    359a:	30 e0       	ldi	r19, 0x00	; 0
    359c:	40 e2       	ldi	r20, 0x20	; 32
    359e:	51 e4       	ldi	r21, 0x41	; 65
    35a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35a4:	dc 01       	movw	r26, r24
    35a6:	cb 01       	movw	r24, r22
    35a8:	bc 01       	movw	r22, r24
    35aa:	cd 01       	movw	r24, r26
    35ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b0:	dc 01       	movw	r26, r24
    35b2:	cb 01       	movw	r24, r22
    35b4:	9e 83       	std	Y+6, r25	; 0x06
    35b6:	8d 83       	std	Y+5, r24	; 0x05
    35b8:	0f c0       	rjmp	.+30     	; 0x35d8 <H_LCD_void_SendData+0x276>
    35ba:	80 e9       	ldi	r24, 0x90	; 144
    35bc:	91 e0       	ldi	r25, 0x01	; 1
    35be:	9c 83       	std	Y+4, r25	; 0x04
    35c0:	8b 83       	std	Y+3, r24	; 0x03
    35c2:	8b 81       	ldd	r24, Y+3	; 0x03
    35c4:	9c 81       	ldd	r25, Y+4	; 0x04
    35c6:	01 97       	sbiw	r24, 0x01	; 1
    35c8:	f1 f7       	brne	.-4      	; 0x35c6 <H_LCD_void_SendData+0x264>
    35ca:	9c 83       	std	Y+4, r25	; 0x04
    35cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ce:	8d 81       	ldd	r24, Y+5	; 0x05
    35d0:	9e 81       	ldd	r25, Y+6	; 0x06
    35d2:	01 97       	sbiw	r24, 0x01	; 1
    35d4:	9e 83       	std	Y+6, r25	; 0x06
    35d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35d8:	8d 81       	ldd	r24, Y+5	; 0x05
    35da:	9e 81       	ldd	r25, Y+6	; 0x06
    35dc:	00 97       	sbiw	r24, 0x00	; 0
    35de:	69 f7       	brne	.-38     	; 0x35ba <H_LCD_void_SendData+0x258>
    35e0:	14 c0       	rjmp	.+40     	; 0x360a <H_LCD_void_SendData+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35e2:	6f 81       	ldd	r22, Y+7	; 0x07
    35e4:	78 85       	ldd	r23, Y+8	; 0x08
    35e6:	89 85       	ldd	r24, Y+9	; 0x09
    35e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ee:	dc 01       	movw	r26, r24
    35f0:	cb 01       	movw	r24, r22
    35f2:	9e 83       	std	Y+6, r25	; 0x06
    35f4:	8d 83       	std	Y+5, r24	; 0x05
    35f6:	8d 81       	ldd	r24, Y+5	; 0x05
    35f8:	9e 81       	ldd	r25, Y+6	; 0x06
    35fa:	9a 83       	std	Y+2, r25	; 0x02
    35fc:	89 83       	std	Y+1, r24	; 0x01
    35fe:	89 81       	ldd	r24, Y+1	; 0x01
    3600:	9a 81       	ldd	r25, Y+2	; 0x02
    3602:	01 97       	sbiw	r24, 0x01	; 1
    3604:	f1 f7       	brne	.-4      	; 0x3602 <H_LCD_void_SendData+0x2a0>
    3606:	9a 83       	std	Y+2, r25	; 0x02
    3608:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_voidSetPinValue(LCD_4BIT_EN_PIN_PORT, LCD_4BIT_EN_PIN, GPIO_LOW);
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	62 e0       	ldi	r22, 0x02	; 2
    360e:	40 e0       	ldi	r20, 0x00	; 0
    3610:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>

#elif LCD_MODE_SELECT == LCD_8_BIT_MODE_SELECT  // 8bits configurations


#endif
}
    3614:	6d 96       	adiw	r28, 0x1d	; 29
    3616:	0f b6       	in	r0, 0x3f	; 63
    3618:	f8 94       	cli
    361a:	de bf       	out	0x3e, r29	; 62
    361c:	0f be       	out	0x3f, r0	; 63
    361e:	cd bf       	out	0x3d, r28	; 61
    3620:	cf 91       	pop	r28
    3622:	df 91       	pop	r29
    3624:	08 95       	ret

00003626 <H_LCD_void_SendString>:
void H_LCD_void_SendString(u8 *Copy_u8Str)
{
    3626:	df 93       	push	r29
    3628:	cf 93       	push	r28
    362a:	00 d0       	rcall	.+0      	; 0x362c <H_LCD_void_SendString+0x6>
    362c:	cd b7       	in	r28, 0x3d	; 61
    362e:	de b7       	in	r29, 0x3e	; 62
    3630:	9a 83       	std	Y+2, r25	; 0x02
    3632:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Copy_u8Str)
    3634:	89 81       	ldd	r24, Y+1	; 0x01
    3636:	9a 81       	ldd	r25, Y+2	; 0x02
    3638:	00 97       	sbiw	r24, 0x00	; 0
    363a:	89 f0       	breq	.+34     	; 0x365e <H_LCD_void_SendString+0x38>
    363c:	0b c0       	rjmp	.+22     	; 0x3654 <H_LCD_void_SendString+0x2e>
	}
	else
	{
		while(*Copy_u8Str)
		{
			H_LCD_void_SendData(*Copy_u8Str++);
    363e:	e9 81       	ldd	r30, Y+1	; 0x01
    3640:	fa 81       	ldd	r31, Y+2	; 0x02
    3642:	20 81       	ld	r18, Z
    3644:	89 81       	ldd	r24, Y+1	; 0x01
    3646:	9a 81       	ldd	r25, Y+2	; 0x02
    3648:	01 96       	adiw	r24, 0x01	; 1
    364a:	9a 83       	std	Y+2, r25	; 0x02
    364c:	89 83       	std	Y+1, r24	; 0x01
    364e:	82 2f       	mov	r24, r18
    3650:	0e 94 b1 19 	call	0x3362	; 0x3362 <H_LCD_void_SendData>
	{
		/* Nothing */
	}
	else
	{
		while(*Copy_u8Str)
    3654:	e9 81       	ldd	r30, Y+1	; 0x01
    3656:	fa 81       	ldd	r31, Y+2	; 0x02
    3658:	80 81       	ld	r24, Z
    365a:	88 23       	and	r24, r24
    365c:	81 f7       	brne	.-32     	; 0x363e <H_LCD_void_SendString+0x18>
		{
			H_LCD_void_SendData(*Copy_u8Str++);
		}
	}
}
    365e:	0f 90       	pop	r0
    3660:	0f 90       	pop	r0
    3662:	cf 91       	pop	r28
    3664:	df 91       	pop	r29
    3666:	08 95       	ret

00003668 <H_LCD_void_gotoXY>:
void H_LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    3668:	df 93       	push	r29
    366a:	cf 93       	push	r28
    366c:	00 d0       	rcall	.+0      	; 0x366e <H_LCD_void_gotoXY+0x6>
    366e:	00 d0       	rcall	.+0      	; 0x3670 <H_LCD_void_gotoXY+0x8>
    3670:	cd b7       	in	r28, 0x3d	; 61
    3672:	de b7       	in	r29, 0x3e	; 62
    3674:	89 83       	std	Y+1, r24	; 0x01
    3676:	6a 83       	std	Y+2, r22	; 0x02
	copy_u8Col--;
    3678:	8a 81       	ldd	r24, Y+2	; 0x02
    367a:	81 50       	subi	r24, 0x01	; 1
    367c:	8a 83       	std	Y+2, r24	; 0x02
	switch(copy_u8Row){
    367e:	89 81       	ldd	r24, Y+1	; 0x01
    3680:	28 2f       	mov	r18, r24
    3682:	30 e0       	ldi	r19, 0x00	; 0
    3684:	3c 83       	std	Y+4, r19	; 0x04
    3686:	2b 83       	std	Y+3, r18	; 0x03
    3688:	8b 81       	ldd	r24, Y+3	; 0x03
    368a:	9c 81       	ldd	r25, Y+4	; 0x04
    368c:	82 30       	cpi	r24, 0x02	; 2
    368e:	91 05       	cpc	r25, r1
    3690:	d9 f0       	breq	.+54     	; 0x36c8 <H_LCD_void_gotoXY+0x60>
    3692:	2b 81       	ldd	r18, Y+3	; 0x03
    3694:	3c 81       	ldd	r19, Y+4	; 0x04
    3696:	23 30       	cpi	r18, 0x03	; 3
    3698:	31 05       	cpc	r19, r1
    369a:	34 f4       	brge	.+12     	; 0x36a8 <H_LCD_void_gotoXY+0x40>
    369c:	8b 81       	ldd	r24, Y+3	; 0x03
    369e:	9c 81       	ldd	r25, Y+4	; 0x04
    36a0:	81 30       	cpi	r24, 0x01	; 1
    36a2:	91 05       	cpc	r25, r1
    36a4:	61 f0       	breq	.+24     	; 0x36be <H_LCD_void_gotoXY+0x56>
    36a6:	1e c0       	rjmp	.+60     	; 0x36e4 <H_LCD_void_gotoXY+0x7c>
    36a8:	2b 81       	ldd	r18, Y+3	; 0x03
    36aa:	3c 81       	ldd	r19, Y+4	; 0x04
    36ac:	23 30       	cpi	r18, 0x03	; 3
    36ae:	31 05       	cpc	r19, r1
    36b0:	81 f0       	breq	.+32     	; 0x36d2 <H_LCD_void_gotoXY+0x6a>
    36b2:	8b 81       	ldd	r24, Y+3	; 0x03
    36b4:	9c 81       	ldd	r25, Y+4	; 0x04
    36b6:	84 30       	cpi	r24, 0x04	; 4
    36b8:	91 05       	cpc	r25, r1
    36ba:	81 f0       	breq	.+32     	; 0x36dc <H_LCD_void_gotoXY+0x74>
    36bc:	13 c0       	rjmp	.+38     	; 0x36e4 <H_LCD_void_gotoXY+0x7c>
	case ROW1:
		H_LCD_void_SendCommand(0x80 + copy_u8Col);
    36be:	8a 81       	ldd	r24, Y+2	; 0x02
    36c0:	80 58       	subi	r24, 0x80	; 128
    36c2:	0e 94 4f 18 	call	0x309e	; 0x309e <H_LCD_void_SendCommand>
    36c6:	0e c0       	rjmp	.+28     	; 0x36e4 <H_LCD_void_gotoXY+0x7c>
		break;
	case ROW2:
		H_LCD_void_SendCommand(0xc0 + copy_u8Col);
    36c8:	8a 81       	ldd	r24, Y+2	; 0x02
    36ca:	80 54       	subi	r24, 0x40	; 64
    36cc:	0e 94 4f 18 	call	0x309e	; 0x309e <H_LCD_void_SendCommand>
    36d0:	09 c0       	rjmp	.+18     	; 0x36e4 <H_LCD_void_gotoXY+0x7c>
		break;
	case ROW3:
		H_LCD_void_SendCommand(0x94 + copy_u8Col);
    36d2:	8a 81       	ldd	r24, Y+2	; 0x02
    36d4:	8c 56       	subi	r24, 0x6C	; 108
    36d6:	0e 94 4f 18 	call	0x309e	; 0x309e <H_LCD_void_SendCommand>
    36da:	04 c0       	rjmp	.+8      	; 0x36e4 <H_LCD_void_gotoXY+0x7c>
		break;
	case ROW4:
		H_LCD_void_SendCommand(0xd4 + copy_u8Col);
    36dc:	8a 81       	ldd	r24, Y+2	; 0x02
    36de:	8c 52       	subi	r24, 0x2C	; 44
    36e0:	0e 94 4f 18 	call	0x309e	; 0x309e <H_LCD_void_SendCommand>
		break;
	default:

		break;
	}
}
    36e4:	0f 90       	pop	r0
    36e6:	0f 90       	pop	r0
    36e8:	0f 90       	pop	r0
    36ea:	0f 90       	pop	r0
    36ec:	cf 91       	pop	r28
    36ee:	df 91       	pop	r29
    36f0:	08 95       	ret

000036f2 <H_LCD_void_sendIntNum>:



void H_LCD_void_sendIntNum(u32 copy_s32Num)
{
    36f2:	df 93       	push	r29
    36f4:	cf 93       	push	r28
    36f6:	cd b7       	in	r28, 0x3d	; 61
    36f8:	de b7       	in	r29, 0x3e	; 62
    36fa:	2f 97       	sbiw	r28, 0x0f	; 15
    36fc:	0f b6       	in	r0, 0x3f	; 63
    36fe:	f8 94       	cli
    3700:	de bf       	out	0x3e, r29	; 62
    3702:	0f be       	out	0x3f, r0	; 63
    3704:	cd bf       	out	0x3d, r28	; 61
    3706:	6c 87       	std	Y+12, r22	; 0x0c
    3708:	7d 87       	std	Y+13, r23	; 0x0d
    370a:	8e 87       	std	Y+14, r24	; 0x0e
    370c:	9f 87       	std	Y+15, r25	; 0x0f
//	temp_str[num_of_digits] = '\0';
//	sprintf((u8 *)temp_str, "%i", copy_s32Num);
//	H_LCD_void_SendString(temp_str);

	char buffer[11];  // A 32-bit number, maximum 10 digits
	itoa(copy_s32Num, buffer, 10);  // Convert the number to a string
    370e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3710:	9d 85       	ldd	r25, Y+13	; 0x0d
    3712:	9e 01       	movw	r18, r28
    3714:	2f 5f       	subi	r18, 0xFF	; 255
    3716:	3f 4f       	sbci	r19, 0xFF	; 255
    3718:	b9 01       	movw	r22, r18
    371a:	4a e0       	ldi	r20, 0x0A	; 10
    371c:	50 e0       	ldi	r21, 0x00	; 0
    371e:	0e 94 82 3d 	call	0x7b04	; 0x7b04 <itoa>
	H_LCD_void_SendString(buffer);
    3722:	ce 01       	movw	r24, r28
    3724:	01 96       	adiw	r24, 0x01	; 1
    3726:	0e 94 13 1b 	call	0x3626	; 0x3626 <H_LCD_void_SendString>
}
    372a:	2f 96       	adiw	r28, 0x0f	; 15
    372c:	0f b6       	in	r0, 0x3f	; 63
    372e:	f8 94       	cli
    3730:	de bf       	out	0x3e, r29	; 62
    3732:	0f be       	out	0x3f, r0	; 63
    3734:	cd bf       	out	0x3d, r28	; 61
    3736:	cf 91       	pop	r28
    3738:	df 91       	pop	r29
    373a:	08 95       	ret

0000373c <H_LCD_void_Clear_Display>:



void H_LCD_void_Clear_Display(void)
{
    373c:	df 93       	push	r29
    373e:	cf 93       	push	r28
    3740:	cd b7       	in	r28, 0x3d	; 61
    3742:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_SendCommand(LCD_CLEAR);
    3744:	81 e0       	ldi	r24, 0x01	; 1
    3746:	0e 94 4f 18 	call	0x309e	; 0x309e <H_LCD_void_SendCommand>
}
    374a:	cf 91       	pop	r28
    374c:	df 91       	pop	r29
    374e:	08 95       	ret

00003750 <H_LCD_void_creatCustomChar>:



void H_LCD_void_creatCustomChar(const u8 * ArrPattern,u8 copy_u8charCode)
{
    3750:	df 93       	push	r29
    3752:	cf 93       	push	r28
    3754:	00 d0       	rcall	.+0      	; 0x3756 <H_LCD_void_creatCustomChar+0x6>
    3756:	00 d0       	rcall	.+0      	; 0x3758 <H_LCD_void_creatCustomChar+0x8>
    3758:	cd b7       	in	r28, 0x3d	; 61
    375a:	de b7       	in	r29, 0x3e	; 62
    375c:	9b 83       	std	Y+3, r25	; 0x03
    375e:	8a 83       	std	Y+2, r24	; 0x02
    3760:	6c 83       	std	Y+4, r22	; 0x04
	u8 lcd_counter = 0;
    3762:	19 82       	std	Y+1, r1	; 0x01
	if(NULL != ArrPattern)
    3764:	8a 81       	ldd	r24, Y+2	; 0x02
    3766:	9b 81       	ldd	r25, Y+3	; 0x03
    3768:	00 97       	sbiw	r24, 0x00	; 0
    376a:	b1 f0       	breq	.+44     	; 0x3798 <H_LCD_void_creatCustomChar+0x48>
	{
		H_LCD_void_SendCommand(LCD_CGRAM_START);
    376c:	80 e4       	ldi	r24, 0x40	; 64
    376e:	0e 94 4f 18 	call	0x309e	; 0x309e <H_LCD_void_SendCommand>
		for(lcd_counter = 0; lcd_counter <= 7; ++lcd_counter)
    3772:	19 82       	std	Y+1, r1	; 0x01
    3774:	0e c0       	rjmp	.+28     	; 0x3792 <H_LCD_void_creatCustomChar+0x42>
		{
			H_LCD_void_SendData(ArrPattern[lcd_counter]);
    3776:	89 81       	ldd	r24, Y+1	; 0x01
    3778:	28 2f       	mov	r18, r24
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	8a 81       	ldd	r24, Y+2	; 0x02
    377e:	9b 81       	ldd	r25, Y+3	; 0x03
    3780:	fc 01       	movw	r30, r24
    3782:	e2 0f       	add	r30, r18
    3784:	f3 1f       	adc	r31, r19
    3786:	80 81       	ld	r24, Z
    3788:	0e 94 b1 19 	call	0x3362	; 0x3362 <H_LCD_void_SendData>
{
	u8 lcd_counter = 0;
	if(NULL != ArrPattern)
	{
		H_LCD_void_SendCommand(LCD_CGRAM_START);
		for(lcd_counter = 0; lcd_counter <= 7; ++lcd_counter)
    378c:	89 81       	ldd	r24, Y+1	; 0x01
    378e:	8f 5f       	subi	r24, 0xFF	; 255
    3790:	89 83       	std	Y+1, r24	; 0x01
    3792:	89 81       	ldd	r24, Y+1	; 0x01
    3794:	88 30       	cpi	r24, 0x08	; 8
    3796:	78 f3       	brcs	.-34     	; 0x3776 <H_LCD_void_creatCustomChar+0x26>
		{
			H_LCD_void_SendData(ArrPattern[lcd_counter]);
		}
	}
	else{/* Nothing */}
}
    3798:	0f 90       	pop	r0
    379a:	0f 90       	pop	r0
    379c:	0f 90       	pop	r0
    379e:	0f 90       	pop	r0
    37a0:	cf 91       	pop	r28
    37a2:	df 91       	pop	r29
    37a4:	08 95       	ret

000037a6 <H_LCD_void_displayCustomChar>:

void H_LCD_void_displayCustomChar(u8 copy_u8charCode)
{
    37a6:	df 93       	push	r29
    37a8:	cf 93       	push	r28
    37aa:	0f 92       	push	r0
    37ac:	cd b7       	in	r28, 0x3d	; 61
    37ae:	de b7       	in	r29, 0x3e	; 62
    37b0:	89 83       	std	Y+1, r24	; 0x01
	H_LCD_void_SendData(copy_u8charCode);
    37b2:	89 81       	ldd	r24, Y+1	; 0x01
    37b4:	0e 94 b1 19 	call	0x3362	; 0x3362 <H_LCD_void_SendData>
}
    37b8:	0f 90       	pop	r0
    37ba:	cf 91       	pop	r28
    37bc:	df 91       	pop	r29
    37be:	08 95       	ret

000037c0 <Timer1_ovf_isr>:



/* ------------------------------ Timer1 Overflow ISR ------------------------- */
void Timer1_ovf_isr(void)
{
    37c0:	df 93       	push	r29
    37c2:	cf 93       	push	r28
    37c4:	cd b7       	in	r28, 0x3d	; 61
    37c6:	de b7       	in	r29, 0x3e	; 62
	ovf_counter++;
    37c8:	80 91 f5 02 	lds	r24, 0x02F5
    37cc:	90 91 f6 02 	lds	r25, 0x02F6
    37d0:	a0 91 f7 02 	lds	r26, 0x02F7
    37d4:	b0 91 f8 02 	lds	r27, 0x02F8
    37d8:	01 96       	adiw	r24, 0x01	; 1
    37da:	a1 1d       	adc	r26, r1
    37dc:	b1 1d       	adc	r27, r1
    37de:	80 93 f5 02 	sts	0x02F5, r24
    37e2:	90 93 f6 02 	sts	0x02F6, r25
    37e6:	a0 93 f7 02 	sts	0x02F7, r26
    37ea:	b0 93 f8 02 	sts	0x02F8, r27
}
    37ee:	cf 91       	pop	r28
    37f0:	df 91       	pop	r29
    37f2:	08 95       	ret

000037f4 <Timer1_icu_isr>:
/* ---------------------------------------------------------------------------- */


/* ------------------------------ ICU ISR ------------------------------------- */
void Timer1_icu_isr(void)
{
    37f4:	df 93       	push	r29
    37f6:	cf 93       	push	r28
    37f8:	0f 92       	push	r0
    37fa:	cd b7       	in	r28, 0x3d	; 61
    37fc:	de b7       	in	r29, 0x3e	; 62
	Error_Status_t ret_status = NO_ERROR;
    37fe:	19 82       	std	Y+1, r1	; 0x01
	if(state_machine_counter == 0) // to detect rising edge
    3800:	80 91 fd 02 	lds	r24, 0x02FD
    3804:	88 23       	and	r24, r24
    3806:	91 f4       	brne	.+36     	; 0x382c <Timer1_icu_isr+0x38>
	{
		ret_status = Timer1_ICU_takeReading(&reading_1); // take value of current TCNT1 register
    3808:	8e ef       	ldi	r24, 0xFE	; 254
    380a:	92 e0       	ldi	r25, 0x02	; 2
    380c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <Timer1_ICU_takeReading>
    3810:	89 83       	std	Y+1, r24	; 0x01

		ret_status = Timer1_ICU_SetTrigger(TIMER1_INPUT_CAPTURE_FALLING_EDGE);
    3812:	80 e0       	ldi	r24, 0x00	; 0
    3814:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer1_ICU_SetTrigger>
    3818:	89 83       	std	Y+1, r24	; 0x01

		ovf_counter = 0;
    381a:	10 92 f5 02 	sts	0x02F5, r1
    381e:	10 92 f6 02 	sts	0x02F6, r1
    3822:	10 92 f7 02 	sts	0x02F7, r1
    3826:	10 92 f8 02 	sts	0x02F8, r1
    382a:	1f c0       	rjmp	.+62     	; 0x386a <Timer1_icu_isr+0x76>
	}
	else if(state_machine_counter == 1) // to detect falling edge
    382c:	80 91 fd 02 	lds	r24, 0x02FD
    3830:	81 30       	cpi	r24, 0x01	; 1
    3832:	d9 f4       	brne	.+54     	; 0x386a <Timer1_icu_isr+0x76>
	{
		ret_status = Timer1_ICU_takeReading(&reading_2); // take value of current TCNT1 register
    3834:	82 e0       	ldi	r24, 0x02	; 2
    3836:	93 e0       	ldi	r25, 0x03	; 3
    3838:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <Timer1_ICU_takeReading>
    383c:	89 83       	std	Y+1, r24	; 0x01
		ovf = ovf_counter;
    383e:	80 91 f5 02 	lds	r24, 0x02F5
    3842:	90 91 f6 02 	lds	r25, 0x02F6
    3846:	a0 91 f7 02 	lds	r26, 0x02F7
    384a:	b0 91 f8 02 	lds	r27, 0x02F8
    384e:	80 93 f9 02 	sts	0x02F9, r24
    3852:	90 93 fa 02 	sts	0x02FA, r25
    3856:	a0 93 fb 02 	sts	0x02FB, r26
    385a:	b0 93 fc 02 	sts	0x02FC, r27
		ret_status = Timer1_OVF_IntDisable();
    385e:	0e 94 be 08 	call	0x117c	; 0x117c <Timer1_OVF_IntDisable>
    3862:	89 83       	std	Y+1, r24	; 0x01
		ret_status = Timer1_ICU_IntDisable();
    3864:	0e 94 ee 08 	call	0x11dc	; 0x11dc <Timer1_ICU_IntDisable>
    3868:	89 83       	std	Y+1, r24	; 0x01
	}
	state_machine_counter++;
    386a:	80 91 fd 02 	lds	r24, 0x02FD
    386e:	8f 5f       	subi	r24, 0xFF	; 255
    3870:	80 93 fd 02 	sts	0x02FD, r24
}
    3874:	0f 90       	pop	r0
    3876:	cf 91       	pop	r28
    3878:	df 91       	pop	r29
    387a:	08 95       	ret

0000387c <Ultrasonic_Init>:
/* ---------------------------------------------------------------------------- */



void Ultrasonic_Init(u8 Trig_Pin_Port, u8 Trig_Pin_PinNum, u8 Echo_Pin_Port, u8 Echo_Pin_Num)
{
    387c:	df 93       	push	r29
    387e:	cf 93       	push	r28
    3880:	cd b7       	in	r28, 0x3d	; 61
    3882:	de b7       	in	r29, 0x3e	; 62
    3884:	64 97       	sbiw	r28, 0x14	; 20
    3886:	0f b6       	in	r0, 0x3f	; 63
    3888:	f8 94       	cli
    388a:	de bf       	out	0x3e, r29	; 62
    388c:	0f be       	out	0x3f, r0	; 63
    388e:	cd bf       	out	0x3d, r28	; 61
    3890:	8c 87       	std	Y+12, r24	; 0x0c
    3892:	6d 87       	std	Y+13, r22	; 0x0d
    3894:	4e 87       	std	Y+14, r20	; 0x0e
    3896:	2f 87       	std	Y+15, r18	; 0x0f
	Error_Status_t ret_status = NO_ERROR;
    3898:	19 82       	std	Y+1, r1	; 0x01

	/* ---------------------------- Initialize Echo pin and Trig pin directions --------*/
	DIO_voidSetPinDirection(Trig_Pin_Port, Trig_Pin_PinNum, GPIO_DIRECTION_OUTPUT); // TRIG pin
    389a:	8c 85       	ldd	r24, Y+12	; 0x0c
    389c:	6d 85       	ldd	r22, Y+13	; 0x0d
    389e:	41 e0       	ldi	r20, 0x01	; 1
    38a0:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(Echo_Pin_Port, Echo_Pin_Num, GPIO_DIRECTION_INPUT);  // ICU pin (ECHO pin)
    38a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    38a6:	6f 85       	ldd	r22, Y+15	; 0x0f
    38a8:	40 e0       	ldi	r20, 0x00	; 0
    38aa:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <DIO_voidSetPinDirection>
			.ctc_mode_B_cfg = TIMER1_NON_PWM_NORMAL_PORT,
			.icu_trigger = TIMER1_INPUT_CAPTURE_RISING_EDGE, // Trigger On rising edge
			.timer1_ovf_isr = Timer1_ovf_isr, // Set CallBack for Timer1 overflow
			.timer1_capt_isr = Timer1_icu_isr, // Set CallBack for ICU of Timer1
			.timer1_compA_isr = NULL,
			.timer1_compB_isr = NULL};
    38ae:	ce 01       	movw	r24, r28
    38b0:	02 96       	adiw	r24, 0x02	; 2
    38b2:	99 8b       	std	Y+17, r25	; 0x11
    38b4:	88 8b       	std	Y+16, r24	; 0x10
    38b6:	e1 ee       	ldi	r30, 0xE1	; 225
    38b8:	f1 e0       	ldi	r31, 0x01	; 1
    38ba:	fb 8b       	std	Y+19, r31	; 0x13
    38bc:	ea 8b       	std	Y+18, r30	; 0x12
    38be:	fa e0       	ldi	r31, 0x0A	; 10
    38c0:	fc 8b       	std	Y+20, r31	; 0x14
    38c2:	ea 89       	ldd	r30, Y+18	; 0x12
    38c4:	fb 89       	ldd	r31, Y+19	; 0x13
    38c6:	00 80       	ld	r0, Z
    38c8:	8a 89       	ldd	r24, Y+18	; 0x12
    38ca:	9b 89       	ldd	r25, Y+19	; 0x13
    38cc:	01 96       	adiw	r24, 0x01	; 1
    38ce:	9b 8b       	std	Y+19, r25	; 0x13
    38d0:	8a 8b       	std	Y+18, r24	; 0x12
    38d2:	e8 89       	ldd	r30, Y+16	; 0x10
    38d4:	f9 89       	ldd	r31, Y+17	; 0x11
    38d6:	00 82       	st	Z, r0
    38d8:	88 89       	ldd	r24, Y+16	; 0x10
    38da:	99 89       	ldd	r25, Y+17	; 0x11
    38dc:	01 96       	adiw	r24, 0x01	; 1
    38de:	99 8b       	std	Y+17, r25	; 0x11
    38e0:	88 8b       	std	Y+16, r24	; 0x10
    38e2:	9c 89       	ldd	r25, Y+20	; 0x14
    38e4:	91 50       	subi	r25, 0x01	; 1
    38e6:	9c 8b       	std	Y+20, r25	; 0x14
    38e8:	ec 89       	ldd	r30, Y+20	; 0x14
    38ea:	ee 23       	and	r30, r30
    38ec:	51 f7       	brne	.-44     	; 0x38c2 <Ultrasonic_Init+0x46>

	/* ---------------------------------- Initialize Timer1 ----------------------------- */
	ret_status = Timer1_Init(&timer1_obj);
    38ee:	ce 01       	movw	r24, r28
    38f0:	02 96       	adiw	r24, 0x02	; 2
    38f2:	0e 94 17 07 	call	0xe2e	; 0xe2e <Timer1_Init>
    38f6:	89 83       	std	Y+1, r24	; 0x01

	/* ---------------------------------- Enable Overflow Interrupt of Timer1 ----------- */
	ret_status = Timer1_OVF_IntEnable();
    38f8:	0e 94 7e 08 	call	0x10fc	; 0x10fc <Timer1_OVF_IntEnable>
    38fc:	89 83       	std	Y+1, r24	; 0x01
	/* ---------------------------------- Enable ICU Interrupt of Timer1 ---------------- */
	ret_status = Timer1_ICU_IntEnable();
    38fe:	0e 94 ae 08 	call	0x115c	; 0x115c <Timer1_ICU_IntEnable>
    3902:	89 83       	std	Y+1, r24	; 0x01

	/* ----------------------------------- Global Interrupt Enable ---------------------- */
	GIE_Enable();
    3904:	ef e5       	ldi	r30, 0x5F	; 95
    3906:	f0 e0       	ldi	r31, 0x00	; 0
    3908:	80 81       	ld	r24, Z
    390a:	80 68       	ori	r24, 0x80	; 128
    390c:	80 83       	st	Z, r24

	/* ---------------------------------- Set CallBacks --------------------------------- */
	ret_status = Timer1_OVF_setCallBack(&timer1_obj);
    390e:	ce 01       	movw	r24, r28
    3910:	02 96       	adiw	r24, 0x02	; 2
    3912:	0e 94 fe 08 	call	0x11fc	; 0x11fc <Timer1_OVF_setCallBack>
    3916:	89 83       	std	Y+1, r24	; 0x01
	ret_status = Timer1_ICU_setCallBack(&timer1_obj);
    3918:	ce 01       	movw	r24, r28
    391a:	02 96       	adiw	r24, 0x02	; 2
    391c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <Timer1_ICU_setCallBack>
    3920:	89 83       	std	Y+1, r24	; 0x01

	/* ---------------------------------- Start Timer1 ---------------------------------- */
	ret_status = Timer1_start(&timer1_obj);
    3922:	ce 01       	movw	r24, r28
    3924:	02 96       	adiw	r24, 0x02	; 2
    3926:	0e 94 df 07 	call	0xfbe	; 0xfbe <Timer1_start>
    392a:	89 83       	std	Y+1, r24	; 0x01
}
    392c:	64 96       	adiw	r28, 0x14	; 20
    392e:	0f b6       	in	r0, 0x3f	; 63
    3930:	f8 94       	cli
    3932:	de bf       	out	0x3e, r29	; 62
    3934:	0f be       	out	0x3f, r0	; 63
    3936:	cd bf       	out	0x3d, r28	; 61
    3938:	cf 91       	pop	r28
    393a:	df 91       	pop	r29
    393c:	08 95       	ret

0000393e <Ultrasonic_SetTrigger>:



void Ultrasonic_SetTrigger(u8 Trig_Pin_Port, u8 Trig_Pin_Num)
{
    393e:	df 93       	push	r29
    3940:	cf 93       	push	r28
    3942:	cd b7       	in	r28, 0x3d	; 61
    3944:	de b7       	in	r29, 0x3e	; 62
    3946:	6a 97       	sbiw	r28, 0x1a	; 26
    3948:	0f b6       	in	r0, 0x3f	; 63
    394a:	f8 94       	cli
    394c:	de bf       	out	0x3e, r29	; 62
    394e:	0f be       	out	0x3f, r0	; 63
    3950:	cd bf       	out	0x3d, r28	; 61
    3952:	89 8f       	std	Y+25, r24	; 0x19
    3954:	6a 8f       	std	Y+26, r22	; 0x1a
	DIO_voidSetPinValue(Trig_Pin_Port, Trig_Pin_Num, GPIO_HIGH);
    3956:	89 8d       	ldd	r24, Y+25	; 0x19
    3958:	6a 8d       	ldd	r22, Y+26	; 0x1a
    395a:	41 e0       	ldi	r20, 0x01	; 1
    395c:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
    3960:	80 e0       	ldi	r24, 0x00	; 0
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	a0 e2       	ldi	r26, 0x20	; 32
    3966:	b1 e4       	ldi	r27, 0x41	; 65
    3968:	8d 8b       	std	Y+21, r24	; 0x15
    396a:	9e 8b       	std	Y+22, r25	; 0x16
    396c:	af 8b       	std	Y+23, r26	; 0x17
    396e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3970:	6d 89       	ldd	r22, Y+21	; 0x15
    3972:	7e 89       	ldd	r23, Y+22	; 0x16
    3974:	8f 89       	ldd	r24, Y+23	; 0x17
    3976:	98 8d       	ldd	r25, Y+24	; 0x18
    3978:	2b ea       	ldi	r18, 0xAB	; 171
    397a:	3a ea       	ldi	r19, 0xAA	; 170
    397c:	4a ea       	ldi	r20, 0xAA	; 170
    397e:	50 e4       	ldi	r21, 0x40	; 64
    3980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3984:	dc 01       	movw	r26, r24
    3986:	cb 01       	movw	r24, r22
    3988:	89 8b       	std	Y+17, r24	; 0x11
    398a:	9a 8b       	std	Y+18, r25	; 0x12
    398c:	ab 8b       	std	Y+19, r26	; 0x13
    398e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3990:	69 89       	ldd	r22, Y+17	; 0x11
    3992:	7a 89       	ldd	r23, Y+18	; 0x12
    3994:	8b 89       	ldd	r24, Y+19	; 0x13
    3996:	9c 89       	ldd	r25, Y+20	; 0x14
    3998:	20 e0       	ldi	r18, 0x00	; 0
    399a:	30 e0       	ldi	r19, 0x00	; 0
    399c:	40 e8       	ldi	r20, 0x80	; 128
    399e:	5f e3       	ldi	r21, 0x3F	; 63
    39a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39a4:	88 23       	and	r24, r24
    39a6:	1c f4       	brge	.+6      	; 0x39ae <Ultrasonic_SetTrigger+0x70>
		__ticks = 1;
    39a8:	81 e0       	ldi	r24, 0x01	; 1
    39aa:	88 8b       	std	Y+16, r24	; 0x10
    39ac:	91 c0       	rjmp	.+290    	; 0x3ad0 <Ultrasonic_SetTrigger+0x192>
	else if (__tmp > 255)
    39ae:	69 89       	ldd	r22, Y+17	; 0x11
    39b0:	7a 89       	ldd	r23, Y+18	; 0x12
    39b2:	8b 89       	ldd	r24, Y+19	; 0x13
    39b4:	9c 89       	ldd	r25, Y+20	; 0x14
    39b6:	20 e0       	ldi	r18, 0x00	; 0
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	4f e7       	ldi	r20, 0x7F	; 127
    39bc:	53 e4       	ldi	r21, 0x43	; 67
    39be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39c2:	18 16       	cp	r1, r24
    39c4:	0c f0       	brlt	.+2      	; 0x39c8 <Ultrasonic_SetTrigger+0x8a>
    39c6:	7b c0       	rjmp	.+246    	; 0x3abe <Ultrasonic_SetTrigger+0x180>
	{
		_delay_ms(__us / 1000.0);
    39c8:	6d 89       	ldd	r22, Y+21	; 0x15
    39ca:	7e 89       	ldd	r23, Y+22	; 0x16
    39cc:	8f 89       	ldd	r24, Y+23	; 0x17
    39ce:	98 8d       	ldd	r25, Y+24	; 0x18
    39d0:	20 e0       	ldi	r18, 0x00	; 0
    39d2:	30 e0       	ldi	r19, 0x00	; 0
    39d4:	4a e7       	ldi	r20, 0x7A	; 122
    39d6:	54 e4       	ldi	r21, 0x44	; 68
    39d8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    39dc:	dc 01       	movw	r26, r24
    39de:	cb 01       	movw	r24, r22
    39e0:	8c 87       	std	Y+12, r24	; 0x0c
    39e2:	9d 87       	std	Y+13, r25	; 0x0d
    39e4:	ae 87       	std	Y+14, r26	; 0x0e
    39e6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39e8:	6c 85       	ldd	r22, Y+12	; 0x0c
    39ea:	7d 85       	ldd	r23, Y+13	; 0x0d
    39ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    39ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	4a e7       	ldi	r20, 0x7A	; 122
    39f6:	55 e4       	ldi	r21, 0x45	; 69
    39f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39fc:	dc 01       	movw	r26, r24
    39fe:	cb 01       	movw	r24, r22
    3a00:	88 87       	std	Y+8, r24	; 0x08
    3a02:	99 87       	std	Y+9, r25	; 0x09
    3a04:	aa 87       	std	Y+10, r26	; 0x0a
    3a06:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3a08:	68 85       	ldd	r22, Y+8	; 0x08
    3a0a:	79 85       	ldd	r23, Y+9	; 0x09
    3a0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a0e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a10:	20 e0       	ldi	r18, 0x00	; 0
    3a12:	30 e0       	ldi	r19, 0x00	; 0
    3a14:	40 e8       	ldi	r20, 0x80	; 128
    3a16:	5f e3       	ldi	r21, 0x3F	; 63
    3a18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a1c:	88 23       	and	r24, r24
    3a1e:	2c f4       	brge	.+10     	; 0x3a2a <Ultrasonic_SetTrigger+0xec>
		__ticks = 1;
    3a20:	81 e0       	ldi	r24, 0x01	; 1
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	9f 83       	std	Y+7, r25	; 0x07
    3a26:	8e 83       	std	Y+6, r24	; 0x06
    3a28:	3f c0       	rjmp	.+126    	; 0x3aa8 <Ultrasonic_SetTrigger+0x16a>
	else if (__tmp > 65535)
    3a2a:	68 85       	ldd	r22, Y+8	; 0x08
    3a2c:	79 85       	ldd	r23, Y+9	; 0x09
    3a2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a30:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	3f ef       	ldi	r19, 0xFF	; 255
    3a36:	4f e7       	ldi	r20, 0x7F	; 127
    3a38:	57 e4       	ldi	r21, 0x47	; 71
    3a3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a3e:	18 16       	cp	r1, r24
    3a40:	4c f5       	brge	.+82     	; 0x3a94 <Ultrasonic_SetTrigger+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a42:	6c 85       	ldd	r22, Y+12	; 0x0c
    3a44:	7d 85       	ldd	r23, Y+13	; 0x0d
    3a46:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a48:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a4a:	20 e0       	ldi	r18, 0x00	; 0
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	40 e2       	ldi	r20, 0x20	; 32
    3a50:	51 e4       	ldi	r21, 0x41	; 65
    3a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a56:	dc 01       	movw	r26, r24
    3a58:	cb 01       	movw	r24, r22
    3a5a:	bc 01       	movw	r22, r24
    3a5c:	cd 01       	movw	r24, r26
    3a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a62:	dc 01       	movw	r26, r24
    3a64:	cb 01       	movw	r24, r22
    3a66:	9f 83       	std	Y+7, r25	; 0x07
    3a68:	8e 83       	std	Y+6, r24	; 0x06
    3a6a:	0f c0       	rjmp	.+30     	; 0x3a8a <Ultrasonic_SetTrigger+0x14c>
    3a6c:	80 e9       	ldi	r24, 0x90	; 144
    3a6e:	91 e0       	ldi	r25, 0x01	; 1
    3a70:	9d 83       	std	Y+5, r25	; 0x05
    3a72:	8c 83       	std	Y+4, r24	; 0x04
    3a74:	8c 81       	ldd	r24, Y+4	; 0x04
    3a76:	9d 81       	ldd	r25, Y+5	; 0x05
    3a78:	01 97       	sbiw	r24, 0x01	; 1
    3a7a:	f1 f7       	brne	.-4      	; 0x3a78 <Ultrasonic_SetTrigger+0x13a>
    3a7c:	9d 83       	std	Y+5, r25	; 0x05
    3a7e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a80:	8e 81       	ldd	r24, Y+6	; 0x06
    3a82:	9f 81       	ldd	r25, Y+7	; 0x07
    3a84:	01 97       	sbiw	r24, 0x01	; 1
    3a86:	9f 83       	std	Y+7, r25	; 0x07
    3a88:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a8a:	8e 81       	ldd	r24, Y+6	; 0x06
    3a8c:	9f 81       	ldd	r25, Y+7	; 0x07
    3a8e:	00 97       	sbiw	r24, 0x00	; 0
    3a90:	69 f7       	brne	.-38     	; 0x3a6c <Ultrasonic_SetTrigger+0x12e>
    3a92:	24 c0       	rjmp	.+72     	; 0x3adc <Ultrasonic_SetTrigger+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a94:	68 85       	ldd	r22, Y+8	; 0x08
    3a96:	79 85       	ldd	r23, Y+9	; 0x09
    3a98:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a9a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa0:	dc 01       	movw	r26, r24
    3aa2:	cb 01       	movw	r24, r22
    3aa4:	9f 83       	std	Y+7, r25	; 0x07
    3aa6:	8e 83       	std	Y+6, r24	; 0x06
    3aa8:	8e 81       	ldd	r24, Y+6	; 0x06
    3aaa:	9f 81       	ldd	r25, Y+7	; 0x07
    3aac:	9b 83       	std	Y+3, r25	; 0x03
    3aae:	8a 83       	std	Y+2, r24	; 0x02
    3ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ab4:	01 97       	sbiw	r24, 0x01	; 1
    3ab6:	f1 f7       	brne	.-4      	; 0x3ab4 <Ultrasonic_SetTrigger+0x176>
    3ab8:	9b 83       	std	Y+3, r25	; 0x03
    3aba:	8a 83       	std	Y+2, r24	; 0x02
    3abc:	0f c0       	rjmp	.+30     	; 0x3adc <Ultrasonic_SetTrigger+0x19e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3abe:	69 89       	ldd	r22, Y+17	; 0x11
    3ac0:	7a 89       	ldd	r23, Y+18	; 0x12
    3ac2:	8b 89       	ldd	r24, Y+19	; 0x13
    3ac4:	9c 89       	ldd	r25, Y+20	; 0x14
    3ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aca:	dc 01       	movw	r26, r24
    3acc:	cb 01       	movw	r24, r22
    3ace:	88 8b       	std	Y+16, r24	; 0x10
    3ad0:	88 89       	ldd	r24, Y+16	; 0x10
    3ad2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3ad4:	89 81       	ldd	r24, Y+1	; 0x01
    3ad6:	8a 95       	dec	r24
    3ad8:	f1 f7       	brne	.-4      	; 0x3ad6 <Ultrasonic_SetTrigger+0x198>
    3ada:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_voidSetPinValue(Trig_Pin_Port, Trig_Pin_Num, GPIO_LOW);
    3adc:	89 8d       	ldd	r24, Y+25	; 0x19
    3ade:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3ae0:	40 e0       	ldi	r20, 0x00	; 0
    3ae2:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
}
    3ae6:	6a 96       	adiw	r28, 0x1a	; 26
    3ae8:	0f b6       	in	r0, 0x3f	; 63
    3aea:	f8 94       	cli
    3aec:	de bf       	out	0x3e, r29	; 62
    3aee:	0f be       	out	0x3f, r0	; 63
    3af0:	cd bf       	out	0x3d, r28	; 61
    3af2:	cf 91       	pop	r28
    3af4:	df 91       	pop	r29
    3af6:	08 95       	ret

00003af8 <Ultrasonic_Read_Distance>:



void Ultrasonic_Read_Distance(u16 *distance)
{
    3af8:	ef 92       	push	r14
    3afa:	ff 92       	push	r15
    3afc:	0f 93       	push	r16
    3afe:	1f 93       	push	r17
    3b00:	df 93       	push	r29
    3b02:	cf 93       	push	r28
    3b04:	cd b7       	in	r28, 0x3d	; 61
    3b06:	de b7       	in	r29, 0x3e	; 62
    3b08:	65 97       	sbiw	r28, 0x15	; 21
    3b0a:	0f b6       	in	r0, 0x3f	; 63
    3b0c:	f8 94       	cli
    3b0e:	de bf       	out	0x3e, r29	; 62
    3b10:	0f be       	out	0x3f, r0	; 63
    3b12:	cd bf       	out	0x3d, r28	; 61
    3b14:	9d 8b       	std	Y+21, r25	; 0x15
    3b16:	8c 8b       	std	Y+20, r24	; 0x14
	u32 counts = 0;
    3b18:	18 8a       	std	Y+16, r1	; 0x10
    3b1a:	19 8a       	std	Y+17, r1	; 0x11
    3b1c:	1a 8a       	std	Y+18, r1	; 0x12
    3b1e:	1b 8a       	std	Y+19, r1	; 0x13
	Error_Status_t ret_status = NO_ERROR;
    3b20:	1f 86       	std	Y+15, r1	; 0x0f

	if(state_machine_counter == 2)
    3b22:	80 91 fd 02 	lds	r24, 0x02FD
    3b26:	82 30       	cpi	r24, 0x02	; 2
    3b28:	09 f0       	breq	.+2      	; 0x3b2c <Ultrasonic_Read_Distance+0x34>
    3b2a:	e6 c0       	rjmp	.+460    	; 0x3cf8 <Ultrasonic_Read_Distance+0x200>
	{
		state_machine_counter = 0;
    3b2c:	10 92 fd 02 	sts	0x02FD, r1
		counts = ((u32)reading_2 + (u32)(ovf * 65535)) - (u32)reading_1;
    3b30:	80 91 f9 02 	lds	r24, 0x02F9
    3b34:	90 91 fa 02 	lds	r25, 0x02FA
    3b38:	a0 91 fb 02 	lds	r26, 0x02FB
    3b3c:	b0 91 fc 02 	lds	r27, 0x02FC
    3b40:	2f ef       	ldi	r18, 0xFF	; 255
    3b42:	3f ef       	ldi	r19, 0xFF	; 255
    3b44:	40 e0       	ldi	r20, 0x00	; 0
    3b46:	50 e0       	ldi	r21, 0x00	; 0
    3b48:	bc 01       	movw	r22, r24
    3b4a:	cd 01       	movw	r24, r26
    3b4c:	0e 94 d7 3c 	call	0x79ae	; 0x79ae <__mulsi3>
    3b50:	9b 01       	movw	r18, r22
    3b52:	ac 01       	movw	r20, r24
    3b54:	80 91 02 03 	lds	r24, 0x0302
    3b58:	90 91 03 03 	lds	r25, 0x0303
    3b5c:	a0 91 04 03 	lds	r26, 0x0304
    3b60:	b0 91 05 03 	lds	r27, 0x0305
    3b64:	28 0f       	add	r18, r24
    3b66:	39 1f       	adc	r19, r25
    3b68:	4a 1f       	adc	r20, r26
    3b6a:	5b 1f       	adc	r21, r27
    3b6c:	80 91 fe 02 	lds	r24, 0x02FE
    3b70:	90 91 ff 02 	lds	r25, 0x02FF
    3b74:	a0 91 00 03 	lds	r26, 0x0300
    3b78:	b0 91 01 03 	lds	r27, 0x0301
    3b7c:	79 01       	movw	r14, r18
    3b7e:	8a 01       	movw	r16, r20
    3b80:	e8 1a       	sub	r14, r24
    3b82:	f9 0a       	sbc	r15, r25
    3b84:	0a 0b       	sbc	r16, r26
    3b86:	1b 0b       	sbc	r17, r27
    3b88:	d8 01       	movw	r26, r16
    3b8a:	c7 01       	movw	r24, r14
    3b8c:	88 8b       	std	Y+16, r24	; 0x10
    3b8e:	99 8b       	std	Y+17, r25	; 0x11
    3b90:	aa 8b       	std	Y+18, r26	; 0x12
    3b92:	bb 8b       	std	Y+19, r27	; 0x13
		*distance = counts / 7.37;
    3b94:	68 89       	ldd	r22, Y+16	; 0x10
    3b96:	79 89       	ldd	r23, Y+17	; 0x11
    3b98:	8a 89       	ldd	r24, Y+18	; 0x12
    3b9a:	9b 89       	ldd	r25, Y+19	; 0x13
    3b9c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3ba0:	dc 01       	movw	r26, r24
    3ba2:	cb 01       	movw	r24, r22
    3ba4:	bc 01       	movw	r22, r24
    3ba6:	cd 01       	movw	r24, r26
    3ba8:	2a e0       	ldi	r18, 0x0A	; 10
    3baa:	37 ed       	ldi	r19, 0xD7	; 215
    3bac:	4b ee       	ldi	r20, 0xEB	; 235
    3bae:	50 e4       	ldi	r21, 0x40	; 64
    3bb0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3bb4:	dc 01       	movw	r26, r24
    3bb6:	cb 01       	movw	r24, r22
    3bb8:	bc 01       	movw	r22, r24
    3bba:	cd 01       	movw	r24, r26
    3bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bc0:	dc 01       	movw	r26, r24
    3bc2:	cb 01       	movw	r24, r22
    3bc4:	ec 89       	ldd	r30, Y+20	; 0x14
    3bc6:	fd 89       	ldd	r31, Y+21	; 0x15
    3bc8:	91 83       	std	Z+1, r25	; 0x01
    3bca:	80 83       	st	Z, r24
    3bcc:	80 e0       	ldi	r24, 0x00	; 0
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	a6 e9       	ldi	r26, 0x96	; 150
    3bd2:	b3 e4       	ldi	r27, 0x43	; 67
    3bd4:	8b 87       	std	Y+11, r24	; 0x0b
    3bd6:	9c 87       	std	Y+12, r25	; 0x0c
    3bd8:	ad 87       	std	Y+13, r26	; 0x0d
    3bda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bde:	7c 85       	ldd	r23, Y+12	; 0x0c
    3be0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3be2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3be4:	20 e0       	ldi	r18, 0x00	; 0
    3be6:	30 e0       	ldi	r19, 0x00	; 0
    3be8:	4a e7       	ldi	r20, 0x7A	; 122
    3bea:	55 e4       	ldi	r21, 0x45	; 69
    3bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bf0:	dc 01       	movw	r26, r24
    3bf2:	cb 01       	movw	r24, r22
    3bf4:	8f 83       	std	Y+7, r24	; 0x07
    3bf6:	98 87       	std	Y+8, r25	; 0x08
    3bf8:	a9 87       	std	Y+9, r26	; 0x09
    3bfa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bfc:	6f 81       	ldd	r22, Y+7	; 0x07
    3bfe:	78 85       	ldd	r23, Y+8	; 0x08
    3c00:	89 85       	ldd	r24, Y+9	; 0x09
    3c02:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c04:	20 e0       	ldi	r18, 0x00	; 0
    3c06:	30 e0       	ldi	r19, 0x00	; 0
    3c08:	40 e8       	ldi	r20, 0x80	; 128
    3c0a:	5f e3       	ldi	r21, 0x3F	; 63
    3c0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c10:	88 23       	and	r24, r24
    3c12:	2c f4       	brge	.+10     	; 0x3c1e <Ultrasonic_Read_Distance+0x126>
		__ticks = 1;
    3c14:	81 e0       	ldi	r24, 0x01	; 1
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	9e 83       	std	Y+6, r25	; 0x06
    3c1a:	8d 83       	std	Y+5, r24	; 0x05
    3c1c:	3f c0       	rjmp	.+126    	; 0x3c9c <Ultrasonic_Read_Distance+0x1a4>
	else if (__tmp > 65535)
    3c1e:	6f 81       	ldd	r22, Y+7	; 0x07
    3c20:	78 85       	ldd	r23, Y+8	; 0x08
    3c22:	89 85       	ldd	r24, Y+9	; 0x09
    3c24:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c26:	20 e0       	ldi	r18, 0x00	; 0
    3c28:	3f ef       	ldi	r19, 0xFF	; 255
    3c2a:	4f e7       	ldi	r20, 0x7F	; 127
    3c2c:	57 e4       	ldi	r21, 0x47	; 71
    3c2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c32:	18 16       	cp	r1, r24
    3c34:	4c f5       	brge	.+82     	; 0x3c88 <Ultrasonic_Read_Distance+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c36:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c38:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c3e:	20 e0       	ldi	r18, 0x00	; 0
    3c40:	30 e0       	ldi	r19, 0x00	; 0
    3c42:	40 e2       	ldi	r20, 0x20	; 32
    3c44:	51 e4       	ldi	r21, 0x41	; 65
    3c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c4a:	dc 01       	movw	r26, r24
    3c4c:	cb 01       	movw	r24, r22
    3c4e:	bc 01       	movw	r22, r24
    3c50:	cd 01       	movw	r24, r26
    3c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c56:	dc 01       	movw	r26, r24
    3c58:	cb 01       	movw	r24, r22
    3c5a:	9e 83       	std	Y+6, r25	; 0x06
    3c5c:	8d 83       	std	Y+5, r24	; 0x05
    3c5e:	0f c0       	rjmp	.+30     	; 0x3c7e <Ultrasonic_Read_Distance+0x186>
    3c60:	80 e9       	ldi	r24, 0x90	; 144
    3c62:	91 e0       	ldi	r25, 0x01	; 1
    3c64:	9c 83       	std	Y+4, r25	; 0x04
    3c66:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3c68:	8b 81       	ldd	r24, Y+3	; 0x03
    3c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c6c:	01 97       	sbiw	r24, 0x01	; 1
    3c6e:	f1 f7       	brne	.-4      	; 0x3c6c <Ultrasonic_Read_Distance+0x174>
    3c70:	9c 83       	std	Y+4, r25	; 0x04
    3c72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c74:	8d 81       	ldd	r24, Y+5	; 0x05
    3c76:	9e 81       	ldd	r25, Y+6	; 0x06
    3c78:	01 97       	sbiw	r24, 0x01	; 1
    3c7a:	9e 83       	std	Y+6, r25	; 0x06
    3c7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c80:	9e 81       	ldd	r25, Y+6	; 0x06
    3c82:	00 97       	sbiw	r24, 0x00	; 0
    3c84:	69 f7       	brne	.-38     	; 0x3c60 <Ultrasonic_Read_Distance+0x168>
    3c86:	14 c0       	rjmp	.+40     	; 0x3cb0 <Ultrasonic_Read_Distance+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c88:	6f 81       	ldd	r22, Y+7	; 0x07
    3c8a:	78 85       	ldd	r23, Y+8	; 0x08
    3c8c:	89 85       	ldd	r24, Y+9	; 0x09
    3c8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c94:	dc 01       	movw	r26, r24
    3c96:	cb 01       	movw	r24, r22
    3c98:	9e 83       	std	Y+6, r25	; 0x06
    3c9a:	8d 83       	std	Y+5, r24	; 0x05
    3c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c9e:	9e 81       	ldd	r25, Y+6	; 0x06
    3ca0:	9a 83       	std	Y+2, r25	; 0x02
    3ca2:	89 83       	std	Y+1, r24	; 0x01
    3ca4:	89 81       	ldd	r24, Y+1	; 0x01
    3ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ca8:	01 97       	sbiw	r24, 0x01	; 1
    3caa:	f1 f7       	brne	.-4      	; 0x3ca8 <Ultrasonic_Read_Distance+0x1b0>
    3cac:	9a 83       	std	Y+2, r25	; 0x02
    3cae:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(300);
		ovf = 0;
    3cb0:	10 92 f9 02 	sts	0x02F9, r1
    3cb4:	10 92 fa 02 	sts	0x02FA, r1
    3cb8:	10 92 fb 02 	sts	0x02FB, r1
    3cbc:	10 92 fc 02 	sts	0x02FC, r1
		ovf_counter = 0;
    3cc0:	10 92 f5 02 	sts	0x02F5, r1
    3cc4:	10 92 f6 02 	sts	0x02F6, r1
    3cc8:	10 92 f7 02 	sts	0x02F7, r1
    3ccc:	10 92 f8 02 	sts	0x02F8, r1
		ret_status = Timer1_ICU_SetTrigger(TIMER1_INPUT_CAPTURE_RISING_EDGE);
    3cd0:	81 e0       	ldi	r24, 0x01	; 1
    3cd2:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer1_ICU_SetTrigger>
    3cd6:	8f 87       	std	Y+15, r24	; 0x0f
		TIMER1_CONTROL->TIFR1_CFG.ICF1_BIT = 0;
    3cd8:	e6 e4       	ldi	r30, 0x46	; 70
    3cda:	f0 e0       	ldi	r31, 0x00	; 0
    3cdc:	82 89       	ldd	r24, Z+18	; 0x12
    3cde:	8f 7d       	andi	r24, 0xDF	; 223
    3ce0:	82 8b       	std	Z+18, r24	; 0x12
		TIMER1_CONTROL->TIFR1_CFG.TOV1_BIT = 0;
    3ce2:	e6 e4       	ldi	r30, 0x46	; 70
    3ce4:	f0 e0       	ldi	r31, 0x00	; 0
    3ce6:	82 89       	ldd	r24, Z+18	; 0x12
    3ce8:	8b 7f       	andi	r24, 0xFB	; 251
    3cea:	82 8b       	std	Z+18, r24	; 0x12
		ret_status = Timer1_ICU_IntEnable();
    3cec:	0e 94 ae 08 	call	0x115c	; 0x115c <Timer1_ICU_IntEnable>
    3cf0:	8f 87       	std	Y+15, r24	; 0x0f
		ret_status = Timer1_OVF_IntEnable();
    3cf2:	0e 94 7e 08 	call	0x10fc	; 0x10fc <Timer1_OVF_IntEnable>
    3cf6:	8f 87       	std	Y+15, r24	; 0x0f
	}
	else{ /* Nothing */ }

}
    3cf8:	65 96       	adiw	r28, 0x15	; 21
    3cfa:	0f b6       	in	r0, 0x3f	; 63
    3cfc:	f8 94       	cli
    3cfe:	de bf       	out	0x3e, r29	; 62
    3d00:	0f be       	out	0x3f, r0	; 63
    3d02:	cd bf       	out	0x3d, r28	; 61
    3d04:	cf 91       	pop	r28
    3d06:	df 91       	pop	r29
    3d08:	1f 91       	pop	r17
    3d0a:	0f 91       	pop	r16
    3d0c:	ff 90       	pop	r15
    3d0e:	ef 90       	pop	r14
    3d10:	08 95       	ret

00003d12 <SevenSeG_voidinit>:
 *      Author: Mohamed Aly
 */
#include "seven_segment.h"

void SevenSeG_voidinit(void)
{
    3d12:	df 93       	push	r29
    3d14:	cf 93       	push	r28
    3d16:	cd b7       	in	r28, 0x3d	; 61
    3d18:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(SEGMENT_PIN0_PORT, SEGMENT_PIN0, GPIO_DIRECTION_OUTPUT);
    3d1a:	81 e0       	ldi	r24, 0x01	; 1
    3d1c:	60 e0       	ldi	r22, 0x00	; 0
    3d1e:	41 e0       	ldi	r20, 0x01	; 1
    3d20:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(SEGMENT_PIN1_PORT, SEGMENT_PIN1, GPIO_DIRECTION_OUTPUT);
    3d24:	81 e0       	ldi	r24, 0x01	; 1
    3d26:	61 e0       	ldi	r22, 0x01	; 1
    3d28:	41 e0       	ldi	r20, 0x01	; 1
    3d2a:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(SEGMENT_PIN2_PORT, SEGMENT_PIN2, GPIO_DIRECTION_OUTPUT);
    3d2e:	81 e0       	ldi	r24, 0x01	; 1
    3d30:	62 e0       	ldi	r22, 0x02	; 2
    3d32:	41 e0       	ldi	r20, 0x01	; 1
    3d34:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(SEGMENT_PIN3_PORT, SEGMENT_PIN3, GPIO_DIRECTION_OUTPUT);
    3d38:	81 e0       	ldi	r24, 0x01	; 1
    3d3a:	64 e0       	ldi	r22, 0x04	; 4
    3d3c:	41 e0       	ldi	r20, 0x01	; 1
    3d3e:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <DIO_voidSetPinDirection>
}
    3d42:	cf 91       	pop	r28
    3d44:	df 91       	pop	r29
    3d46:	08 95       	ret

00003d48 <SevenSeG_voidWriteNum>:

void SevenSeG_voidWriteNum(u8 Copy_u8Number)
{
    3d48:	df 93       	push	r29
    3d4a:	cf 93       	push	r28
    3d4c:	0f 92       	push	r0
    3d4e:	cd b7       	in	r28, 0x3d	; 61
    3d50:	de b7       	in	r29, 0x3e	; 62
    3d52:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPinValue(SEGMENT_PIN0_PORT, SEGMENT_PIN0, ((Copy_u8Number >> 0) & 0x01));
    3d54:	89 81       	ldd	r24, Y+1	; 0x01
    3d56:	98 2f       	mov	r25, r24
    3d58:	91 70       	andi	r25, 0x01	; 1
    3d5a:	81 e0       	ldi	r24, 0x01	; 1
    3d5c:	60 e0       	ldi	r22, 0x00	; 0
    3d5e:	49 2f       	mov	r20, r25
    3d60:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(SEGMENT_PIN1_PORT, SEGMENT_PIN1, ((Copy_u8Number >> 1) & 0x01));
    3d64:	89 81       	ldd	r24, Y+1	; 0x01
    3d66:	86 95       	lsr	r24
    3d68:	98 2f       	mov	r25, r24
    3d6a:	91 70       	andi	r25, 0x01	; 1
    3d6c:	81 e0       	ldi	r24, 0x01	; 1
    3d6e:	61 e0       	ldi	r22, 0x01	; 1
    3d70:	49 2f       	mov	r20, r25
    3d72:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(SEGMENT_PIN2_PORT, SEGMENT_PIN2, ((Copy_u8Number >> 2) & 0x01));
    3d76:	89 81       	ldd	r24, Y+1	; 0x01
    3d78:	86 95       	lsr	r24
    3d7a:	86 95       	lsr	r24
    3d7c:	98 2f       	mov	r25, r24
    3d7e:	91 70       	andi	r25, 0x01	; 1
    3d80:	81 e0       	ldi	r24, 0x01	; 1
    3d82:	62 e0       	ldi	r22, 0x02	; 2
    3d84:	49 2f       	mov	r20, r25
    3d86:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(SEGMENT_PIN3_PORT, SEGMENT_PIN3, ((Copy_u8Number >> 3) & 0x01));
    3d8a:	89 81       	ldd	r24, Y+1	; 0x01
    3d8c:	86 95       	lsr	r24
    3d8e:	86 95       	lsr	r24
    3d90:	86 95       	lsr	r24
    3d92:	98 2f       	mov	r25, r24
    3d94:	91 70       	andi	r25, 0x01	; 1
    3d96:	81 e0       	ldi	r24, 0x01	; 1
    3d98:	64 e0       	ldi	r22, 0x04	; 4
    3d9a:	49 2f       	mov	r20, r25
    3d9c:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
}
    3da0:	0f 90       	pop	r0
    3da2:	cf 91       	pop	r28
    3da4:	df 91       	pop	r29
    3da6:	08 95       	ret

00003da8 <RTC_Init>:
static u8 decimal_to_BCD(u8 decimal);
static u8 BCD_to_decimal(u8 bcd);


void RTC_Init(u8 req_speed)
{
    3da8:	df 93       	push	r29
    3daa:	cf 93       	push	r28
    3dac:	00 d0       	rcall	.+0      	; 0x3dae <RTC_Init+0x6>
    3dae:	00 d0       	rcall	.+0      	; 0x3db0 <RTC_Init+0x8>
    3db0:	0f 92       	push	r0
    3db2:	cd b7       	in	r28, 0x3d	; 61
    3db4:	de b7       	in	r29, 0x3e	; 62
    3db6:	8d 83       	std	Y+5, r24	; 0x05
	Error_Status_t ret_status = NO_ERROR;
    3db8:	19 82       	std	Y+1, r1	; 0x01
	i2c_t init_i2c = {.master_or_slave = I2C_MASTER_MODE,
			.frequency = req_speed,
			.prescaler = 0};
    3dba:	1a 82       	std	Y+2, r1	; 0x02
    3dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    3dbe:	8b 83       	std	Y+3, r24	; 0x03
    3dc0:	1c 82       	std	Y+4, r1	; 0x04
	ret_status = I2C_Init(&init_i2c);
    3dc2:	ce 01       	movw	r24, r28
    3dc4:	02 96       	adiw	r24, 0x02	; 2
    3dc6:	0e 94 66 12 	call	0x24cc	; 0x24cc <I2C_Init>
    3dca:	89 83       	std	Y+1, r24	; 0x01
}
    3dcc:	0f 90       	pop	r0
    3dce:	0f 90       	pop	r0
    3dd0:	0f 90       	pop	r0
    3dd2:	0f 90       	pop	r0
    3dd4:	0f 90       	pop	r0
    3dd6:	cf 91       	pop	r28
    3dd8:	df 91       	pop	r29
    3dda:	08 95       	ret

00003ddc <RTC_SetTime>:


void RTC_SetTime(const RTC_TIME_T *init_time)
{
    3ddc:	df 93       	push	r29
    3dde:	cf 93       	push	r28
    3de0:	00 d0       	rcall	.+0      	; 0x3de2 <RTC_SetTime+0x6>
    3de2:	00 d0       	rcall	.+0      	; 0x3de4 <RTC_SetTime+0x8>
    3de4:	00 d0       	rcall	.+0      	; 0x3de6 <RTC_SetTime+0xa>
    3de6:	cd b7       	in	r28, 0x3d	; 61
    3de8:	de b7       	in	r29, 0x3e	; 62
    3dea:	9e 83       	std	Y+6, r25	; 0x06
    3dec:	8d 83       	std	Y+5, r24	; 0x05
#if RTC_TIME_SYSTEM == RTC_24HR_SYSTEM

	Error_Status_t ret_status = NO_ERROR;
    3dee:	1c 82       	std	Y+4, r1	; 0x04

	// Convert hours, minutes, and seconds to BCD format
	u8 sec_bcd = decimal_to_BCD(init_time->sec);
    3df0:	ed 81       	ldd	r30, Y+5	; 0x05
    3df2:	fe 81       	ldd	r31, Y+6	; 0x06
    3df4:	82 81       	ldd	r24, Z+2	; 0x02
    3df6:	0e 94 06 20 	call	0x400c	; 0x400c <decimal_to_BCD>
    3dfa:	8b 83       	std	Y+3, r24	; 0x03
	u8 min_bcd = decimal_to_BCD(init_time->min);
    3dfc:	ed 81       	ldd	r30, Y+5	; 0x05
    3dfe:	fe 81       	ldd	r31, Y+6	; 0x06
    3e00:	81 81       	ldd	r24, Z+1	; 0x01
    3e02:	0e 94 06 20 	call	0x400c	; 0x400c <decimal_to_BCD>
    3e06:	8a 83       	std	Y+2, r24	; 0x02
	u8 hour_bcd = decimal_to_BCD(init_time->hour);
    3e08:	ed 81       	ldd	r30, Y+5	; 0x05
    3e0a:	fe 81       	ldd	r31, Y+6	; 0x06
    3e0c:	80 81       	ld	r24, Z
    3e0e:	0e 94 06 20 	call	0x400c	; 0x400c <decimal_to_BCD>
    3e12:	89 83       	std	Y+1, r24	; 0x01

	// Send start
	ret_status = I2C_SendStart();
    3e14:	0e 94 ca 12 	call	0x2594	; 0x2594 <I2C_SendStart>
    3e18:	8c 83       	std	Y+4, r24	; 0x04

	// send address
	ret_status = I2C_SendByte(DS1307_ADDRESS_WRITE);
    3e1a:	80 ed       	ldi	r24, 0xD0	; 208
    3e1c:	0e 94 af 12 	call	0x255e	; 0x255e <I2C_SendByte>
    3e20:	8c 83       	std	Y+4, r24	; 0x04

	// Send address that wanted to access
	ret_status = I2C_SendByte(DS1307_BASE_ADDRESS_OF_TIME);
    3e22:	80 e0       	ldi	r24, 0x00	; 0
    3e24:	0e 94 af 12 	call	0x255e	; 0x255e <I2C_SendByte>
    3e28:	8c 83       	std	Y+4, r24	; 0x04

	// send second
	ret_status = I2C_SendByte(sec_bcd);
    3e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e2c:	0e 94 af 12 	call	0x255e	; 0x255e <I2C_SendByte>
    3e30:	8c 83       	std	Y+4, r24	; 0x04

	// send min
	ret_status = I2C_SendByte(min_bcd);
    3e32:	8a 81       	ldd	r24, Y+2	; 0x02
    3e34:	0e 94 af 12 	call	0x255e	; 0x255e <I2C_SendByte>
    3e38:	8c 83       	std	Y+4, r24	; 0x04

	// send hour
	ret_status = I2C_SendByte(hour_bcd);
    3e3a:	89 81       	ldd	r24, Y+1	; 0x01
    3e3c:	0e 94 af 12 	call	0x255e	; 0x255e <I2C_SendByte>
    3e40:	8c 83       	std	Y+4, r24	; 0x04

	// send stop
	ret_status = I2C_SendStop();
    3e42:	0e 94 df 12 	call	0x25be	; 0x25be <I2C_SendStop>
    3e46:	8c 83       	std	Y+4, r24	; 0x04

	// send stop
	ret_status = I2C_SendStop();

#endif
}
    3e48:	26 96       	adiw	r28, 0x06	; 6
    3e4a:	0f b6       	in	r0, 0x3f	; 63
    3e4c:	f8 94       	cli
    3e4e:	de bf       	out	0x3e, r29	; 62
    3e50:	0f be       	out	0x3f, r0	; 63
    3e52:	cd bf       	out	0x3d, r28	; 61
    3e54:	cf 91       	pop	r28
    3e56:	df 91       	pop	r29
    3e58:	08 95       	ret

00003e5a <RTC_GetTime>:



void RTC_GetTime(RTC_TIME_T *time)
{
    3e5a:	df 93       	push	r29
    3e5c:	cf 93       	push	r28
    3e5e:	00 d0       	rcall	.+0      	; 0x3e60 <RTC_GetTime+0x6>
    3e60:	0f 92       	push	r0
    3e62:	cd b7       	in	r28, 0x3d	; 61
    3e64:	de b7       	in	r29, 0x3e	; 62
    3e66:	9b 83       	std	Y+3, r25	; 0x03
    3e68:	8a 83       	std	Y+2, r24	; 0x02
#if RTC_TIME_SYSTEM == RTC_24HR_SYSTEM

	Error_Status_t ret_status = NO_ERROR;
    3e6a:	19 82       	std	Y+1, r1	; 0x01
	// Send start
	ret_status = I2C_SendStart();
    3e6c:	0e 94 ca 12 	call	0x2594	; 0x2594 <I2C_SendStart>
    3e70:	89 83       	std	Y+1, r24	; 0x01
	// send address
	ret_status = I2C_SendByte(DS1307_ADDRESS_WRITE);
    3e72:	80 ed       	ldi	r24, 0xD0	; 208
    3e74:	0e 94 af 12 	call	0x255e	; 0x255e <I2C_SendByte>
    3e78:	89 83       	std	Y+1, r24	; 0x01
	// Send address that wanted to access
	ret_status = I2C_SendByte(DS1307_BASE_ADDRESS_OF_TIME);
    3e7a:	80 e0       	ldi	r24, 0x00	; 0
    3e7c:	0e 94 af 12 	call	0x255e	; 0x255e <I2C_SendByte>
    3e80:	89 83       	std	Y+1, r24	; 0x01
	// Send start
	ret_status = I2C_SendStart();
    3e82:	0e 94 ca 12 	call	0x2594	; 0x2594 <I2C_SendStart>
    3e86:	89 83       	std	Y+1, r24	; 0x01
	// send address
	ret_status = I2C_SendByte(DS1307_ADDRESS_READ);
    3e88:	81 ed       	ldi	r24, 0xD1	; 209
    3e8a:	0e 94 af 12 	call	0x255e	; 0x255e <I2C_SendByte>
    3e8e:	89 83       	std	Y+1, r24	; 0x01

	// receive time
	ret_status = I2C_ReceiveByte_ACK(&(time->sec));
    3e90:	8a 81       	ldd	r24, Y+2	; 0x02
    3e92:	9b 81       	ldd	r25, Y+3	; 0x03
    3e94:	02 96       	adiw	r24, 0x02	; 2
    3e96:	0e 94 ef 12 	call	0x25de	; 0x25de <I2C_ReceiveByte_ACK>
    3e9a:	89 83       	std	Y+1, r24	; 0x01
	ret_status = I2C_ReceiveByte_ACK(&(time->min));
    3e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e9e:	9b 81       	ldd	r25, Y+3	; 0x03
    3ea0:	01 96       	adiw	r24, 0x01	; 1
    3ea2:	0e 94 ef 12 	call	0x25de	; 0x25de <I2C_ReceiveByte_ACK>
    3ea6:	89 83       	std	Y+1, r24	; 0x01
	ret_status = I2C_ReceiveByte_NoACK(&(time->hour));
    3ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    3eaa:	9b 81       	ldd	r25, Y+3	; 0x03
    3eac:	0e 94 16 13 	call	0x262c	; 0x262c <I2C_ReceiveByte_NoACK>
    3eb0:	89 83       	std	Y+1, r24	; 0x01
	// send stop
	ret_status = I2C_SendStop();
    3eb2:	0e 94 df 12 	call	0x25be	; 0x25be <I2C_SendStop>
    3eb6:	89 83       	std	Y+1, r24	; 0x01

	time->sec = BCD_to_decimal(time->sec);
    3eb8:	ea 81       	ldd	r30, Y+2	; 0x02
    3eba:	fb 81       	ldd	r31, Y+3	; 0x03
    3ebc:	82 81       	ldd	r24, Z+2	; 0x02
    3ebe:	0e 94 2a 20 	call	0x4054	; 0x4054 <BCD_to_decimal>
    3ec2:	ea 81       	ldd	r30, Y+2	; 0x02
    3ec4:	fb 81       	ldd	r31, Y+3	; 0x03
    3ec6:	82 83       	std	Z+2, r24	; 0x02
	time->min = BCD_to_decimal(time->min);
    3ec8:	ea 81       	ldd	r30, Y+2	; 0x02
    3eca:	fb 81       	ldd	r31, Y+3	; 0x03
    3ecc:	81 81       	ldd	r24, Z+1	; 0x01
    3ece:	0e 94 2a 20 	call	0x4054	; 0x4054 <BCD_to_decimal>
    3ed2:	ea 81       	ldd	r30, Y+2	; 0x02
    3ed4:	fb 81       	ldd	r31, Y+3	; 0x03
    3ed6:	81 83       	std	Z+1, r24	; 0x01
	time->hour = BCD_to_decimal(time->hour);
    3ed8:	ea 81       	ldd	r30, Y+2	; 0x02
    3eda:	fb 81       	ldd	r31, Y+3	; 0x03
    3edc:	80 81       	ld	r24, Z
    3ede:	0e 94 2a 20 	call	0x4054	; 0x4054 <BCD_to_decimal>
    3ee2:	ea 81       	ldd	r30, Y+2	; 0x02
    3ee4:	fb 81       	ldd	r31, Y+3	; 0x03
    3ee6:	80 83       	st	Z, r24
	else if (time->hour == 0) {
		time->hour= 12;
	}

#endif
}
    3ee8:	0f 90       	pop	r0
    3eea:	0f 90       	pop	r0
    3eec:	0f 90       	pop	r0
    3eee:	cf 91       	pop	r28
    3ef0:	df 91       	pop	r29
    3ef2:	08 95       	ret

00003ef4 <RTC_SetDate>:




void RTC_SetDate(const RTC_DATE_T *init_date)
{
    3ef4:	df 93       	push	r29
    3ef6:	cf 93       	push	r28
    3ef8:	00 d0       	rcall	.+0      	; 0x3efa <RTC_SetDate+0x6>
    3efa:	00 d0       	rcall	.+0      	; 0x3efc <RTC_SetDate+0x8>
    3efc:	00 d0       	rcall	.+0      	; 0x3efe <RTC_SetDate+0xa>
    3efe:	cd b7       	in	r28, 0x3d	; 61
    3f00:	de b7       	in	r29, 0x3e	; 62
    3f02:	9e 83       	std	Y+6, r25	; 0x06
    3f04:	8d 83       	std	Y+5, r24	; 0x05
	Error_Status_t ret_status = NO_ERROR;
    3f06:	1c 82       	std	Y+4, r1	; 0x04
	u8 day_bcd = decimal_to_BCD(init_date->day);
    3f08:	ed 81       	ldd	r30, Y+5	; 0x05
    3f0a:	fe 81       	ldd	r31, Y+6	; 0x06
    3f0c:	82 81       	ldd	r24, Z+2	; 0x02
    3f0e:	0e 94 06 20 	call	0x400c	; 0x400c <decimal_to_BCD>
    3f12:	8b 83       	std	Y+3, r24	; 0x03
	u8 mon_bcd = decimal_to_BCD(init_date->month);
    3f14:	ed 81       	ldd	r30, Y+5	; 0x05
    3f16:	fe 81       	ldd	r31, Y+6	; 0x06
    3f18:	81 81       	ldd	r24, Z+1	; 0x01
    3f1a:	0e 94 06 20 	call	0x400c	; 0x400c <decimal_to_BCD>
    3f1e:	8a 83       	std	Y+2, r24	; 0x02
	u8 year_bcd = decimal_to_BCD(init_date->year);
    3f20:	ed 81       	ldd	r30, Y+5	; 0x05
    3f22:	fe 81       	ldd	r31, Y+6	; 0x06
    3f24:	80 81       	ld	r24, Z
    3f26:	0e 94 06 20 	call	0x400c	; 0x400c <decimal_to_BCD>
    3f2a:	89 83       	std	Y+1, r24	; 0x01

	// Send start
	ret_status = I2C_SendStart();
    3f2c:	0e 94 ca 12 	call	0x2594	; 0x2594 <I2C_SendStart>
    3f30:	8c 83       	std	Y+4, r24	; 0x04
	// send address
	ret_status = I2C_SendByte(DS1307_ADDRESS_WRITE);
    3f32:	80 ed       	ldi	r24, 0xD0	; 208
    3f34:	0e 94 af 12 	call	0x255e	; 0x255e <I2C_SendByte>
    3f38:	8c 83       	std	Y+4, r24	; 0x04
	// Send address that wanted to access
	ret_status = I2C_SendByte(DS1307_BASE_ADDRESS_OF_DATE);
    3f3a:	84 e0       	ldi	r24, 0x04	; 4
    3f3c:	0e 94 af 12 	call	0x255e	; 0x255e <I2C_SendByte>
    3f40:	8c 83       	std	Y+4, r24	; 0x04
	// send day
	ret_status = I2C_SendByte(day_bcd);
    3f42:	8b 81       	ldd	r24, Y+3	; 0x03
    3f44:	0e 94 af 12 	call	0x255e	; 0x255e <I2C_SendByte>
    3f48:	8c 83       	std	Y+4, r24	; 0x04

	// send month
	ret_status = I2C_SendByte(mon_bcd);
    3f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f4c:	0e 94 af 12 	call	0x255e	; 0x255e <I2C_SendByte>
    3f50:	8c 83       	std	Y+4, r24	; 0x04

	// send year
	ret_status = I2C_SendByte(year_bcd);
    3f52:	89 81       	ldd	r24, Y+1	; 0x01
    3f54:	0e 94 af 12 	call	0x255e	; 0x255e <I2C_SendByte>
    3f58:	8c 83       	std	Y+4, r24	; 0x04

	// send stop
	ret_status = I2C_SendStop();
    3f5a:	0e 94 df 12 	call	0x25be	; 0x25be <I2C_SendStop>
    3f5e:	8c 83       	std	Y+4, r24	; 0x04

}
    3f60:	26 96       	adiw	r28, 0x06	; 6
    3f62:	0f b6       	in	r0, 0x3f	; 63
    3f64:	f8 94       	cli
    3f66:	de bf       	out	0x3e, r29	; 62
    3f68:	0f be       	out	0x3f, r0	; 63
    3f6a:	cd bf       	out	0x3d, r28	; 61
    3f6c:	cf 91       	pop	r28
    3f6e:	df 91       	pop	r29
    3f70:	08 95       	ret

00003f72 <RTC_GetDate>:


void RTC_GetDate(RTC_DATE_T *date)
{
    3f72:	df 93       	push	r29
    3f74:	cf 93       	push	r28
    3f76:	00 d0       	rcall	.+0      	; 0x3f78 <RTC_GetDate+0x6>
    3f78:	0f 92       	push	r0
    3f7a:	cd b7       	in	r28, 0x3d	; 61
    3f7c:	de b7       	in	r29, 0x3e	; 62
    3f7e:	9b 83       	std	Y+3, r25	; 0x03
    3f80:	8a 83       	std	Y+2, r24	; 0x02
	Error_Status_t ret_status = NO_ERROR;
    3f82:	19 82       	std	Y+1, r1	; 0x01
	// Send start
	ret_status = I2C_SendStart();
    3f84:	0e 94 ca 12 	call	0x2594	; 0x2594 <I2C_SendStart>
    3f88:	89 83       	std	Y+1, r24	; 0x01
	// send address
	ret_status = I2C_SendByte(DS1307_ADDRESS_WRITE);
    3f8a:	80 ed       	ldi	r24, 0xD0	; 208
    3f8c:	0e 94 af 12 	call	0x255e	; 0x255e <I2C_SendByte>
    3f90:	89 83       	std	Y+1, r24	; 0x01
	// Send address that wanted to access
	ret_status = I2C_SendByte(DS1307_BASE_ADDRESS_OF_DATE);
    3f92:	84 e0       	ldi	r24, 0x04	; 4
    3f94:	0e 94 af 12 	call	0x255e	; 0x255e <I2C_SendByte>
    3f98:	89 83       	std	Y+1, r24	; 0x01
	// Send start
	ret_status = I2C_SendStart();
    3f9a:	0e 94 ca 12 	call	0x2594	; 0x2594 <I2C_SendStart>
    3f9e:	89 83       	std	Y+1, r24	; 0x01
	// send address
	ret_status = I2C_SendByte(DS1307_ADDRESS_READ);
    3fa0:	81 ed       	ldi	r24, 0xD1	; 209
    3fa2:	0e 94 af 12 	call	0x255e	; 0x255e <I2C_SendByte>
    3fa6:	89 83       	std	Y+1, r24	; 0x01
	// receive time
	ret_status = I2C_ReceiveByte_ACK(&(date->day));
    3fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    3faa:	9b 81       	ldd	r25, Y+3	; 0x03
    3fac:	02 96       	adiw	r24, 0x02	; 2
    3fae:	0e 94 ef 12 	call	0x25de	; 0x25de <I2C_ReceiveByte_ACK>
    3fb2:	89 83       	std	Y+1, r24	; 0x01
	ret_status = I2C_ReceiveByte_ACK(&(date->month));
    3fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb6:	9b 81       	ldd	r25, Y+3	; 0x03
    3fb8:	01 96       	adiw	r24, 0x01	; 1
    3fba:	0e 94 ef 12 	call	0x25de	; 0x25de <I2C_ReceiveByte_ACK>
    3fbe:	89 83       	std	Y+1, r24	; 0x01
	ret_status = I2C_ReceiveByte_NoACK(&(date->year));
    3fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc2:	9b 81       	ldd	r25, Y+3	; 0x03
    3fc4:	0e 94 16 13 	call	0x262c	; 0x262c <I2C_ReceiveByte_NoACK>
    3fc8:	89 83       	std	Y+1, r24	; 0x01
	// send stop
	ret_status = I2C_SendStop();
    3fca:	0e 94 df 12 	call	0x25be	; 0x25be <I2C_SendStop>
    3fce:	89 83       	std	Y+1, r24	; 0x01

	date->day = BCD_to_decimal(date->day);
    3fd0:	ea 81       	ldd	r30, Y+2	; 0x02
    3fd2:	fb 81       	ldd	r31, Y+3	; 0x03
    3fd4:	82 81       	ldd	r24, Z+2	; 0x02
    3fd6:	0e 94 2a 20 	call	0x4054	; 0x4054 <BCD_to_decimal>
    3fda:	ea 81       	ldd	r30, Y+2	; 0x02
    3fdc:	fb 81       	ldd	r31, Y+3	; 0x03
    3fde:	82 83       	std	Z+2, r24	; 0x02
	date->month = BCD_to_decimal(date->month);
    3fe0:	ea 81       	ldd	r30, Y+2	; 0x02
    3fe2:	fb 81       	ldd	r31, Y+3	; 0x03
    3fe4:	81 81       	ldd	r24, Z+1	; 0x01
    3fe6:	0e 94 2a 20 	call	0x4054	; 0x4054 <BCD_to_decimal>
    3fea:	ea 81       	ldd	r30, Y+2	; 0x02
    3fec:	fb 81       	ldd	r31, Y+3	; 0x03
    3fee:	81 83       	std	Z+1, r24	; 0x01
	date->year = BCD_to_decimal(date->year);
    3ff0:	ea 81       	ldd	r30, Y+2	; 0x02
    3ff2:	fb 81       	ldd	r31, Y+3	; 0x03
    3ff4:	80 81       	ld	r24, Z
    3ff6:	0e 94 2a 20 	call	0x4054	; 0x4054 <BCD_to_decimal>
    3ffa:	ea 81       	ldd	r30, Y+2	; 0x02
    3ffc:	fb 81       	ldd	r31, Y+3	; 0x03
    3ffe:	80 83       	st	Z, r24
}
    4000:	0f 90       	pop	r0
    4002:	0f 90       	pop	r0
    4004:	0f 90       	pop	r0
    4006:	cf 91       	pop	r28
    4008:	df 91       	pop	r29
    400a:	08 95       	ret

0000400c <decimal_to_BCD>:


/* -------------------------------------------------- Helper functions ----------------------- */
static u8 decimal_to_BCD(u8 decimal)
{
    400c:	df 93       	push	r29
    400e:	cf 93       	push	r28
    4010:	00 d0       	rcall	.+0      	; 0x4012 <decimal_to_BCD+0x6>
    4012:	00 d0       	rcall	.+0      	; 0x4014 <decimal_to_BCD+0x8>
    4014:	0f 92       	push	r0
    4016:	cd b7       	in	r28, 0x3d	; 61
    4018:	de b7       	in	r29, 0x3e	; 62
    401a:	8c 83       	std	Y+4, r24	; 0x04
	u8 first_digits = (u8)(decimal % 10); // Extract first digit from decimal
    401c:	8c 81       	ldd	r24, Y+4	; 0x04
    401e:	9a e0       	ldi	r25, 0x0A	; 10
    4020:	69 2f       	mov	r22, r25
    4022:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <__udivmodqi4>
    4026:	89 2f       	mov	r24, r25
    4028:	8b 83       	std	Y+3, r24	; 0x03
	u8 seconnd_digits = (u8)(decimal / 10); // Extract second digit from decimal
    402a:	8c 81       	ldd	r24, Y+4	; 0x04
    402c:	9a e0       	ldi	r25, 0x0A	; 10
    402e:	69 2f       	mov	r22, r25
    4030:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <__udivmodqi4>
    4034:	8a 83       	std	Y+2, r24	; 0x02
	u8 result_num = (seconnd_digits << 4) + first_digits;
    4036:	8a 81       	ldd	r24, Y+2	; 0x02
    4038:	98 2f       	mov	r25, r24
    403a:	92 95       	swap	r25
    403c:	90 7f       	andi	r25, 0xF0	; 240
    403e:	8b 81       	ldd	r24, Y+3	; 0x03
    4040:	89 0f       	add	r24, r25
    4042:	89 83       	std	Y+1, r24	; 0x01
}
    4044:	0f 90       	pop	r0
    4046:	0f 90       	pop	r0
    4048:	0f 90       	pop	r0
    404a:	0f 90       	pop	r0
    404c:	0f 90       	pop	r0
    404e:	cf 91       	pop	r28
    4050:	df 91       	pop	r29
    4052:	08 95       	ret

00004054 <BCD_to_decimal>:

static u8 BCD_to_decimal(u8 bcd)
{
    4054:	df 93       	push	r29
    4056:	cf 93       	push	r28
    4058:	00 d0       	rcall	.+0      	; 0x405a <BCD_to_decimal+0x6>
    405a:	00 d0       	rcall	.+0      	; 0x405c <BCD_to_decimal+0x8>
    405c:	cd b7       	in	r28, 0x3d	; 61
    405e:	de b7       	in	r29, 0x3e	; 62
    4060:	8c 83       	std	Y+4, r24	; 0x04
	u8 first_digits = bcd & 0x0F;  // Extract the lower 4 bits
    4062:	8c 81       	ldd	r24, Y+4	; 0x04
    4064:	8f 70       	andi	r24, 0x0F	; 15
    4066:	8b 83       	std	Y+3, r24	; 0x03
	u8 second_digits = (bcd >> 4) * 10;  // Extract the higher 4 bits and multiply by 10
    4068:	8c 81       	ldd	r24, Y+4	; 0x04
    406a:	82 95       	swap	r24
    406c:	8f 70       	andi	r24, 0x0F	; 15
    406e:	88 2f       	mov	r24, r24
    4070:	90 e0       	ldi	r25, 0x00	; 0
    4072:	9c 01       	movw	r18, r24
    4074:	22 0f       	add	r18, r18
    4076:	33 1f       	adc	r19, r19
    4078:	c9 01       	movw	r24, r18
    407a:	88 0f       	add	r24, r24
    407c:	99 1f       	adc	r25, r25
    407e:	88 0f       	add	r24, r24
    4080:	99 1f       	adc	r25, r25
    4082:	82 0f       	add	r24, r18
    4084:	93 1f       	adc	r25, r19
    4086:	8a 83       	std	Y+2, r24	; 0x02
	u8 result_num = second_digits + first_digits;
    4088:	9a 81       	ldd	r25, Y+2	; 0x02
    408a:	8b 81       	ldd	r24, Y+3	; 0x03
    408c:	89 0f       	add	r24, r25
    408e:	89 83       	std	Y+1, r24	; 0x01
	return result_num;
    4090:	89 81       	ldd	r24, Y+1	; 0x01
}
    4092:	0f 90       	pop	r0
    4094:	0f 90       	pop	r0
    4096:	0f 90       	pop	r0
    4098:	0f 90       	pop	r0
    409a:	cf 91       	pop	r28
    409c:	df 91       	pop	r29
    409e:	08 95       	ret

000040a0 <LM35_Init>:

#include "LM35.h"


void LM35_Init(void)
{
    40a0:	df 93       	push	r29
    40a2:	cf 93       	push	r28
    40a4:	0f 92       	push	r0
    40a6:	cd b7       	in	r28, 0x3d	; 61
    40a8:	de b7       	in	r29, 0x3e	; 62
	ADC_cfg_t my_adc = {
			.select_trigger_source = ADC_SELECT_TRIGGER_FREE_SOURCE,
			.voltage_reference_select = ADC_AVCC_EXTERNAL_AT_AREF,
			.adjustification_select = ADC_RIGHT_JUSTIFY,
			.prescaler_select = ADC_PRESCALER_DIV_16};
    40aa:	19 82       	std	Y+1, r1	; 0x01
    40ac:	89 81       	ldd	r24, Y+1	; 0x01
    40ae:	87 7e       	andi	r24, 0xE7	; 231
    40b0:	88 60       	ori	r24, 0x08	; 8
    40b2:	89 83       	std	Y+1, r24	; 0x01

	ADC_voidInit(&my_adc);
    40b4:	ce 01       	movw	r24, r28
    40b6:	01 96       	adiw	r24, 0x01	; 1
    40b8:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <ADC_voidInit>
}
    40bc:	0f 90       	pop	r0
    40be:	cf 91       	pop	r28
    40c0:	df 91       	pop	r29
    40c2:	08 95       	ret

000040c4 <LM35_Reading>:

void LM35_Reading(u8 Copy_u8Channel, float *celsius)
{
    40c4:	df 93       	push	r29
    40c6:	cf 93       	push	r28
    40c8:	00 d0       	rcall	.+0      	; 0x40ca <LM35_Reading+0x6>
    40ca:	00 d0       	rcall	.+0      	; 0x40cc <LM35_Reading+0x8>
    40cc:	00 d0       	rcall	.+0      	; 0x40ce <LM35_Reading+0xa>
    40ce:	cd b7       	in	r28, 0x3d	; 61
    40d0:	de b7       	in	r29, 0x3e	; 62
    40d2:	8c 83       	std	Y+4, r24	; 0x04
    40d4:	7e 83       	std	Y+6, r23	; 0x06
    40d6:	6d 83       	std	Y+5, r22	; 0x05
	u16 adc_res = 0;
    40d8:	1a 82       	std	Y+2, r1	; 0x02
    40da:	19 82       	std	Y+1, r1	; 0x01

	ADC_cfg_t my_adc = {
			.select_trigger_source = ADC_SELECT_TRIGGER_FREE_SOURCE,
			.voltage_reference_select = ADC_AVCC_EXTERNAL_AT_AREF,
			.adjustification_select = ADC_RIGHT_JUSTIFY,
			.prescaler_select = ADC_PRESCALER_DIV_16};
    40dc:	1b 82       	std	Y+3, r1	; 0x03
    40de:	8b 81       	ldd	r24, Y+3	; 0x03
    40e0:	87 7e       	andi	r24, 0xE7	; 231
    40e2:	88 60       	ori	r24, 0x08	; 8
    40e4:	8b 83       	std	Y+3, r24	; 0x03
	/* Tack readings of ADC */
	ADC_getDigitalValueSynchNonBlocking(&my_adc, Copy_u8Channel, &adc_res);
    40e6:	ce 01       	movw	r24, r28
    40e8:	03 96       	adiw	r24, 0x03	; 3
    40ea:	6c 81       	ldd	r22, Y+4	; 0x04
    40ec:	9e 01       	movw	r18, r28
    40ee:	2f 5f       	subi	r18, 0xFF	; 255
    40f0:	3f 4f       	sbci	r19, 0xFF	; 255
    40f2:	a9 01       	movw	r20, r18
    40f4:	0e 94 75 15 	call	0x2aea	; 0x2aea <ADC_getDigitalValueSynchNonBlocking>

	/* Calibrate readings to be in celsius degree */
	*celsius = adc_res * 4.88;
    40f8:	89 81       	ldd	r24, Y+1	; 0x01
    40fa:	9a 81       	ldd	r25, Y+2	; 0x02
    40fc:	cc 01       	movw	r24, r24
    40fe:	a0 e0       	ldi	r26, 0x00	; 0
    4100:	b0 e0       	ldi	r27, 0x00	; 0
    4102:	bc 01       	movw	r22, r24
    4104:	cd 01       	movw	r24, r26
    4106:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    410a:	dc 01       	movw	r26, r24
    410c:	cb 01       	movw	r24, r22
    410e:	bc 01       	movw	r22, r24
    4110:	cd 01       	movw	r24, r26
    4112:	26 ef       	ldi	r18, 0xF6	; 246
    4114:	38 e2       	ldi	r19, 0x28	; 40
    4116:	4c e9       	ldi	r20, 0x9C	; 156
    4118:	50 e4       	ldi	r21, 0x40	; 64
    411a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    411e:	dc 01       	movw	r26, r24
    4120:	cb 01       	movw	r24, r22
    4122:	ed 81       	ldd	r30, Y+5	; 0x05
    4124:	fe 81       	ldd	r31, Y+6	; 0x06
    4126:	80 83       	st	Z, r24
    4128:	91 83       	std	Z+1, r25	; 0x01
    412a:	a2 83       	std	Z+2, r26	; 0x02
    412c:	b3 83       	std	Z+3, r27	; 0x03
	*celsius = (*celsius/10.00);
    412e:	ed 81       	ldd	r30, Y+5	; 0x05
    4130:	fe 81       	ldd	r31, Y+6	; 0x06
    4132:	80 81       	ld	r24, Z
    4134:	91 81       	ldd	r25, Z+1	; 0x01
    4136:	a2 81       	ldd	r26, Z+2	; 0x02
    4138:	b3 81       	ldd	r27, Z+3	; 0x03
    413a:	bc 01       	movw	r22, r24
    413c:	cd 01       	movw	r24, r26
    413e:	20 e0       	ldi	r18, 0x00	; 0
    4140:	30 e0       	ldi	r19, 0x00	; 0
    4142:	40 e2       	ldi	r20, 0x20	; 32
    4144:	51 e4       	ldi	r21, 0x41	; 65
    4146:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    414a:	dc 01       	movw	r26, r24
    414c:	cb 01       	movw	r24, r22
    414e:	ed 81       	ldd	r30, Y+5	; 0x05
    4150:	fe 81       	ldd	r31, Y+6	; 0x06
    4152:	80 83       	st	Z, r24
    4154:	91 83       	std	Z+1, r25	; 0x01
    4156:	a2 83       	std	Z+2, r26	; 0x02
    4158:	b3 83       	std	Z+3, r27	; 0x03
}
    415a:	26 96       	adiw	r28, 0x06	; 6
    415c:	0f b6       	in	r0, 0x3f	; 63
    415e:	f8 94       	cli
    4160:	de bf       	out	0x3e, r29	; 62
    4162:	0f be       	out	0x3f, r0	; 63
    4164:	cd bf       	out	0x3d, r28	; 61
    4166:	cf 91       	pop	r28
    4168:	df 91       	pop	r29
    416a:	08 95       	ret

0000416c <Led_Init>:

#include "LED.h"


void Led_Init(u8 Led_Pin_Port, u8 Led_Pin_PinNum)
{
    416c:	df 93       	push	r29
    416e:	cf 93       	push	r28
    4170:	00 d0       	rcall	.+0      	; 0x4172 <Led_Init+0x6>
    4172:	cd b7       	in	r28, 0x3d	; 61
    4174:	de b7       	in	r29, 0x3e	; 62
    4176:	89 83       	std	Y+1, r24	; 0x01
    4178:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDirection(Led_Pin_Port, Led_Pin_PinNum, GPIO_DIRECTION_OUTPUT);
    417a:	89 81       	ldd	r24, Y+1	; 0x01
    417c:	6a 81       	ldd	r22, Y+2	; 0x02
    417e:	41 e0       	ldi	r20, 0x01	; 1
    4180:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <DIO_voidSetPinDirection>
}
    4184:	0f 90       	pop	r0
    4186:	0f 90       	pop	r0
    4188:	cf 91       	pop	r28
    418a:	df 91       	pop	r29
    418c:	08 95       	ret

0000418e <Led_TurnOn>:


void Led_TurnOn(u8 Led_Pin_Port, u8 Led_Pin_PinNum)
{
    418e:	df 93       	push	r29
    4190:	cf 93       	push	r28
    4192:	00 d0       	rcall	.+0      	; 0x4194 <Led_TurnOn+0x6>
    4194:	cd b7       	in	r28, 0x3d	; 61
    4196:	de b7       	in	r29, 0x3e	; 62
    4198:	89 83       	std	Y+1, r24	; 0x01
    419a:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinValue(Led_Pin_Port, Led_Pin_PinNum, GPIO_HIGH);
    419c:	89 81       	ldd	r24, Y+1	; 0x01
    419e:	6a 81       	ldd	r22, Y+2	; 0x02
    41a0:	41 e0       	ldi	r20, 0x01	; 1
    41a2:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
}
    41a6:	0f 90       	pop	r0
    41a8:	0f 90       	pop	r0
    41aa:	cf 91       	pop	r28
    41ac:	df 91       	pop	r29
    41ae:	08 95       	ret

000041b0 <Led_TurnOff>:


void Led_TurnOff(u8 Led_Pin_Port, u8 Led_Pin_PinNum)
{
    41b0:	df 93       	push	r29
    41b2:	cf 93       	push	r28
    41b4:	00 d0       	rcall	.+0      	; 0x41b6 <Led_TurnOff+0x6>
    41b6:	cd b7       	in	r28, 0x3d	; 61
    41b8:	de b7       	in	r29, 0x3e	; 62
    41ba:	89 83       	std	Y+1, r24	; 0x01
    41bc:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinValue(Led_Pin_Port, Led_Pin_PinNum, GPIO_LOW);
    41be:	89 81       	ldd	r24, Y+1	; 0x01
    41c0:	6a 81       	ldd	r22, Y+2	; 0x02
    41c2:	40 e0       	ldi	r20, 0x00	; 0
    41c4:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
}
    41c8:	0f 90       	pop	r0
    41ca:	0f 90       	pop	r0
    41cc:	cf 91       	pop	r28
    41ce:	df 91       	pop	r29
    41d0:	08 95       	ret

000041d2 <Led_Toggle>:


void Led_Toggle(u8 Led_Pin_Port, u8 Led_Pin_PinNum)
{
    41d2:	df 93       	push	r29
    41d4:	cf 93       	push	r28
    41d6:	00 d0       	rcall	.+0      	; 0x41d8 <Led_Toggle+0x6>
    41d8:	cd b7       	in	r28, 0x3d	; 61
    41da:	de b7       	in	r29, 0x3e	; 62
    41dc:	89 83       	std	Y+1, r24	; 0x01
    41de:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidTogglePinValue(Led_Pin_Port, Led_Pin_PinNum);
    41e0:	89 81       	ldd	r24, Y+1	; 0x01
    41e2:	6a 81       	ldd	r22, Y+2	; 0x02
    41e4:	0e 94 48 14 	call	0x2890	; 0x2890 <DIO_voidTogglePinValue>
}
    41e8:	0f 90       	pop	r0
    41ea:	0f 90       	pop	r0
    41ec:	cf 91       	pop	r28
    41ee:	df 91       	pop	r29
    41f0:	08 95       	ret

000041f2 <H_KEYPAD_void_Init>:




void H_KEYPAD_void_Init(void)
{
    41f2:	df 93       	push	r29
    41f4:	cf 93       	push	r28
    41f6:	cd b7       	in	r28, 0x3d	; 61
    41f8:	de b7       	in	r29, 0x3e	; 62
	// initialize rows to be output mode
	DIO_voidSetPinDirection(KEYPAD_R1_PORT, KEYPAD_R1_PIN, GPIO_DIRECTION_OUTPUT);
    41fa:	82 e0       	ldi	r24, 0x02	; 2
    41fc:	65 e0       	ldi	r22, 0x05	; 5
    41fe:	41 e0       	ldi	r20, 0x01	; 1
    4200:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_R2_PORT, KEYPAD_R2_PIN, GPIO_DIRECTION_OUTPUT);
    4204:	82 e0       	ldi	r24, 0x02	; 2
    4206:	64 e0       	ldi	r22, 0x04	; 4
    4208:	41 e0       	ldi	r20, 0x01	; 1
    420a:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_R3_PORT, KEYPAD_R3_PIN, GPIO_DIRECTION_OUTPUT);
    420e:	82 e0       	ldi	r24, 0x02	; 2
    4210:	63 e0       	ldi	r22, 0x03	; 3
    4212:	41 e0       	ldi	r20, 0x01	; 1
    4214:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_R4_PORT, KEYPAD_R4_PIN, GPIO_DIRECTION_OUTPUT);
    4218:	82 e0       	ldi	r24, 0x02	; 2
    421a:	62 e0       	ldi	r22, 0x02	; 2
    421c:	41 e0       	ldi	r20, 0x01	; 1
    421e:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <DIO_voidSetPinDirection>

	// initialize columns to be output mode
	DIO_voidSetPinDirection(KEYPAD_C1_PORT, KEYPAD_R1_PIN, GPIO_DIRECTION_INPUT);
    4222:	83 e0       	ldi	r24, 0x03	; 3
    4224:	65 e0       	ldi	r22, 0x05	; 5
    4226:	40 e0       	ldi	r20, 0x00	; 0
    4228:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_C2_PORT, KEYPAD_R2_PIN, GPIO_DIRECTION_INPUT);
    422c:	83 e0       	ldi	r24, 0x03	; 3
    422e:	64 e0       	ldi	r22, 0x04	; 4
    4230:	40 e0       	ldi	r20, 0x00	; 0
    4232:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_C3_PORT, KEYPAD_R3_PIN, GPIO_DIRECTION_INPUT);
    4236:	83 e0       	ldi	r24, 0x03	; 3
    4238:	63 e0       	ldi	r22, 0x03	; 3
    423a:	40 e0       	ldi	r20, 0x00	; 0
    423c:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_C4_PORT, KEYPAD_R4_PIN, GPIO_DIRECTION_INPUT);
    4240:	83 e0       	ldi	r24, 0x03	; 3
    4242:	62 e0       	ldi	r22, 0x02	; 2
    4244:	40 e0       	ldi	r20, 0x00	; 0
    4246:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <DIO_voidSetPinDirection>
}
    424a:	cf 91       	pop	r28
    424c:	df 91       	pop	r29
    424e:	08 95       	ret

00004250 <H_KEYPAD_u8_getPressedKey>:



void H_KEYPAD_u8_getPressedKey(u8 * pPressedKey)
{
    4250:	df 93       	push	r29
    4252:	cf 93       	push	r28
    4254:	cd b7       	in	r28, 0x3d	; 61
    4256:	de b7       	in	r29, 0x3e	; 62
    4258:	64 97       	sbiw	r28, 0x14	; 20
    425a:	0f b6       	in	r0, 0x3f	; 63
    425c:	f8 94       	cli
    425e:	de bf       	out	0x3e, r29	; 62
    4260:	0f be       	out	0x3f, r0	; 63
    4262:	cd bf       	out	0x3d, r28	; 61
    4264:	9c 8b       	std	Y+20, r25	; 0x14
    4266:	8b 8b       	std	Y+19, r24	; 0x13
	u8 l_row_counter = 0;
    4268:	1a 8a       	std	Y+18, r1	; 0x12
	u8 l_column_counter = 0;
    426a:	19 8a       	std	Y+17, r1	; 0x11
	u8 l_counter = 0;
    426c:	18 8a       	std	Y+16, r1	; 0x10
	u8 row_logic = 1;
    426e:	81 e0       	ldi	r24, 0x01	; 1
    4270:	8f 87       	std	Y+15, r24	; 0x0f
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
    4272:	1a 8a       	std	Y+18, r1	; 0x12
    4274:	d5 c0       	rjmp	.+426    	; 0x4420 <H_KEYPAD_u8_getPressedKey+0x1d0>
	{
		// Set All pins to be low at first
		for(l_counter = 0; l_counter < KEYPAD_ROWS; l_counter++)
    4276:	18 8a       	std	Y+16, r1	; 0x10
    4278:	16 c0       	rjmp	.+44     	; 0x42a6 <H_KEYPAD_u8_getPressedKey+0x56>
		{
			DIO_voidSetPinValue(rows_ports[l_counter], rows_pins[l_counter], GPIO_HIGH);
    427a:	88 89       	ldd	r24, Y+16	; 0x10
    427c:	88 2f       	mov	r24, r24
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	fc 01       	movw	r30, r24
    4282:	e9 52       	subi	r30, 0x29	; 41
    4284:	fe 4f       	sbci	r31, 0xFE	; 254
    4286:	20 81       	ld	r18, Z
    4288:	88 89       	ldd	r24, Y+16	; 0x10
    428a:	88 2f       	mov	r24, r24
    428c:	90 e0       	ldi	r25, 0x00	; 0
    428e:	fc 01       	movw	r30, r24
    4290:	e1 53       	subi	r30, 0x31	; 49
    4292:	fe 4f       	sbci	r31, 0xFE	; 254
    4294:	90 81       	ld	r25, Z
    4296:	82 2f       	mov	r24, r18
    4298:	69 2f       	mov	r22, r25
    429a:	41 e0       	ldi	r20, 0x01	; 1
    429c:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
	u8 l_counter = 0;
	u8 row_logic = 1;
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
	{
		// Set All pins to be low at first
		for(l_counter = 0; l_counter < KEYPAD_ROWS; l_counter++)
    42a0:	88 89       	ldd	r24, Y+16	; 0x10
    42a2:	8f 5f       	subi	r24, 0xFF	; 255
    42a4:	88 8b       	std	Y+16, r24	; 0x10
    42a6:	88 89       	ldd	r24, Y+16	; 0x10
    42a8:	84 30       	cpi	r24, 0x04	; 4
    42aa:	38 f3       	brcs	.-50     	; 0x427a <H_KEYPAD_u8_getPressedKey+0x2a>
		{
			DIO_voidSetPinValue(rows_ports[l_counter], rows_pins[l_counter], GPIO_HIGH);
		}

		DIO_voidSetPinValue(rows_ports[l_row_counter], rows_pins[l_row_counter], GPIO_LOW);
    42ac:	8a 89       	ldd	r24, Y+18	; 0x12
    42ae:	88 2f       	mov	r24, r24
    42b0:	90 e0       	ldi	r25, 0x00	; 0
    42b2:	fc 01       	movw	r30, r24
    42b4:	e9 52       	subi	r30, 0x29	; 41
    42b6:	fe 4f       	sbci	r31, 0xFE	; 254
    42b8:	20 81       	ld	r18, Z
    42ba:	8a 89       	ldd	r24, Y+18	; 0x12
    42bc:	88 2f       	mov	r24, r24
    42be:	90 e0       	ldi	r25, 0x00	; 0
    42c0:	fc 01       	movw	r30, r24
    42c2:	e1 53       	subi	r30, 0x31	; 49
    42c4:	fe 4f       	sbci	r31, 0xFE	; 254
    42c6:	90 81       	ld	r25, Z
    42c8:	82 2f       	mov	r24, r18
    42ca:	69 2f       	mov	r22, r25
    42cc:	40 e0       	ldi	r20, 0x00	; 0
    42ce:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
    42d2:	80 e0       	ldi	r24, 0x00	; 0
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	a0 e2       	ldi	r26, 0x20	; 32
    42d8:	b1 e4       	ldi	r27, 0x41	; 65
    42da:	8b 87       	std	Y+11, r24	; 0x0b
    42dc:	9c 87       	std	Y+12, r25	; 0x0c
    42de:	ad 87       	std	Y+13, r26	; 0x0d
    42e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    42e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    42e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    42e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    42ea:	20 e0       	ldi	r18, 0x00	; 0
    42ec:	30 e0       	ldi	r19, 0x00	; 0
    42ee:	4a e7       	ldi	r20, 0x7A	; 122
    42f0:	55 e4       	ldi	r21, 0x45	; 69
    42f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42f6:	dc 01       	movw	r26, r24
    42f8:	cb 01       	movw	r24, r22
    42fa:	8f 83       	std	Y+7, r24	; 0x07
    42fc:	98 87       	std	Y+8, r25	; 0x08
    42fe:	a9 87       	std	Y+9, r26	; 0x09
    4300:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4302:	6f 81       	ldd	r22, Y+7	; 0x07
    4304:	78 85       	ldd	r23, Y+8	; 0x08
    4306:	89 85       	ldd	r24, Y+9	; 0x09
    4308:	9a 85       	ldd	r25, Y+10	; 0x0a
    430a:	20 e0       	ldi	r18, 0x00	; 0
    430c:	30 e0       	ldi	r19, 0x00	; 0
    430e:	40 e8       	ldi	r20, 0x80	; 128
    4310:	5f e3       	ldi	r21, 0x3F	; 63
    4312:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4316:	88 23       	and	r24, r24
    4318:	2c f4       	brge	.+10     	; 0x4324 <H_KEYPAD_u8_getPressedKey+0xd4>
		__ticks = 1;
    431a:	81 e0       	ldi	r24, 0x01	; 1
    431c:	90 e0       	ldi	r25, 0x00	; 0
    431e:	9e 83       	std	Y+6, r25	; 0x06
    4320:	8d 83       	std	Y+5, r24	; 0x05
    4322:	3f c0       	rjmp	.+126    	; 0x43a2 <H_KEYPAD_u8_getPressedKey+0x152>
	else if (__tmp > 65535)
    4324:	6f 81       	ldd	r22, Y+7	; 0x07
    4326:	78 85       	ldd	r23, Y+8	; 0x08
    4328:	89 85       	ldd	r24, Y+9	; 0x09
    432a:	9a 85       	ldd	r25, Y+10	; 0x0a
    432c:	20 e0       	ldi	r18, 0x00	; 0
    432e:	3f ef       	ldi	r19, 0xFF	; 255
    4330:	4f e7       	ldi	r20, 0x7F	; 127
    4332:	57 e4       	ldi	r21, 0x47	; 71
    4334:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4338:	18 16       	cp	r1, r24
    433a:	4c f5       	brge	.+82     	; 0x438e <H_KEYPAD_u8_getPressedKey+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    433c:	6b 85       	ldd	r22, Y+11	; 0x0b
    433e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4340:	8d 85       	ldd	r24, Y+13	; 0x0d
    4342:	9e 85       	ldd	r25, Y+14	; 0x0e
    4344:	20 e0       	ldi	r18, 0x00	; 0
    4346:	30 e0       	ldi	r19, 0x00	; 0
    4348:	40 e2       	ldi	r20, 0x20	; 32
    434a:	51 e4       	ldi	r21, 0x41	; 65
    434c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4350:	dc 01       	movw	r26, r24
    4352:	cb 01       	movw	r24, r22
    4354:	bc 01       	movw	r22, r24
    4356:	cd 01       	movw	r24, r26
    4358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    435c:	dc 01       	movw	r26, r24
    435e:	cb 01       	movw	r24, r22
    4360:	9e 83       	std	Y+6, r25	; 0x06
    4362:	8d 83       	std	Y+5, r24	; 0x05
    4364:	0f c0       	rjmp	.+30     	; 0x4384 <H_KEYPAD_u8_getPressedKey+0x134>
    4366:	80 e9       	ldi	r24, 0x90	; 144
    4368:	91 e0       	ldi	r25, 0x01	; 1
    436a:	9c 83       	std	Y+4, r25	; 0x04
    436c:	8b 83       	std	Y+3, r24	; 0x03
    436e:	8b 81       	ldd	r24, Y+3	; 0x03
    4370:	9c 81       	ldd	r25, Y+4	; 0x04
    4372:	01 97       	sbiw	r24, 0x01	; 1
    4374:	f1 f7       	brne	.-4      	; 0x4372 <H_KEYPAD_u8_getPressedKey+0x122>
    4376:	9c 83       	std	Y+4, r25	; 0x04
    4378:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    437a:	8d 81       	ldd	r24, Y+5	; 0x05
    437c:	9e 81       	ldd	r25, Y+6	; 0x06
    437e:	01 97       	sbiw	r24, 0x01	; 1
    4380:	9e 83       	std	Y+6, r25	; 0x06
    4382:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4384:	8d 81       	ldd	r24, Y+5	; 0x05
    4386:	9e 81       	ldd	r25, Y+6	; 0x06
    4388:	00 97       	sbiw	r24, 0x00	; 0
    438a:	69 f7       	brne	.-38     	; 0x4366 <H_KEYPAD_u8_getPressedKey+0x116>
    438c:	14 c0       	rjmp	.+40     	; 0x43b6 <H_KEYPAD_u8_getPressedKey+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    438e:	6f 81       	ldd	r22, Y+7	; 0x07
    4390:	78 85       	ldd	r23, Y+8	; 0x08
    4392:	89 85       	ldd	r24, Y+9	; 0x09
    4394:	9a 85       	ldd	r25, Y+10	; 0x0a
    4396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    439a:	dc 01       	movw	r26, r24
    439c:	cb 01       	movw	r24, r22
    439e:	9e 83       	std	Y+6, r25	; 0x06
    43a0:	8d 83       	std	Y+5, r24	; 0x05
    43a2:	8d 81       	ldd	r24, Y+5	; 0x05
    43a4:	9e 81       	ldd	r25, Y+6	; 0x06
    43a6:	9a 83       	std	Y+2, r25	; 0x02
    43a8:	89 83       	std	Y+1, r24	; 0x01
    43aa:	89 81       	ldd	r24, Y+1	; 0x01
    43ac:	9a 81       	ldd	r25, Y+2	; 0x02
    43ae:	01 97       	sbiw	r24, 0x01	; 1
    43b0:	f1 f7       	brne	.-4      	; 0x43ae <H_KEYPAD_u8_getPressedKey+0x15e>
    43b2:	9a 83       	std	Y+2, r25	; 0x02
    43b4:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(10);

		for(l_column_counter = 0; l_column_counter < KEYPAD_COLUMNS; l_column_counter++)
    43b6:	19 8a       	std	Y+17, r1	; 0x11
    43b8:	2d c0       	rjmp	.+90     	; 0x4414 <H_KEYPAD_u8_getPressedKey+0x1c4>
		{
			row_logic = DIO_u8GetPinValue(cols_ports[l_column_counter], cols_pins[l_column_counter]);
    43ba:	89 89       	ldd	r24, Y+17	; 0x11
    43bc:	88 2f       	mov	r24, r24
    43be:	90 e0       	ldi	r25, 0x00	; 0
    43c0:	fc 01       	movw	r30, r24
    43c2:	e5 52       	subi	r30, 0x25	; 37
    43c4:	fe 4f       	sbci	r31, 0xFE	; 254
    43c6:	20 81       	ld	r18, Z
    43c8:	89 89       	ldd	r24, Y+17	; 0x11
    43ca:	88 2f       	mov	r24, r24
    43cc:	90 e0       	ldi	r25, 0x00	; 0
    43ce:	fc 01       	movw	r30, r24
    43d0:	ed 52       	subi	r30, 0x2D	; 45
    43d2:	fe 4f       	sbci	r31, 0xFE	; 254
    43d4:	90 81       	ld	r25, Z
    43d6:	82 2f       	mov	r24, r18
    43d8:	69 2f       	mov	r22, r25
    43da:	0e 94 80 14 	call	0x2900	; 0x2900 <DIO_u8GetPinValue>
    43de:	8f 87       	std	Y+15, r24	; 0x0f

			if(row_logic == GPIO_LOW)
    43e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    43e2:	88 23       	and	r24, r24
    43e4:	a1 f4       	brne	.+40     	; 0x440e <H_KEYPAD_u8_getPressedKey+0x1be>
			{
				*pPressedKey = btn_values[l_row_counter][l_column_counter];
    43e6:	8a 89       	ldd	r24, Y+18	; 0x12
    43e8:	48 2f       	mov	r20, r24
    43ea:	50 e0       	ldi	r21, 0x00	; 0
    43ec:	89 89       	ldd	r24, Y+17	; 0x11
    43ee:	28 2f       	mov	r18, r24
    43f0:	30 e0       	ldi	r19, 0x00	; 0
    43f2:	ca 01       	movw	r24, r20
    43f4:	88 0f       	add	r24, r24
    43f6:	99 1f       	adc	r25, r25
    43f8:	88 0f       	add	r24, r24
    43fa:	99 1f       	adc	r25, r25
    43fc:	82 0f       	add	r24, r18
    43fe:	93 1f       	adc	r25, r19
    4400:	fc 01       	movw	r30, r24
    4402:	e5 51       	subi	r30, 0x15	; 21
    4404:	fe 4f       	sbci	r31, 0xFE	; 254
    4406:	80 81       	ld	r24, Z
    4408:	eb 89       	ldd	r30, Y+19	; 0x13
    440a:	fc 89       	ldd	r31, Y+20	; 0x14
    440c:	80 83       	st	Z, r24

		DIO_voidSetPinValue(rows_ports[l_row_counter], rows_pins[l_row_counter], GPIO_LOW);

		_delay_ms(10);

		for(l_column_counter = 0; l_column_counter < KEYPAD_COLUMNS; l_column_counter++)
    440e:	89 89       	ldd	r24, Y+17	; 0x11
    4410:	8f 5f       	subi	r24, 0xFF	; 255
    4412:	89 8b       	std	Y+17, r24	; 0x11
    4414:	89 89       	ldd	r24, Y+17	; 0x11
    4416:	84 30       	cpi	r24, 0x04	; 4
    4418:	80 f2       	brcs	.-96     	; 0x43ba <H_KEYPAD_u8_getPressedKey+0x16a>
{
	u8 l_row_counter = 0;
	u8 l_column_counter = 0;
	u8 l_counter = 0;
	u8 row_logic = 1;
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
    441a:	8a 89       	ldd	r24, Y+18	; 0x12
    441c:	8f 5f       	subi	r24, 0xFF	; 255
    441e:	8a 8b       	std	Y+18, r24	; 0x12
    4420:	8a 89       	ldd	r24, Y+18	; 0x12
    4422:	84 30       	cpi	r24, 0x04	; 4
    4424:	08 f4       	brcc	.+2      	; 0x4428 <H_KEYPAD_u8_getPressedKey+0x1d8>
    4426:	27 cf       	rjmp	.-434    	; 0x4276 <H_KEYPAD_u8_getPressedKey+0x26>
				*pPressedKey = btn_values[l_row_counter][l_column_counter];
			}
			else{/* Nothing */}
		}
	}
}
    4428:	64 96       	adiw	r28, 0x14	; 20
    442a:	0f b6       	in	r0, 0x3f	; 63
    442c:	f8 94       	cli
    442e:	de bf       	out	0x3e, r29	; 62
    4430:	0f be       	out	0x3f, r0	; 63
    4432:	cd bf       	out	0x3d, r28	; 61
    4434:	cf 91       	pop	r28
    4436:	df 91       	pop	r29
    4438:	08 95       	ret

0000443a <keypad_cursor_init>:

/* -------------------------------------------------------------- Additional functions ----------------------------------------- */

// to initialize digits
void keypad_cursor_init(keypad_digit_t *digits_obj)
{
    443a:	df 93       	push	r29
    443c:	cf 93       	push	r28
    443e:	00 d0       	rcall	.+0      	; 0x4440 <keypad_cursor_init+0x6>
    4440:	0f 92       	push	r0
    4442:	cd b7       	in	r28, 0x3d	; 61
    4444:	de b7       	in	r29, 0x3e	; 62
    4446:	9b 83       	std	Y+3, r25	; 0x03
    4448:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t l_cursor = 0;
    444a:	19 82       	std	Y+1, r1	; 0x01
	if(NULL != digits_obj)
    444c:	8a 81       	ldd	r24, Y+2	; 0x02
    444e:	9b 81       	ldd	r25, Y+3	; 0x03
    4450:	00 97       	sbiw	r24, 0x00	; 0
    4452:	f1 f0       	breq	.+60     	; 0x4490 <keypad_cursor_init+0x56>
	{
		digits_obj->cursor = 0;
    4454:	ea 81       	ldd	r30, Y+2	; 0x02
    4456:	fb 81       	ldd	r31, Y+3	; 0x03
    4458:	10 86       	std	Z+8, r1	; 0x08
		for(l_cursor = 0; l_cursor < NUM_OF_DIGITS + 1; l_cursor++)
    445a:	19 82       	std	Y+1, r1	; 0x01
    445c:	16 c0       	rjmp	.+44     	; 0x448a <keypad_cursor_init+0x50>
		{
			digits_obj->digits[l_cursor] = 0;
    445e:	89 81       	ldd	r24, Y+1	; 0x01
    4460:	28 2f       	mov	r18, r24
    4462:	30 e0       	ldi	r19, 0x00	; 0
    4464:	8a 81       	ldd	r24, Y+2	; 0x02
    4466:	9b 81       	ldd	r25, Y+3	; 0x03
    4468:	fc 01       	movw	r30, r24
    446a:	e2 0f       	add	r30, r18
    446c:	f3 1f       	adc	r31, r19
    446e:	10 82       	st	Z, r1
			digits_obj->pass_digits[l_cursor] = 0;
    4470:	89 81       	ldd	r24, Y+1	; 0x01
    4472:	28 2f       	mov	r18, r24
    4474:	30 e0       	ldi	r19, 0x00	; 0
    4476:	8a 81       	ldd	r24, Y+2	; 0x02
    4478:	9b 81       	ldd	r25, Y+3	; 0x03
    447a:	82 0f       	add	r24, r18
    447c:	93 1f       	adc	r25, r19
    447e:	fc 01       	movw	r30, r24
    4480:	34 96       	adiw	r30, 0x04	; 4
    4482:	10 82       	st	Z, r1
{
	uint8_t l_cursor = 0;
	if(NULL != digits_obj)
	{
		digits_obj->cursor = 0;
		for(l_cursor = 0; l_cursor < NUM_OF_DIGITS + 1; l_cursor++)
    4484:	89 81       	ldd	r24, Y+1	; 0x01
    4486:	8f 5f       	subi	r24, 0xFF	; 255
    4488:	89 83       	std	Y+1, r24	; 0x01
    448a:	89 81       	ldd	r24, Y+1	; 0x01
    448c:	84 30       	cpi	r24, 0x04	; 4
    448e:	38 f3       	brcs	.-50     	; 0x445e <keypad_cursor_init+0x24>
		{
			digits_obj->digits[l_cursor] = 0;
			digits_obj->pass_digits[l_cursor] = 0;
		}
	}
}
    4490:	0f 90       	pop	r0
    4492:	0f 90       	pop	r0
    4494:	0f 90       	pop	r0
    4496:	cf 91       	pop	r28
    4498:	df 91       	pop	r29
    449a:	08 95       	ret

0000449c <H_KEYPAD_u8_WriteOnDigits>:



void H_KEYPAD_u8_WriteOnDigits(keypad_digit_t *digits_obj)
{
    449c:	df 93       	push	r29
    449e:	cf 93       	push	r28
    44a0:	cd b7       	in	r28, 0x3d	; 61
    44a2:	de b7       	in	r29, 0x3e	; 62
    44a4:	64 97       	sbiw	r28, 0x14	; 20
    44a6:	0f b6       	in	r0, 0x3f	; 63
    44a8:	f8 94       	cli
    44aa:	de bf       	out	0x3e, r29	; 62
    44ac:	0f be       	out	0x3f, r0	; 63
    44ae:	cd bf       	out	0x3d, r28	; 61
    44b0:	9c 8b       	std	Y+20, r25	; 0x14
    44b2:	8b 8b       	std	Y+19, r24	; 0x13
	u8 l_row_counter = 0;
    44b4:	1a 8a       	std	Y+18, r1	; 0x12
	u8 l_column_counter = 0;
    44b6:	19 8a       	std	Y+17, r1	; 0x11
	u8 l_counter = 0;
    44b8:	18 8a       	std	Y+16, r1	; 0x10
	u8 row_logic = 1;
    44ba:	81 e0       	ldi	r24, 0x01	; 1
    44bc:	8f 87       	std	Y+15, r24	; 0x0f
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
    44be:	1a 8a       	std	Y+18, r1	; 0x12
    44c0:	1f c1       	rjmp	.+574    	; 0x4700 <H_KEYPAD_u8_WriteOnDigits+0x264>
	{
		// Set All pins to be low at first
		for(l_counter = 0; l_counter < KEYPAD_ROWS; l_counter++)
    44c2:	18 8a       	std	Y+16, r1	; 0x10
    44c4:	16 c0       	rjmp	.+44     	; 0x44f2 <H_KEYPAD_u8_WriteOnDigits+0x56>
		{
			DIO_voidSetPinValue(rows_ports[l_counter], rows_pins[l_counter], GPIO_HIGH);
    44c6:	88 89       	ldd	r24, Y+16	; 0x10
    44c8:	88 2f       	mov	r24, r24
    44ca:	90 e0       	ldi	r25, 0x00	; 0
    44cc:	fc 01       	movw	r30, r24
    44ce:	e9 52       	subi	r30, 0x29	; 41
    44d0:	fe 4f       	sbci	r31, 0xFE	; 254
    44d2:	20 81       	ld	r18, Z
    44d4:	88 89       	ldd	r24, Y+16	; 0x10
    44d6:	88 2f       	mov	r24, r24
    44d8:	90 e0       	ldi	r25, 0x00	; 0
    44da:	fc 01       	movw	r30, r24
    44dc:	e1 53       	subi	r30, 0x31	; 49
    44de:	fe 4f       	sbci	r31, 0xFE	; 254
    44e0:	90 81       	ld	r25, Z
    44e2:	82 2f       	mov	r24, r18
    44e4:	69 2f       	mov	r22, r25
    44e6:	41 e0       	ldi	r20, 0x01	; 1
    44e8:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
	u8 l_counter = 0;
	u8 row_logic = 1;
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
	{
		// Set All pins to be low at first
		for(l_counter = 0; l_counter < KEYPAD_ROWS; l_counter++)
    44ec:	88 89       	ldd	r24, Y+16	; 0x10
    44ee:	8f 5f       	subi	r24, 0xFF	; 255
    44f0:	88 8b       	std	Y+16, r24	; 0x10
    44f2:	88 89       	ldd	r24, Y+16	; 0x10
    44f4:	84 30       	cpi	r24, 0x04	; 4
    44f6:	38 f3       	brcs	.-50     	; 0x44c6 <H_KEYPAD_u8_WriteOnDigits+0x2a>
		{
			DIO_voidSetPinValue(rows_ports[l_counter], rows_pins[l_counter], GPIO_HIGH);
		}

		DIO_voidSetPinValue(rows_ports[l_row_counter], rows_pins[l_row_counter], GPIO_LOW);
    44f8:	8a 89       	ldd	r24, Y+18	; 0x12
    44fa:	88 2f       	mov	r24, r24
    44fc:	90 e0       	ldi	r25, 0x00	; 0
    44fe:	fc 01       	movw	r30, r24
    4500:	e9 52       	subi	r30, 0x29	; 41
    4502:	fe 4f       	sbci	r31, 0xFE	; 254
    4504:	20 81       	ld	r18, Z
    4506:	8a 89       	ldd	r24, Y+18	; 0x12
    4508:	88 2f       	mov	r24, r24
    450a:	90 e0       	ldi	r25, 0x00	; 0
    450c:	fc 01       	movw	r30, r24
    450e:	e1 53       	subi	r30, 0x31	; 49
    4510:	fe 4f       	sbci	r31, 0xFE	; 254
    4512:	90 81       	ld	r25, Z
    4514:	82 2f       	mov	r24, r18
    4516:	69 2f       	mov	r22, r25
    4518:	40 e0       	ldi	r20, 0x00	; 0
    451a:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
    451e:	80 e0       	ldi	r24, 0x00	; 0
    4520:	90 e0       	ldi	r25, 0x00	; 0
    4522:	a0 ea       	ldi	r26, 0xA0	; 160
    4524:	b1 e4       	ldi	r27, 0x41	; 65
    4526:	8b 87       	std	Y+11, r24	; 0x0b
    4528:	9c 87       	std	Y+12, r25	; 0x0c
    452a:	ad 87       	std	Y+13, r26	; 0x0d
    452c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    452e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4530:	7c 85       	ldd	r23, Y+12	; 0x0c
    4532:	8d 85       	ldd	r24, Y+13	; 0x0d
    4534:	9e 85       	ldd	r25, Y+14	; 0x0e
    4536:	20 e0       	ldi	r18, 0x00	; 0
    4538:	30 e0       	ldi	r19, 0x00	; 0
    453a:	4a e7       	ldi	r20, 0x7A	; 122
    453c:	55 e4       	ldi	r21, 0x45	; 69
    453e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4542:	dc 01       	movw	r26, r24
    4544:	cb 01       	movw	r24, r22
    4546:	8f 83       	std	Y+7, r24	; 0x07
    4548:	98 87       	std	Y+8, r25	; 0x08
    454a:	a9 87       	std	Y+9, r26	; 0x09
    454c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    454e:	6f 81       	ldd	r22, Y+7	; 0x07
    4550:	78 85       	ldd	r23, Y+8	; 0x08
    4552:	89 85       	ldd	r24, Y+9	; 0x09
    4554:	9a 85       	ldd	r25, Y+10	; 0x0a
    4556:	20 e0       	ldi	r18, 0x00	; 0
    4558:	30 e0       	ldi	r19, 0x00	; 0
    455a:	40 e8       	ldi	r20, 0x80	; 128
    455c:	5f e3       	ldi	r21, 0x3F	; 63
    455e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4562:	88 23       	and	r24, r24
    4564:	2c f4       	brge	.+10     	; 0x4570 <H_KEYPAD_u8_WriteOnDigits+0xd4>
		__ticks = 1;
    4566:	81 e0       	ldi	r24, 0x01	; 1
    4568:	90 e0       	ldi	r25, 0x00	; 0
    456a:	9e 83       	std	Y+6, r25	; 0x06
    456c:	8d 83       	std	Y+5, r24	; 0x05
    456e:	3f c0       	rjmp	.+126    	; 0x45ee <H_KEYPAD_u8_WriteOnDigits+0x152>
	else if (__tmp > 65535)
    4570:	6f 81       	ldd	r22, Y+7	; 0x07
    4572:	78 85       	ldd	r23, Y+8	; 0x08
    4574:	89 85       	ldd	r24, Y+9	; 0x09
    4576:	9a 85       	ldd	r25, Y+10	; 0x0a
    4578:	20 e0       	ldi	r18, 0x00	; 0
    457a:	3f ef       	ldi	r19, 0xFF	; 255
    457c:	4f e7       	ldi	r20, 0x7F	; 127
    457e:	57 e4       	ldi	r21, 0x47	; 71
    4580:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4584:	18 16       	cp	r1, r24
    4586:	4c f5       	brge	.+82     	; 0x45da <H_KEYPAD_u8_WriteOnDigits+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4588:	6b 85       	ldd	r22, Y+11	; 0x0b
    458a:	7c 85       	ldd	r23, Y+12	; 0x0c
    458c:	8d 85       	ldd	r24, Y+13	; 0x0d
    458e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4590:	20 e0       	ldi	r18, 0x00	; 0
    4592:	30 e0       	ldi	r19, 0x00	; 0
    4594:	40 e2       	ldi	r20, 0x20	; 32
    4596:	51 e4       	ldi	r21, 0x41	; 65
    4598:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    459c:	dc 01       	movw	r26, r24
    459e:	cb 01       	movw	r24, r22
    45a0:	bc 01       	movw	r22, r24
    45a2:	cd 01       	movw	r24, r26
    45a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45a8:	dc 01       	movw	r26, r24
    45aa:	cb 01       	movw	r24, r22
    45ac:	9e 83       	std	Y+6, r25	; 0x06
    45ae:	8d 83       	std	Y+5, r24	; 0x05
    45b0:	0f c0       	rjmp	.+30     	; 0x45d0 <H_KEYPAD_u8_WriteOnDigits+0x134>
    45b2:	80 e9       	ldi	r24, 0x90	; 144
    45b4:	91 e0       	ldi	r25, 0x01	; 1
    45b6:	9c 83       	std	Y+4, r25	; 0x04
    45b8:	8b 83       	std	Y+3, r24	; 0x03
    45ba:	8b 81       	ldd	r24, Y+3	; 0x03
    45bc:	9c 81       	ldd	r25, Y+4	; 0x04
    45be:	01 97       	sbiw	r24, 0x01	; 1
    45c0:	f1 f7       	brne	.-4      	; 0x45be <H_KEYPAD_u8_WriteOnDigits+0x122>
    45c2:	9c 83       	std	Y+4, r25	; 0x04
    45c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45c6:	8d 81       	ldd	r24, Y+5	; 0x05
    45c8:	9e 81       	ldd	r25, Y+6	; 0x06
    45ca:	01 97       	sbiw	r24, 0x01	; 1
    45cc:	9e 83       	std	Y+6, r25	; 0x06
    45ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45d0:	8d 81       	ldd	r24, Y+5	; 0x05
    45d2:	9e 81       	ldd	r25, Y+6	; 0x06
    45d4:	00 97       	sbiw	r24, 0x00	; 0
    45d6:	69 f7       	brne	.-38     	; 0x45b2 <H_KEYPAD_u8_WriteOnDigits+0x116>
    45d8:	14 c0       	rjmp	.+40     	; 0x4602 <H_KEYPAD_u8_WriteOnDigits+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45da:	6f 81       	ldd	r22, Y+7	; 0x07
    45dc:	78 85       	ldd	r23, Y+8	; 0x08
    45de:	89 85       	ldd	r24, Y+9	; 0x09
    45e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    45e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45e6:	dc 01       	movw	r26, r24
    45e8:	cb 01       	movw	r24, r22
    45ea:	9e 83       	std	Y+6, r25	; 0x06
    45ec:	8d 83       	std	Y+5, r24	; 0x05
    45ee:	8d 81       	ldd	r24, Y+5	; 0x05
    45f0:	9e 81       	ldd	r25, Y+6	; 0x06
    45f2:	9a 83       	std	Y+2, r25	; 0x02
    45f4:	89 83       	std	Y+1, r24	; 0x01
    45f6:	89 81       	ldd	r24, Y+1	; 0x01
    45f8:	9a 81       	ldd	r25, Y+2	; 0x02
    45fa:	01 97       	sbiw	r24, 0x01	; 1
    45fc:	f1 f7       	brne	.-4      	; 0x45fa <H_KEYPAD_u8_WriteOnDigits+0x15e>
    45fe:	9a 83       	std	Y+2, r25	; 0x02
    4600:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(20);

		for(l_column_counter = 0; l_column_counter < KEYPAD_COLUMNS; l_column_counter++)
    4602:	19 8a       	std	Y+17, r1	; 0x11
    4604:	76 c0       	rjmp	.+236    	; 0x46f2 <H_KEYPAD_u8_WriteOnDigits+0x256>
		{
			row_logic = DIO_u8GetPinValue(cols_ports[l_column_counter], cols_pins[l_column_counter]);
    4606:	89 89       	ldd	r24, Y+17	; 0x11
    4608:	88 2f       	mov	r24, r24
    460a:	90 e0       	ldi	r25, 0x00	; 0
    460c:	fc 01       	movw	r30, r24
    460e:	e5 52       	subi	r30, 0x25	; 37
    4610:	fe 4f       	sbci	r31, 0xFE	; 254
    4612:	20 81       	ld	r18, Z
    4614:	89 89       	ldd	r24, Y+17	; 0x11
    4616:	88 2f       	mov	r24, r24
    4618:	90 e0       	ldi	r25, 0x00	; 0
    461a:	fc 01       	movw	r30, r24
    461c:	ed 52       	subi	r30, 0x2D	; 45
    461e:	fe 4f       	sbci	r31, 0xFE	; 254
    4620:	90 81       	ld	r25, Z
    4622:	82 2f       	mov	r24, r18
    4624:	69 2f       	mov	r22, r25
    4626:	0e 94 80 14 	call	0x2900	; 0x2900 <DIO_u8GetPinValue>
    462a:	8f 87       	std	Y+15, r24	; 0x0f

			if(row_logic == GPIO_LOW)
    462c:	8f 85       	ldd	r24, Y+15	; 0x0f
    462e:	88 23       	and	r24, r24
    4630:	09 f0       	breq	.+2      	; 0x4634 <H_KEYPAD_u8_WriteOnDigits+0x198>
    4632:	5c c0       	rjmp	.+184    	; 0x46ec <H_KEYPAD_u8_WriteOnDigits+0x250>
			{
				if(digits_obj->cursor < NUM_OF_DIGITS)
    4634:	eb 89       	ldd	r30, Y+19	; 0x13
    4636:	fc 89       	ldd	r31, Y+20	; 0x14
    4638:	80 85       	ldd	r24, Z+8	; 0x08
    463a:	83 30       	cpi	r24, 0x03	; 3
    463c:	08 f0       	brcs	.+2      	; 0x4640 <H_KEYPAD_u8_WriteOnDigits+0x1a4>
    463e:	40 c0       	rjmp	.+128    	; 0x46c0 <H_KEYPAD_u8_WriteOnDigits+0x224>
				{
					digits_obj->digits[digits_obj->cursor] = btn_values2[l_row_counter][l_column_counter];
    4640:	eb 89       	ldd	r30, Y+19	; 0x13
    4642:	fc 89       	ldd	r31, Y+20	; 0x14
    4644:	80 85       	ldd	r24, Z+8	; 0x08
    4646:	68 2f       	mov	r22, r24
    4648:	70 e0       	ldi	r23, 0x00	; 0
    464a:	8a 89       	ldd	r24, Y+18	; 0x12
    464c:	48 2f       	mov	r20, r24
    464e:	50 e0       	ldi	r21, 0x00	; 0
    4650:	89 89       	ldd	r24, Y+17	; 0x11
    4652:	28 2f       	mov	r18, r24
    4654:	30 e0       	ldi	r19, 0x00	; 0
    4656:	ca 01       	movw	r24, r20
    4658:	88 0f       	add	r24, r24
    465a:	99 1f       	adc	r25, r25
    465c:	88 0f       	add	r24, r24
    465e:	99 1f       	adc	r25, r25
    4660:	82 0f       	add	r24, r18
    4662:	93 1f       	adc	r25, r19
    4664:	fc 01       	movw	r30, r24
    4666:	e5 50       	subi	r30, 0x05	; 5
    4668:	fe 4f       	sbci	r31, 0xFE	; 254
    466a:	20 81       	ld	r18, Z
    466c:	8b 89       	ldd	r24, Y+19	; 0x13
    466e:	9c 89       	ldd	r25, Y+20	; 0x14
    4670:	fc 01       	movw	r30, r24
    4672:	e6 0f       	add	r30, r22
    4674:	f7 1f       	adc	r31, r23
    4676:	20 83       	st	Z, r18
					digits_obj->pass_digits[digits_obj->cursor] = btn_values2_pass[l_row_counter][l_column_counter];
    4678:	eb 89       	ldd	r30, Y+19	; 0x13
    467a:	fc 89       	ldd	r31, Y+20	; 0x14
    467c:	80 85       	ldd	r24, Z+8	; 0x08
    467e:	68 2f       	mov	r22, r24
    4680:	70 e0       	ldi	r23, 0x00	; 0
    4682:	8a 89       	ldd	r24, Y+18	; 0x12
    4684:	48 2f       	mov	r20, r24
    4686:	50 e0       	ldi	r21, 0x00	; 0
    4688:	89 89       	ldd	r24, Y+17	; 0x11
    468a:	28 2f       	mov	r18, r24
    468c:	30 e0       	ldi	r19, 0x00	; 0
    468e:	ca 01       	movw	r24, r20
    4690:	88 0f       	add	r24, r24
    4692:	99 1f       	adc	r25, r25
    4694:	88 0f       	add	r24, r24
    4696:	99 1f       	adc	r25, r25
    4698:	82 0f       	add	r24, r18
    469a:	93 1f       	adc	r25, r19
    469c:	fc 01       	movw	r30, r24
    469e:	e5 5f       	subi	r30, 0xF5	; 245
    46a0:	fd 4f       	sbci	r31, 0xFD	; 253
    46a2:	20 81       	ld	r18, Z
    46a4:	8b 89       	ldd	r24, Y+19	; 0x13
    46a6:	9c 89       	ldd	r25, Y+20	; 0x14
    46a8:	86 0f       	add	r24, r22
    46aa:	97 1f       	adc	r25, r23
    46ac:	fc 01       	movw	r30, r24
    46ae:	34 96       	adiw	r30, 0x04	; 4
    46b0:	20 83       	st	Z, r18
					digits_obj->cursor += 1;
    46b2:	eb 89       	ldd	r30, Y+19	; 0x13
    46b4:	fc 89       	ldd	r31, Y+20	; 0x14
    46b6:	80 85       	ldd	r24, Z+8	; 0x08
    46b8:	8f 5f       	subi	r24, 0xFF	; 255
    46ba:	eb 89       	ldd	r30, Y+19	; 0x13
    46bc:	fc 89       	ldd	r31, Y+20	; 0x14
    46be:	80 87       	std	Z+8, r24	; 0x08
				}

				if(btn_values2[l_row_counter][l_column_counter] == '-')
    46c0:	8a 89       	ldd	r24, Y+18	; 0x12
    46c2:	48 2f       	mov	r20, r24
    46c4:	50 e0       	ldi	r21, 0x00	; 0
    46c6:	89 89       	ldd	r24, Y+17	; 0x11
    46c8:	28 2f       	mov	r18, r24
    46ca:	30 e0       	ldi	r19, 0x00	; 0
    46cc:	ca 01       	movw	r24, r20
    46ce:	88 0f       	add	r24, r24
    46d0:	99 1f       	adc	r25, r25
    46d2:	88 0f       	add	r24, r24
    46d4:	99 1f       	adc	r25, r25
    46d6:	82 0f       	add	r24, r18
    46d8:	93 1f       	adc	r25, r19
    46da:	fc 01       	movw	r30, r24
    46dc:	e5 50       	subi	r30, 0x05	; 5
    46de:	fe 4f       	sbci	r31, 0xFE	; 254
    46e0:	80 81       	ld	r24, Z
    46e2:	8d 32       	cpi	r24, 0x2D	; 45
    46e4:	19 f4       	brne	.+6      	; 0x46ec <H_KEYPAD_u8_WriteOnDigits+0x250>
				{
					digits_obj->cursor = 0;
    46e6:	eb 89       	ldd	r30, Y+19	; 0x13
    46e8:	fc 89       	ldd	r31, Y+20	; 0x14
    46ea:	10 86       	std	Z+8, r1	; 0x08

		DIO_voidSetPinValue(rows_ports[l_row_counter], rows_pins[l_row_counter], GPIO_LOW);

		_delay_ms(20);

		for(l_column_counter = 0; l_column_counter < KEYPAD_COLUMNS; l_column_counter++)
    46ec:	89 89       	ldd	r24, Y+17	; 0x11
    46ee:	8f 5f       	subi	r24, 0xFF	; 255
    46f0:	89 8b       	std	Y+17, r24	; 0x11
    46f2:	89 89       	ldd	r24, Y+17	; 0x11
    46f4:	84 30       	cpi	r24, 0x04	; 4
    46f6:	08 f4       	brcc	.+2      	; 0x46fa <H_KEYPAD_u8_WriteOnDigits+0x25e>
    46f8:	86 cf       	rjmp	.-244    	; 0x4606 <H_KEYPAD_u8_WriteOnDigits+0x16a>
{
	u8 l_row_counter = 0;
	u8 l_column_counter = 0;
	u8 l_counter = 0;
	u8 row_logic = 1;
	for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
    46fa:	8a 89       	ldd	r24, Y+18	; 0x12
    46fc:	8f 5f       	subi	r24, 0xFF	; 255
    46fe:	8a 8b       	std	Y+18, r24	; 0x12
    4700:	8a 89       	ldd	r24, Y+18	; 0x12
    4702:	84 30       	cpi	r24, 0x04	; 4
    4704:	08 f4       	brcc	.+2      	; 0x4708 <H_KEYPAD_u8_WriteOnDigits+0x26c>
    4706:	dd ce       	rjmp	.-582    	; 0x44c2 <H_KEYPAD_u8_WriteOnDigits+0x26>

			}
			else{/* Nothing */}
		}
	}
}
    4708:	64 96       	adiw	r28, 0x14	; 20
    470a:	0f b6       	in	r0, 0x3f	; 63
    470c:	f8 94       	cli
    470e:	de bf       	out	0x3e, r29	; 62
    4710:	0f be       	out	0x3f, r0	; 63
    4712:	cd bf       	out	0x3d, r28	; 61
    4714:	cf 91       	pop	r28
    4716:	df 91       	pop	r29
    4718:	08 95       	ret

0000471a <FingerPS_AuraNormal>:
#include "FingerPrint.h"



u8 FingerPS_AuraNormal(void)
{
    471a:	df 93       	push	r29
    471c:	cf 93       	push	r28
    471e:	cd b7       	in	r28, 0x3d	; 61
    4720:	de b7       	in	r29, 0x3e	; 62
    4722:	ab 97       	sbiw	r28, 0x2b	; 43
    4724:	0f b6       	in	r0, 0x3f	; 63
    4726:	f8 94       	cli
    4728:	de bf       	out	0x3e, r29	; 62
    472a:	0f be       	out	0x3f, r0	; 63
    472c:	cd bf       	out	0x3d, r28	; 61
	Error_Status_t ret_status = NO_ERROR;
    472e:	1c 82       	std	Y+4, r1	; 0x04
	u8 operation_status = SUCCESS;
    4730:	81 e0       	ldi	r24, 0x01	; 1
    4732:	8b 83       	std	Y+3, r24	; 0x03
	u8 rec_byte = 0;
    4734:	1d 82       	std	Y+5, r1	; 0x05
	u8 AuraNormal[] = {0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x07,0x35,0x01,0xF0,0x03,0x00,0x01,0x31}; // Purple
    4736:	ce 01       	movw	r24, r28
    4738:	06 96       	adiw	r24, 0x06	; 6
    473a:	9b a3       	std	Y+35, r25	; 0x23
    473c:	8a a3       	std	Y+34, r24	; 0x22
    473e:	e7 e2       	ldi	r30, 0x27	; 39
    4740:	f2 e0       	ldi	r31, 0x02	; 2
    4742:	fd a3       	std	Y+37, r31	; 0x25
    4744:	ec a3       	std	Y+36, r30	; 0x24
    4746:	f0 e1       	ldi	r31, 0x10	; 16
    4748:	fe a3       	std	Y+38, r31	; 0x26
    474a:	ec a1       	ldd	r30, Y+36	; 0x24
    474c:	fd a1       	ldd	r31, Y+37	; 0x25
    474e:	00 80       	ld	r0, Z
    4750:	8c a1       	ldd	r24, Y+36	; 0x24
    4752:	9d a1       	ldd	r25, Y+37	; 0x25
    4754:	01 96       	adiw	r24, 0x01	; 1
    4756:	9d a3       	std	Y+37, r25	; 0x25
    4758:	8c a3       	std	Y+36, r24	; 0x24
    475a:	ea a1       	ldd	r30, Y+34	; 0x22
    475c:	fb a1       	ldd	r31, Y+35	; 0x23
    475e:	00 82       	st	Z, r0
    4760:	8a a1       	ldd	r24, Y+34	; 0x22
    4762:	9b a1       	ldd	r25, Y+35	; 0x23
    4764:	01 96       	adiw	r24, 0x01	; 1
    4766:	9b a3       	std	Y+35, r25	; 0x23
    4768:	8a a3       	std	Y+34, r24	; 0x22
    476a:	9e a1       	ldd	r25, Y+38	; 0x26
    476c:	91 50       	subi	r25, 0x01	; 1
    476e:	9e a3       	std	Y+38, r25	; 0x26
    4770:	ee a1       	ldd	r30, Y+38	; 0x26
    4772:	ee 23       	and	r30, r30
    4774:	51 f7       	brne	.-44     	; 0x474a <FingerPS_AuraNormal+0x30>
	u8 AuraNormalResponse[] = {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x03, 0x00, 0x00, 0x0A};
    4776:	ce 01       	movw	r24, r28
    4778:	46 96       	adiw	r24, 0x16	; 22
    477a:	98 a7       	std	Y+40, r25	; 0x28
    477c:	8f a3       	std	Y+39, r24	; 0x27
    477e:	eb e1       	ldi	r30, 0x1B	; 27
    4780:	f2 e0       	ldi	r31, 0x02	; 2
    4782:	fa a7       	std	Y+42, r31	; 0x2a
    4784:	e9 a7       	std	Y+41, r30	; 0x29
    4786:	fc e0       	ldi	r31, 0x0C	; 12
    4788:	fb a7       	std	Y+43, r31	; 0x2b
    478a:	e9 a5       	ldd	r30, Y+41	; 0x29
    478c:	fa a5       	ldd	r31, Y+42	; 0x2a
    478e:	00 80       	ld	r0, Z
    4790:	89 a5       	ldd	r24, Y+41	; 0x29
    4792:	9a a5       	ldd	r25, Y+42	; 0x2a
    4794:	01 96       	adiw	r24, 0x01	; 1
    4796:	9a a7       	std	Y+42, r25	; 0x2a
    4798:	89 a7       	std	Y+41, r24	; 0x29
    479a:	ef a1       	ldd	r30, Y+39	; 0x27
    479c:	f8 a5       	ldd	r31, Y+40	; 0x28
    479e:	00 82       	st	Z, r0
    47a0:	8f a1       	ldd	r24, Y+39	; 0x27
    47a2:	98 a5       	ldd	r25, Y+40	; 0x28
    47a4:	01 96       	adiw	r24, 0x01	; 1
    47a6:	98 a7       	std	Y+40, r25	; 0x28
    47a8:	8f a3       	std	Y+39, r24	; 0x27
    47aa:	9b a5       	ldd	r25, Y+43	; 0x2b
    47ac:	91 50       	subi	r25, 0x01	; 1
    47ae:	9b a7       	std	Y+43, r25	; 0x2b
    47b0:	eb a5       	ldd	r30, Y+43	; 0x2b
    47b2:	ee 23       	and	r30, r30
    47b4:	51 f7       	brne	.-44     	; 0x478a <FingerPS_AuraNormal+0x70>

	for(u8 i = 0; i < sizeof(AuraNormal); i++)
    47b6:	1a 82       	std	Y+2, r1	; 0x02
    47b8:	0f c0       	rjmp	.+30     	; 0x47d8 <FingerPS_AuraNormal+0xbe>
	{
		ret_status = UART_SendByte(AuraNormal[i]);
    47ba:	8a 81       	ldd	r24, Y+2	; 0x02
    47bc:	28 2f       	mov	r18, r24
    47be:	30 e0       	ldi	r19, 0x00	; 0
    47c0:	ce 01       	movw	r24, r28
    47c2:	06 96       	adiw	r24, 0x06	; 6
    47c4:	fc 01       	movw	r30, r24
    47c6:	e2 0f       	add	r30, r18
    47c8:	f3 1f       	adc	r31, r19
    47ca:	80 81       	ld	r24, Z
    47cc:	0e 94 16 11 	call	0x222c	; 0x222c <UART_SendByte>
    47d0:	8c 83       	std	Y+4, r24	; 0x04
	u8 operation_status = SUCCESS;
	u8 rec_byte = 0;
	u8 AuraNormal[] = {0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x07,0x35,0x01,0xF0,0x03,0x00,0x01,0x31}; // Purple
	u8 AuraNormalResponse[] = {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x03, 0x00, 0x00, 0x0A};

	for(u8 i = 0; i < sizeof(AuraNormal); i++)
    47d2:	8a 81       	ldd	r24, Y+2	; 0x02
    47d4:	8f 5f       	subi	r24, 0xFF	; 255
    47d6:	8a 83       	std	Y+2, r24	; 0x02
    47d8:	8a 81       	ldd	r24, Y+2	; 0x02
    47da:	80 31       	cpi	r24, 0x10	; 16
    47dc:	70 f3       	brcs	.-36     	; 0x47ba <FingerPS_AuraNormal+0xa0>
	{
		ret_status = UART_SendByte(AuraNormal[i]);
	}

	// Receive and verify the response
	for (u8 i = 0; i < sizeof(AuraNormalResponse); ++i)
    47de:	19 82       	std	Y+1, r1	; 0x01
    47e0:	16 c0       	rjmp	.+44     	; 0x480e <FingerPS_AuraNormal+0xf4>
	{
		ret_status = UART_ReceiveByte(&rec_byte);
    47e2:	ce 01       	movw	r24, r28
    47e4:	05 96       	adiw	r24, 0x05	; 5
    47e6:	0e 94 30 11 	call	0x2260	; 0x2260 <UART_ReceiveByte>
    47ea:	8c 83       	std	Y+4, r24	; 0x04

		if (rec_byte != AuraNormalResponse[i])
    47ec:	89 81       	ldd	r24, Y+1	; 0x01
    47ee:	28 2f       	mov	r18, r24
    47f0:	30 e0       	ldi	r19, 0x00	; 0
    47f2:	ce 01       	movw	r24, r28
    47f4:	46 96       	adiw	r24, 0x16	; 22
    47f6:	fc 01       	movw	r30, r24
    47f8:	e2 0f       	add	r30, r18
    47fa:	f3 1f       	adc	r31, r19
    47fc:	90 81       	ld	r25, Z
    47fe:	8d 81       	ldd	r24, Y+5	; 0x05
    4800:	98 17       	cp	r25, r24
    4802:	11 f0       	breq	.+4      	; 0x4808 <FingerPS_AuraNormal+0xee>
		{
			operation_status = ERROR;
    4804:	1b 82       	std	Y+3, r1	; 0x03
    4806:	06 c0       	rjmp	.+12     	; 0x4814 <FingerPS_AuraNormal+0xfa>
	{
		ret_status = UART_SendByte(AuraNormal[i]);
	}

	// Receive and verify the response
	for (u8 i = 0; i < sizeof(AuraNormalResponse); ++i)
    4808:	89 81       	ldd	r24, Y+1	; 0x01
    480a:	8f 5f       	subi	r24, 0xFF	; 255
    480c:	89 83       	std	Y+1, r24	; 0x01
    480e:	89 81       	ldd	r24, Y+1	; 0x01
    4810:	8c 30       	cpi	r24, 0x0C	; 12
    4812:	38 f3       	brcs	.-50     	; 0x47e2 <FingerPS_AuraNormal+0xc8>
			operation_status = ERROR;
			break;
		}

	}
	return operation_status;
    4814:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4816:	ab 96       	adiw	r28, 0x2b	; 43
    4818:	0f b6       	in	r0, 0x3f	; 63
    481a:	f8 94       	cli
    481c:	de bf       	out	0x3e, r29	; 62
    481e:	0f be       	out	0x3f, r0	; 63
    4820:	cd bf       	out	0x3d, r28	; 61
    4822:	cf 91       	pop	r28
    4824:	df 91       	pop	r29
    4826:	08 95       	ret

00004828 <FingerPS_AuraSuccess>:



u8 FingerPS_AuraSuccess(void)
{
    4828:	df 93       	push	r29
    482a:	cf 93       	push	r28
    482c:	cd b7       	in	r28, 0x3d	; 61
    482e:	de b7       	in	r29, 0x3e	; 62
    4830:	ab 97       	sbiw	r28, 0x2b	; 43
    4832:	0f b6       	in	r0, 0x3f	; 63
    4834:	f8 94       	cli
    4836:	de bf       	out	0x3e, r29	; 62
    4838:	0f be       	out	0x3f, r0	; 63
    483a:	cd bf       	out	0x3d, r28	; 61
	Error_Status_t ret_status = NO_ERROR;
    483c:	1c 82       	std	Y+4, r1	; 0x04
	u8 operation_status = SUCCESS;
    483e:	81 e0       	ldi	r24, 0x01	; 1
    4840:	8b 83       	std	Y+3, r24	; 0x03
	u8 rec_byte = 0;
    4842:	1d 82       	std	Y+5, r1	; 0x05
	u8 AuraSuccess[] = {0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x07,0x35,0x01,0xF0,0x02,0x00,0x01,0x30}; // Blue
    4844:	ce 01       	movw	r24, r28
    4846:	06 96       	adiw	r24, 0x06	; 6
    4848:	9b a3       	std	Y+35, r25	; 0x23
    484a:	8a a3       	std	Y+34, r24	; 0x22
    484c:	e3 e4       	ldi	r30, 0x43	; 67
    484e:	f2 e0       	ldi	r31, 0x02	; 2
    4850:	fd a3       	std	Y+37, r31	; 0x25
    4852:	ec a3       	std	Y+36, r30	; 0x24
    4854:	f0 e1       	ldi	r31, 0x10	; 16
    4856:	fe a3       	std	Y+38, r31	; 0x26
    4858:	ec a1       	ldd	r30, Y+36	; 0x24
    485a:	fd a1       	ldd	r31, Y+37	; 0x25
    485c:	00 80       	ld	r0, Z
    485e:	8c a1       	ldd	r24, Y+36	; 0x24
    4860:	9d a1       	ldd	r25, Y+37	; 0x25
    4862:	01 96       	adiw	r24, 0x01	; 1
    4864:	9d a3       	std	Y+37, r25	; 0x25
    4866:	8c a3       	std	Y+36, r24	; 0x24
    4868:	ea a1       	ldd	r30, Y+34	; 0x22
    486a:	fb a1       	ldd	r31, Y+35	; 0x23
    486c:	00 82       	st	Z, r0
    486e:	8a a1       	ldd	r24, Y+34	; 0x22
    4870:	9b a1       	ldd	r25, Y+35	; 0x23
    4872:	01 96       	adiw	r24, 0x01	; 1
    4874:	9b a3       	std	Y+35, r25	; 0x23
    4876:	8a a3       	std	Y+34, r24	; 0x22
    4878:	9e a1       	ldd	r25, Y+38	; 0x26
    487a:	91 50       	subi	r25, 0x01	; 1
    487c:	9e a3       	std	Y+38, r25	; 0x26
    487e:	ee a1       	ldd	r30, Y+38	; 0x26
    4880:	ee 23       	and	r30, r30
    4882:	51 f7       	brne	.-44     	; 0x4858 <FingerPS_AuraSuccess+0x30>
	u8 AuraSuccessResponse[] = {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x03, 0x00, 0x00, 0x0A};
    4884:	ce 01       	movw	r24, r28
    4886:	46 96       	adiw	r24, 0x16	; 22
    4888:	98 a7       	std	Y+40, r25	; 0x28
    488a:	8f a3       	std	Y+39, r24	; 0x27
    488c:	e7 e3       	ldi	r30, 0x37	; 55
    488e:	f2 e0       	ldi	r31, 0x02	; 2
    4890:	fa a7       	std	Y+42, r31	; 0x2a
    4892:	e9 a7       	std	Y+41, r30	; 0x29
    4894:	fc e0       	ldi	r31, 0x0C	; 12
    4896:	fb a7       	std	Y+43, r31	; 0x2b
    4898:	e9 a5       	ldd	r30, Y+41	; 0x29
    489a:	fa a5       	ldd	r31, Y+42	; 0x2a
    489c:	00 80       	ld	r0, Z
    489e:	89 a5       	ldd	r24, Y+41	; 0x29
    48a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    48a2:	01 96       	adiw	r24, 0x01	; 1
    48a4:	9a a7       	std	Y+42, r25	; 0x2a
    48a6:	89 a7       	std	Y+41, r24	; 0x29
    48a8:	ef a1       	ldd	r30, Y+39	; 0x27
    48aa:	f8 a5       	ldd	r31, Y+40	; 0x28
    48ac:	00 82       	st	Z, r0
    48ae:	8f a1       	ldd	r24, Y+39	; 0x27
    48b0:	98 a5       	ldd	r25, Y+40	; 0x28
    48b2:	01 96       	adiw	r24, 0x01	; 1
    48b4:	98 a7       	std	Y+40, r25	; 0x28
    48b6:	8f a3       	std	Y+39, r24	; 0x27
    48b8:	9b a5       	ldd	r25, Y+43	; 0x2b
    48ba:	91 50       	subi	r25, 0x01	; 1
    48bc:	9b a7       	std	Y+43, r25	; 0x2b
    48be:	eb a5       	ldd	r30, Y+43	; 0x2b
    48c0:	ee 23       	and	r30, r30
    48c2:	51 f7       	brne	.-44     	; 0x4898 <FingerPS_AuraSuccess+0x70>

	for(u8 i = 0; i < sizeof(AuraSuccess); i++)
    48c4:	1a 82       	std	Y+2, r1	; 0x02
    48c6:	0f c0       	rjmp	.+30     	; 0x48e6 <FingerPS_AuraSuccess+0xbe>
	{
		ret_status = UART_SendByte(AuraSuccess[i]);
    48c8:	8a 81       	ldd	r24, Y+2	; 0x02
    48ca:	28 2f       	mov	r18, r24
    48cc:	30 e0       	ldi	r19, 0x00	; 0
    48ce:	ce 01       	movw	r24, r28
    48d0:	06 96       	adiw	r24, 0x06	; 6
    48d2:	fc 01       	movw	r30, r24
    48d4:	e2 0f       	add	r30, r18
    48d6:	f3 1f       	adc	r31, r19
    48d8:	80 81       	ld	r24, Z
    48da:	0e 94 16 11 	call	0x222c	; 0x222c <UART_SendByte>
    48de:	8c 83       	std	Y+4, r24	; 0x04
	u8 operation_status = SUCCESS;
	u8 rec_byte = 0;
	u8 AuraSuccess[] = {0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x07,0x35,0x01,0xF0,0x02,0x00,0x01,0x30}; // Blue
	u8 AuraSuccessResponse[] = {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x03, 0x00, 0x00, 0x0A};

	for(u8 i = 0; i < sizeof(AuraSuccess); i++)
    48e0:	8a 81       	ldd	r24, Y+2	; 0x02
    48e2:	8f 5f       	subi	r24, 0xFF	; 255
    48e4:	8a 83       	std	Y+2, r24	; 0x02
    48e6:	8a 81       	ldd	r24, Y+2	; 0x02
    48e8:	80 31       	cpi	r24, 0x10	; 16
    48ea:	70 f3       	brcs	.-36     	; 0x48c8 <FingerPS_AuraSuccess+0xa0>
	{
		ret_status = UART_SendByte(AuraSuccess[i]);
	}

	// Receive and verify the response
	for (u8 i = 0; i < sizeof(AuraSuccessResponse); ++i)
    48ec:	19 82       	std	Y+1, r1	; 0x01
    48ee:	16 c0       	rjmp	.+44     	; 0x491c <FingerPS_AuraSuccess+0xf4>
	{
		ret_status = UART_ReceiveByte(&rec_byte);
    48f0:	ce 01       	movw	r24, r28
    48f2:	05 96       	adiw	r24, 0x05	; 5
    48f4:	0e 94 30 11 	call	0x2260	; 0x2260 <UART_ReceiveByte>
    48f8:	8c 83       	std	Y+4, r24	; 0x04

		if (rec_byte != AuraSuccessResponse[i])
    48fa:	89 81       	ldd	r24, Y+1	; 0x01
    48fc:	28 2f       	mov	r18, r24
    48fe:	30 e0       	ldi	r19, 0x00	; 0
    4900:	ce 01       	movw	r24, r28
    4902:	46 96       	adiw	r24, 0x16	; 22
    4904:	fc 01       	movw	r30, r24
    4906:	e2 0f       	add	r30, r18
    4908:	f3 1f       	adc	r31, r19
    490a:	90 81       	ld	r25, Z
    490c:	8d 81       	ldd	r24, Y+5	; 0x05
    490e:	98 17       	cp	r25, r24
    4910:	11 f0       	breq	.+4      	; 0x4916 <FingerPS_AuraSuccess+0xee>
		{
			operation_status = ERROR;
    4912:	1b 82       	std	Y+3, r1	; 0x03
    4914:	06 c0       	rjmp	.+12     	; 0x4922 <FingerPS_AuraSuccess+0xfa>
	{
		ret_status = UART_SendByte(AuraSuccess[i]);
	}

	// Receive and verify the response
	for (u8 i = 0; i < sizeof(AuraSuccessResponse); ++i)
    4916:	89 81       	ldd	r24, Y+1	; 0x01
    4918:	8f 5f       	subi	r24, 0xFF	; 255
    491a:	89 83       	std	Y+1, r24	; 0x01
    491c:	89 81       	ldd	r24, Y+1	; 0x01
    491e:	8c 30       	cpi	r24, 0x0C	; 12
    4920:	38 f3       	brcs	.-50     	; 0x48f0 <FingerPS_AuraSuccess+0xc8>
			operation_status = ERROR;
			break;
		}

	}
	return operation_status;
    4922:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4924:	ab 96       	adiw	r28, 0x2b	; 43
    4926:	0f b6       	in	r0, 0x3f	; 63
    4928:	f8 94       	cli
    492a:	de bf       	out	0x3e, r29	; 62
    492c:	0f be       	out	0x3f, r0	; 63
    492e:	cd bf       	out	0x3d, r28	; 61
    4930:	cf 91       	pop	r28
    4932:	df 91       	pop	r29
    4934:	08 95       	ret

00004936 <FingerPS_AuraError>:



u8 FingerPS_AuraError(void)
{
    4936:	df 93       	push	r29
    4938:	cf 93       	push	r28
    493a:	cd b7       	in	r28, 0x3d	; 61
    493c:	de b7       	in	r29, 0x3e	; 62
    493e:	ab 97       	sbiw	r28, 0x2b	; 43
    4940:	0f b6       	in	r0, 0x3f	; 63
    4942:	f8 94       	cli
    4944:	de bf       	out	0x3e, r29	; 62
    4946:	0f be       	out	0x3f, r0	; 63
    4948:	cd bf       	out	0x3d, r28	; 61
	Error_Status_t ret_status = NO_ERROR;
    494a:	1c 82       	std	Y+4, r1	; 0x04
	u8 operation_status = SUCCESS;
    494c:	81 e0       	ldi	r24, 0x01	; 1
    494e:	8b 83       	std	Y+3, r24	; 0x03
	u8 rec_byte = 0;
    4950:	1d 82       	std	Y+5, r1	; 0x05
	u8 AuraError[] = {0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x07,0x35,0x01,0xF0,0x01,0x00,0x01,0x2F}; // Red
    4952:	ce 01       	movw	r24, r28
    4954:	06 96       	adiw	r24, 0x06	; 6
    4956:	9b a3       	std	Y+35, r25	; 0x23
    4958:	8a a3       	std	Y+34, r24	; 0x22
    495a:	ef e5       	ldi	r30, 0x5F	; 95
    495c:	f2 e0       	ldi	r31, 0x02	; 2
    495e:	fd a3       	std	Y+37, r31	; 0x25
    4960:	ec a3       	std	Y+36, r30	; 0x24
    4962:	f0 e1       	ldi	r31, 0x10	; 16
    4964:	fe a3       	std	Y+38, r31	; 0x26
    4966:	ec a1       	ldd	r30, Y+36	; 0x24
    4968:	fd a1       	ldd	r31, Y+37	; 0x25
    496a:	00 80       	ld	r0, Z
    496c:	8c a1       	ldd	r24, Y+36	; 0x24
    496e:	9d a1       	ldd	r25, Y+37	; 0x25
    4970:	01 96       	adiw	r24, 0x01	; 1
    4972:	9d a3       	std	Y+37, r25	; 0x25
    4974:	8c a3       	std	Y+36, r24	; 0x24
    4976:	ea a1       	ldd	r30, Y+34	; 0x22
    4978:	fb a1       	ldd	r31, Y+35	; 0x23
    497a:	00 82       	st	Z, r0
    497c:	8a a1       	ldd	r24, Y+34	; 0x22
    497e:	9b a1       	ldd	r25, Y+35	; 0x23
    4980:	01 96       	adiw	r24, 0x01	; 1
    4982:	9b a3       	std	Y+35, r25	; 0x23
    4984:	8a a3       	std	Y+34, r24	; 0x22
    4986:	9e a1       	ldd	r25, Y+38	; 0x26
    4988:	91 50       	subi	r25, 0x01	; 1
    498a:	9e a3       	std	Y+38, r25	; 0x26
    498c:	ee a1       	ldd	r30, Y+38	; 0x26
    498e:	ee 23       	and	r30, r30
    4990:	51 f7       	brne	.-44     	; 0x4966 <FingerPS_AuraError+0x30>
	u8 AuraErrorResponse[] = {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x03, 0x00, 0x00, 0x0A};
    4992:	ce 01       	movw	r24, r28
    4994:	46 96       	adiw	r24, 0x16	; 22
    4996:	98 a7       	std	Y+40, r25	; 0x28
    4998:	8f a3       	std	Y+39, r24	; 0x27
    499a:	e3 e5       	ldi	r30, 0x53	; 83
    499c:	f2 e0       	ldi	r31, 0x02	; 2
    499e:	fa a7       	std	Y+42, r31	; 0x2a
    49a0:	e9 a7       	std	Y+41, r30	; 0x29
    49a2:	fc e0       	ldi	r31, 0x0C	; 12
    49a4:	fb a7       	std	Y+43, r31	; 0x2b
    49a6:	e9 a5       	ldd	r30, Y+41	; 0x29
    49a8:	fa a5       	ldd	r31, Y+42	; 0x2a
    49aa:	00 80       	ld	r0, Z
    49ac:	89 a5       	ldd	r24, Y+41	; 0x29
    49ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    49b0:	01 96       	adiw	r24, 0x01	; 1
    49b2:	9a a7       	std	Y+42, r25	; 0x2a
    49b4:	89 a7       	std	Y+41, r24	; 0x29
    49b6:	ef a1       	ldd	r30, Y+39	; 0x27
    49b8:	f8 a5       	ldd	r31, Y+40	; 0x28
    49ba:	00 82       	st	Z, r0
    49bc:	8f a1       	ldd	r24, Y+39	; 0x27
    49be:	98 a5       	ldd	r25, Y+40	; 0x28
    49c0:	01 96       	adiw	r24, 0x01	; 1
    49c2:	98 a7       	std	Y+40, r25	; 0x28
    49c4:	8f a3       	std	Y+39, r24	; 0x27
    49c6:	9b a5       	ldd	r25, Y+43	; 0x2b
    49c8:	91 50       	subi	r25, 0x01	; 1
    49ca:	9b a7       	std	Y+43, r25	; 0x2b
    49cc:	eb a5       	ldd	r30, Y+43	; 0x2b
    49ce:	ee 23       	and	r30, r30
    49d0:	51 f7       	brne	.-44     	; 0x49a6 <FingerPS_AuraError+0x70>

	for(u8 i = 0; i < sizeof(AuraError); i++)
    49d2:	1a 82       	std	Y+2, r1	; 0x02
    49d4:	0f c0       	rjmp	.+30     	; 0x49f4 <FingerPS_AuraError+0xbe>
	{
		ret_status = UART_SendByte(AuraError[i]);
    49d6:	8a 81       	ldd	r24, Y+2	; 0x02
    49d8:	28 2f       	mov	r18, r24
    49da:	30 e0       	ldi	r19, 0x00	; 0
    49dc:	ce 01       	movw	r24, r28
    49de:	06 96       	adiw	r24, 0x06	; 6
    49e0:	fc 01       	movw	r30, r24
    49e2:	e2 0f       	add	r30, r18
    49e4:	f3 1f       	adc	r31, r19
    49e6:	80 81       	ld	r24, Z
    49e8:	0e 94 16 11 	call	0x222c	; 0x222c <UART_SendByte>
    49ec:	8c 83       	std	Y+4, r24	; 0x04
	u8 operation_status = SUCCESS;
	u8 rec_byte = 0;
	u8 AuraError[] = {0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x07,0x35,0x01,0xF0,0x01,0x00,0x01,0x2F}; // Red
	u8 AuraErrorResponse[] = {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x03, 0x00, 0x00, 0x0A};

	for(u8 i = 0; i < sizeof(AuraError); i++)
    49ee:	8a 81       	ldd	r24, Y+2	; 0x02
    49f0:	8f 5f       	subi	r24, 0xFF	; 255
    49f2:	8a 83       	std	Y+2, r24	; 0x02
    49f4:	8a 81       	ldd	r24, Y+2	; 0x02
    49f6:	80 31       	cpi	r24, 0x10	; 16
    49f8:	70 f3       	brcs	.-36     	; 0x49d6 <FingerPS_AuraError+0xa0>
	{
		ret_status = UART_SendByte(AuraError[i]);
	}

	// Receive and verify the response
	for (u8 i = 0; i < sizeof(AuraErrorResponse); ++i)
    49fa:	19 82       	std	Y+1, r1	; 0x01
    49fc:	16 c0       	rjmp	.+44     	; 0x4a2a <FingerPS_AuraError+0xf4>
	{
		ret_status = UART_ReceiveByte(&rec_byte);
    49fe:	ce 01       	movw	r24, r28
    4a00:	05 96       	adiw	r24, 0x05	; 5
    4a02:	0e 94 30 11 	call	0x2260	; 0x2260 <UART_ReceiveByte>
    4a06:	8c 83       	std	Y+4, r24	; 0x04

		if (rec_byte != AuraErrorResponse[i])
    4a08:	89 81       	ldd	r24, Y+1	; 0x01
    4a0a:	28 2f       	mov	r18, r24
    4a0c:	30 e0       	ldi	r19, 0x00	; 0
    4a0e:	ce 01       	movw	r24, r28
    4a10:	46 96       	adiw	r24, 0x16	; 22
    4a12:	fc 01       	movw	r30, r24
    4a14:	e2 0f       	add	r30, r18
    4a16:	f3 1f       	adc	r31, r19
    4a18:	90 81       	ld	r25, Z
    4a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    4a1c:	98 17       	cp	r25, r24
    4a1e:	11 f0       	breq	.+4      	; 0x4a24 <FingerPS_AuraError+0xee>
		{
			operation_status = ERROR;
    4a20:	1b 82       	std	Y+3, r1	; 0x03
    4a22:	06 c0       	rjmp	.+12     	; 0x4a30 <FingerPS_AuraError+0xfa>
	{
		ret_status = UART_SendByte(AuraError[i]);
	}

	// Receive and verify the response
	for (u8 i = 0; i < sizeof(AuraErrorResponse); ++i)
    4a24:	89 81       	ldd	r24, Y+1	; 0x01
    4a26:	8f 5f       	subi	r24, 0xFF	; 255
    4a28:	89 83       	std	Y+1, r24	; 0x01
    4a2a:	89 81       	ldd	r24, Y+1	; 0x01
    4a2c:	8c 30       	cpi	r24, 0x0C	; 12
    4a2e:	38 f3       	brcs	.-50     	; 0x49fe <FingerPS_AuraError+0xc8>
		{
			operation_status = ERROR;
			break;
		}
	}
	return operation_status;
    4a30:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4a32:	ab 96       	adiw	r28, 0x2b	; 43
    4a34:	0f b6       	in	r0, 0x3f	; 63
    4a36:	f8 94       	cli
    4a38:	de bf       	out	0x3e, r29	; 62
    4a3a:	0f be       	out	0x3f, r0	; 63
    4a3c:	cd bf       	out	0x3d, r28	; 61
    4a3e:	cf 91       	pop	r28
    4a40:	df 91       	pop	r29
    4a42:	08 95       	ret

00004a44 <FingerPS_handShake>:


u8 FingerPS_handShake(void)
{
    4a44:	df 93       	push	r29
    4a46:	cf 93       	push	r28
    4a48:	cd b7       	in	r28, 0x3d	; 61
    4a4a:	de b7       	in	r29, 0x3e	; 62
    4a4c:	e6 97       	sbiw	r28, 0x36	; 54
    4a4e:	0f b6       	in	r0, 0x3f	; 63
    4a50:	f8 94       	cli
    4a52:	de bf       	out	0x3e, r29	; 62
    4a54:	0f be       	out	0x3f, r0	; 63
    4a56:	cd bf       	out	0x3d, r28	; 61
	Error_Status_t ret_status = NO_ERROR;
    4a58:	1b 8a       	std	Y+19, r1	; 0x13
	u8 operation_status = SUCCESS;
    4a5a:	81 e0       	ldi	r24, 0x01	; 1
    4a5c:	8a 8b       	std	Y+18, r24	; 0x12
	u8 rec_byte = 0;
    4a5e:	1c 8a       	std	Y+20, r1	; 0x14
	u8 num_of_success = 0;
    4a60:	19 8a       	std	Y+17, r1	; 0x11
	u8 handshakeCommand[] = {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x40, 0x00, 0x44};
    4a62:	ce 01       	movw	r24, r28
    4a64:	45 96       	adiw	r24, 0x15	; 21
    4a66:	9e a7       	std	Y+46, r25	; 0x2e
    4a68:	8d a7       	std	Y+45, r24	; 0x2d
    4a6a:	eb e7       	ldi	r30, 0x7B	; 123
    4a6c:	f2 e0       	ldi	r31, 0x02	; 2
    4a6e:	f8 ab       	std	Y+48, r31	; 0x30
    4a70:	ef a7       	std	Y+47, r30	; 0x2f
    4a72:	fc e0       	ldi	r31, 0x0C	; 12
    4a74:	f9 ab       	std	Y+49, r31	; 0x31
    4a76:	ef a5       	ldd	r30, Y+47	; 0x2f
    4a78:	f8 a9       	ldd	r31, Y+48	; 0x30
    4a7a:	00 80       	ld	r0, Z
    4a7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a7e:	98 a9       	ldd	r25, Y+48	; 0x30
    4a80:	01 96       	adiw	r24, 0x01	; 1
    4a82:	98 ab       	std	Y+48, r25	; 0x30
    4a84:	8f a7       	std	Y+47, r24	; 0x2f
    4a86:	ed a5       	ldd	r30, Y+45	; 0x2d
    4a88:	fe a5       	ldd	r31, Y+46	; 0x2e
    4a8a:	00 82       	st	Z, r0
    4a8c:	8d a5       	ldd	r24, Y+45	; 0x2d
    4a8e:	9e a5       	ldd	r25, Y+46	; 0x2e
    4a90:	01 96       	adiw	r24, 0x01	; 1
    4a92:	9e a7       	std	Y+46, r25	; 0x2e
    4a94:	8d a7       	std	Y+45, r24	; 0x2d
    4a96:	99 a9       	ldd	r25, Y+49	; 0x31
    4a98:	91 50       	subi	r25, 0x01	; 1
    4a9a:	99 ab       	std	Y+49, r25	; 0x31
    4a9c:	e9 a9       	ldd	r30, Y+49	; 0x31
    4a9e:	ee 23       	and	r30, r30
    4aa0:	51 f7       	brne	.-44     	; 0x4a76 <FingerPS_handShake+0x32>
	u8 handshakeResponse[] = {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x03, 0x00, 0x00, 0x0A};
    4aa2:	ce 01       	movw	r24, r28
    4aa4:	81 96       	adiw	r24, 0x21	; 33
    4aa6:	9b ab       	std	Y+51, r25	; 0x33
    4aa8:	8a ab       	std	Y+50, r24	; 0x32
    4aaa:	ef e6       	ldi	r30, 0x6F	; 111
    4aac:	f2 e0       	ldi	r31, 0x02	; 2
    4aae:	fd ab       	std	Y+53, r31	; 0x35
    4ab0:	ec ab       	std	Y+52, r30	; 0x34
    4ab2:	fc e0       	ldi	r31, 0x0C	; 12
    4ab4:	fe ab       	std	Y+54, r31	; 0x36
    4ab6:	ec a9       	ldd	r30, Y+52	; 0x34
    4ab8:	fd a9       	ldd	r31, Y+53	; 0x35
    4aba:	00 80       	ld	r0, Z
    4abc:	8c a9       	ldd	r24, Y+52	; 0x34
    4abe:	9d a9       	ldd	r25, Y+53	; 0x35
    4ac0:	01 96       	adiw	r24, 0x01	; 1
    4ac2:	9d ab       	std	Y+53, r25	; 0x35
    4ac4:	8c ab       	std	Y+52, r24	; 0x34
    4ac6:	ea a9       	ldd	r30, Y+50	; 0x32
    4ac8:	fb a9       	ldd	r31, Y+51	; 0x33
    4aca:	00 82       	st	Z, r0
    4acc:	8a a9       	ldd	r24, Y+50	; 0x32
    4ace:	9b a9       	ldd	r25, Y+51	; 0x33
    4ad0:	01 96       	adiw	r24, 0x01	; 1
    4ad2:	9b ab       	std	Y+51, r25	; 0x33
    4ad4:	8a ab       	std	Y+50, r24	; 0x32
    4ad6:	9e a9       	ldd	r25, Y+54	; 0x36
    4ad8:	91 50       	subi	r25, 0x01	; 1
    4ada:	9e ab       	std	Y+54, r25	; 0x36
    4adc:	ee a9       	ldd	r30, Y+54	; 0x36
    4ade:	ee 23       	and	r30, r30
    4ae0:	51 f7       	brne	.-44     	; 0x4ab6 <FingerPS_handShake+0x72>

	/* Initialize UART module at 57600 baud rate */
	ret_status = UART_Init(UART_BAUDRATE_57600);
    4ae2:	60 e0       	ldi	r22, 0x00	; 0
    4ae4:	71 ee       	ldi	r23, 0xE1	; 225
    4ae6:	80 e0       	ldi	r24, 0x00	; 0
    4ae8:	90 e0       	ldi	r25, 0x00	; 0
    4aea:	0e 94 bb 10 	call	0x2176	; 0x2176 <UART_Init>
    4aee:	8b 8b       	std	Y+19, r24	; 0x13
	/*-------------------------------------------*/

	for(u8 i = 0; i < sizeof(handshakeCommand); i++)
    4af0:	18 8a       	std	Y+16, r1	; 0x10
    4af2:	0f c0       	rjmp	.+30     	; 0x4b12 <FingerPS_handShake+0xce>
	{
		ret_status = UART_SendByte(handshakeCommand[i]);
    4af4:	88 89       	ldd	r24, Y+16	; 0x10
    4af6:	28 2f       	mov	r18, r24
    4af8:	30 e0       	ldi	r19, 0x00	; 0
    4afa:	ce 01       	movw	r24, r28
    4afc:	45 96       	adiw	r24, 0x15	; 21
    4afe:	fc 01       	movw	r30, r24
    4b00:	e2 0f       	add	r30, r18
    4b02:	f3 1f       	adc	r31, r19
    4b04:	80 81       	ld	r24, Z
    4b06:	0e 94 16 11 	call	0x222c	; 0x222c <UART_SendByte>
    4b0a:	8b 8b       	std	Y+19, r24	; 0x13

	/* Initialize UART module at 57600 baud rate */
	ret_status = UART_Init(UART_BAUDRATE_57600);
	/*-------------------------------------------*/

	for(u8 i = 0; i < sizeof(handshakeCommand); i++)
    4b0c:	88 89       	ldd	r24, Y+16	; 0x10
    4b0e:	8f 5f       	subi	r24, 0xFF	; 255
    4b10:	88 8b       	std	Y+16, r24	; 0x10
    4b12:	88 89       	ldd	r24, Y+16	; 0x10
    4b14:	8c 30       	cpi	r24, 0x0C	; 12
    4b16:	70 f3       	brcs	.-36     	; 0x4af4 <FingerPS_handShake+0xb0>
	{
		ret_status = UART_SendByte(handshakeCommand[i]);
	}

	// Receive and verify the response
	for (u8 i = 0; i < sizeof(handshakeResponse); ++i)
    4b18:	1f 86       	std	Y+15, r1	; 0x0f
    4b1a:	1a c0       	rjmp	.+52     	; 0x4b50 <FingerPS_handShake+0x10c>
	{
		ret_status = UART_ReceiveByte(&rec_byte);
    4b1c:	ce 01       	movw	r24, r28
    4b1e:	44 96       	adiw	r24, 0x14	; 20
    4b20:	0e 94 30 11 	call	0x2260	; 0x2260 <UART_ReceiveByte>
    4b24:	8b 8b       	std	Y+19, r24	; 0x13

		if (rec_byte == handshakeResponse[i])
    4b26:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b28:	28 2f       	mov	r18, r24
    4b2a:	30 e0       	ldi	r19, 0x00	; 0
    4b2c:	ce 01       	movw	r24, r28
    4b2e:	81 96       	adiw	r24, 0x21	; 33
    4b30:	fc 01       	movw	r30, r24
    4b32:	e2 0f       	add	r30, r18
    4b34:	f3 1f       	adc	r31, r19
    4b36:	90 81       	ld	r25, Z
    4b38:	8c 89       	ldd	r24, Y+20	; 0x14
    4b3a:	98 17       	cp	r25, r24
    4b3c:	39 f4       	brne	.+14     	; 0x4b4c <FingerPS_handShake+0x108>
		{
			num_of_success++;
    4b3e:	89 89       	ldd	r24, Y+17	; 0x11
    4b40:	8f 5f       	subi	r24, 0xFF	; 255
    4b42:	89 8b       	std	Y+17, r24	; 0x11
	{
		ret_status = UART_SendByte(handshakeCommand[i]);
	}

	// Receive and verify the response
	for (u8 i = 0; i < sizeof(handshakeResponse); ++i)
    4b44:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b46:	8f 5f       	subi	r24, 0xFF	; 255
    4b48:	8f 87       	std	Y+15, r24	; 0x0f
    4b4a:	02 c0       	rjmp	.+4      	; 0x4b50 <FingerPS_handShake+0x10c>
		{
			num_of_success++;
		}
		else
		{
			operation_status = ERROR;
    4b4c:	1a 8a       	std	Y+18, r1	; 0x12
    4b4e:	03 c0       	rjmp	.+6      	; 0x4b56 <FingerPS_handShake+0x112>
	{
		ret_status = UART_SendByte(handshakeCommand[i]);
	}

	// Receive and verify the response
	for (u8 i = 0; i < sizeof(handshakeResponse); ++i)
    4b50:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b52:	8c 30       	cpi	r24, 0x0C	; 12
    4b54:	18 f3       	brcs	.-58     	; 0x4b1c <FingerPS_handShake+0xd8>
			operation_status = ERROR;
			break;
		}

	}
	if(num_of_success == sizeof(handshakeResponse))
    4b56:	89 89       	ldd	r24, Y+17	; 0x11
    4b58:	8c 30       	cpi	r24, 0x0C	; 12
    4b5a:	09 f0       	breq	.+2      	; 0x4b5e <FingerPS_handShake+0x11a>
    4b5c:	75 c0       	rjmp	.+234    	; 0x4c48 <FingerPS_handShake+0x204>
	{
		operation_status = FingerPS_AuraNormal();
    4b5e:	0e 94 8d 23 	call	0x471a	; 0x471a <FingerPS_AuraNormal>
    4b62:	8a 8b       	std	Y+18, r24	; 0x12
    4b64:	80 e0       	ldi	r24, 0x00	; 0
    4b66:	90 e0       	ldi	r25, 0x00	; 0
    4b68:	a8 e4       	ldi	r26, 0x48	; 72
    4b6a:	b3 e4       	ldi	r27, 0x43	; 67
    4b6c:	8b 87       	std	Y+11, r24	; 0x0b
    4b6e:	9c 87       	std	Y+12, r25	; 0x0c
    4b70:	ad 87       	std	Y+13, r26	; 0x0d
    4b72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b74:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b76:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b78:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b7c:	20 e0       	ldi	r18, 0x00	; 0
    4b7e:	30 e0       	ldi	r19, 0x00	; 0
    4b80:	4a e7       	ldi	r20, 0x7A	; 122
    4b82:	55 e4       	ldi	r21, 0x45	; 69
    4b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b88:	dc 01       	movw	r26, r24
    4b8a:	cb 01       	movw	r24, r22
    4b8c:	8f 83       	std	Y+7, r24	; 0x07
    4b8e:	98 87       	std	Y+8, r25	; 0x08
    4b90:	a9 87       	std	Y+9, r26	; 0x09
    4b92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b94:	6f 81       	ldd	r22, Y+7	; 0x07
    4b96:	78 85       	ldd	r23, Y+8	; 0x08
    4b98:	89 85       	ldd	r24, Y+9	; 0x09
    4b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b9c:	20 e0       	ldi	r18, 0x00	; 0
    4b9e:	30 e0       	ldi	r19, 0x00	; 0
    4ba0:	40 e8       	ldi	r20, 0x80	; 128
    4ba2:	5f e3       	ldi	r21, 0x3F	; 63
    4ba4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ba8:	88 23       	and	r24, r24
    4baa:	2c f4       	brge	.+10     	; 0x4bb6 <FingerPS_handShake+0x172>
		__ticks = 1;
    4bac:	81 e0       	ldi	r24, 0x01	; 1
    4bae:	90 e0       	ldi	r25, 0x00	; 0
    4bb0:	9e 83       	std	Y+6, r25	; 0x06
    4bb2:	8d 83       	std	Y+5, r24	; 0x05
    4bb4:	3f c0       	rjmp	.+126    	; 0x4c34 <FingerPS_handShake+0x1f0>
	else if (__tmp > 65535)
    4bb6:	6f 81       	ldd	r22, Y+7	; 0x07
    4bb8:	78 85       	ldd	r23, Y+8	; 0x08
    4bba:	89 85       	ldd	r24, Y+9	; 0x09
    4bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bbe:	20 e0       	ldi	r18, 0x00	; 0
    4bc0:	3f ef       	ldi	r19, 0xFF	; 255
    4bc2:	4f e7       	ldi	r20, 0x7F	; 127
    4bc4:	57 e4       	ldi	r21, 0x47	; 71
    4bc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4bca:	18 16       	cp	r1, r24
    4bcc:	4c f5       	brge	.+82     	; 0x4c20 <FingerPS_handShake+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bce:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bd6:	20 e0       	ldi	r18, 0x00	; 0
    4bd8:	30 e0       	ldi	r19, 0x00	; 0
    4bda:	40 e2       	ldi	r20, 0x20	; 32
    4bdc:	51 e4       	ldi	r21, 0x41	; 65
    4bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4be2:	dc 01       	movw	r26, r24
    4be4:	cb 01       	movw	r24, r22
    4be6:	bc 01       	movw	r22, r24
    4be8:	cd 01       	movw	r24, r26
    4bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bee:	dc 01       	movw	r26, r24
    4bf0:	cb 01       	movw	r24, r22
    4bf2:	9e 83       	std	Y+6, r25	; 0x06
    4bf4:	8d 83       	std	Y+5, r24	; 0x05
    4bf6:	0f c0       	rjmp	.+30     	; 0x4c16 <FingerPS_handShake+0x1d2>
    4bf8:	80 e9       	ldi	r24, 0x90	; 144
    4bfa:	91 e0       	ldi	r25, 0x01	; 1
    4bfc:	9c 83       	std	Y+4, r25	; 0x04
    4bfe:	8b 83       	std	Y+3, r24	; 0x03
    4c00:	8b 81       	ldd	r24, Y+3	; 0x03
    4c02:	9c 81       	ldd	r25, Y+4	; 0x04
    4c04:	01 97       	sbiw	r24, 0x01	; 1
    4c06:	f1 f7       	brne	.-4      	; 0x4c04 <FingerPS_handShake+0x1c0>
    4c08:	9c 83       	std	Y+4, r25	; 0x04
    4c0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    4c0e:	9e 81       	ldd	r25, Y+6	; 0x06
    4c10:	01 97       	sbiw	r24, 0x01	; 1
    4c12:	9e 83       	std	Y+6, r25	; 0x06
    4c14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c16:	8d 81       	ldd	r24, Y+5	; 0x05
    4c18:	9e 81       	ldd	r25, Y+6	; 0x06
    4c1a:	00 97       	sbiw	r24, 0x00	; 0
    4c1c:	69 f7       	brne	.-38     	; 0x4bf8 <FingerPS_handShake+0x1b4>
    4c1e:	14 c0       	rjmp	.+40     	; 0x4c48 <FingerPS_handShake+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c20:	6f 81       	ldd	r22, Y+7	; 0x07
    4c22:	78 85       	ldd	r23, Y+8	; 0x08
    4c24:	89 85       	ldd	r24, Y+9	; 0x09
    4c26:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c2c:	dc 01       	movw	r26, r24
    4c2e:	cb 01       	movw	r24, r22
    4c30:	9e 83       	std	Y+6, r25	; 0x06
    4c32:	8d 83       	std	Y+5, r24	; 0x05
    4c34:	8d 81       	ldd	r24, Y+5	; 0x05
    4c36:	9e 81       	ldd	r25, Y+6	; 0x06
    4c38:	9a 83       	std	Y+2, r25	; 0x02
    4c3a:	89 83       	std	Y+1, r24	; 0x01
    4c3c:	89 81       	ldd	r24, Y+1	; 0x01
    4c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c40:	01 97       	sbiw	r24, 0x01	; 1
    4c42:	f1 f7       	brne	.-4      	; 0x4c40 <FingerPS_handShake+0x1fc>
    4c44:	9a 83       	std	Y+2, r25	; 0x02
    4c46:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
	}
	return operation_status;
    4c48:	8a 89       	ldd	r24, Y+18	; 0x12
}
    4c4a:	e6 96       	adiw	r28, 0x36	; 54
    4c4c:	0f b6       	in	r0, 0x3f	; 63
    4c4e:	f8 94       	cli
    4c50:	de bf       	out	0x3e, r29	; 62
    4c52:	0f be       	out	0x3f, r0	; 63
    4c54:	cd bf       	out	0x3d, r28	; 61
    4c56:	cf 91       	pop	r28
    4c58:	df 91       	pop	r29
    4c5a:	08 95       	ret

00004c5c <FingerPS_genImg>:


u8 FingerPS_genImg(void)
{
    4c5c:	df 93       	push	r29
    4c5e:	cf 93       	push	r28
    4c60:	cd b7       	in	r28, 0x3d	; 61
    4c62:	de b7       	in	r29, 0x3e	; 62
    4c64:	c4 54       	subi	r28, 0x44	; 68
    4c66:	d0 40       	sbci	r29, 0x00	; 0
    4c68:	0f b6       	in	r0, 0x3f	; 63
    4c6a:	f8 94       	cli
    4c6c:	de bf       	out	0x3e, r29	; 62
    4c6e:	0f be       	out	0x3f, r0	; 63
    4c70:	cd bf       	out	0x3d, r28	; 61
	Error_Status_t ret_status = NO_ERROR;
    4c72:	19 a2       	std	Y+33, r1	; 0x21
	u8 operation_status = SUCCESS;
    4c74:	81 e0       	ldi	r24, 0x01	; 1
    4c76:	88 a3       	std	Y+32, r24	; 0x20
	u8 rec_byte = 0;
    4c78:	1a a2       	std	Y+34, r1	; 0x22
	u8 num_of_success = 0;
    4c7a:	1f 8e       	std	Y+31, r1	; 0x1f

	u8 GenImg_Command[]={0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x03,0x01,0x00,0x05};
    4c7c:	ce 01       	movw	r24, r28
    4c7e:	83 96       	adiw	r24, 0x23	; 35
    4c80:	9c af       	std	Y+60, r25	; 0x3c
    4c82:	8b af       	std	Y+59, r24	; 0x3b
    4c84:	e3 e9       	ldi	r30, 0x93	; 147
    4c86:	f2 e0       	ldi	r31, 0x02	; 2
    4c88:	fe af       	std	Y+62, r31	; 0x3e
    4c8a:	ed af       	std	Y+61, r30	; 0x3d
    4c8c:	fc e0       	ldi	r31, 0x0C	; 12
    4c8e:	ff af       	std	Y+63, r31	; 0x3f
    4c90:	ed ad       	ldd	r30, Y+61	; 0x3d
    4c92:	fe ad       	ldd	r31, Y+62	; 0x3e
    4c94:	00 80       	ld	r0, Z
    4c96:	8d ad       	ldd	r24, Y+61	; 0x3d
    4c98:	9e ad       	ldd	r25, Y+62	; 0x3e
    4c9a:	01 96       	adiw	r24, 0x01	; 1
    4c9c:	9e af       	std	Y+62, r25	; 0x3e
    4c9e:	8d af       	std	Y+61, r24	; 0x3d
    4ca0:	eb ad       	ldd	r30, Y+59	; 0x3b
    4ca2:	fc ad       	ldd	r31, Y+60	; 0x3c
    4ca4:	00 82       	st	Z, r0
    4ca6:	8b ad       	ldd	r24, Y+59	; 0x3b
    4ca8:	9c ad       	ldd	r25, Y+60	; 0x3c
    4caa:	01 96       	adiw	r24, 0x01	; 1
    4cac:	9c af       	std	Y+60, r25	; 0x3c
    4cae:	8b af       	std	Y+59, r24	; 0x3b
    4cb0:	9f ad       	ldd	r25, Y+63	; 0x3f
    4cb2:	91 50       	subi	r25, 0x01	; 1
    4cb4:	9f af       	std	Y+63, r25	; 0x3f
    4cb6:	ef ad       	ldd	r30, Y+63	; 0x3f
    4cb8:	ee 23       	and	r30, r30
    4cba:	51 f7       	brne	.-44     	; 0x4c90 <FingerPS_genImg+0x34>
	u8 GenImg_Right_response[] = {0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x07,0x00,0x03,0x00,0x00,0x0A};
    4cbc:	ce 01       	movw	r24, r28
    4cbe:	8f 96       	adiw	r24, 0x2f	; 47
    4cc0:	22 96       	adiw	r28, 0x02	; 2
    4cc2:	9f af       	std	Y+63, r25	; 0x3f
    4cc4:	8e af       	std	Y+62, r24	; 0x3e
    4cc6:	22 97       	sbiw	r28, 0x02	; 2
    4cc8:	e7 e8       	ldi	r30, 0x87	; 135
    4cca:	f2 e0       	ldi	r31, 0x02	; 2
    4ccc:	24 96       	adiw	r28, 0x04	; 4
    4cce:	ff af       	std	Y+63, r31	; 0x3f
    4cd0:	ee af       	std	Y+62, r30	; 0x3e
    4cd2:	24 97       	sbiw	r28, 0x04	; 4
    4cd4:	fc e0       	ldi	r31, 0x0C	; 12
    4cd6:	25 96       	adiw	r28, 0x05	; 5
    4cd8:	ff af       	std	Y+63, r31	; 0x3f
    4cda:	25 97       	sbiw	r28, 0x05	; 5
    4cdc:	24 96       	adiw	r28, 0x04	; 4
    4cde:	ee ad       	ldd	r30, Y+62	; 0x3e
    4ce0:	ff ad       	ldd	r31, Y+63	; 0x3f
    4ce2:	24 97       	sbiw	r28, 0x04	; 4
    4ce4:	00 80       	ld	r0, Z
    4ce6:	24 96       	adiw	r28, 0x04	; 4
    4ce8:	8e ad       	ldd	r24, Y+62	; 0x3e
    4cea:	9f ad       	ldd	r25, Y+63	; 0x3f
    4cec:	24 97       	sbiw	r28, 0x04	; 4
    4cee:	01 96       	adiw	r24, 0x01	; 1
    4cf0:	24 96       	adiw	r28, 0x04	; 4
    4cf2:	9f af       	std	Y+63, r25	; 0x3f
    4cf4:	8e af       	std	Y+62, r24	; 0x3e
    4cf6:	24 97       	sbiw	r28, 0x04	; 4
    4cf8:	22 96       	adiw	r28, 0x02	; 2
    4cfa:	ee ad       	ldd	r30, Y+62	; 0x3e
    4cfc:	ff ad       	ldd	r31, Y+63	; 0x3f
    4cfe:	22 97       	sbiw	r28, 0x02	; 2
    4d00:	00 82       	st	Z, r0
    4d02:	22 96       	adiw	r28, 0x02	; 2
    4d04:	8e ad       	ldd	r24, Y+62	; 0x3e
    4d06:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d08:	22 97       	sbiw	r28, 0x02	; 2
    4d0a:	01 96       	adiw	r24, 0x01	; 1
    4d0c:	22 96       	adiw	r28, 0x02	; 2
    4d0e:	9f af       	std	Y+63, r25	; 0x3f
    4d10:	8e af       	std	Y+62, r24	; 0x3e
    4d12:	22 97       	sbiw	r28, 0x02	; 2
    4d14:	25 96       	adiw	r28, 0x05	; 5
    4d16:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d18:	25 97       	sbiw	r28, 0x05	; 5
    4d1a:	91 50       	subi	r25, 0x01	; 1
    4d1c:	25 96       	adiw	r28, 0x05	; 5
    4d1e:	9f af       	std	Y+63, r25	; 0x3f
    4d20:	25 97       	sbiw	r28, 0x05	; 5
    4d22:	25 96       	adiw	r28, 0x05	; 5
    4d24:	ef ad       	ldd	r30, Y+63	; 0x3f
    4d26:	25 97       	sbiw	r28, 0x05	; 5
    4d28:	ee 23       	and	r30, r30
    4d2a:	c1 f6       	brne	.-80     	; 0x4cdc <FingerPS_genImg+0x80>

	for(u8 i = 0; i < sizeof(GenImg_Command); i++)
    4d2c:	1e 8e       	std	Y+30, r1	; 0x1e
    4d2e:	0f c0       	rjmp	.+30     	; 0x4d4e <FingerPS_genImg+0xf2>
	{
		ret_status = UART_SendByte(GenImg_Command[i]);
    4d30:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4d32:	28 2f       	mov	r18, r24
    4d34:	30 e0       	ldi	r19, 0x00	; 0
    4d36:	ce 01       	movw	r24, r28
    4d38:	83 96       	adiw	r24, 0x23	; 35
    4d3a:	fc 01       	movw	r30, r24
    4d3c:	e2 0f       	add	r30, r18
    4d3e:	f3 1f       	adc	r31, r19
    4d40:	80 81       	ld	r24, Z
    4d42:	0e 94 16 11 	call	0x222c	; 0x222c <UART_SendByte>
    4d46:	89 a3       	std	Y+33, r24	; 0x21
	u8 num_of_success = 0;

	u8 GenImg_Command[]={0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x03,0x01,0x00,0x05};
	u8 GenImg_Right_response[] = {0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x07,0x00,0x03,0x00,0x00,0x0A};

	for(u8 i = 0; i < sizeof(GenImg_Command); i++)
    4d48:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4d4a:	8f 5f       	subi	r24, 0xFF	; 255
    4d4c:	8e 8f       	std	Y+30, r24	; 0x1e
    4d4e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4d50:	8c 30       	cpi	r24, 0x0C	; 12
    4d52:	70 f3       	brcs	.-36     	; 0x4d30 <FingerPS_genImg+0xd4>
	{
		ret_status = UART_SendByte(GenImg_Command[i]);
	}

	// Receive and verify the response
	for (u8 i = 0; i < sizeof(GenImg_Right_response); ++i)
    4d54:	1d 8e       	std	Y+29, r1	; 0x1d
    4d56:	17 c0       	rjmp	.+46     	; 0x4d86 <FingerPS_genImg+0x12a>
	{
		ret_status = UART_ReceiveByte(&rec_byte);
    4d58:	ce 01       	movw	r24, r28
    4d5a:	82 96       	adiw	r24, 0x22	; 34
    4d5c:	0e 94 30 11 	call	0x2260	; 0x2260 <UART_ReceiveByte>
    4d60:	89 a3       	std	Y+33, r24	; 0x21

		if(rec_byte == GenImg_Right_response[i])
    4d62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4d64:	28 2f       	mov	r18, r24
    4d66:	30 e0       	ldi	r19, 0x00	; 0
    4d68:	ce 01       	movw	r24, r28
    4d6a:	8f 96       	adiw	r24, 0x2f	; 47
    4d6c:	fc 01       	movw	r30, r24
    4d6e:	e2 0f       	add	r30, r18
    4d70:	f3 1f       	adc	r31, r19
    4d72:	90 81       	ld	r25, Z
    4d74:	8a a1       	ldd	r24, Y+34	; 0x22
    4d76:	98 17       	cp	r25, r24
    4d78:	19 f4       	brne	.+6      	; 0x4d80 <FingerPS_genImg+0x124>
		{
			num_of_success++;
    4d7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4d7c:	8f 5f       	subi	r24, 0xFF	; 255
    4d7e:	8f 8f       	std	Y+31, r24	; 0x1f
	{
		ret_status = UART_SendByte(GenImg_Command[i]);
	}

	// Receive and verify the response
	for (u8 i = 0; i < sizeof(GenImg_Right_response); ++i)
    4d80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4d82:	8f 5f       	subi	r24, 0xFF	; 255
    4d84:	8d 8f       	std	Y+29, r24	; 0x1d
    4d86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4d88:	8c 30       	cpi	r24, 0x0C	; 12
    4d8a:	30 f3       	brcs	.-52     	; 0x4d58 <FingerPS_genImg+0xfc>
		if(rec_byte == GenImg_Right_response[i])
		{
			num_of_success++;
		}
	}
	if(num_of_success == sizeof(GenImg_Right_response))
    4d8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4d8e:	8c 30       	cpi	r24, 0x0C	; 12
    4d90:	09 f0       	breq	.+2      	; 0x4d94 <FingerPS_genImg+0x138>
    4d92:	76 c0       	rjmp	.+236    	; 0x4e80 <FingerPS_genImg+0x224>
	{
		operation_status = FingerPS_AuraSuccess();
    4d94:	0e 94 14 24 	call	0x4828	; 0x4828 <FingerPS_AuraSuccess>
    4d98:	88 a3       	std	Y+32, r24	; 0x20
    4d9a:	80 e0       	ldi	r24, 0x00	; 0
    4d9c:	90 e0       	ldi	r25, 0x00	; 0
    4d9e:	a8 e4       	ldi	r26, 0x48	; 72
    4da0:	b3 e4       	ldi	r27, 0x43	; 67
    4da2:	89 8f       	std	Y+25, r24	; 0x19
    4da4:	9a 8f       	std	Y+26, r25	; 0x1a
    4da6:	ab 8f       	std	Y+27, r26	; 0x1b
    4da8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4daa:	69 8d       	ldd	r22, Y+25	; 0x19
    4dac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4dae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4db0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4db2:	20 e0       	ldi	r18, 0x00	; 0
    4db4:	30 e0       	ldi	r19, 0x00	; 0
    4db6:	4a e7       	ldi	r20, 0x7A	; 122
    4db8:	55 e4       	ldi	r21, 0x45	; 69
    4dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dbe:	dc 01       	movw	r26, r24
    4dc0:	cb 01       	movw	r24, r22
    4dc2:	8d 8b       	std	Y+21, r24	; 0x15
    4dc4:	9e 8b       	std	Y+22, r25	; 0x16
    4dc6:	af 8b       	std	Y+23, r26	; 0x17
    4dc8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4dca:	6d 89       	ldd	r22, Y+21	; 0x15
    4dcc:	7e 89       	ldd	r23, Y+22	; 0x16
    4dce:	8f 89       	ldd	r24, Y+23	; 0x17
    4dd0:	98 8d       	ldd	r25, Y+24	; 0x18
    4dd2:	20 e0       	ldi	r18, 0x00	; 0
    4dd4:	30 e0       	ldi	r19, 0x00	; 0
    4dd6:	40 e8       	ldi	r20, 0x80	; 128
    4dd8:	5f e3       	ldi	r21, 0x3F	; 63
    4dda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4dde:	88 23       	and	r24, r24
    4de0:	2c f4       	brge	.+10     	; 0x4dec <FingerPS_genImg+0x190>
		__ticks = 1;
    4de2:	81 e0       	ldi	r24, 0x01	; 1
    4de4:	90 e0       	ldi	r25, 0x00	; 0
    4de6:	9c 8b       	std	Y+20, r25	; 0x14
    4de8:	8b 8b       	std	Y+19, r24	; 0x13
    4dea:	3f c0       	rjmp	.+126    	; 0x4e6a <FingerPS_genImg+0x20e>
	else if (__tmp > 65535)
    4dec:	6d 89       	ldd	r22, Y+21	; 0x15
    4dee:	7e 89       	ldd	r23, Y+22	; 0x16
    4df0:	8f 89       	ldd	r24, Y+23	; 0x17
    4df2:	98 8d       	ldd	r25, Y+24	; 0x18
    4df4:	20 e0       	ldi	r18, 0x00	; 0
    4df6:	3f ef       	ldi	r19, 0xFF	; 255
    4df8:	4f e7       	ldi	r20, 0x7F	; 127
    4dfa:	57 e4       	ldi	r21, 0x47	; 71
    4dfc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e00:	18 16       	cp	r1, r24
    4e02:	4c f5       	brge	.+82     	; 0x4e56 <FingerPS_genImg+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e04:	69 8d       	ldd	r22, Y+25	; 0x19
    4e06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e0c:	20 e0       	ldi	r18, 0x00	; 0
    4e0e:	30 e0       	ldi	r19, 0x00	; 0
    4e10:	40 e2       	ldi	r20, 0x20	; 32
    4e12:	51 e4       	ldi	r21, 0x41	; 65
    4e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e18:	dc 01       	movw	r26, r24
    4e1a:	cb 01       	movw	r24, r22
    4e1c:	bc 01       	movw	r22, r24
    4e1e:	cd 01       	movw	r24, r26
    4e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e24:	dc 01       	movw	r26, r24
    4e26:	cb 01       	movw	r24, r22
    4e28:	9c 8b       	std	Y+20, r25	; 0x14
    4e2a:	8b 8b       	std	Y+19, r24	; 0x13
    4e2c:	0f c0       	rjmp	.+30     	; 0x4e4c <FingerPS_genImg+0x1f0>
    4e2e:	80 e9       	ldi	r24, 0x90	; 144
    4e30:	91 e0       	ldi	r25, 0x01	; 1
    4e32:	9a 8b       	std	Y+18, r25	; 0x12
    4e34:	89 8b       	std	Y+17, r24	; 0x11
    4e36:	89 89       	ldd	r24, Y+17	; 0x11
    4e38:	9a 89       	ldd	r25, Y+18	; 0x12
    4e3a:	01 97       	sbiw	r24, 0x01	; 1
    4e3c:	f1 f7       	brne	.-4      	; 0x4e3a <FingerPS_genImg+0x1de>
    4e3e:	9a 8b       	std	Y+18, r25	; 0x12
    4e40:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e42:	8b 89       	ldd	r24, Y+19	; 0x13
    4e44:	9c 89       	ldd	r25, Y+20	; 0x14
    4e46:	01 97       	sbiw	r24, 0x01	; 1
    4e48:	9c 8b       	std	Y+20, r25	; 0x14
    4e4a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e4c:	8b 89       	ldd	r24, Y+19	; 0x13
    4e4e:	9c 89       	ldd	r25, Y+20	; 0x14
    4e50:	00 97       	sbiw	r24, 0x00	; 0
    4e52:	69 f7       	brne	.-38     	; 0x4e2e <FingerPS_genImg+0x1d2>
    4e54:	8b c0       	rjmp	.+278    	; 0x4f6c <FingerPS_genImg+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e56:	6d 89       	ldd	r22, Y+21	; 0x15
    4e58:	7e 89       	ldd	r23, Y+22	; 0x16
    4e5a:	8f 89       	ldd	r24, Y+23	; 0x17
    4e5c:	98 8d       	ldd	r25, Y+24	; 0x18
    4e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e62:	dc 01       	movw	r26, r24
    4e64:	cb 01       	movw	r24, r22
    4e66:	9c 8b       	std	Y+20, r25	; 0x14
    4e68:	8b 8b       	std	Y+19, r24	; 0x13
    4e6a:	8b 89       	ldd	r24, Y+19	; 0x13
    4e6c:	9c 89       	ldd	r25, Y+20	; 0x14
    4e6e:	98 8b       	std	Y+16, r25	; 0x10
    4e70:	8f 87       	std	Y+15, r24	; 0x0f
    4e72:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e74:	98 89       	ldd	r25, Y+16	; 0x10
    4e76:	01 97       	sbiw	r24, 0x01	; 1
    4e78:	f1 f7       	brne	.-4      	; 0x4e76 <FingerPS_genImg+0x21a>
    4e7a:	98 8b       	std	Y+16, r25	; 0x10
    4e7c:	8f 87       	std	Y+15, r24	; 0x0f
    4e7e:	76 c0       	rjmp	.+236    	; 0x4f6c <FingerPS_genImg+0x310>
		_delay_ms(200);
	}
	else
	{
		operation_status = FingerPS_AuraError();
    4e80:	0e 94 9b 24 	call	0x4936	; 0x4936 <FingerPS_AuraError>
    4e84:	88 a3       	std	Y+32, r24	; 0x20
    4e86:	80 e0       	ldi	r24, 0x00	; 0
    4e88:	90 e0       	ldi	r25, 0x00	; 0
    4e8a:	a8 e4       	ldi	r26, 0x48	; 72
    4e8c:	b3 e4       	ldi	r27, 0x43	; 67
    4e8e:	8b 87       	std	Y+11, r24	; 0x0b
    4e90:	9c 87       	std	Y+12, r25	; 0x0c
    4e92:	ad 87       	std	Y+13, r26	; 0x0d
    4e94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e96:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e98:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e9e:	20 e0       	ldi	r18, 0x00	; 0
    4ea0:	30 e0       	ldi	r19, 0x00	; 0
    4ea2:	4a e7       	ldi	r20, 0x7A	; 122
    4ea4:	55 e4       	ldi	r21, 0x45	; 69
    4ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eaa:	dc 01       	movw	r26, r24
    4eac:	cb 01       	movw	r24, r22
    4eae:	8f 83       	std	Y+7, r24	; 0x07
    4eb0:	98 87       	std	Y+8, r25	; 0x08
    4eb2:	a9 87       	std	Y+9, r26	; 0x09
    4eb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4eb6:	6f 81       	ldd	r22, Y+7	; 0x07
    4eb8:	78 85       	ldd	r23, Y+8	; 0x08
    4eba:	89 85       	ldd	r24, Y+9	; 0x09
    4ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ebe:	20 e0       	ldi	r18, 0x00	; 0
    4ec0:	30 e0       	ldi	r19, 0x00	; 0
    4ec2:	40 e8       	ldi	r20, 0x80	; 128
    4ec4:	5f e3       	ldi	r21, 0x3F	; 63
    4ec6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4eca:	88 23       	and	r24, r24
    4ecc:	2c f4       	brge	.+10     	; 0x4ed8 <FingerPS_genImg+0x27c>
		__ticks = 1;
    4ece:	81 e0       	ldi	r24, 0x01	; 1
    4ed0:	90 e0       	ldi	r25, 0x00	; 0
    4ed2:	9e 83       	std	Y+6, r25	; 0x06
    4ed4:	8d 83       	std	Y+5, r24	; 0x05
    4ed6:	3f c0       	rjmp	.+126    	; 0x4f56 <FingerPS_genImg+0x2fa>
	else if (__tmp > 65535)
    4ed8:	6f 81       	ldd	r22, Y+7	; 0x07
    4eda:	78 85       	ldd	r23, Y+8	; 0x08
    4edc:	89 85       	ldd	r24, Y+9	; 0x09
    4ede:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ee0:	20 e0       	ldi	r18, 0x00	; 0
    4ee2:	3f ef       	ldi	r19, 0xFF	; 255
    4ee4:	4f e7       	ldi	r20, 0x7F	; 127
    4ee6:	57 e4       	ldi	r21, 0x47	; 71
    4ee8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4eec:	18 16       	cp	r1, r24
    4eee:	4c f5       	brge	.+82     	; 0x4f42 <FingerPS_genImg+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ef0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ef2:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ef4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ef6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ef8:	20 e0       	ldi	r18, 0x00	; 0
    4efa:	30 e0       	ldi	r19, 0x00	; 0
    4efc:	40 e2       	ldi	r20, 0x20	; 32
    4efe:	51 e4       	ldi	r21, 0x41	; 65
    4f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f04:	dc 01       	movw	r26, r24
    4f06:	cb 01       	movw	r24, r22
    4f08:	bc 01       	movw	r22, r24
    4f0a:	cd 01       	movw	r24, r26
    4f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f10:	dc 01       	movw	r26, r24
    4f12:	cb 01       	movw	r24, r22
    4f14:	9e 83       	std	Y+6, r25	; 0x06
    4f16:	8d 83       	std	Y+5, r24	; 0x05
    4f18:	0f c0       	rjmp	.+30     	; 0x4f38 <FingerPS_genImg+0x2dc>
    4f1a:	80 e9       	ldi	r24, 0x90	; 144
    4f1c:	91 e0       	ldi	r25, 0x01	; 1
    4f1e:	9c 83       	std	Y+4, r25	; 0x04
    4f20:	8b 83       	std	Y+3, r24	; 0x03
    4f22:	8b 81       	ldd	r24, Y+3	; 0x03
    4f24:	9c 81       	ldd	r25, Y+4	; 0x04
    4f26:	01 97       	sbiw	r24, 0x01	; 1
    4f28:	f1 f7       	brne	.-4      	; 0x4f26 <FingerPS_genImg+0x2ca>
    4f2a:	9c 83       	std	Y+4, r25	; 0x04
    4f2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    4f30:	9e 81       	ldd	r25, Y+6	; 0x06
    4f32:	01 97       	sbiw	r24, 0x01	; 1
    4f34:	9e 83       	std	Y+6, r25	; 0x06
    4f36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f38:	8d 81       	ldd	r24, Y+5	; 0x05
    4f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    4f3c:	00 97       	sbiw	r24, 0x00	; 0
    4f3e:	69 f7       	brne	.-38     	; 0x4f1a <FingerPS_genImg+0x2be>
    4f40:	14 c0       	rjmp	.+40     	; 0x4f6a <FingerPS_genImg+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f42:	6f 81       	ldd	r22, Y+7	; 0x07
    4f44:	78 85       	ldd	r23, Y+8	; 0x08
    4f46:	89 85       	ldd	r24, Y+9	; 0x09
    4f48:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f4e:	dc 01       	movw	r26, r24
    4f50:	cb 01       	movw	r24, r22
    4f52:	9e 83       	std	Y+6, r25	; 0x06
    4f54:	8d 83       	std	Y+5, r24	; 0x05
    4f56:	8d 81       	ldd	r24, Y+5	; 0x05
    4f58:	9e 81       	ldd	r25, Y+6	; 0x06
    4f5a:	9a 83       	std	Y+2, r25	; 0x02
    4f5c:	89 83       	std	Y+1, r24	; 0x01
    4f5e:	89 81       	ldd	r24, Y+1	; 0x01
    4f60:	9a 81       	ldd	r25, Y+2	; 0x02
    4f62:	01 97       	sbiw	r24, 0x01	; 1
    4f64:	f1 f7       	brne	.-4      	; 0x4f62 <FingerPS_genImg+0x306>
    4f66:	9a 83       	std	Y+2, r25	; 0x02
    4f68:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
		operation_status = ERROR;
    4f6a:	18 a2       	std	Y+32, r1	; 0x20
	}
	operation_status &= FingerPS_AuraNormal();
    4f6c:	0e 94 8d 23 	call	0x471a	; 0x471a <FingerPS_AuraNormal>
    4f70:	98 2f       	mov	r25, r24
    4f72:	88 a1       	ldd	r24, Y+32	; 0x20
    4f74:	89 23       	and	r24, r25
    4f76:	88 a3       	std	Y+32, r24	; 0x20
	return operation_status;
    4f78:	88 a1       	ldd	r24, Y+32	; 0x20
}
    4f7a:	cc 5b       	subi	r28, 0xBC	; 188
    4f7c:	df 4f       	sbci	r29, 0xFF	; 255
    4f7e:	0f b6       	in	r0, 0x3f	; 63
    4f80:	f8 94       	cli
    4f82:	de bf       	out	0x3e, r29	; 62
    4f84:	0f be       	out	0x3f, r0	; 63
    4f86:	cd bf       	out	0x3d, r28	; 61
    4f88:	cf 91       	pop	r28
    4f8a:	df 91       	pop	r29
    4f8c:	08 95       	ret

00004f8e <FingerPS_convertImg2CharFile>:



u8 FingerPS_convertImg2CharFile(u8 BufferId)
{
    4f8e:	df 93       	push	r29
    4f90:	cf 93       	push	r28
    4f92:	cd b7       	in	r28, 0x3d	; 61
    4f94:	de b7       	in	r29, 0x3e	; 62
    4f96:	ce 56       	subi	r28, 0x6E	; 110
    4f98:	d0 40       	sbci	r29, 0x00	; 0
    4f9a:	0f b6       	in	r0, 0x3f	; 63
    4f9c:	f8 94       	cli
    4f9e:	de bf       	out	0x3e, r29	; 62
    4fa0:	0f be       	out	0x3f, r0	; 63
    4fa2:	cd bf       	out	0x3d, r28	; 61
    4fa4:	fe 01       	movw	r30, r28
    4fa6:	e9 59       	subi	r30, 0x99	; 153
    4fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    4faa:	80 83       	st	Z, r24
	Error_Status_t ret_status = NO_ERROR;
    4fac:	1f ae       	std	Y+63, r1	; 0x3f
	u8 operation_status = SUCCESS;
    4fae:	81 e0       	ldi	r24, 0x01	; 1
    4fb0:	8e af       	std	Y+62, r24	; 0x3e
	u8 rec_byte = 0;
    4fb2:	fe 01       	movw	r30, r28
    4fb4:	e0 5c       	subi	r30, 0xC0	; 192
    4fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb8:	10 82       	st	Z, r1
	u8 num_of_success = 0;
    4fba:	1d ae       	std	Y+61, r1	; 0x3d

	u8 Img2Tz_1 []={0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x04,0x02,BufferId,0x00,0x08};
    4fbc:	fe 01       	movw	r30, r28
    4fbe:	ef 5b       	subi	r30, 0xBF	; 191
    4fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    4fc2:	8f ee       	ldi	r24, 0xEF	; 239
    4fc4:	80 83       	st	Z, r24
    4fc6:	fe 01       	movw	r30, r28
    4fc8:	ee 5b       	subi	r30, 0xBE	; 190
    4fca:	ff 4f       	sbci	r31, 0xFF	; 255
    4fcc:	81 e0       	ldi	r24, 0x01	; 1
    4fce:	80 83       	st	Z, r24
    4fd0:	fe 01       	movw	r30, r28
    4fd2:	ed 5b       	subi	r30, 0xBD	; 189
    4fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd6:	8f ef       	ldi	r24, 0xFF	; 255
    4fd8:	80 83       	st	Z, r24
    4fda:	fe 01       	movw	r30, r28
    4fdc:	ec 5b       	subi	r30, 0xBC	; 188
    4fde:	ff 4f       	sbci	r31, 0xFF	; 255
    4fe0:	8f ef       	ldi	r24, 0xFF	; 255
    4fe2:	80 83       	st	Z, r24
    4fe4:	fe 01       	movw	r30, r28
    4fe6:	eb 5b       	subi	r30, 0xBB	; 187
    4fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    4fea:	8f ef       	ldi	r24, 0xFF	; 255
    4fec:	80 83       	st	Z, r24
    4fee:	fe 01       	movw	r30, r28
    4ff0:	ea 5b       	subi	r30, 0xBA	; 186
    4ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff4:	8f ef       	ldi	r24, 0xFF	; 255
    4ff6:	80 83       	st	Z, r24
    4ff8:	fe 01       	movw	r30, r28
    4ffa:	e9 5b       	subi	r30, 0xB9	; 185
    4ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ffe:	81 e0       	ldi	r24, 0x01	; 1
    5000:	80 83       	st	Z, r24
    5002:	fe 01       	movw	r30, r28
    5004:	e8 5b       	subi	r30, 0xB8	; 184
    5006:	ff 4f       	sbci	r31, 0xFF	; 255
    5008:	10 82       	st	Z, r1
    500a:	fe 01       	movw	r30, r28
    500c:	e7 5b       	subi	r30, 0xB7	; 183
    500e:	ff 4f       	sbci	r31, 0xFF	; 255
    5010:	84 e0       	ldi	r24, 0x04	; 4
    5012:	80 83       	st	Z, r24
    5014:	fe 01       	movw	r30, r28
    5016:	e6 5b       	subi	r30, 0xB6	; 182
    5018:	ff 4f       	sbci	r31, 0xFF	; 255
    501a:	82 e0       	ldi	r24, 0x02	; 2
    501c:	80 83       	st	Z, r24
    501e:	de 01       	movw	r26, r28
    5020:	a5 5b       	subi	r26, 0xB5	; 181
    5022:	bf 4f       	sbci	r27, 0xFF	; 255
    5024:	fe 01       	movw	r30, r28
    5026:	e9 59       	subi	r30, 0x99	; 153
    5028:	ff 4f       	sbci	r31, 0xFF	; 255
    502a:	80 81       	ld	r24, Z
    502c:	8c 93       	st	X, r24
    502e:	fe 01       	movw	r30, r28
    5030:	e4 5b       	subi	r30, 0xB4	; 180
    5032:	ff 4f       	sbci	r31, 0xFF	; 255
    5034:	10 82       	st	Z, r1
    5036:	fe 01       	movw	r30, r28
    5038:	e3 5b       	subi	r30, 0xB3	; 179
    503a:	ff 4f       	sbci	r31, 0xFF	; 255
    503c:	88 e0       	ldi	r24, 0x08	; 8
    503e:	80 83       	st	Z, r24
	u8 Img2Tz_2 []={0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x04,0x02,BufferId,0x00,0x09};
    5040:	fe 01       	movw	r30, r28
    5042:	e2 5b       	subi	r30, 0xB2	; 178
    5044:	ff 4f       	sbci	r31, 0xFF	; 255
    5046:	8f ee       	ldi	r24, 0xEF	; 239
    5048:	80 83       	st	Z, r24
    504a:	fe 01       	movw	r30, r28
    504c:	e2 5b       	subi	r30, 0xB2	; 178
    504e:	ff 4f       	sbci	r31, 0xFF	; 255
    5050:	81 e0       	ldi	r24, 0x01	; 1
    5052:	81 83       	std	Z+1, r24	; 0x01
    5054:	fe 01       	movw	r30, r28
    5056:	e2 5b       	subi	r30, 0xB2	; 178
    5058:	ff 4f       	sbci	r31, 0xFF	; 255
    505a:	8f ef       	ldi	r24, 0xFF	; 255
    505c:	82 83       	std	Z+2, r24	; 0x02
    505e:	fe 01       	movw	r30, r28
    5060:	e2 5b       	subi	r30, 0xB2	; 178
    5062:	ff 4f       	sbci	r31, 0xFF	; 255
    5064:	8f ef       	ldi	r24, 0xFF	; 255
    5066:	83 83       	std	Z+3, r24	; 0x03
    5068:	fe 01       	movw	r30, r28
    506a:	e2 5b       	subi	r30, 0xB2	; 178
    506c:	ff 4f       	sbci	r31, 0xFF	; 255
    506e:	8f ef       	ldi	r24, 0xFF	; 255
    5070:	84 83       	std	Z+4, r24	; 0x04
    5072:	fe 01       	movw	r30, r28
    5074:	e2 5b       	subi	r30, 0xB2	; 178
    5076:	ff 4f       	sbci	r31, 0xFF	; 255
    5078:	8f ef       	ldi	r24, 0xFF	; 255
    507a:	85 83       	std	Z+5, r24	; 0x05
    507c:	fe 01       	movw	r30, r28
    507e:	e2 5b       	subi	r30, 0xB2	; 178
    5080:	ff 4f       	sbci	r31, 0xFF	; 255
    5082:	81 e0       	ldi	r24, 0x01	; 1
    5084:	86 83       	std	Z+6, r24	; 0x06
    5086:	fe 01       	movw	r30, r28
    5088:	e2 5b       	subi	r30, 0xB2	; 178
    508a:	ff 4f       	sbci	r31, 0xFF	; 255
    508c:	17 82       	std	Z+7, r1	; 0x07
    508e:	fe 01       	movw	r30, r28
    5090:	e2 5b       	subi	r30, 0xB2	; 178
    5092:	ff 4f       	sbci	r31, 0xFF	; 255
    5094:	84 e0       	ldi	r24, 0x04	; 4
    5096:	80 87       	std	Z+8, r24	; 0x08
    5098:	fe 01       	movw	r30, r28
    509a:	e2 5b       	subi	r30, 0xB2	; 178
    509c:	ff 4f       	sbci	r31, 0xFF	; 255
    509e:	82 e0       	ldi	r24, 0x02	; 2
    50a0:	81 87       	std	Z+9, r24	; 0x09
    50a2:	de 01       	movw	r26, r28
    50a4:	a2 5b       	subi	r26, 0xB2	; 178
    50a6:	bf 4f       	sbci	r27, 0xFF	; 255
    50a8:	fe 01       	movw	r30, r28
    50aa:	e9 59       	subi	r30, 0x99	; 153
    50ac:	ff 4f       	sbci	r31, 0xFF	; 255
    50ae:	80 81       	ld	r24, Z
    50b0:	1a 96       	adiw	r26, 0x0a	; 10
    50b2:	8c 93       	st	X, r24
    50b4:	1a 97       	sbiw	r26, 0x0a	; 10
    50b6:	fe 01       	movw	r30, r28
    50b8:	e2 5b       	subi	r30, 0xB2	; 178
    50ba:	ff 4f       	sbci	r31, 0xFF	; 255
    50bc:	13 86       	std	Z+11, r1	; 0x0b
    50be:	fe 01       	movw	r30, r28
    50c0:	e2 5b       	subi	r30, 0xB2	; 178
    50c2:	ff 4f       	sbci	r31, 0xFF	; 255
    50c4:	89 e0       	ldi	r24, 0x09	; 9
    50c6:	84 87       	std	Z+12, r24	; 0x0c
	u8 Img2Tz_Right_response[] = {0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x07,0x00,0x03,0x00,0x00,0x0A};
    50c8:	ce 01       	movw	r24, r28
    50ca:	85 5a       	subi	r24, 0xA5	; 165
    50cc:	9f 4f       	sbci	r25, 0xFF	; 255
    50ce:	ac 96       	adiw	r28, 0x2c	; 44
    50d0:	9f af       	std	Y+63, r25	; 0x3f
    50d2:	8e af       	std	Y+62, r24	; 0x3e
    50d4:	ac 97       	sbiw	r28, 0x2c	; 44
    50d6:	2f e9       	ldi	r18, 0x9F	; 159
    50d8:	32 e0       	ldi	r19, 0x02	; 2
    50da:	ae 96       	adiw	r28, 0x2e	; 46
    50dc:	3f af       	std	Y+63, r19	; 0x3f
    50de:	2e af       	std	Y+62, r18	; 0x3e
    50e0:	ae 97       	sbiw	r28, 0x2e	; 46
    50e2:	3c e0       	ldi	r19, 0x0C	; 12
    50e4:	af 96       	adiw	r28, 0x2f	; 47
    50e6:	3f af       	std	Y+63, r19	; 0x3f
    50e8:	af 97       	sbiw	r28, 0x2f	; 47
    50ea:	ae 96       	adiw	r28, 0x2e	; 46
    50ec:	ee ad       	ldd	r30, Y+62	; 0x3e
    50ee:	ff ad       	ldd	r31, Y+63	; 0x3f
    50f0:	ae 97       	sbiw	r28, 0x2e	; 46
    50f2:	00 80       	ld	r0, Z
    50f4:	ae 96       	adiw	r28, 0x2e	; 46
    50f6:	2e ad       	ldd	r18, Y+62	; 0x3e
    50f8:	3f ad       	ldd	r19, Y+63	; 0x3f
    50fa:	ae 97       	sbiw	r28, 0x2e	; 46
    50fc:	2f 5f       	subi	r18, 0xFF	; 255
    50fe:	3f 4f       	sbci	r19, 0xFF	; 255
    5100:	ae 96       	adiw	r28, 0x2e	; 46
    5102:	3f af       	std	Y+63, r19	; 0x3f
    5104:	2e af       	std	Y+62, r18	; 0x3e
    5106:	ae 97       	sbiw	r28, 0x2e	; 46
    5108:	ac 96       	adiw	r28, 0x2c	; 44
    510a:	ee ad       	ldd	r30, Y+62	; 0x3e
    510c:	ff ad       	ldd	r31, Y+63	; 0x3f
    510e:	ac 97       	sbiw	r28, 0x2c	; 44
    5110:	00 82       	st	Z, r0
    5112:	ac 96       	adiw	r28, 0x2c	; 44
    5114:	2e ad       	ldd	r18, Y+62	; 0x3e
    5116:	3f ad       	ldd	r19, Y+63	; 0x3f
    5118:	ac 97       	sbiw	r28, 0x2c	; 44
    511a:	2f 5f       	subi	r18, 0xFF	; 255
    511c:	3f 4f       	sbci	r19, 0xFF	; 255
    511e:	ac 96       	adiw	r28, 0x2c	; 44
    5120:	3f af       	std	Y+63, r19	; 0x3f
    5122:	2e af       	std	Y+62, r18	; 0x3e
    5124:	ac 97       	sbiw	r28, 0x2c	; 44
    5126:	af 96       	adiw	r28, 0x2f	; 47
    5128:	3f ad       	ldd	r19, Y+63	; 0x3f
    512a:	af 97       	sbiw	r28, 0x2f	; 47
    512c:	31 50       	subi	r19, 0x01	; 1
    512e:	af 96       	adiw	r28, 0x2f	; 47
    5130:	3f af       	std	Y+63, r19	; 0x3f
    5132:	af 97       	sbiw	r28, 0x2f	; 47
    5134:	af 96       	adiw	r28, 0x2f	; 47
    5136:	8f ad       	ldd	r24, Y+63	; 0x3f
    5138:	af 97       	sbiw	r28, 0x2f	; 47
    513a:	88 23       	and	r24, r24
    513c:	b1 f6       	brne	.-84     	; 0x50ea <FingerPS_convertImg2CharFile+0x15c>

	switch(BufferId)
    513e:	fe 01       	movw	r30, r28
    5140:	e9 59       	subi	r30, 0x99	; 153
    5142:	ff 4f       	sbci	r31, 0xFF	; 255
    5144:	80 81       	ld	r24, Z
    5146:	e8 2f       	mov	r30, r24
    5148:	f0 e0       	ldi	r31, 0x00	; 0
    514a:	aa 96       	adiw	r28, 0x2a	; 42
    514c:	ff af       	std	Y+63, r31	; 0x3f
    514e:	ee af       	std	Y+62, r30	; 0x3e
    5150:	aa 97       	sbiw	r28, 0x2a	; 42
    5152:	aa 96       	adiw	r28, 0x2a	; 42
    5154:	2e ad       	ldd	r18, Y+62	; 0x3e
    5156:	3f ad       	ldd	r19, Y+63	; 0x3f
    5158:	aa 97       	sbiw	r28, 0x2a	; 42
    515a:	21 30       	cpi	r18, 0x01	; 1
    515c:	31 05       	cpc	r19, r1
    515e:	49 f0       	breq	.+18     	; 0x5172 <FingerPS_convertImg2CharFile+0x1e4>
    5160:	aa 96       	adiw	r28, 0x2a	; 42
    5162:	8e ad       	ldd	r24, Y+62	; 0x3e
    5164:	9f ad       	ldd	r25, Y+63	; 0x3f
    5166:	aa 97       	sbiw	r28, 0x2a	; 42
    5168:	82 30       	cpi	r24, 0x02	; 2
    516a:	91 05       	cpc	r25, r1
    516c:	09 f4       	brne	.+2      	; 0x5170 <FingerPS_convertImg2CharFile+0x1e2>
    516e:	2d c1       	rjmp	.+602    	; 0x53ca <FingerPS_convertImg2CharFile+0x43c>
    5170:	57 c2       	rjmp	.+1198   	; 0x5620 <FingerPS_convertImg2CharFile+0x692>
	{
	case 0x01: // case if buffer id == 1
		for(u8 i = 0; i < sizeof(Img2Tz_1); i++)
    5172:	1c ae       	std	Y+60, r1	; 0x3c
    5174:	10 c0       	rjmp	.+32     	; 0x5196 <FingerPS_convertImg2CharFile+0x208>
		{
			ret_status = UART_SendByte(Img2Tz_1[i]);
    5176:	8c ad       	ldd	r24, Y+60	; 0x3c
    5178:	28 2f       	mov	r18, r24
    517a:	30 e0       	ldi	r19, 0x00	; 0
    517c:	ce 01       	movw	r24, r28
    517e:	8f 5b       	subi	r24, 0xBF	; 191
    5180:	9f 4f       	sbci	r25, 0xFF	; 255
    5182:	fc 01       	movw	r30, r24
    5184:	e2 0f       	add	r30, r18
    5186:	f3 1f       	adc	r31, r19
    5188:	80 81       	ld	r24, Z
    518a:	0e 94 16 11 	call	0x222c	; 0x222c <UART_SendByte>
    518e:	8f af       	std	Y+63, r24	; 0x3f
	u8 Img2Tz_Right_response[] = {0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x07,0x00,0x03,0x00,0x00,0x0A};

	switch(BufferId)
	{
	case 0x01: // case if buffer id == 1
		for(u8 i = 0; i < sizeof(Img2Tz_1); i++)
    5190:	8c ad       	ldd	r24, Y+60	; 0x3c
    5192:	8f 5f       	subi	r24, 0xFF	; 255
    5194:	8c af       	std	Y+60, r24	; 0x3c
    5196:	8c ad       	ldd	r24, Y+60	; 0x3c
    5198:	8d 30       	cpi	r24, 0x0D	; 13
    519a:	68 f3       	brcs	.-38     	; 0x5176 <FingerPS_convertImg2CharFile+0x1e8>
		{
			ret_status = UART_SendByte(Img2Tz_1[i]);
		}

		// Receive and verify the response
		for (u8 i = 0; i < sizeof(Img2Tz_Right_response); ++i)
    519c:	1b ae       	std	Y+59, r1	; 0x3b
    519e:	1c c0       	rjmp	.+56     	; 0x51d8 <FingerPS_convertImg2CharFile+0x24a>
		{
			ret_status = UART_ReceiveByte(&rec_byte);
    51a0:	ce 01       	movw	r24, r28
    51a2:	80 5c       	subi	r24, 0xC0	; 192
    51a4:	9f 4f       	sbci	r25, 0xFF	; 255
    51a6:	0e 94 30 11 	call	0x2260	; 0x2260 <UART_ReceiveByte>
    51aa:	8f af       	std	Y+63, r24	; 0x3f

			if(rec_byte == Img2Tz_Right_response[i])
    51ac:	8b ad       	ldd	r24, Y+59	; 0x3b
    51ae:	28 2f       	mov	r18, r24
    51b0:	30 e0       	ldi	r19, 0x00	; 0
    51b2:	ce 01       	movw	r24, r28
    51b4:	85 5a       	subi	r24, 0xA5	; 165
    51b6:	9f 4f       	sbci	r25, 0xFF	; 255
    51b8:	fc 01       	movw	r30, r24
    51ba:	e2 0f       	add	r30, r18
    51bc:	f3 1f       	adc	r31, r19
    51be:	90 81       	ld	r25, Z
    51c0:	fe 01       	movw	r30, r28
    51c2:	e0 5c       	subi	r30, 0xC0	; 192
    51c4:	ff 4f       	sbci	r31, 0xFF	; 255
    51c6:	80 81       	ld	r24, Z
    51c8:	98 17       	cp	r25, r24
    51ca:	19 f4       	brne	.+6      	; 0x51d2 <FingerPS_convertImg2CharFile+0x244>
			{
				num_of_success++;
    51cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    51ce:	8f 5f       	subi	r24, 0xFF	; 255
    51d0:	8d af       	std	Y+61, r24	; 0x3d
		{
			ret_status = UART_SendByte(Img2Tz_1[i]);
		}

		// Receive and verify the response
		for (u8 i = 0; i < sizeof(Img2Tz_Right_response); ++i)
    51d2:	8b ad       	ldd	r24, Y+59	; 0x3b
    51d4:	8f 5f       	subi	r24, 0xFF	; 255
    51d6:	8b af       	std	Y+59, r24	; 0x3b
    51d8:	8b ad       	ldd	r24, Y+59	; 0x3b
    51da:	8c 30       	cpi	r24, 0x0C	; 12
    51dc:	08 f3       	brcs	.-62     	; 0x51a0 <FingerPS_convertImg2CharFile+0x212>
			if(rec_byte == Img2Tz_Right_response[i])
			{
				num_of_success++;
			}
		}
		if(num_of_success == sizeof(Img2Tz_Right_response))
    51de:	8d ad       	ldd	r24, Y+61	; 0x3d
    51e0:	8c 30       	cpi	r24, 0x0C	; 12
    51e2:	09 f0       	breq	.+2      	; 0x51e6 <FingerPS_convertImg2CharFile+0x258>
    51e4:	76 c0       	rjmp	.+236    	; 0x52d2 <FingerPS_convertImg2CharFile+0x344>
		{
			operation_status = FingerPS_AuraSuccess();
    51e6:	0e 94 14 24 	call	0x4828	; 0x4828 <FingerPS_AuraSuccess>
    51ea:	8e af       	std	Y+62, r24	; 0x3e
    51ec:	80 e0       	ldi	r24, 0x00	; 0
    51ee:	90 e0       	ldi	r25, 0x00	; 0
    51f0:	a8 e4       	ldi	r26, 0x48	; 72
    51f2:	b3 e4       	ldi	r27, 0x43	; 67
    51f4:	8d ab       	std	Y+53, r24	; 0x35
    51f6:	9e ab       	std	Y+54, r25	; 0x36
    51f8:	af ab       	std	Y+55, r26	; 0x37
    51fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51fc:	6d a9       	ldd	r22, Y+53	; 0x35
    51fe:	7e a9       	ldd	r23, Y+54	; 0x36
    5200:	8f a9       	ldd	r24, Y+55	; 0x37
    5202:	98 ad       	ldd	r25, Y+56	; 0x38
    5204:	20 e0       	ldi	r18, 0x00	; 0
    5206:	30 e0       	ldi	r19, 0x00	; 0
    5208:	4a e7       	ldi	r20, 0x7A	; 122
    520a:	55 e4       	ldi	r21, 0x45	; 69
    520c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5210:	dc 01       	movw	r26, r24
    5212:	cb 01       	movw	r24, r22
    5214:	89 ab       	std	Y+49, r24	; 0x31
    5216:	9a ab       	std	Y+50, r25	; 0x32
    5218:	ab ab       	std	Y+51, r26	; 0x33
    521a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    521c:	69 a9       	ldd	r22, Y+49	; 0x31
    521e:	7a a9       	ldd	r23, Y+50	; 0x32
    5220:	8b a9       	ldd	r24, Y+51	; 0x33
    5222:	9c a9       	ldd	r25, Y+52	; 0x34
    5224:	20 e0       	ldi	r18, 0x00	; 0
    5226:	30 e0       	ldi	r19, 0x00	; 0
    5228:	40 e8       	ldi	r20, 0x80	; 128
    522a:	5f e3       	ldi	r21, 0x3F	; 63
    522c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5230:	88 23       	and	r24, r24
    5232:	2c f4       	brge	.+10     	; 0x523e <FingerPS_convertImg2CharFile+0x2b0>
		__ticks = 1;
    5234:	81 e0       	ldi	r24, 0x01	; 1
    5236:	90 e0       	ldi	r25, 0x00	; 0
    5238:	98 ab       	std	Y+48, r25	; 0x30
    523a:	8f a7       	std	Y+47, r24	; 0x2f
    523c:	3f c0       	rjmp	.+126    	; 0x52bc <FingerPS_convertImg2CharFile+0x32e>
	else if (__tmp > 65535)
    523e:	69 a9       	ldd	r22, Y+49	; 0x31
    5240:	7a a9       	ldd	r23, Y+50	; 0x32
    5242:	8b a9       	ldd	r24, Y+51	; 0x33
    5244:	9c a9       	ldd	r25, Y+52	; 0x34
    5246:	20 e0       	ldi	r18, 0x00	; 0
    5248:	3f ef       	ldi	r19, 0xFF	; 255
    524a:	4f e7       	ldi	r20, 0x7F	; 127
    524c:	57 e4       	ldi	r21, 0x47	; 71
    524e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5252:	18 16       	cp	r1, r24
    5254:	4c f5       	brge	.+82     	; 0x52a8 <FingerPS_convertImg2CharFile+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5256:	6d a9       	ldd	r22, Y+53	; 0x35
    5258:	7e a9       	ldd	r23, Y+54	; 0x36
    525a:	8f a9       	ldd	r24, Y+55	; 0x37
    525c:	98 ad       	ldd	r25, Y+56	; 0x38
    525e:	20 e0       	ldi	r18, 0x00	; 0
    5260:	30 e0       	ldi	r19, 0x00	; 0
    5262:	40 e2       	ldi	r20, 0x20	; 32
    5264:	51 e4       	ldi	r21, 0x41	; 65
    5266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    526a:	dc 01       	movw	r26, r24
    526c:	cb 01       	movw	r24, r22
    526e:	bc 01       	movw	r22, r24
    5270:	cd 01       	movw	r24, r26
    5272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5276:	dc 01       	movw	r26, r24
    5278:	cb 01       	movw	r24, r22
    527a:	98 ab       	std	Y+48, r25	; 0x30
    527c:	8f a7       	std	Y+47, r24	; 0x2f
    527e:	0f c0       	rjmp	.+30     	; 0x529e <FingerPS_convertImg2CharFile+0x310>
    5280:	80 e9       	ldi	r24, 0x90	; 144
    5282:	91 e0       	ldi	r25, 0x01	; 1
    5284:	9e a7       	std	Y+46, r25	; 0x2e
    5286:	8d a7       	std	Y+45, r24	; 0x2d
    5288:	8d a5       	ldd	r24, Y+45	; 0x2d
    528a:	9e a5       	ldd	r25, Y+46	; 0x2e
    528c:	01 97       	sbiw	r24, 0x01	; 1
    528e:	f1 f7       	brne	.-4      	; 0x528c <FingerPS_convertImg2CharFile+0x2fe>
    5290:	9e a7       	std	Y+46, r25	; 0x2e
    5292:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5294:	8f a5       	ldd	r24, Y+47	; 0x2f
    5296:	98 a9       	ldd	r25, Y+48	; 0x30
    5298:	01 97       	sbiw	r24, 0x01	; 1
    529a:	98 ab       	std	Y+48, r25	; 0x30
    529c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    529e:	8f a5       	ldd	r24, Y+47	; 0x2f
    52a0:	98 a9       	ldd	r25, Y+48	; 0x30
    52a2:	00 97       	sbiw	r24, 0x00	; 0
    52a4:	69 f7       	brne	.-38     	; 0x5280 <FingerPS_convertImg2CharFile+0x2f2>
    52a6:	8b c0       	rjmp	.+278    	; 0x53be <FingerPS_convertImg2CharFile+0x430>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52a8:	69 a9       	ldd	r22, Y+49	; 0x31
    52aa:	7a a9       	ldd	r23, Y+50	; 0x32
    52ac:	8b a9       	ldd	r24, Y+51	; 0x33
    52ae:	9c a9       	ldd	r25, Y+52	; 0x34
    52b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52b4:	dc 01       	movw	r26, r24
    52b6:	cb 01       	movw	r24, r22
    52b8:	98 ab       	std	Y+48, r25	; 0x30
    52ba:	8f a7       	std	Y+47, r24	; 0x2f
    52bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    52be:	98 a9       	ldd	r25, Y+48	; 0x30
    52c0:	9c a7       	std	Y+44, r25	; 0x2c
    52c2:	8b a7       	std	Y+43, r24	; 0x2b
    52c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    52c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    52c8:	01 97       	sbiw	r24, 0x01	; 1
    52ca:	f1 f7       	brne	.-4      	; 0x52c8 <FingerPS_convertImg2CharFile+0x33a>
    52cc:	9c a7       	std	Y+44, r25	; 0x2c
    52ce:	8b a7       	std	Y+43, r24	; 0x2b
    52d0:	76 c0       	rjmp	.+236    	; 0x53be <FingerPS_convertImg2CharFile+0x430>
			_delay_ms(200);
		}
		else
		{
			operation_status = FingerPS_AuraError();
    52d2:	0e 94 9b 24 	call	0x4936	; 0x4936 <FingerPS_AuraError>
    52d6:	8e af       	std	Y+62, r24	; 0x3e
    52d8:	80 e0       	ldi	r24, 0x00	; 0
    52da:	90 e0       	ldi	r25, 0x00	; 0
    52dc:	a8 e4       	ldi	r26, 0x48	; 72
    52de:	b3 e4       	ldi	r27, 0x43	; 67
    52e0:	8f a3       	std	Y+39, r24	; 0x27
    52e2:	98 a7       	std	Y+40, r25	; 0x28
    52e4:	a9 a7       	std	Y+41, r26	; 0x29
    52e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52e8:	6f a1       	ldd	r22, Y+39	; 0x27
    52ea:	78 a5       	ldd	r23, Y+40	; 0x28
    52ec:	89 a5       	ldd	r24, Y+41	; 0x29
    52ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    52f0:	20 e0       	ldi	r18, 0x00	; 0
    52f2:	30 e0       	ldi	r19, 0x00	; 0
    52f4:	4a e7       	ldi	r20, 0x7A	; 122
    52f6:	55 e4       	ldi	r21, 0x45	; 69
    52f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52fc:	dc 01       	movw	r26, r24
    52fe:	cb 01       	movw	r24, r22
    5300:	8b a3       	std	Y+35, r24	; 0x23
    5302:	9c a3       	std	Y+36, r25	; 0x24
    5304:	ad a3       	std	Y+37, r26	; 0x25
    5306:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5308:	6b a1       	ldd	r22, Y+35	; 0x23
    530a:	7c a1       	ldd	r23, Y+36	; 0x24
    530c:	8d a1       	ldd	r24, Y+37	; 0x25
    530e:	9e a1       	ldd	r25, Y+38	; 0x26
    5310:	20 e0       	ldi	r18, 0x00	; 0
    5312:	30 e0       	ldi	r19, 0x00	; 0
    5314:	40 e8       	ldi	r20, 0x80	; 128
    5316:	5f e3       	ldi	r21, 0x3F	; 63
    5318:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    531c:	88 23       	and	r24, r24
    531e:	2c f4       	brge	.+10     	; 0x532a <FingerPS_convertImg2CharFile+0x39c>
		__ticks = 1;
    5320:	81 e0       	ldi	r24, 0x01	; 1
    5322:	90 e0       	ldi	r25, 0x00	; 0
    5324:	9a a3       	std	Y+34, r25	; 0x22
    5326:	89 a3       	std	Y+33, r24	; 0x21
    5328:	3f c0       	rjmp	.+126    	; 0x53a8 <FingerPS_convertImg2CharFile+0x41a>
	else if (__tmp > 65535)
    532a:	6b a1       	ldd	r22, Y+35	; 0x23
    532c:	7c a1       	ldd	r23, Y+36	; 0x24
    532e:	8d a1       	ldd	r24, Y+37	; 0x25
    5330:	9e a1       	ldd	r25, Y+38	; 0x26
    5332:	20 e0       	ldi	r18, 0x00	; 0
    5334:	3f ef       	ldi	r19, 0xFF	; 255
    5336:	4f e7       	ldi	r20, 0x7F	; 127
    5338:	57 e4       	ldi	r21, 0x47	; 71
    533a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    533e:	18 16       	cp	r1, r24
    5340:	4c f5       	brge	.+82     	; 0x5394 <FingerPS_convertImg2CharFile+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5342:	6f a1       	ldd	r22, Y+39	; 0x27
    5344:	78 a5       	ldd	r23, Y+40	; 0x28
    5346:	89 a5       	ldd	r24, Y+41	; 0x29
    5348:	9a a5       	ldd	r25, Y+42	; 0x2a
    534a:	20 e0       	ldi	r18, 0x00	; 0
    534c:	30 e0       	ldi	r19, 0x00	; 0
    534e:	40 e2       	ldi	r20, 0x20	; 32
    5350:	51 e4       	ldi	r21, 0x41	; 65
    5352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5356:	dc 01       	movw	r26, r24
    5358:	cb 01       	movw	r24, r22
    535a:	bc 01       	movw	r22, r24
    535c:	cd 01       	movw	r24, r26
    535e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5362:	dc 01       	movw	r26, r24
    5364:	cb 01       	movw	r24, r22
    5366:	9a a3       	std	Y+34, r25	; 0x22
    5368:	89 a3       	std	Y+33, r24	; 0x21
    536a:	0f c0       	rjmp	.+30     	; 0x538a <FingerPS_convertImg2CharFile+0x3fc>
    536c:	80 e9       	ldi	r24, 0x90	; 144
    536e:	91 e0       	ldi	r25, 0x01	; 1
    5370:	98 a3       	std	Y+32, r25	; 0x20
    5372:	8f 8f       	std	Y+31, r24	; 0x1f
    5374:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5376:	98 a1       	ldd	r25, Y+32	; 0x20
    5378:	01 97       	sbiw	r24, 0x01	; 1
    537a:	f1 f7       	brne	.-4      	; 0x5378 <FingerPS_convertImg2CharFile+0x3ea>
    537c:	98 a3       	std	Y+32, r25	; 0x20
    537e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5380:	89 a1       	ldd	r24, Y+33	; 0x21
    5382:	9a a1       	ldd	r25, Y+34	; 0x22
    5384:	01 97       	sbiw	r24, 0x01	; 1
    5386:	9a a3       	std	Y+34, r25	; 0x22
    5388:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    538a:	89 a1       	ldd	r24, Y+33	; 0x21
    538c:	9a a1       	ldd	r25, Y+34	; 0x22
    538e:	00 97       	sbiw	r24, 0x00	; 0
    5390:	69 f7       	brne	.-38     	; 0x536c <FingerPS_convertImg2CharFile+0x3de>
    5392:	14 c0       	rjmp	.+40     	; 0x53bc <FingerPS_convertImg2CharFile+0x42e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5394:	6b a1       	ldd	r22, Y+35	; 0x23
    5396:	7c a1       	ldd	r23, Y+36	; 0x24
    5398:	8d a1       	ldd	r24, Y+37	; 0x25
    539a:	9e a1       	ldd	r25, Y+38	; 0x26
    539c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53a0:	dc 01       	movw	r26, r24
    53a2:	cb 01       	movw	r24, r22
    53a4:	9a a3       	std	Y+34, r25	; 0x22
    53a6:	89 a3       	std	Y+33, r24	; 0x21
    53a8:	89 a1       	ldd	r24, Y+33	; 0x21
    53aa:	9a a1       	ldd	r25, Y+34	; 0x22
    53ac:	9e 8f       	std	Y+30, r25	; 0x1e
    53ae:	8d 8f       	std	Y+29, r24	; 0x1d
    53b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    53b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    53b4:	01 97       	sbiw	r24, 0x01	; 1
    53b6:	f1 f7       	brne	.-4      	; 0x53b4 <FingerPS_convertImg2CharFile+0x426>
    53b8:	9e 8f       	std	Y+30, r25	; 0x1e
    53ba:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(200);
			operation_status = ERROR;
    53bc:	1e ae       	std	Y+62, r1	; 0x3e
		}
		operation_status &= FingerPS_AuraNormal();
    53be:	0e 94 8d 23 	call	0x471a	; 0x471a <FingerPS_AuraNormal>
    53c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    53c4:	89 23       	and	r24, r25
    53c6:	8e af       	std	Y+62, r24	; 0x3e
    53c8:	2b c1       	rjmp	.+598    	; 0x5620 <FingerPS_convertImg2CharFile+0x692>
		break;
	case 0x02: // case if buffer id == 2
		for(u8 i = 0; i < sizeof(Img2Tz_2); i++)
    53ca:	1a ae       	std	Y+58, r1	; 0x3a
    53cc:	10 c0       	rjmp	.+32     	; 0x53ee <FingerPS_convertImg2CharFile+0x460>
		{
			ret_status = UART_SendByte(Img2Tz_2[i]);
    53ce:	8a ad       	ldd	r24, Y+58	; 0x3a
    53d0:	28 2f       	mov	r18, r24
    53d2:	30 e0       	ldi	r19, 0x00	; 0
    53d4:	ce 01       	movw	r24, r28
    53d6:	82 5b       	subi	r24, 0xB2	; 178
    53d8:	9f 4f       	sbci	r25, 0xFF	; 255
    53da:	fc 01       	movw	r30, r24
    53dc:	e2 0f       	add	r30, r18
    53de:	f3 1f       	adc	r31, r19
    53e0:	80 81       	ld	r24, Z
    53e2:	0e 94 16 11 	call	0x222c	; 0x222c <UART_SendByte>
    53e6:	8f af       	std	Y+63, r24	; 0x3f
			operation_status = ERROR;
		}
		operation_status &= FingerPS_AuraNormal();
		break;
	case 0x02: // case if buffer id == 2
		for(u8 i = 0; i < sizeof(Img2Tz_2); i++)
    53e8:	8a ad       	ldd	r24, Y+58	; 0x3a
    53ea:	8f 5f       	subi	r24, 0xFF	; 255
    53ec:	8a af       	std	Y+58, r24	; 0x3a
    53ee:	8a ad       	ldd	r24, Y+58	; 0x3a
    53f0:	8d 30       	cpi	r24, 0x0D	; 13
    53f2:	68 f3       	brcs	.-38     	; 0x53ce <FingerPS_convertImg2CharFile+0x440>
		{
			ret_status = UART_SendByte(Img2Tz_2[i]);
		}

		// Receive and verify the response
		for (u8 i = 0; i < sizeof(Img2Tz_Right_response); ++i)
    53f4:	19 ae       	std	Y+57, r1	; 0x39
    53f6:	1c c0       	rjmp	.+56     	; 0x5430 <FingerPS_convertImg2CharFile+0x4a2>
		{
			ret_status = UART_ReceiveByte(&rec_byte);
    53f8:	ce 01       	movw	r24, r28
    53fa:	80 5c       	subi	r24, 0xC0	; 192
    53fc:	9f 4f       	sbci	r25, 0xFF	; 255
    53fe:	0e 94 30 11 	call	0x2260	; 0x2260 <UART_ReceiveByte>
    5402:	8f af       	std	Y+63, r24	; 0x3f

			if(rec_byte == Img2Tz_Right_response[i])
    5404:	89 ad       	ldd	r24, Y+57	; 0x39
    5406:	28 2f       	mov	r18, r24
    5408:	30 e0       	ldi	r19, 0x00	; 0
    540a:	ce 01       	movw	r24, r28
    540c:	85 5a       	subi	r24, 0xA5	; 165
    540e:	9f 4f       	sbci	r25, 0xFF	; 255
    5410:	fc 01       	movw	r30, r24
    5412:	e2 0f       	add	r30, r18
    5414:	f3 1f       	adc	r31, r19
    5416:	90 81       	ld	r25, Z
    5418:	fe 01       	movw	r30, r28
    541a:	e0 5c       	subi	r30, 0xC0	; 192
    541c:	ff 4f       	sbci	r31, 0xFF	; 255
    541e:	80 81       	ld	r24, Z
    5420:	98 17       	cp	r25, r24
    5422:	19 f4       	brne	.+6      	; 0x542a <FingerPS_convertImg2CharFile+0x49c>
			{
				num_of_success++;
    5424:	8d ad       	ldd	r24, Y+61	; 0x3d
    5426:	8f 5f       	subi	r24, 0xFF	; 255
    5428:	8d af       	std	Y+61, r24	; 0x3d
		{
			ret_status = UART_SendByte(Img2Tz_2[i]);
		}

		// Receive and verify the response
		for (u8 i = 0; i < sizeof(Img2Tz_Right_response); ++i)
    542a:	89 ad       	ldd	r24, Y+57	; 0x39
    542c:	8f 5f       	subi	r24, 0xFF	; 255
    542e:	89 af       	std	Y+57, r24	; 0x39
    5430:	89 ad       	ldd	r24, Y+57	; 0x39
    5432:	8c 30       	cpi	r24, 0x0C	; 12
    5434:	08 f3       	brcs	.-62     	; 0x53f8 <FingerPS_convertImg2CharFile+0x46a>
			if(rec_byte == Img2Tz_Right_response[i])
			{
				num_of_success++;
			}
		}
		if(num_of_success == sizeof(Img2Tz_Right_response))
    5436:	8d ad       	ldd	r24, Y+61	; 0x3d
    5438:	8c 30       	cpi	r24, 0x0C	; 12
    543a:	09 f0       	breq	.+2      	; 0x543e <FingerPS_convertImg2CharFile+0x4b0>
    543c:	76 c0       	rjmp	.+236    	; 0x552a <FingerPS_convertImg2CharFile+0x59c>
		{
			operation_status = FingerPS_AuraSuccess();
    543e:	0e 94 14 24 	call	0x4828	; 0x4828 <FingerPS_AuraSuccess>
    5442:	8e af       	std	Y+62, r24	; 0x3e
    5444:	80 e0       	ldi	r24, 0x00	; 0
    5446:	90 e0       	ldi	r25, 0x00	; 0
    5448:	a8 e4       	ldi	r26, 0x48	; 72
    544a:	b3 e4       	ldi	r27, 0x43	; 67
    544c:	89 8f       	std	Y+25, r24	; 0x19
    544e:	9a 8f       	std	Y+26, r25	; 0x1a
    5450:	ab 8f       	std	Y+27, r26	; 0x1b
    5452:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5454:	69 8d       	ldd	r22, Y+25	; 0x19
    5456:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5458:	8b 8d       	ldd	r24, Y+27	; 0x1b
    545a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    545c:	20 e0       	ldi	r18, 0x00	; 0
    545e:	30 e0       	ldi	r19, 0x00	; 0
    5460:	4a e7       	ldi	r20, 0x7A	; 122
    5462:	55 e4       	ldi	r21, 0x45	; 69
    5464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5468:	dc 01       	movw	r26, r24
    546a:	cb 01       	movw	r24, r22
    546c:	8d 8b       	std	Y+21, r24	; 0x15
    546e:	9e 8b       	std	Y+22, r25	; 0x16
    5470:	af 8b       	std	Y+23, r26	; 0x17
    5472:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5474:	6d 89       	ldd	r22, Y+21	; 0x15
    5476:	7e 89       	ldd	r23, Y+22	; 0x16
    5478:	8f 89       	ldd	r24, Y+23	; 0x17
    547a:	98 8d       	ldd	r25, Y+24	; 0x18
    547c:	20 e0       	ldi	r18, 0x00	; 0
    547e:	30 e0       	ldi	r19, 0x00	; 0
    5480:	40 e8       	ldi	r20, 0x80	; 128
    5482:	5f e3       	ldi	r21, 0x3F	; 63
    5484:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5488:	88 23       	and	r24, r24
    548a:	2c f4       	brge	.+10     	; 0x5496 <FingerPS_convertImg2CharFile+0x508>
		__ticks = 1;
    548c:	81 e0       	ldi	r24, 0x01	; 1
    548e:	90 e0       	ldi	r25, 0x00	; 0
    5490:	9c 8b       	std	Y+20, r25	; 0x14
    5492:	8b 8b       	std	Y+19, r24	; 0x13
    5494:	3f c0       	rjmp	.+126    	; 0x5514 <FingerPS_convertImg2CharFile+0x586>
	else if (__tmp > 65535)
    5496:	6d 89       	ldd	r22, Y+21	; 0x15
    5498:	7e 89       	ldd	r23, Y+22	; 0x16
    549a:	8f 89       	ldd	r24, Y+23	; 0x17
    549c:	98 8d       	ldd	r25, Y+24	; 0x18
    549e:	20 e0       	ldi	r18, 0x00	; 0
    54a0:	3f ef       	ldi	r19, 0xFF	; 255
    54a2:	4f e7       	ldi	r20, 0x7F	; 127
    54a4:	57 e4       	ldi	r21, 0x47	; 71
    54a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    54aa:	18 16       	cp	r1, r24
    54ac:	4c f5       	brge	.+82     	; 0x5500 <FingerPS_convertImg2CharFile+0x572>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54ae:	69 8d       	ldd	r22, Y+25	; 0x19
    54b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    54b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    54b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    54b6:	20 e0       	ldi	r18, 0x00	; 0
    54b8:	30 e0       	ldi	r19, 0x00	; 0
    54ba:	40 e2       	ldi	r20, 0x20	; 32
    54bc:	51 e4       	ldi	r21, 0x41	; 65
    54be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54c2:	dc 01       	movw	r26, r24
    54c4:	cb 01       	movw	r24, r22
    54c6:	bc 01       	movw	r22, r24
    54c8:	cd 01       	movw	r24, r26
    54ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54ce:	dc 01       	movw	r26, r24
    54d0:	cb 01       	movw	r24, r22
    54d2:	9c 8b       	std	Y+20, r25	; 0x14
    54d4:	8b 8b       	std	Y+19, r24	; 0x13
    54d6:	0f c0       	rjmp	.+30     	; 0x54f6 <FingerPS_convertImg2CharFile+0x568>
    54d8:	80 e9       	ldi	r24, 0x90	; 144
    54da:	91 e0       	ldi	r25, 0x01	; 1
    54dc:	9a 8b       	std	Y+18, r25	; 0x12
    54de:	89 8b       	std	Y+17, r24	; 0x11
    54e0:	89 89       	ldd	r24, Y+17	; 0x11
    54e2:	9a 89       	ldd	r25, Y+18	; 0x12
    54e4:	01 97       	sbiw	r24, 0x01	; 1
    54e6:	f1 f7       	brne	.-4      	; 0x54e4 <FingerPS_convertImg2CharFile+0x556>
    54e8:	9a 8b       	std	Y+18, r25	; 0x12
    54ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54ec:	8b 89       	ldd	r24, Y+19	; 0x13
    54ee:	9c 89       	ldd	r25, Y+20	; 0x14
    54f0:	01 97       	sbiw	r24, 0x01	; 1
    54f2:	9c 8b       	std	Y+20, r25	; 0x14
    54f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54f6:	8b 89       	ldd	r24, Y+19	; 0x13
    54f8:	9c 89       	ldd	r25, Y+20	; 0x14
    54fa:	00 97       	sbiw	r24, 0x00	; 0
    54fc:	69 f7       	brne	.-38     	; 0x54d8 <FingerPS_convertImg2CharFile+0x54a>
    54fe:	8b c0       	rjmp	.+278    	; 0x5616 <FingerPS_convertImg2CharFile+0x688>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5500:	6d 89       	ldd	r22, Y+21	; 0x15
    5502:	7e 89       	ldd	r23, Y+22	; 0x16
    5504:	8f 89       	ldd	r24, Y+23	; 0x17
    5506:	98 8d       	ldd	r25, Y+24	; 0x18
    5508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    550c:	dc 01       	movw	r26, r24
    550e:	cb 01       	movw	r24, r22
    5510:	9c 8b       	std	Y+20, r25	; 0x14
    5512:	8b 8b       	std	Y+19, r24	; 0x13
    5514:	8b 89       	ldd	r24, Y+19	; 0x13
    5516:	9c 89       	ldd	r25, Y+20	; 0x14
    5518:	98 8b       	std	Y+16, r25	; 0x10
    551a:	8f 87       	std	Y+15, r24	; 0x0f
    551c:	8f 85       	ldd	r24, Y+15	; 0x0f
    551e:	98 89       	ldd	r25, Y+16	; 0x10
    5520:	01 97       	sbiw	r24, 0x01	; 1
    5522:	f1 f7       	brne	.-4      	; 0x5520 <FingerPS_convertImg2CharFile+0x592>
    5524:	98 8b       	std	Y+16, r25	; 0x10
    5526:	8f 87       	std	Y+15, r24	; 0x0f
    5528:	76 c0       	rjmp	.+236    	; 0x5616 <FingerPS_convertImg2CharFile+0x688>
			_delay_ms(200);
		}
		else
		{
			operation_status = FingerPS_AuraError();
    552a:	0e 94 9b 24 	call	0x4936	; 0x4936 <FingerPS_AuraError>
    552e:	8e af       	std	Y+62, r24	; 0x3e
    5530:	80 e0       	ldi	r24, 0x00	; 0
    5532:	90 e0       	ldi	r25, 0x00	; 0
    5534:	a8 e4       	ldi	r26, 0x48	; 72
    5536:	b3 e4       	ldi	r27, 0x43	; 67
    5538:	8b 87       	std	Y+11, r24	; 0x0b
    553a:	9c 87       	std	Y+12, r25	; 0x0c
    553c:	ad 87       	std	Y+13, r26	; 0x0d
    553e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5540:	6b 85       	ldd	r22, Y+11	; 0x0b
    5542:	7c 85       	ldd	r23, Y+12	; 0x0c
    5544:	8d 85       	ldd	r24, Y+13	; 0x0d
    5546:	9e 85       	ldd	r25, Y+14	; 0x0e
    5548:	20 e0       	ldi	r18, 0x00	; 0
    554a:	30 e0       	ldi	r19, 0x00	; 0
    554c:	4a e7       	ldi	r20, 0x7A	; 122
    554e:	55 e4       	ldi	r21, 0x45	; 69
    5550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5554:	dc 01       	movw	r26, r24
    5556:	cb 01       	movw	r24, r22
    5558:	8f 83       	std	Y+7, r24	; 0x07
    555a:	98 87       	std	Y+8, r25	; 0x08
    555c:	a9 87       	std	Y+9, r26	; 0x09
    555e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5560:	6f 81       	ldd	r22, Y+7	; 0x07
    5562:	78 85       	ldd	r23, Y+8	; 0x08
    5564:	89 85       	ldd	r24, Y+9	; 0x09
    5566:	9a 85       	ldd	r25, Y+10	; 0x0a
    5568:	20 e0       	ldi	r18, 0x00	; 0
    556a:	30 e0       	ldi	r19, 0x00	; 0
    556c:	40 e8       	ldi	r20, 0x80	; 128
    556e:	5f e3       	ldi	r21, 0x3F	; 63
    5570:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5574:	88 23       	and	r24, r24
    5576:	2c f4       	brge	.+10     	; 0x5582 <FingerPS_convertImg2CharFile+0x5f4>
		__ticks = 1;
    5578:	81 e0       	ldi	r24, 0x01	; 1
    557a:	90 e0       	ldi	r25, 0x00	; 0
    557c:	9e 83       	std	Y+6, r25	; 0x06
    557e:	8d 83       	std	Y+5, r24	; 0x05
    5580:	3f c0       	rjmp	.+126    	; 0x5600 <FingerPS_convertImg2CharFile+0x672>
	else if (__tmp > 65535)
    5582:	6f 81       	ldd	r22, Y+7	; 0x07
    5584:	78 85       	ldd	r23, Y+8	; 0x08
    5586:	89 85       	ldd	r24, Y+9	; 0x09
    5588:	9a 85       	ldd	r25, Y+10	; 0x0a
    558a:	20 e0       	ldi	r18, 0x00	; 0
    558c:	3f ef       	ldi	r19, 0xFF	; 255
    558e:	4f e7       	ldi	r20, 0x7F	; 127
    5590:	57 e4       	ldi	r21, 0x47	; 71
    5592:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5596:	18 16       	cp	r1, r24
    5598:	4c f5       	brge	.+82     	; 0x55ec <FingerPS_convertImg2CharFile+0x65e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    559a:	6b 85       	ldd	r22, Y+11	; 0x0b
    559c:	7c 85       	ldd	r23, Y+12	; 0x0c
    559e:	8d 85       	ldd	r24, Y+13	; 0x0d
    55a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    55a2:	20 e0       	ldi	r18, 0x00	; 0
    55a4:	30 e0       	ldi	r19, 0x00	; 0
    55a6:	40 e2       	ldi	r20, 0x20	; 32
    55a8:	51 e4       	ldi	r21, 0x41	; 65
    55aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55ae:	dc 01       	movw	r26, r24
    55b0:	cb 01       	movw	r24, r22
    55b2:	bc 01       	movw	r22, r24
    55b4:	cd 01       	movw	r24, r26
    55b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55ba:	dc 01       	movw	r26, r24
    55bc:	cb 01       	movw	r24, r22
    55be:	9e 83       	std	Y+6, r25	; 0x06
    55c0:	8d 83       	std	Y+5, r24	; 0x05
    55c2:	0f c0       	rjmp	.+30     	; 0x55e2 <FingerPS_convertImg2CharFile+0x654>
    55c4:	80 e9       	ldi	r24, 0x90	; 144
    55c6:	91 e0       	ldi	r25, 0x01	; 1
    55c8:	9c 83       	std	Y+4, r25	; 0x04
    55ca:	8b 83       	std	Y+3, r24	; 0x03
    55cc:	8b 81       	ldd	r24, Y+3	; 0x03
    55ce:	9c 81       	ldd	r25, Y+4	; 0x04
    55d0:	01 97       	sbiw	r24, 0x01	; 1
    55d2:	f1 f7       	brne	.-4      	; 0x55d0 <FingerPS_convertImg2CharFile+0x642>
    55d4:	9c 83       	std	Y+4, r25	; 0x04
    55d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55d8:	8d 81       	ldd	r24, Y+5	; 0x05
    55da:	9e 81       	ldd	r25, Y+6	; 0x06
    55dc:	01 97       	sbiw	r24, 0x01	; 1
    55de:	9e 83       	std	Y+6, r25	; 0x06
    55e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55e2:	8d 81       	ldd	r24, Y+5	; 0x05
    55e4:	9e 81       	ldd	r25, Y+6	; 0x06
    55e6:	00 97       	sbiw	r24, 0x00	; 0
    55e8:	69 f7       	brne	.-38     	; 0x55c4 <FingerPS_convertImg2CharFile+0x636>
    55ea:	14 c0       	rjmp	.+40     	; 0x5614 <FingerPS_convertImg2CharFile+0x686>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55ec:	6f 81       	ldd	r22, Y+7	; 0x07
    55ee:	78 85       	ldd	r23, Y+8	; 0x08
    55f0:	89 85       	ldd	r24, Y+9	; 0x09
    55f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    55f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55f8:	dc 01       	movw	r26, r24
    55fa:	cb 01       	movw	r24, r22
    55fc:	9e 83       	std	Y+6, r25	; 0x06
    55fe:	8d 83       	std	Y+5, r24	; 0x05
    5600:	8d 81       	ldd	r24, Y+5	; 0x05
    5602:	9e 81       	ldd	r25, Y+6	; 0x06
    5604:	9a 83       	std	Y+2, r25	; 0x02
    5606:	89 83       	std	Y+1, r24	; 0x01
    5608:	89 81       	ldd	r24, Y+1	; 0x01
    560a:	9a 81       	ldd	r25, Y+2	; 0x02
    560c:	01 97       	sbiw	r24, 0x01	; 1
    560e:	f1 f7       	brne	.-4      	; 0x560c <FingerPS_convertImg2CharFile+0x67e>
    5610:	9a 83       	std	Y+2, r25	; 0x02
    5612:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(200);
			operation_status = ERROR;
    5614:	1e ae       	std	Y+62, r1	; 0x3e
		}
		operation_status &= FingerPS_AuraNormal();
    5616:	0e 94 8d 23 	call	0x471a	; 0x471a <FingerPS_AuraNormal>
    561a:	9e ad       	ldd	r25, Y+62	; 0x3e
    561c:	89 23       	and	r24, r25
    561e:	8e af       	std	Y+62, r24	; 0x3e
		break;
	}
	return operation_status;
    5620:	8e ad       	ldd	r24, Y+62	; 0x3e
}
    5622:	c2 59       	subi	r28, 0x92	; 146
    5624:	df 4f       	sbci	r29, 0xFF	; 255
    5626:	0f b6       	in	r0, 0x3f	; 63
    5628:	f8 94       	cli
    562a:	de bf       	out	0x3e, r29	; 62
    562c:	0f be       	out	0x3f, r0	; 63
    562e:	cd bf       	out	0x3d, r28	; 61
    5630:	cf 91       	pop	r28
    5632:	df 91       	pop	r29
    5634:	08 95       	ret

00005636 <FingerPS_genTemplate>:



u8 FingerPS_genTemplate(void)
{
    5636:	df 93       	push	r29
    5638:	cf 93       	push	r28
    563a:	cd b7       	in	r28, 0x3d	; 61
    563c:	de b7       	in	r29, 0x3e	; 62
    563e:	c4 54       	subi	r28, 0x44	; 68
    5640:	d0 40       	sbci	r29, 0x00	; 0
    5642:	0f b6       	in	r0, 0x3f	; 63
    5644:	f8 94       	cli
    5646:	de bf       	out	0x3e, r29	; 62
    5648:	0f be       	out	0x3f, r0	; 63
    564a:	cd bf       	out	0x3d, r28	; 61
	Error_Status_t ret_status = NO_ERROR;
    564c:	19 a2       	std	Y+33, r1	; 0x21
	u8 operation_status = SUCCESS;
    564e:	81 e0       	ldi	r24, 0x01	; 1
    5650:	88 a3       	std	Y+32, r24	; 0x20
	u8 rec_byte = 0;
    5652:	1a a2       	std	Y+34, r1	; 0x22
	u8 num_of_success = 0;
    5654:	1f 8e       	std	Y+31, r1	; 0x1f

	u8 RegModel[]={0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x03,0x05,0x00,0x09};
    5656:	ce 01       	movw	r24, r28
    5658:	83 96       	adiw	r24, 0x23	; 35
    565a:	9c af       	std	Y+60, r25	; 0x3c
    565c:	8b af       	std	Y+59, r24	; 0x3b
    565e:	e7 eb       	ldi	r30, 0xB7	; 183
    5660:	f2 e0       	ldi	r31, 0x02	; 2
    5662:	fe af       	std	Y+62, r31	; 0x3e
    5664:	ed af       	std	Y+61, r30	; 0x3d
    5666:	fc e0       	ldi	r31, 0x0C	; 12
    5668:	ff af       	std	Y+63, r31	; 0x3f
    566a:	ed ad       	ldd	r30, Y+61	; 0x3d
    566c:	fe ad       	ldd	r31, Y+62	; 0x3e
    566e:	00 80       	ld	r0, Z
    5670:	8d ad       	ldd	r24, Y+61	; 0x3d
    5672:	9e ad       	ldd	r25, Y+62	; 0x3e
    5674:	01 96       	adiw	r24, 0x01	; 1
    5676:	9e af       	std	Y+62, r25	; 0x3e
    5678:	8d af       	std	Y+61, r24	; 0x3d
    567a:	eb ad       	ldd	r30, Y+59	; 0x3b
    567c:	fc ad       	ldd	r31, Y+60	; 0x3c
    567e:	00 82       	st	Z, r0
    5680:	8b ad       	ldd	r24, Y+59	; 0x3b
    5682:	9c ad       	ldd	r25, Y+60	; 0x3c
    5684:	01 96       	adiw	r24, 0x01	; 1
    5686:	9c af       	std	Y+60, r25	; 0x3c
    5688:	8b af       	std	Y+59, r24	; 0x3b
    568a:	9f ad       	ldd	r25, Y+63	; 0x3f
    568c:	91 50       	subi	r25, 0x01	; 1
    568e:	9f af       	std	Y+63, r25	; 0x3f
    5690:	ef ad       	ldd	r30, Y+63	; 0x3f
    5692:	ee 23       	and	r30, r30
    5694:	51 f7       	brne	.-44     	; 0x566a <FingerPS_genTemplate+0x34>
	u8 RegModel_Right_response[] = {0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x07,0x00,0x03,0x00,0x00,0x0A};
    5696:	ce 01       	movw	r24, r28
    5698:	8f 96       	adiw	r24, 0x2f	; 47
    569a:	22 96       	adiw	r28, 0x02	; 2
    569c:	9f af       	std	Y+63, r25	; 0x3f
    569e:	8e af       	std	Y+62, r24	; 0x3e
    56a0:	22 97       	sbiw	r28, 0x02	; 2
    56a2:	eb ea       	ldi	r30, 0xAB	; 171
    56a4:	f2 e0       	ldi	r31, 0x02	; 2
    56a6:	24 96       	adiw	r28, 0x04	; 4
    56a8:	ff af       	std	Y+63, r31	; 0x3f
    56aa:	ee af       	std	Y+62, r30	; 0x3e
    56ac:	24 97       	sbiw	r28, 0x04	; 4
    56ae:	fc e0       	ldi	r31, 0x0C	; 12
    56b0:	25 96       	adiw	r28, 0x05	; 5
    56b2:	ff af       	std	Y+63, r31	; 0x3f
    56b4:	25 97       	sbiw	r28, 0x05	; 5
    56b6:	24 96       	adiw	r28, 0x04	; 4
    56b8:	ee ad       	ldd	r30, Y+62	; 0x3e
    56ba:	ff ad       	ldd	r31, Y+63	; 0x3f
    56bc:	24 97       	sbiw	r28, 0x04	; 4
    56be:	00 80       	ld	r0, Z
    56c0:	24 96       	adiw	r28, 0x04	; 4
    56c2:	8e ad       	ldd	r24, Y+62	; 0x3e
    56c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    56c6:	24 97       	sbiw	r28, 0x04	; 4
    56c8:	01 96       	adiw	r24, 0x01	; 1
    56ca:	24 96       	adiw	r28, 0x04	; 4
    56cc:	9f af       	std	Y+63, r25	; 0x3f
    56ce:	8e af       	std	Y+62, r24	; 0x3e
    56d0:	24 97       	sbiw	r28, 0x04	; 4
    56d2:	22 96       	adiw	r28, 0x02	; 2
    56d4:	ee ad       	ldd	r30, Y+62	; 0x3e
    56d6:	ff ad       	ldd	r31, Y+63	; 0x3f
    56d8:	22 97       	sbiw	r28, 0x02	; 2
    56da:	00 82       	st	Z, r0
    56dc:	22 96       	adiw	r28, 0x02	; 2
    56de:	8e ad       	ldd	r24, Y+62	; 0x3e
    56e0:	9f ad       	ldd	r25, Y+63	; 0x3f
    56e2:	22 97       	sbiw	r28, 0x02	; 2
    56e4:	01 96       	adiw	r24, 0x01	; 1
    56e6:	22 96       	adiw	r28, 0x02	; 2
    56e8:	9f af       	std	Y+63, r25	; 0x3f
    56ea:	8e af       	std	Y+62, r24	; 0x3e
    56ec:	22 97       	sbiw	r28, 0x02	; 2
    56ee:	25 96       	adiw	r28, 0x05	; 5
    56f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    56f2:	25 97       	sbiw	r28, 0x05	; 5
    56f4:	91 50       	subi	r25, 0x01	; 1
    56f6:	25 96       	adiw	r28, 0x05	; 5
    56f8:	9f af       	std	Y+63, r25	; 0x3f
    56fa:	25 97       	sbiw	r28, 0x05	; 5
    56fc:	25 96       	adiw	r28, 0x05	; 5
    56fe:	ef ad       	ldd	r30, Y+63	; 0x3f
    5700:	25 97       	sbiw	r28, 0x05	; 5
    5702:	ee 23       	and	r30, r30
    5704:	c1 f6       	brne	.-80     	; 0x56b6 <FingerPS_genTemplate+0x80>

	// send frame
	for(u8 i = 0; i < sizeof(RegModel); i++)
    5706:	1e 8e       	std	Y+30, r1	; 0x1e
    5708:	0f c0       	rjmp	.+30     	; 0x5728 <FingerPS_genTemplate+0xf2>
	{
		ret_status = UART_SendByte(RegModel[i]);
    570a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    570c:	28 2f       	mov	r18, r24
    570e:	30 e0       	ldi	r19, 0x00	; 0
    5710:	ce 01       	movw	r24, r28
    5712:	83 96       	adiw	r24, 0x23	; 35
    5714:	fc 01       	movw	r30, r24
    5716:	e2 0f       	add	r30, r18
    5718:	f3 1f       	adc	r31, r19
    571a:	80 81       	ld	r24, Z
    571c:	0e 94 16 11 	call	0x222c	; 0x222c <UART_SendByte>
    5720:	89 a3       	std	Y+33, r24	; 0x21

	u8 RegModel[]={0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x03,0x05,0x00,0x09};
	u8 RegModel_Right_response[] = {0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x07,0x00,0x03,0x00,0x00,0x0A};

	// send frame
	for(u8 i = 0; i < sizeof(RegModel); i++)
    5722:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5724:	8f 5f       	subi	r24, 0xFF	; 255
    5726:	8e 8f       	std	Y+30, r24	; 0x1e
    5728:	8e 8d       	ldd	r24, Y+30	; 0x1e
    572a:	8c 30       	cpi	r24, 0x0C	; 12
    572c:	70 f3       	brcs	.-36     	; 0x570a <FingerPS_genTemplate+0xd4>
	{
		ret_status = UART_SendByte(RegModel[i]);
	}

	// Receive and verify the response
	for (u8 i = 0; i < sizeof(RegModel_Right_response); ++i)
    572e:	1d 8e       	std	Y+29, r1	; 0x1d
    5730:	17 c0       	rjmp	.+46     	; 0x5760 <FingerPS_genTemplate+0x12a>
	{
		ret_status = UART_ReceiveByte(&rec_byte);
    5732:	ce 01       	movw	r24, r28
    5734:	82 96       	adiw	r24, 0x22	; 34
    5736:	0e 94 30 11 	call	0x2260	; 0x2260 <UART_ReceiveByte>
    573a:	89 a3       	std	Y+33, r24	; 0x21

		if(rec_byte == RegModel_Right_response[i])
    573c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    573e:	28 2f       	mov	r18, r24
    5740:	30 e0       	ldi	r19, 0x00	; 0
    5742:	ce 01       	movw	r24, r28
    5744:	8f 96       	adiw	r24, 0x2f	; 47
    5746:	fc 01       	movw	r30, r24
    5748:	e2 0f       	add	r30, r18
    574a:	f3 1f       	adc	r31, r19
    574c:	90 81       	ld	r25, Z
    574e:	8a a1       	ldd	r24, Y+34	; 0x22
    5750:	98 17       	cp	r25, r24
    5752:	19 f4       	brne	.+6      	; 0x575a <FingerPS_genTemplate+0x124>
		{
			num_of_success++;
    5754:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5756:	8f 5f       	subi	r24, 0xFF	; 255
    5758:	8f 8f       	std	Y+31, r24	; 0x1f
	{
		ret_status = UART_SendByte(RegModel[i]);
	}

	// Receive and verify the response
	for (u8 i = 0; i < sizeof(RegModel_Right_response); ++i)
    575a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    575c:	8f 5f       	subi	r24, 0xFF	; 255
    575e:	8d 8f       	std	Y+29, r24	; 0x1d
    5760:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5762:	8c 30       	cpi	r24, 0x0C	; 12
    5764:	30 f3       	brcs	.-52     	; 0x5732 <FingerPS_genTemplate+0xfc>
		{
			num_of_success++;
		}
	}

	if(num_of_success == sizeof(RegModel_Right_response))
    5766:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5768:	8c 30       	cpi	r24, 0x0C	; 12
    576a:	09 f0       	breq	.+2      	; 0x576e <FingerPS_genTemplate+0x138>
    576c:	76 c0       	rjmp	.+236    	; 0x585a <FingerPS_genTemplate+0x224>
	{
		operation_status = FingerPS_AuraSuccess();
    576e:	0e 94 14 24 	call	0x4828	; 0x4828 <FingerPS_AuraSuccess>
    5772:	88 a3       	std	Y+32, r24	; 0x20
    5774:	80 e0       	ldi	r24, 0x00	; 0
    5776:	90 e0       	ldi	r25, 0x00	; 0
    5778:	a8 e4       	ldi	r26, 0x48	; 72
    577a:	b3 e4       	ldi	r27, 0x43	; 67
    577c:	89 8f       	std	Y+25, r24	; 0x19
    577e:	9a 8f       	std	Y+26, r25	; 0x1a
    5780:	ab 8f       	std	Y+27, r26	; 0x1b
    5782:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5784:	69 8d       	ldd	r22, Y+25	; 0x19
    5786:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5788:	8b 8d       	ldd	r24, Y+27	; 0x1b
    578a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    578c:	20 e0       	ldi	r18, 0x00	; 0
    578e:	30 e0       	ldi	r19, 0x00	; 0
    5790:	4a e7       	ldi	r20, 0x7A	; 122
    5792:	55 e4       	ldi	r21, 0x45	; 69
    5794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5798:	dc 01       	movw	r26, r24
    579a:	cb 01       	movw	r24, r22
    579c:	8d 8b       	std	Y+21, r24	; 0x15
    579e:	9e 8b       	std	Y+22, r25	; 0x16
    57a0:	af 8b       	std	Y+23, r26	; 0x17
    57a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    57a4:	6d 89       	ldd	r22, Y+21	; 0x15
    57a6:	7e 89       	ldd	r23, Y+22	; 0x16
    57a8:	8f 89       	ldd	r24, Y+23	; 0x17
    57aa:	98 8d       	ldd	r25, Y+24	; 0x18
    57ac:	20 e0       	ldi	r18, 0x00	; 0
    57ae:	30 e0       	ldi	r19, 0x00	; 0
    57b0:	40 e8       	ldi	r20, 0x80	; 128
    57b2:	5f e3       	ldi	r21, 0x3F	; 63
    57b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    57b8:	88 23       	and	r24, r24
    57ba:	2c f4       	brge	.+10     	; 0x57c6 <FingerPS_genTemplate+0x190>
		__ticks = 1;
    57bc:	81 e0       	ldi	r24, 0x01	; 1
    57be:	90 e0       	ldi	r25, 0x00	; 0
    57c0:	9c 8b       	std	Y+20, r25	; 0x14
    57c2:	8b 8b       	std	Y+19, r24	; 0x13
    57c4:	3f c0       	rjmp	.+126    	; 0x5844 <FingerPS_genTemplate+0x20e>
	else if (__tmp > 65535)
    57c6:	6d 89       	ldd	r22, Y+21	; 0x15
    57c8:	7e 89       	ldd	r23, Y+22	; 0x16
    57ca:	8f 89       	ldd	r24, Y+23	; 0x17
    57cc:	98 8d       	ldd	r25, Y+24	; 0x18
    57ce:	20 e0       	ldi	r18, 0x00	; 0
    57d0:	3f ef       	ldi	r19, 0xFF	; 255
    57d2:	4f e7       	ldi	r20, 0x7F	; 127
    57d4:	57 e4       	ldi	r21, 0x47	; 71
    57d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    57da:	18 16       	cp	r1, r24
    57dc:	4c f5       	brge	.+82     	; 0x5830 <FingerPS_genTemplate+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57de:	69 8d       	ldd	r22, Y+25	; 0x19
    57e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    57e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    57e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    57e6:	20 e0       	ldi	r18, 0x00	; 0
    57e8:	30 e0       	ldi	r19, 0x00	; 0
    57ea:	40 e2       	ldi	r20, 0x20	; 32
    57ec:	51 e4       	ldi	r21, 0x41	; 65
    57ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57f2:	dc 01       	movw	r26, r24
    57f4:	cb 01       	movw	r24, r22
    57f6:	bc 01       	movw	r22, r24
    57f8:	cd 01       	movw	r24, r26
    57fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57fe:	dc 01       	movw	r26, r24
    5800:	cb 01       	movw	r24, r22
    5802:	9c 8b       	std	Y+20, r25	; 0x14
    5804:	8b 8b       	std	Y+19, r24	; 0x13
    5806:	0f c0       	rjmp	.+30     	; 0x5826 <FingerPS_genTemplate+0x1f0>
    5808:	80 e9       	ldi	r24, 0x90	; 144
    580a:	91 e0       	ldi	r25, 0x01	; 1
    580c:	9a 8b       	std	Y+18, r25	; 0x12
    580e:	89 8b       	std	Y+17, r24	; 0x11
    5810:	89 89       	ldd	r24, Y+17	; 0x11
    5812:	9a 89       	ldd	r25, Y+18	; 0x12
    5814:	01 97       	sbiw	r24, 0x01	; 1
    5816:	f1 f7       	brne	.-4      	; 0x5814 <FingerPS_genTemplate+0x1de>
    5818:	9a 8b       	std	Y+18, r25	; 0x12
    581a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    581c:	8b 89       	ldd	r24, Y+19	; 0x13
    581e:	9c 89       	ldd	r25, Y+20	; 0x14
    5820:	01 97       	sbiw	r24, 0x01	; 1
    5822:	9c 8b       	std	Y+20, r25	; 0x14
    5824:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5826:	8b 89       	ldd	r24, Y+19	; 0x13
    5828:	9c 89       	ldd	r25, Y+20	; 0x14
    582a:	00 97       	sbiw	r24, 0x00	; 0
    582c:	69 f7       	brne	.-38     	; 0x5808 <FingerPS_genTemplate+0x1d2>
    582e:	8b c0       	rjmp	.+278    	; 0x5946 <FingerPS_genTemplate+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5830:	6d 89       	ldd	r22, Y+21	; 0x15
    5832:	7e 89       	ldd	r23, Y+22	; 0x16
    5834:	8f 89       	ldd	r24, Y+23	; 0x17
    5836:	98 8d       	ldd	r25, Y+24	; 0x18
    5838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    583c:	dc 01       	movw	r26, r24
    583e:	cb 01       	movw	r24, r22
    5840:	9c 8b       	std	Y+20, r25	; 0x14
    5842:	8b 8b       	std	Y+19, r24	; 0x13
    5844:	8b 89       	ldd	r24, Y+19	; 0x13
    5846:	9c 89       	ldd	r25, Y+20	; 0x14
    5848:	98 8b       	std	Y+16, r25	; 0x10
    584a:	8f 87       	std	Y+15, r24	; 0x0f
    584c:	8f 85       	ldd	r24, Y+15	; 0x0f
    584e:	98 89       	ldd	r25, Y+16	; 0x10
    5850:	01 97       	sbiw	r24, 0x01	; 1
    5852:	f1 f7       	brne	.-4      	; 0x5850 <FingerPS_genTemplate+0x21a>
    5854:	98 8b       	std	Y+16, r25	; 0x10
    5856:	8f 87       	std	Y+15, r24	; 0x0f
    5858:	76 c0       	rjmp	.+236    	; 0x5946 <FingerPS_genTemplate+0x310>
		_delay_ms(200);
	}
	else
	{
		operation_status = FingerPS_AuraError();
    585a:	0e 94 9b 24 	call	0x4936	; 0x4936 <FingerPS_AuraError>
    585e:	88 a3       	std	Y+32, r24	; 0x20
    5860:	80 e0       	ldi	r24, 0x00	; 0
    5862:	90 e0       	ldi	r25, 0x00	; 0
    5864:	a8 e4       	ldi	r26, 0x48	; 72
    5866:	b3 e4       	ldi	r27, 0x43	; 67
    5868:	8b 87       	std	Y+11, r24	; 0x0b
    586a:	9c 87       	std	Y+12, r25	; 0x0c
    586c:	ad 87       	std	Y+13, r26	; 0x0d
    586e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5870:	6b 85       	ldd	r22, Y+11	; 0x0b
    5872:	7c 85       	ldd	r23, Y+12	; 0x0c
    5874:	8d 85       	ldd	r24, Y+13	; 0x0d
    5876:	9e 85       	ldd	r25, Y+14	; 0x0e
    5878:	20 e0       	ldi	r18, 0x00	; 0
    587a:	30 e0       	ldi	r19, 0x00	; 0
    587c:	4a e7       	ldi	r20, 0x7A	; 122
    587e:	55 e4       	ldi	r21, 0x45	; 69
    5880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5884:	dc 01       	movw	r26, r24
    5886:	cb 01       	movw	r24, r22
    5888:	8f 83       	std	Y+7, r24	; 0x07
    588a:	98 87       	std	Y+8, r25	; 0x08
    588c:	a9 87       	std	Y+9, r26	; 0x09
    588e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5890:	6f 81       	ldd	r22, Y+7	; 0x07
    5892:	78 85       	ldd	r23, Y+8	; 0x08
    5894:	89 85       	ldd	r24, Y+9	; 0x09
    5896:	9a 85       	ldd	r25, Y+10	; 0x0a
    5898:	20 e0       	ldi	r18, 0x00	; 0
    589a:	30 e0       	ldi	r19, 0x00	; 0
    589c:	40 e8       	ldi	r20, 0x80	; 128
    589e:	5f e3       	ldi	r21, 0x3F	; 63
    58a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    58a4:	88 23       	and	r24, r24
    58a6:	2c f4       	brge	.+10     	; 0x58b2 <FingerPS_genTemplate+0x27c>
		__ticks = 1;
    58a8:	81 e0       	ldi	r24, 0x01	; 1
    58aa:	90 e0       	ldi	r25, 0x00	; 0
    58ac:	9e 83       	std	Y+6, r25	; 0x06
    58ae:	8d 83       	std	Y+5, r24	; 0x05
    58b0:	3f c0       	rjmp	.+126    	; 0x5930 <FingerPS_genTemplate+0x2fa>
	else if (__tmp > 65535)
    58b2:	6f 81       	ldd	r22, Y+7	; 0x07
    58b4:	78 85       	ldd	r23, Y+8	; 0x08
    58b6:	89 85       	ldd	r24, Y+9	; 0x09
    58b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    58ba:	20 e0       	ldi	r18, 0x00	; 0
    58bc:	3f ef       	ldi	r19, 0xFF	; 255
    58be:	4f e7       	ldi	r20, 0x7F	; 127
    58c0:	57 e4       	ldi	r21, 0x47	; 71
    58c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    58c6:	18 16       	cp	r1, r24
    58c8:	4c f5       	brge	.+82     	; 0x591c <FingerPS_genTemplate+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    58cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    58ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    58d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    58d2:	20 e0       	ldi	r18, 0x00	; 0
    58d4:	30 e0       	ldi	r19, 0x00	; 0
    58d6:	40 e2       	ldi	r20, 0x20	; 32
    58d8:	51 e4       	ldi	r21, 0x41	; 65
    58da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58de:	dc 01       	movw	r26, r24
    58e0:	cb 01       	movw	r24, r22
    58e2:	bc 01       	movw	r22, r24
    58e4:	cd 01       	movw	r24, r26
    58e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58ea:	dc 01       	movw	r26, r24
    58ec:	cb 01       	movw	r24, r22
    58ee:	9e 83       	std	Y+6, r25	; 0x06
    58f0:	8d 83       	std	Y+5, r24	; 0x05
    58f2:	0f c0       	rjmp	.+30     	; 0x5912 <FingerPS_genTemplate+0x2dc>
    58f4:	80 e9       	ldi	r24, 0x90	; 144
    58f6:	91 e0       	ldi	r25, 0x01	; 1
    58f8:	9c 83       	std	Y+4, r25	; 0x04
    58fa:	8b 83       	std	Y+3, r24	; 0x03
    58fc:	8b 81       	ldd	r24, Y+3	; 0x03
    58fe:	9c 81       	ldd	r25, Y+4	; 0x04
    5900:	01 97       	sbiw	r24, 0x01	; 1
    5902:	f1 f7       	brne	.-4      	; 0x5900 <FingerPS_genTemplate+0x2ca>
    5904:	9c 83       	std	Y+4, r25	; 0x04
    5906:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5908:	8d 81       	ldd	r24, Y+5	; 0x05
    590a:	9e 81       	ldd	r25, Y+6	; 0x06
    590c:	01 97       	sbiw	r24, 0x01	; 1
    590e:	9e 83       	std	Y+6, r25	; 0x06
    5910:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5912:	8d 81       	ldd	r24, Y+5	; 0x05
    5914:	9e 81       	ldd	r25, Y+6	; 0x06
    5916:	00 97       	sbiw	r24, 0x00	; 0
    5918:	69 f7       	brne	.-38     	; 0x58f4 <FingerPS_genTemplate+0x2be>
    591a:	14 c0       	rjmp	.+40     	; 0x5944 <FingerPS_genTemplate+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    591c:	6f 81       	ldd	r22, Y+7	; 0x07
    591e:	78 85       	ldd	r23, Y+8	; 0x08
    5920:	89 85       	ldd	r24, Y+9	; 0x09
    5922:	9a 85       	ldd	r25, Y+10	; 0x0a
    5924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5928:	dc 01       	movw	r26, r24
    592a:	cb 01       	movw	r24, r22
    592c:	9e 83       	std	Y+6, r25	; 0x06
    592e:	8d 83       	std	Y+5, r24	; 0x05
    5930:	8d 81       	ldd	r24, Y+5	; 0x05
    5932:	9e 81       	ldd	r25, Y+6	; 0x06
    5934:	9a 83       	std	Y+2, r25	; 0x02
    5936:	89 83       	std	Y+1, r24	; 0x01
    5938:	89 81       	ldd	r24, Y+1	; 0x01
    593a:	9a 81       	ldd	r25, Y+2	; 0x02
    593c:	01 97       	sbiw	r24, 0x01	; 1
    593e:	f1 f7       	brne	.-4      	; 0x593c <FingerPS_genTemplate+0x306>
    5940:	9a 83       	std	Y+2, r25	; 0x02
    5942:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
		operation_status = ERROR;
    5944:	18 a2       	std	Y+32, r1	; 0x20
	}
	operation_status &= FingerPS_AuraNormal();
    5946:	0e 94 8d 23 	call	0x471a	; 0x471a <FingerPS_AuraNormal>
    594a:	98 2f       	mov	r25, r24
    594c:	88 a1       	ldd	r24, Y+32	; 0x20
    594e:	89 23       	and	r24, r25
    5950:	88 a3       	std	Y+32, r24	; 0x20
	return operation_status;
    5952:	88 a1       	ldd	r24, Y+32	; 0x20
}
    5954:	cc 5b       	subi	r28, 0xBC	; 188
    5956:	df 4f       	sbci	r29, 0xFF	; 255
    5958:	0f b6       	in	r0, 0x3f	; 63
    595a:	f8 94       	cli
    595c:	de bf       	out	0x3e, r29	; 62
    595e:	0f be       	out	0x3f, r0	; 63
    5960:	cd bf       	out	0x3d, r28	; 61
    5962:	cf 91       	pop	r28
    5964:	df 91       	pop	r29
    5966:	08 95       	ret

00005968 <FingerPS_strTemplate>:




u8 FingerPS_strTemplate(u8 Page_ID)
{
    5968:	df 93       	push	r29
    596a:	cf 93       	push	r28
    596c:	cd b7       	in	r28, 0x3d	; 61
    596e:	de b7       	in	r29, 0x3e	; 62
    5970:	c3 54       	subi	r28, 0x43	; 67
    5972:	d0 40       	sbci	r29, 0x00	; 0
    5974:	0f b6       	in	r0, 0x3f	; 63
    5976:	f8 94       	cli
    5978:	de bf       	out	0x3e, r29	; 62
    597a:	0f be       	out	0x3f, r0	; 63
    597c:	cd bf       	out	0x3d, r28	; 61
    597e:	8e af       	std	Y+62, r24	; 0x3e
	Error_Status_t ret_status = NO_ERROR;
    5980:	19 a2       	std	Y+33, r1	; 0x21
	u8 operation_status = SUCCESS;
    5982:	81 e0       	ldi	r24, 0x01	; 1
    5984:	88 a3       	std	Y+32, r24	; 0x20
	u8 rec_byte = 0;
    5986:	1a a2       	std	Y+34, r1	; 0x22
	u8 num_of_success = 0;
    5988:	1f 8e       	std	Y+31, r1	; 0x1f

	u8 Store[]={0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x06,0x06,0x01,0x00,Page_ID,0x00,0x0E + Page_ID};
    598a:	8e ad       	ldd	r24, Y+62	; 0x3e
    598c:	98 2f       	mov	r25, r24
    598e:	92 5f       	subi	r25, 0xF2	; 242
    5990:	8f ee       	ldi	r24, 0xEF	; 239
    5992:	8b a3       	std	Y+35, r24	; 0x23
    5994:	81 e0       	ldi	r24, 0x01	; 1
    5996:	8c a3       	std	Y+36, r24	; 0x24
    5998:	8f ef       	ldi	r24, 0xFF	; 255
    599a:	8d a3       	std	Y+37, r24	; 0x25
    599c:	8f ef       	ldi	r24, 0xFF	; 255
    599e:	8e a3       	std	Y+38, r24	; 0x26
    59a0:	8f ef       	ldi	r24, 0xFF	; 255
    59a2:	8f a3       	std	Y+39, r24	; 0x27
    59a4:	8f ef       	ldi	r24, 0xFF	; 255
    59a6:	88 a7       	std	Y+40, r24	; 0x28
    59a8:	81 e0       	ldi	r24, 0x01	; 1
    59aa:	89 a7       	std	Y+41, r24	; 0x29
    59ac:	1a a6       	std	Y+42, r1	; 0x2a
    59ae:	86 e0       	ldi	r24, 0x06	; 6
    59b0:	8b a7       	std	Y+43, r24	; 0x2b
    59b2:	86 e0       	ldi	r24, 0x06	; 6
    59b4:	8c a7       	std	Y+44, r24	; 0x2c
    59b6:	81 e0       	ldi	r24, 0x01	; 1
    59b8:	8d a7       	std	Y+45, r24	; 0x2d
    59ba:	1e a6       	std	Y+46, r1	; 0x2e
    59bc:	8e ad       	ldd	r24, Y+62	; 0x3e
    59be:	8f a7       	std	Y+47, r24	; 0x2f
    59c0:	18 aa       	std	Y+48, r1	; 0x30
    59c2:	99 ab       	std	Y+49, r25	; 0x31
	u8 Store_response[] = {0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x07,0x00,0x03,0x00,0x00,0x0A};
    59c4:	ce 01       	movw	r24, r28
    59c6:	c2 96       	adiw	r24, 0x32	; 50
    59c8:	21 96       	adiw	r28, 0x01	; 1
    59ca:	9f af       	std	Y+63, r25	; 0x3f
    59cc:	8e af       	std	Y+62, r24	; 0x3e
    59ce:	21 97       	sbiw	r28, 0x01	; 1
    59d0:	e3 ec       	ldi	r30, 0xC3	; 195
    59d2:	f2 e0       	ldi	r31, 0x02	; 2
    59d4:	23 96       	adiw	r28, 0x03	; 3
    59d6:	ff af       	std	Y+63, r31	; 0x3f
    59d8:	ee af       	std	Y+62, r30	; 0x3e
    59da:	23 97       	sbiw	r28, 0x03	; 3
    59dc:	fc e0       	ldi	r31, 0x0C	; 12
    59de:	24 96       	adiw	r28, 0x04	; 4
    59e0:	ff af       	std	Y+63, r31	; 0x3f
    59e2:	24 97       	sbiw	r28, 0x04	; 4
    59e4:	23 96       	adiw	r28, 0x03	; 3
    59e6:	ee ad       	ldd	r30, Y+62	; 0x3e
    59e8:	ff ad       	ldd	r31, Y+63	; 0x3f
    59ea:	23 97       	sbiw	r28, 0x03	; 3
    59ec:	00 80       	ld	r0, Z
    59ee:	23 96       	adiw	r28, 0x03	; 3
    59f0:	8e ad       	ldd	r24, Y+62	; 0x3e
    59f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    59f4:	23 97       	sbiw	r28, 0x03	; 3
    59f6:	01 96       	adiw	r24, 0x01	; 1
    59f8:	23 96       	adiw	r28, 0x03	; 3
    59fa:	9f af       	std	Y+63, r25	; 0x3f
    59fc:	8e af       	std	Y+62, r24	; 0x3e
    59fe:	23 97       	sbiw	r28, 0x03	; 3
    5a00:	21 96       	adiw	r28, 0x01	; 1
    5a02:	ee ad       	ldd	r30, Y+62	; 0x3e
    5a04:	ff ad       	ldd	r31, Y+63	; 0x3f
    5a06:	21 97       	sbiw	r28, 0x01	; 1
    5a08:	00 82       	st	Z, r0
    5a0a:	21 96       	adiw	r28, 0x01	; 1
    5a0c:	8e ad       	ldd	r24, Y+62	; 0x3e
    5a0e:	9f ad       	ldd	r25, Y+63	; 0x3f
    5a10:	21 97       	sbiw	r28, 0x01	; 1
    5a12:	01 96       	adiw	r24, 0x01	; 1
    5a14:	21 96       	adiw	r28, 0x01	; 1
    5a16:	9f af       	std	Y+63, r25	; 0x3f
    5a18:	8e af       	std	Y+62, r24	; 0x3e
    5a1a:	21 97       	sbiw	r28, 0x01	; 1
    5a1c:	24 96       	adiw	r28, 0x04	; 4
    5a1e:	9f ad       	ldd	r25, Y+63	; 0x3f
    5a20:	24 97       	sbiw	r28, 0x04	; 4
    5a22:	91 50       	subi	r25, 0x01	; 1
    5a24:	24 96       	adiw	r28, 0x04	; 4
    5a26:	9f af       	std	Y+63, r25	; 0x3f
    5a28:	24 97       	sbiw	r28, 0x04	; 4
    5a2a:	24 96       	adiw	r28, 0x04	; 4
    5a2c:	ef ad       	ldd	r30, Y+63	; 0x3f
    5a2e:	24 97       	sbiw	r28, 0x04	; 4
    5a30:	ee 23       	and	r30, r30
    5a32:	c1 f6       	brne	.-80     	; 0x59e4 <FingerPS_strTemplate+0x7c>

	// send frame
	for(u8 i = 0; i < sizeof(Store); i++)
    5a34:	1e 8e       	std	Y+30, r1	; 0x1e
    5a36:	0f c0       	rjmp	.+30     	; 0x5a56 <FingerPS_strTemplate+0xee>
	{
		ret_status = UART_SendByte(Store[i]);
    5a38:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5a3a:	28 2f       	mov	r18, r24
    5a3c:	30 e0       	ldi	r19, 0x00	; 0
    5a3e:	ce 01       	movw	r24, r28
    5a40:	83 96       	adiw	r24, 0x23	; 35
    5a42:	fc 01       	movw	r30, r24
    5a44:	e2 0f       	add	r30, r18
    5a46:	f3 1f       	adc	r31, r19
    5a48:	80 81       	ld	r24, Z
    5a4a:	0e 94 16 11 	call	0x222c	; 0x222c <UART_SendByte>
    5a4e:	89 a3       	std	Y+33, r24	; 0x21

	u8 Store[]={0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x06,0x06,0x01,0x00,Page_ID,0x00,0x0E + Page_ID};
	u8 Store_response[] = {0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x07,0x00,0x03,0x00,0x00,0x0A};

	// send frame
	for(u8 i = 0; i < sizeof(Store); i++)
    5a50:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5a52:	8f 5f       	subi	r24, 0xFF	; 255
    5a54:	8e 8f       	std	Y+30, r24	; 0x1e
    5a56:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5a58:	8f 30       	cpi	r24, 0x0F	; 15
    5a5a:	70 f3       	brcs	.-36     	; 0x5a38 <FingerPS_strTemplate+0xd0>
	{
		ret_status = UART_SendByte(Store[i]);
	}

	// Receive and verify the response
	for (u8 i = 0; i < sizeof(Store_response); ++i)
    5a5c:	1d 8e       	std	Y+29, r1	; 0x1d
    5a5e:	17 c0       	rjmp	.+46     	; 0x5a8e <FingerPS_strTemplate+0x126>
	{
		ret_status = UART_ReceiveByte(&rec_byte);
    5a60:	ce 01       	movw	r24, r28
    5a62:	82 96       	adiw	r24, 0x22	; 34
    5a64:	0e 94 30 11 	call	0x2260	; 0x2260 <UART_ReceiveByte>
    5a68:	89 a3       	std	Y+33, r24	; 0x21

		if(rec_byte == Store_response[i])
    5a6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5a6c:	28 2f       	mov	r18, r24
    5a6e:	30 e0       	ldi	r19, 0x00	; 0
    5a70:	ce 01       	movw	r24, r28
    5a72:	c2 96       	adiw	r24, 0x32	; 50
    5a74:	fc 01       	movw	r30, r24
    5a76:	e2 0f       	add	r30, r18
    5a78:	f3 1f       	adc	r31, r19
    5a7a:	90 81       	ld	r25, Z
    5a7c:	8a a1       	ldd	r24, Y+34	; 0x22
    5a7e:	98 17       	cp	r25, r24
    5a80:	19 f4       	brne	.+6      	; 0x5a88 <FingerPS_strTemplate+0x120>
		{
			num_of_success++;
    5a82:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5a84:	8f 5f       	subi	r24, 0xFF	; 255
    5a86:	8f 8f       	std	Y+31, r24	; 0x1f
	{
		ret_status = UART_SendByte(Store[i]);
	}

	// Receive and verify the response
	for (u8 i = 0; i < sizeof(Store_response); ++i)
    5a88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5a8a:	8f 5f       	subi	r24, 0xFF	; 255
    5a8c:	8d 8f       	std	Y+29, r24	; 0x1d
    5a8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5a90:	8c 30       	cpi	r24, 0x0C	; 12
    5a92:	30 f3       	brcs	.-52     	; 0x5a60 <FingerPS_strTemplate+0xf8>
		if(rec_byte == Store_response[i])
		{
			num_of_success++;
		}
	}
	if(num_of_success == sizeof(Store_response))
    5a94:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5a96:	8c 30       	cpi	r24, 0x0C	; 12
    5a98:	09 f0       	breq	.+2      	; 0x5a9c <FingerPS_strTemplate+0x134>
    5a9a:	76 c0       	rjmp	.+236    	; 0x5b88 <FingerPS_strTemplate+0x220>
	{
		operation_status = FingerPS_AuraSuccess();
    5a9c:	0e 94 14 24 	call	0x4828	; 0x4828 <FingerPS_AuraSuccess>
    5aa0:	88 a3       	std	Y+32, r24	; 0x20
    5aa2:	80 e0       	ldi	r24, 0x00	; 0
    5aa4:	90 e0       	ldi	r25, 0x00	; 0
    5aa6:	a8 e4       	ldi	r26, 0x48	; 72
    5aa8:	b3 e4       	ldi	r27, 0x43	; 67
    5aaa:	89 8f       	std	Y+25, r24	; 0x19
    5aac:	9a 8f       	std	Y+26, r25	; 0x1a
    5aae:	ab 8f       	std	Y+27, r26	; 0x1b
    5ab0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ab2:	69 8d       	ldd	r22, Y+25	; 0x19
    5ab4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5ab6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5ab8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5aba:	20 e0       	ldi	r18, 0x00	; 0
    5abc:	30 e0       	ldi	r19, 0x00	; 0
    5abe:	4a e7       	ldi	r20, 0x7A	; 122
    5ac0:	55 e4       	ldi	r21, 0x45	; 69
    5ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ac6:	dc 01       	movw	r26, r24
    5ac8:	cb 01       	movw	r24, r22
    5aca:	8d 8b       	std	Y+21, r24	; 0x15
    5acc:	9e 8b       	std	Y+22, r25	; 0x16
    5ace:	af 8b       	std	Y+23, r26	; 0x17
    5ad0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5ad2:	6d 89       	ldd	r22, Y+21	; 0x15
    5ad4:	7e 89       	ldd	r23, Y+22	; 0x16
    5ad6:	8f 89       	ldd	r24, Y+23	; 0x17
    5ad8:	98 8d       	ldd	r25, Y+24	; 0x18
    5ada:	20 e0       	ldi	r18, 0x00	; 0
    5adc:	30 e0       	ldi	r19, 0x00	; 0
    5ade:	40 e8       	ldi	r20, 0x80	; 128
    5ae0:	5f e3       	ldi	r21, 0x3F	; 63
    5ae2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5ae6:	88 23       	and	r24, r24
    5ae8:	2c f4       	brge	.+10     	; 0x5af4 <FingerPS_strTemplate+0x18c>
		__ticks = 1;
    5aea:	81 e0       	ldi	r24, 0x01	; 1
    5aec:	90 e0       	ldi	r25, 0x00	; 0
    5aee:	9c 8b       	std	Y+20, r25	; 0x14
    5af0:	8b 8b       	std	Y+19, r24	; 0x13
    5af2:	3f c0       	rjmp	.+126    	; 0x5b72 <FingerPS_strTemplate+0x20a>
	else if (__tmp > 65535)
    5af4:	6d 89       	ldd	r22, Y+21	; 0x15
    5af6:	7e 89       	ldd	r23, Y+22	; 0x16
    5af8:	8f 89       	ldd	r24, Y+23	; 0x17
    5afa:	98 8d       	ldd	r25, Y+24	; 0x18
    5afc:	20 e0       	ldi	r18, 0x00	; 0
    5afe:	3f ef       	ldi	r19, 0xFF	; 255
    5b00:	4f e7       	ldi	r20, 0x7F	; 127
    5b02:	57 e4       	ldi	r21, 0x47	; 71
    5b04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b08:	18 16       	cp	r1, r24
    5b0a:	4c f5       	brge	.+82     	; 0x5b5e <FingerPS_strTemplate+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b0c:	69 8d       	ldd	r22, Y+25	; 0x19
    5b0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5b10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5b14:	20 e0       	ldi	r18, 0x00	; 0
    5b16:	30 e0       	ldi	r19, 0x00	; 0
    5b18:	40 e2       	ldi	r20, 0x20	; 32
    5b1a:	51 e4       	ldi	r21, 0x41	; 65
    5b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b20:	dc 01       	movw	r26, r24
    5b22:	cb 01       	movw	r24, r22
    5b24:	bc 01       	movw	r22, r24
    5b26:	cd 01       	movw	r24, r26
    5b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b2c:	dc 01       	movw	r26, r24
    5b2e:	cb 01       	movw	r24, r22
    5b30:	9c 8b       	std	Y+20, r25	; 0x14
    5b32:	8b 8b       	std	Y+19, r24	; 0x13
    5b34:	0f c0       	rjmp	.+30     	; 0x5b54 <FingerPS_strTemplate+0x1ec>
    5b36:	80 e9       	ldi	r24, 0x90	; 144
    5b38:	91 e0       	ldi	r25, 0x01	; 1
    5b3a:	9a 8b       	std	Y+18, r25	; 0x12
    5b3c:	89 8b       	std	Y+17, r24	; 0x11
    5b3e:	89 89       	ldd	r24, Y+17	; 0x11
    5b40:	9a 89       	ldd	r25, Y+18	; 0x12
    5b42:	01 97       	sbiw	r24, 0x01	; 1
    5b44:	f1 f7       	brne	.-4      	; 0x5b42 <FingerPS_strTemplate+0x1da>
    5b46:	9a 8b       	std	Y+18, r25	; 0x12
    5b48:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b4a:	8b 89       	ldd	r24, Y+19	; 0x13
    5b4c:	9c 89       	ldd	r25, Y+20	; 0x14
    5b4e:	01 97       	sbiw	r24, 0x01	; 1
    5b50:	9c 8b       	std	Y+20, r25	; 0x14
    5b52:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b54:	8b 89       	ldd	r24, Y+19	; 0x13
    5b56:	9c 89       	ldd	r25, Y+20	; 0x14
    5b58:	00 97       	sbiw	r24, 0x00	; 0
    5b5a:	69 f7       	brne	.-38     	; 0x5b36 <FingerPS_strTemplate+0x1ce>
    5b5c:	8b c0       	rjmp	.+278    	; 0x5c74 <FingerPS_strTemplate+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b5e:	6d 89       	ldd	r22, Y+21	; 0x15
    5b60:	7e 89       	ldd	r23, Y+22	; 0x16
    5b62:	8f 89       	ldd	r24, Y+23	; 0x17
    5b64:	98 8d       	ldd	r25, Y+24	; 0x18
    5b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b6a:	dc 01       	movw	r26, r24
    5b6c:	cb 01       	movw	r24, r22
    5b6e:	9c 8b       	std	Y+20, r25	; 0x14
    5b70:	8b 8b       	std	Y+19, r24	; 0x13
    5b72:	8b 89       	ldd	r24, Y+19	; 0x13
    5b74:	9c 89       	ldd	r25, Y+20	; 0x14
    5b76:	98 8b       	std	Y+16, r25	; 0x10
    5b78:	8f 87       	std	Y+15, r24	; 0x0f
    5b7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    5b7c:	98 89       	ldd	r25, Y+16	; 0x10
    5b7e:	01 97       	sbiw	r24, 0x01	; 1
    5b80:	f1 f7       	brne	.-4      	; 0x5b7e <FingerPS_strTemplate+0x216>
    5b82:	98 8b       	std	Y+16, r25	; 0x10
    5b84:	8f 87       	std	Y+15, r24	; 0x0f
    5b86:	76 c0       	rjmp	.+236    	; 0x5c74 <FingerPS_strTemplate+0x30c>
		_delay_ms(200);
	}
	else
	{
		operation_status = FingerPS_AuraError();
    5b88:	0e 94 9b 24 	call	0x4936	; 0x4936 <FingerPS_AuraError>
    5b8c:	88 a3       	std	Y+32, r24	; 0x20
    5b8e:	80 e0       	ldi	r24, 0x00	; 0
    5b90:	90 e0       	ldi	r25, 0x00	; 0
    5b92:	a8 e4       	ldi	r26, 0x48	; 72
    5b94:	b3 e4       	ldi	r27, 0x43	; 67
    5b96:	8b 87       	std	Y+11, r24	; 0x0b
    5b98:	9c 87       	std	Y+12, r25	; 0x0c
    5b9a:	ad 87       	std	Y+13, r26	; 0x0d
    5b9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ba0:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ba2:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ba4:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ba6:	20 e0       	ldi	r18, 0x00	; 0
    5ba8:	30 e0       	ldi	r19, 0x00	; 0
    5baa:	4a e7       	ldi	r20, 0x7A	; 122
    5bac:	55 e4       	ldi	r21, 0x45	; 69
    5bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bb2:	dc 01       	movw	r26, r24
    5bb4:	cb 01       	movw	r24, r22
    5bb6:	8f 83       	std	Y+7, r24	; 0x07
    5bb8:	98 87       	std	Y+8, r25	; 0x08
    5bba:	a9 87       	std	Y+9, r26	; 0x09
    5bbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5bbe:	6f 81       	ldd	r22, Y+7	; 0x07
    5bc0:	78 85       	ldd	r23, Y+8	; 0x08
    5bc2:	89 85       	ldd	r24, Y+9	; 0x09
    5bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bc6:	20 e0       	ldi	r18, 0x00	; 0
    5bc8:	30 e0       	ldi	r19, 0x00	; 0
    5bca:	40 e8       	ldi	r20, 0x80	; 128
    5bcc:	5f e3       	ldi	r21, 0x3F	; 63
    5bce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5bd2:	88 23       	and	r24, r24
    5bd4:	2c f4       	brge	.+10     	; 0x5be0 <FingerPS_strTemplate+0x278>
		__ticks = 1;
    5bd6:	81 e0       	ldi	r24, 0x01	; 1
    5bd8:	90 e0       	ldi	r25, 0x00	; 0
    5bda:	9e 83       	std	Y+6, r25	; 0x06
    5bdc:	8d 83       	std	Y+5, r24	; 0x05
    5bde:	3f c0       	rjmp	.+126    	; 0x5c5e <FingerPS_strTemplate+0x2f6>
	else if (__tmp > 65535)
    5be0:	6f 81       	ldd	r22, Y+7	; 0x07
    5be2:	78 85       	ldd	r23, Y+8	; 0x08
    5be4:	89 85       	ldd	r24, Y+9	; 0x09
    5be6:	9a 85       	ldd	r25, Y+10	; 0x0a
    5be8:	20 e0       	ldi	r18, 0x00	; 0
    5bea:	3f ef       	ldi	r19, 0xFF	; 255
    5bec:	4f e7       	ldi	r20, 0x7F	; 127
    5bee:	57 e4       	ldi	r21, 0x47	; 71
    5bf0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5bf4:	18 16       	cp	r1, r24
    5bf6:	4c f5       	brge	.+82     	; 0x5c4a <FingerPS_strTemplate+0x2e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5bf8:	6b 85       	ldd	r22, Y+11	; 0x0b
    5bfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    5bfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    5bfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c00:	20 e0       	ldi	r18, 0x00	; 0
    5c02:	30 e0       	ldi	r19, 0x00	; 0
    5c04:	40 e2       	ldi	r20, 0x20	; 32
    5c06:	51 e4       	ldi	r21, 0x41	; 65
    5c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c0c:	dc 01       	movw	r26, r24
    5c0e:	cb 01       	movw	r24, r22
    5c10:	bc 01       	movw	r22, r24
    5c12:	cd 01       	movw	r24, r26
    5c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c18:	dc 01       	movw	r26, r24
    5c1a:	cb 01       	movw	r24, r22
    5c1c:	9e 83       	std	Y+6, r25	; 0x06
    5c1e:	8d 83       	std	Y+5, r24	; 0x05
    5c20:	0f c0       	rjmp	.+30     	; 0x5c40 <FingerPS_strTemplate+0x2d8>
    5c22:	80 e9       	ldi	r24, 0x90	; 144
    5c24:	91 e0       	ldi	r25, 0x01	; 1
    5c26:	9c 83       	std	Y+4, r25	; 0x04
    5c28:	8b 83       	std	Y+3, r24	; 0x03
    5c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    5c2c:	9c 81       	ldd	r25, Y+4	; 0x04
    5c2e:	01 97       	sbiw	r24, 0x01	; 1
    5c30:	f1 f7       	brne	.-4      	; 0x5c2e <FingerPS_strTemplate+0x2c6>
    5c32:	9c 83       	std	Y+4, r25	; 0x04
    5c34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c36:	8d 81       	ldd	r24, Y+5	; 0x05
    5c38:	9e 81       	ldd	r25, Y+6	; 0x06
    5c3a:	01 97       	sbiw	r24, 0x01	; 1
    5c3c:	9e 83       	std	Y+6, r25	; 0x06
    5c3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c40:	8d 81       	ldd	r24, Y+5	; 0x05
    5c42:	9e 81       	ldd	r25, Y+6	; 0x06
    5c44:	00 97       	sbiw	r24, 0x00	; 0
    5c46:	69 f7       	brne	.-38     	; 0x5c22 <FingerPS_strTemplate+0x2ba>
    5c48:	14 c0       	rjmp	.+40     	; 0x5c72 <FingerPS_strTemplate+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    5c4c:	78 85       	ldd	r23, Y+8	; 0x08
    5c4e:	89 85       	ldd	r24, Y+9	; 0x09
    5c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c56:	dc 01       	movw	r26, r24
    5c58:	cb 01       	movw	r24, r22
    5c5a:	9e 83       	std	Y+6, r25	; 0x06
    5c5c:	8d 83       	std	Y+5, r24	; 0x05
    5c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    5c60:	9e 81       	ldd	r25, Y+6	; 0x06
    5c62:	9a 83       	std	Y+2, r25	; 0x02
    5c64:	89 83       	std	Y+1, r24	; 0x01
    5c66:	89 81       	ldd	r24, Y+1	; 0x01
    5c68:	9a 81       	ldd	r25, Y+2	; 0x02
    5c6a:	01 97       	sbiw	r24, 0x01	; 1
    5c6c:	f1 f7       	brne	.-4      	; 0x5c6a <FingerPS_strTemplate+0x302>
    5c6e:	9a 83       	std	Y+2, r25	; 0x02
    5c70:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
		operation_status = ERROR;
    5c72:	18 a2       	std	Y+32, r1	; 0x20
	}
	operation_status &= FingerPS_AuraNormal();
    5c74:	0e 94 8d 23 	call	0x471a	; 0x471a <FingerPS_AuraNormal>
    5c78:	98 2f       	mov	r25, r24
    5c7a:	88 a1       	ldd	r24, Y+32	; 0x20
    5c7c:	89 23       	and	r24, r25
    5c7e:	88 a3       	std	Y+32, r24	; 0x20
	return operation_status;
    5c80:	88 a1       	ldd	r24, Y+32	; 0x20
}
    5c82:	cd 5b       	subi	r28, 0xBD	; 189
    5c84:	df 4f       	sbci	r29, 0xFF	; 255
    5c86:	0f b6       	in	r0, 0x3f	; 63
    5c88:	f8 94       	cli
    5c8a:	de bf       	out	0x3e, r29	; 62
    5c8c:	0f be       	out	0x3f, r0	; 63
    5c8e:	cd bf       	out	0x3d, r28	; 61
    5c90:	cf 91       	pop	r28
    5c92:	df 91       	pop	r29
    5c94:	08 95       	ret

00005c96 <FingerPS_searchFinger>:



u8 FingerPS_searchFinger(u16 *ret_pageid)
{
    5c96:	df 93       	push	r29
    5c98:	cf 93       	push	r28
    5c9a:	cd b7       	in	r28, 0x3d	; 61
    5c9c:	de b7       	in	r29, 0x3e	; 62
    5c9e:	ca 54       	subi	r28, 0x4A	; 74
    5ca0:	d0 40       	sbci	r29, 0x00	; 0
    5ca2:	0f b6       	in	r0, 0x3f	; 63
    5ca4:	f8 94       	cli
    5ca6:	de bf       	out	0x3e, r29	; 62
    5ca8:	0f be       	out	0x3f, r0	; 63
    5caa:	cd bf       	out	0x3d, r28	; 61
    5cac:	fe 01       	movw	r30, r28
    5cae:	ec 5b       	subi	r30, 0xBC	; 188
    5cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    5cb2:	91 83       	std	Z+1, r25	; 0x01
    5cb4:	80 83       	st	Z, r24
	Error_Status_t ret_status = NO_ERROR;
    5cb6:	19 a2       	std	Y+33, r1	; 0x21
	u8 operation_status = SUCCESS;
    5cb8:	81 e0       	ldi	r24, 0x01	; 1
    5cba:	88 a3       	std	Y+32, r24	; 0x20
	u8 rec_byte = 0;
    5cbc:	1a a2       	std	Y+34, r1	; 0x22
	u8 num_of_success = 0;
    5cbe:	1f 8e       	std	Y+31, r1	; 0x1f

	u8 Search_Command[]={0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x08, 0x04, 0x01, 0x00, 0x01 ,0x00 ,0x01 ,0x00, 0x10};
    5cc0:	ce 01       	movw	r24, r28
    5cc2:	83 96       	adiw	r24, 0x23	; 35
    5cc4:	28 96       	adiw	r28, 0x08	; 8
    5cc6:	9f af       	std	Y+63, r25	; 0x3f
    5cc8:	8e af       	std	Y+62, r24	; 0x3e
    5cca:	28 97       	sbiw	r28, 0x08	; 8
    5ccc:	ef ec       	ldi	r30, 0xCF	; 207
    5cce:	f2 e0       	ldi	r31, 0x02	; 2
    5cd0:	2a 96       	adiw	r28, 0x0a	; 10
    5cd2:	ff af       	std	Y+63, r31	; 0x3f
    5cd4:	ee af       	std	Y+62, r30	; 0x3e
    5cd6:	2a 97       	sbiw	r28, 0x0a	; 10
    5cd8:	f1 e1       	ldi	r31, 0x11	; 17
    5cda:	2b 96       	adiw	r28, 0x0b	; 11
    5cdc:	ff af       	std	Y+63, r31	; 0x3f
    5cde:	2b 97       	sbiw	r28, 0x0b	; 11
    5ce0:	2a 96       	adiw	r28, 0x0a	; 10
    5ce2:	ee ad       	ldd	r30, Y+62	; 0x3e
    5ce4:	ff ad       	ldd	r31, Y+63	; 0x3f
    5ce6:	2a 97       	sbiw	r28, 0x0a	; 10
    5ce8:	00 80       	ld	r0, Z
    5cea:	2a 96       	adiw	r28, 0x0a	; 10
    5cec:	8e ad       	ldd	r24, Y+62	; 0x3e
    5cee:	9f ad       	ldd	r25, Y+63	; 0x3f
    5cf0:	2a 97       	sbiw	r28, 0x0a	; 10
    5cf2:	01 96       	adiw	r24, 0x01	; 1
    5cf4:	2a 96       	adiw	r28, 0x0a	; 10
    5cf6:	9f af       	std	Y+63, r25	; 0x3f
    5cf8:	8e af       	std	Y+62, r24	; 0x3e
    5cfa:	2a 97       	sbiw	r28, 0x0a	; 10
    5cfc:	28 96       	adiw	r28, 0x08	; 8
    5cfe:	ee ad       	ldd	r30, Y+62	; 0x3e
    5d00:	ff ad       	ldd	r31, Y+63	; 0x3f
    5d02:	28 97       	sbiw	r28, 0x08	; 8
    5d04:	00 82       	st	Z, r0
    5d06:	28 96       	adiw	r28, 0x08	; 8
    5d08:	8e ad       	ldd	r24, Y+62	; 0x3e
    5d0a:	9f ad       	ldd	r25, Y+63	; 0x3f
    5d0c:	28 97       	sbiw	r28, 0x08	; 8
    5d0e:	01 96       	adiw	r24, 0x01	; 1
    5d10:	28 96       	adiw	r28, 0x08	; 8
    5d12:	9f af       	std	Y+63, r25	; 0x3f
    5d14:	8e af       	std	Y+62, r24	; 0x3e
    5d16:	28 97       	sbiw	r28, 0x08	; 8
    5d18:	2b 96       	adiw	r28, 0x0b	; 11
    5d1a:	9f ad       	ldd	r25, Y+63	; 0x3f
    5d1c:	2b 97       	sbiw	r28, 0x0b	; 11
    5d1e:	91 50       	subi	r25, 0x01	; 1
    5d20:	2b 96       	adiw	r28, 0x0b	; 11
    5d22:	9f af       	std	Y+63, r25	; 0x3f
    5d24:	2b 97       	sbiw	r28, 0x0b	; 11
    5d26:	2b 96       	adiw	r28, 0x0b	; 11
    5d28:	ef ad       	ldd	r30, Y+63	; 0x3f
    5d2a:	2b 97       	sbiw	r28, 0x0b	; 11
    5d2c:	ee 23       	and	r30, r30
    5d2e:	c1 f6       	brne	.-80     	; 0x5ce0 <FingerPS_searchFinger+0x4a>
	u8 Search_response[16]; // to receive response search response frame

	// send frame
	for(u8 i = 0; i < sizeof(Search_Command); i++)
    5d30:	1e 8e       	std	Y+30, r1	; 0x1e
    5d32:	0f c0       	rjmp	.+30     	; 0x5d52 <FingerPS_searchFinger+0xbc>
	{
		ret_status = UART_SendByte(Search_Command[i]);
    5d34:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5d36:	28 2f       	mov	r18, r24
    5d38:	30 e0       	ldi	r19, 0x00	; 0
    5d3a:	ce 01       	movw	r24, r28
    5d3c:	83 96       	adiw	r24, 0x23	; 35
    5d3e:	fc 01       	movw	r30, r24
    5d40:	e2 0f       	add	r30, r18
    5d42:	f3 1f       	adc	r31, r19
    5d44:	80 81       	ld	r24, Z
    5d46:	0e 94 16 11 	call	0x222c	; 0x222c <UART_SendByte>
    5d4a:	89 a3       	std	Y+33, r24	; 0x21

	u8 Search_Command[]={0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x08, 0x04, 0x01, 0x00, 0x01 ,0x00 ,0x01 ,0x00, 0x10};
	u8 Search_response[16]; // to receive response search response frame

	// send frame
	for(u8 i = 0; i < sizeof(Search_Command); i++)
    5d4c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5d4e:	8f 5f       	subi	r24, 0xFF	; 255
    5d50:	8e 8f       	std	Y+30, r24	; 0x1e
    5d52:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5d54:	81 31       	cpi	r24, 0x11	; 17
    5d56:	70 f3       	brcs	.-36     	; 0x5d34 <FingerPS_searchFinger+0x9e>
		ret_status = UART_SendByte(Search_Command[i]);
	}


	// Receive and verify the response
	for (u8 i = 0; i < 16; ++i)
    5d58:	1d 8e       	std	Y+29, r1	; 0x1d
    5d5a:	12 c0       	rjmp	.+36     	; 0x5d80 <FingerPS_searchFinger+0xea>
	{
		ret_status = UART_ReceiveByte(&rec_byte);
    5d5c:	ce 01       	movw	r24, r28
    5d5e:	82 96       	adiw	r24, 0x22	; 34
    5d60:	0e 94 30 11 	call	0x2260	; 0x2260 <UART_ReceiveByte>
    5d64:	89 a3       	std	Y+33, r24	; 0x21
		Search_response[i] = rec_byte;
    5d66:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5d68:	28 2f       	mov	r18, r24
    5d6a:	30 e0       	ldi	r19, 0x00	; 0
    5d6c:	4a a1       	ldd	r20, Y+34	; 0x22
    5d6e:	ce 01       	movw	r24, r28
    5d70:	c4 96       	adiw	r24, 0x34	; 52
    5d72:	fc 01       	movw	r30, r24
    5d74:	e2 0f       	add	r30, r18
    5d76:	f3 1f       	adc	r31, r19
    5d78:	40 83       	st	Z, r20
		ret_status = UART_SendByte(Search_Command[i]);
	}


	// Receive and verify the response
	for (u8 i = 0; i < 16; ++i)
    5d7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5d7c:	8f 5f       	subi	r24, 0xFF	; 255
    5d7e:	8d 8f       	std	Y+29, r24	; 0x1d
    5d80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5d82:	80 31       	cpi	r24, 0x10	; 16
    5d84:	58 f3       	brcs	.-42     	; 0x5d5c <FingerPS_searchFinger+0xc6>
	{
		ret_status = UART_ReceiveByte(&rec_byte);
		Search_response[i] = rec_byte;
	}
	/*here we only check the confirmation code because check sum and PID is not fixed on response 9 here is the position of confirmation code */
	if(Search_response[9] == 0x00)
    5d86:	8d ad       	ldd	r24, Y+61	; 0x3d
    5d88:	88 23       	and	r24, r24
    5d8a:	09 f0       	breq	.+2      	; 0x5d8e <FingerPS_searchFinger+0xf8>
    5d8c:	88 c0       	rjmp	.+272    	; 0x5e9e <FingerPS_searchFinger+0x208>
	{
		operation_status = FingerPS_AuraSuccess();
    5d8e:	0e 94 14 24 	call	0x4828	; 0x4828 <FingerPS_AuraSuccess>
    5d92:	88 a3       	std	Y+32, r24	; 0x20
		*ret_pageid = (Search_response[10] << 8) + Search_response[11];
    5d94:	8e ad       	ldd	r24, Y+62	; 0x3e
    5d96:	88 2f       	mov	r24, r24
    5d98:	90 e0       	ldi	r25, 0x00	; 0
    5d9a:	38 2f       	mov	r19, r24
    5d9c:	22 27       	eor	r18, r18
    5d9e:	8f ad       	ldd	r24, Y+63	; 0x3f
    5da0:	88 2f       	mov	r24, r24
    5da2:	90 e0       	ldi	r25, 0x00	; 0
    5da4:	82 0f       	add	r24, r18
    5da6:	93 1f       	adc	r25, r19
    5da8:	fe 01       	movw	r30, r28
    5daa:	ec 5b       	subi	r30, 0xBC	; 188
    5dac:	ff 4f       	sbci	r31, 0xFF	; 255
    5dae:	01 90       	ld	r0, Z+
    5db0:	f0 81       	ld	r31, Z
    5db2:	e0 2d       	mov	r30, r0
    5db4:	91 83       	std	Z+1, r25	; 0x01
    5db6:	80 83       	st	Z, r24
    5db8:	80 e0       	ldi	r24, 0x00	; 0
    5dba:	90 e0       	ldi	r25, 0x00	; 0
    5dbc:	a8 e4       	ldi	r26, 0x48	; 72
    5dbe:	b3 e4       	ldi	r27, 0x43	; 67
    5dc0:	89 8f       	std	Y+25, r24	; 0x19
    5dc2:	9a 8f       	std	Y+26, r25	; 0x1a
    5dc4:	ab 8f       	std	Y+27, r26	; 0x1b
    5dc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5dc8:	69 8d       	ldd	r22, Y+25	; 0x19
    5dca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5dcc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5dce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5dd0:	20 e0       	ldi	r18, 0x00	; 0
    5dd2:	30 e0       	ldi	r19, 0x00	; 0
    5dd4:	4a e7       	ldi	r20, 0x7A	; 122
    5dd6:	55 e4       	ldi	r21, 0x45	; 69
    5dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ddc:	dc 01       	movw	r26, r24
    5dde:	cb 01       	movw	r24, r22
    5de0:	8d 8b       	std	Y+21, r24	; 0x15
    5de2:	9e 8b       	std	Y+22, r25	; 0x16
    5de4:	af 8b       	std	Y+23, r26	; 0x17
    5de6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5de8:	6d 89       	ldd	r22, Y+21	; 0x15
    5dea:	7e 89       	ldd	r23, Y+22	; 0x16
    5dec:	8f 89       	ldd	r24, Y+23	; 0x17
    5dee:	98 8d       	ldd	r25, Y+24	; 0x18
    5df0:	20 e0       	ldi	r18, 0x00	; 0
    5df2:	30 e0       	ldi	r19, 0x00	; 0
    5df4:	40 e8       	ldi	r20, 0x80	; 128
    5df6:	5f e3       	ldi	r21, 0x3F	; 63
    5df8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5dfc:	88 23       	and	r24, r24
    5dfe:	2c f4       	brge	.+10     	; 0x5e0a <FingerPS_searchFinger+0x174>
		__ticks = 1;
    5e00:	81 e0       	ldi	r24, 0x01	; 1
    5e02:	90 e0       	ldi	r25, 0x00	; 0
    5e04:	9c 8b       	std	Y+20, r25	; 0x14
    5e06:	8b 8b       	std	Y+19, r24	; 0x13
    5e08:	3f c0       	rjmp	.+126    	; 0x5e88 <FingerPS_searchFinger+0x1f2>
	else if (__tmp > 65535)
    5e0a:	6d 89       	ldd	r22, Y+21	; 0x15
    5e0c:	7e 89       	ldd	r23, Y+22	; 0x16
    5e0e:	8f 89       	ldd	r24, Y+23	; 0x17
    5e10:	98 8d       	ldd	r25, Y+24	; 0x18
    5e12:	20 e0       	ldi	r18, 0x00	; 0
    5e14:	3f ef       	ldi	r19, 0xFF	; 255
    5e16:	4f e7       	ldi	r20, 0x7F	; 127
    5e18:	57 e4       	ldi	r21, 0x47	; 71
    5e1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5e1e:	18 16       	cp	r1, r24
    5e20:	4c f5       	brge	.+82     	; 0x5e74 <FingerPS_searchFinger+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e22:	69 8d       	ldd	r22, Y+25	; 0x19
    5e24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5e26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5e28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5e2a:	20 e0       	ldi	r18, 0x00	; 0
    5e2c:	30 e0       	ldi	r19, 0x00	; 0
    5e2e:	40 e2       	ldi	r20, 0x20	; 32
    5e30:	51 e4       	ldi	r21, 0x41	; 65
    5e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e36:	dc 01       	movw	r26, r24
    5e38:	cb 01       	movw	r24, r22
    5e3a:	bc 01       	movw	r22, r24
    5e3c:	cd 01       	movw	r24, r26
    5e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e42:	dc 01       	movw	r26, r24
    5e44:	cb 01       	movw	r24, r22
    5e46:	9c 8b       	std	Y+20, r25	; 0x14
    5e48:	8b 8b       	std	Y+19, r24	; 0x13
    5e4a:	0f c0       	rjmp	.+30     	; 0x5e6a <FingerPS_searchFinger+0x1d4>
    5e4c:	80 e9       	ldi	r24, 0x90	; 144
    5e4e:	91 e0       	ldi	r25, 0x01	; 1
    5e50:	9a 8b       	std	Y+18, r25	; 0x12
    5e52:	89 8b       	std	Y+17, r24	; 0x11
    5e54:	89 89       	ldd	r24, Y+17	; 0x11
    5e56:	9a 89       	ldd	r25, Y+18	; 0x12
    5e58:	01 97       	sbiw	r24, 0x01	; 1
    5e5a:	f1 f7       	brne	.-4      	; 0x5e58 <FingerPS_searchFinger+0x1c2>
    5e5c:	9a 8b       	std	Y+18, r25	; 0x12
    5e5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e60:	8b 89       	ldd	r24, Y+19	; 0x13
    5e62:	9c 89       	ldd	r25, Y+20	; 0x14
    5e64:	01 97       	sbiw	r24, 0x01	; 1
    5e66:	9c 8b       	std	Y+20, r25	; 0x14
    5e68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e6a:	8b 89       	ldd	r24, Y+19	; 0x13
    5e6c:	9c 89       	ldd	r25, Y+20	; 0x14
    5e6e:	00 97       	sbiw	r24, 0x00	; 0
    5e70:	69 f7       	brne	.-38     	; 0x5e4c <FingerPS_searchFinger+0x1b6>
    5e72:	93 c0       	rjmp	.+294    	; 0x5f9a <FingerPS_searchFinger+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e74:	6d 89       	ldd	r22, Y+21	; 0x15
    5e76:	7e 89       	ldd	r23, Y+22	; 0x16
    5e78:	8f 89       	ldd	r24, Y+23	; 0x17
    5e7a:	98 8d       	ldd	r25, Y+24	; 0x18
    5e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e80:	dc 01       	movw	r26, r24
    5e82:	cb 01       	movw	r24, r22
    5e84:	9c 8b       	std	Y+20, r25	; 0x14
    5e86:	8b 8b       	std	Y+19, r24	; 0x13
    5e88:	8b 89       	ldd	r24, Y+19	; 0x13
    5e8a:	9c 89       	ldd	r25, Y+20	; 0x14
    5e8c:	98 8b       	std	Y+16, r25	; 0x10
    5e8e:	8f 87       	std	Y+15, r24	; 0x0f
    5e90:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e92:	98 89       	ldd	r25, Y+16	; 0x10
    5e94:	01 97       	sbiw	r24, 0x01	; 1
    5e96:	f1 f7       	brne	.-4      	; 0x5e94 <FingerPS_searchFinger+0x1fe>
    5e98:	98 8b       	std	Y+16, r25	; 0x10
    5e9a:	8f 87       	std	Y+15, r24	; 0x0f
    5e9c:	7e c0       	rjmp	.+252    	; 0x5f9a <FingerPS_searchFinger+0x304>
		_delay_ms(200);
	}
	else
	{
		operation_status = FingerPS_AuraError();
    5e9e:	0e 94 9b 24 	call	0x4936	; 0x4936 <FingerPS_AuraError>
    5ea2:	88 a3       	std	Y+32, r24	; 0x20
		*ret_pageid = 0;
    5ea4:	fe 01       	movw	r30, r28
    5ea6:	ec 5b       	subi	r30, 0xBC	; 188
    5ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    5eaa:	01 90       	ld	r0, Z+
    5eac:	f0 81       	ld	r31, Z
    5eae:	e0 2d       	mov	r30, r0
    5eb0:	11 82       	std	Z+1, r1	; 0x01
    5eb2:	10 82       	st	Z, r1
    5eb4:	80 e0       	ldi	r24, 0x00	; 0
    5eb6:	90 e0       	ldi	r25, 0x00	; 0
    5eb8:	a8 e4       	ldi	r26, 0x48	; 72
    5eba:	b3 e4       	ldi	r27, 0x43	; 67
    5ebc:	8b 87       	std	Y+11, r24	; 0x0b
    5ebe:	9c 87       	std	Y+12, r25	; 0x0c
    5ec0:	ad 87       	std	Y+13, r26	; 0x0d
    5ec2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ec4:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ec6:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ec8:	8d 85       	ldd	r24, Y+13	; 0x0d
    5eca:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ecc:	20 e0       	ldi	r18, 0x00	; 0
    5ece:	30 e0       	ldi	r19, 0x00	; 0
    5ed0:	4a e7       	ldi	r20, 0x7A	; 122
    5ed2:	55 e4       	ldi	r21, 0x45	; 69
    5ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ed8:	dc 01       	movw	r26, r24
    5eda:	cb 01       	movw	r24, r22
    5edc:	8f 83       	std	Y+7, r24	; 0x07
    5ede:	98 87       	std	Y+8, r25	; 0x08
    5ee0:	a9 87       	std	Y+9, r26	; 0x09
    5ee2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5ee4:	6f 81       	ldd	r22, Y+7	; 0x07
    5ee6:	78 85       	ldd	r23, Y+8	; 0x08
    5ee8:	89 85       	ldd	r24, Y+9	; 0x09
    5eea:	9a 85       	ldd	r25, Y+10	; 0x0a
    5eec:	20 e0       	ldi	r18, 0x00	; 0
    5eee:	30 e0       	ldi	r19, 0x00	; 0
    5ef0:	40 e8       	ldi	r20, 0x80	; 128
    5ef2:	5f e3       	ldi	r21, 0x3F	; 63
    5ef4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5ef8:	88 23       	and	r24, r24
    5efa:	2c f4       	brge	.+10     	; 0x5f06 <FingerPS_searchFinger+0x270>
		__ticks = 1;
    5efc:	81 e0       	ldi	r24, 0x01	; 1
    5efe:	90 e0       	ldi	r25, 0x00	; 0
    5f00:	9e 83       	std	Y+6, r25	; 0x06
    5f02:	8d 83       	std	Y+5, r24	; 0x05
    5f04:	3f c0       	rjmp	.+126    	; 0x5f84 <FingerPS_searchFinger+0x2ee>
	else if (__tmp > 65535)
    5f06:	6f 81       	ldd	r22, Y+7	; 0x07
    5f08:	78 85       	ldd	r23, Y+8	; 0x08
    5f0a:	89 85       	ldd	r24, Y+9	; 0x09
    5f0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f0e:	20 e0       	ldi	r18, 0x00	; 0
    5f10:	3f ef       	ldi	r19, 0xFF	; 255
    5f12:	4f e7       	ldi	r20, 0x7F	; 127
    5f14:	57 e4       	ldi	r21, 0x47	; 71
    5f16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5f1a:	18 16       	cp	r1, r24
    5f1c:	4c f5       	brge	.+82     	; 0x5f70 <FingerPS_searchFinger+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5f20:	7c 85       	ldd	r23, Y+12	; 0x0c
    5f22:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f24:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f26:	20 e0       	ldi	r18, 0x00	; 0
    5f28:	30 e0       	ldi	r19, 0x00	; 0
    5f2a:	40 e2       	ldi	r20, 0x20	; 32
    5f2c:	51 e4       	ldi	r21, 0x41	; 65
    5f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f32:	dc 01       	movw	r26, r24
    5f34:	cb 01       	movw	r24, r22
    5f36:	bc 01       	movw	r22, r24
    5f38:	cd 01       	movw	r24, r26
    5f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f3e:	dc 01       	movw	r26, r24
    5f40:	cb 01       	movw	r24, r22
    5f42:	9e 83       	std	Y+6, r25	; 0x06
    5f44:	8d 83       	std	Y+5, r24	; 0x05
    5f46:	0f c0       	rjmp	.+30     	; 0x5f66 <FingerPS_searchFinger+0x2d0>
    5f48:	80 e9       	ldi	r24, 0x90	; 144
    5f4a:	91 e0       	ldi	r25, 0x01	; 1
    5f4c:	9c 83       	std	Y+4, r25	; 0x04
    5f4e:	8b 83       	std	Y+3, r24	; 0x03
    5f50:	8b 81       	ldd	r24, Y+3	; 0x03
    5f52:	9c 81       	ldd	r25, Y+4	; 0x04
    5f54:	01 97       	sbiw	r24, 0x01	; 1
    5f56:	f1 f7       	brne	.-4      	; 0x5f54 <FingerPS_searchFinger+0x2be>
    5f58:	9c 83       	std	Y+4, r25	; 0x04
    5f5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    5f5e:	9e 81       	ldd	r25, Y+6	; 0x06
    5f60:	01 97       	sbiw	r24, 0x01	; 1
    5f62:	9e 83       	std	Y+6, r25	; 0x06
    5f64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f66:	8d 81       	ldd	r24, Y+5	; 0x05
    5f68:	9e 81       	ldd	r25, Y+6	; 0x06
    5f6a:	00 97       	sbiw	r24, 0x00	; 0
    5f6c:	69 f7       	brne	.-38     	; 0x5f48 <FingerPS_searchFinger+0x2b2>
    5f6e:	14 c0       	rjmp	.+40     	; 0x5f98 <FingerPS_searchFinger+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f70:	6f 81       	ldd	r22, Y+7	; 0x07
    5f72:	78 85       	ldd	r23, Y+8	; 0x08
    5f74:	89 85       	ldd	r24, Y+9	; 0x09
    5f76:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f7c:	dc 01       	movw	r26, r24
    5f7e:	cb 01       	movw	r24, r22
    5f80:	9e 83       	std	Y+6, r25	; 0x06
    5f82:	8d 83       	std	Y+5, r24	; 0x05
    5f84:	8d 81       	ldd	r24, Y+5	; 0x05
    5f86:	9e 81       	ldd	r25, Y+6	; 0x06
    5f88:	9a 83       	std	Y+2, r25	; 0x02
    5f8a:	89 83       	std	Y+1, r24	; 0x01
    5f8c:	89 81       	ldd	r24, Y+1	; 0x01
    5f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    5f90:	01 97       	sbiw	r24, 0x01	; 1
    5f92:	f1 f7       	brne	.-4      	; 0x5f90 <FingerPS_searchFinger+0x2fa>
    5f94:	9a 83       	std	Y+2, r25	; 0x02
    5f96:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
		operation_status = ERROR;
    5f98:	18 a2       	std	Y+32, r1	; 0x20
	}
	operation_status &= FingerPS_AuraNormal();
    5f9a:	0e 94 8d 23 	call	0x471a	; 0x471a <FingerPS_AuraNormal>
    5f9e:	98 2f       	mov	r25, r24
    5fa0:	88 a1       	ldd	r24, Y+32	; 0x20
    5fa2:	89 23       	and	r24, r25
    5fa4:	88 a3       	std	Y+32, r24	; 0x20
	return operation_status;
    5fa6:	88 a1       	ldd	r24, Y+32	; 0x20
}
    5fa8:	c6 5b       	subi	r28, 0xB6	; 182
    5faa:	df 4f       	sbci	r29, 0xFF	; 255
    5fac:	0f b6       	in	r0, 0x3f	; 63
    5fae:	f8 94       	cli
    5fb0:	de bf       	out	0x3e, r29	; 62
    5fb2:	0f be       	out	0x3f, r0	; 63
    5fb4:	cd bf       	out	0x3d, r28	; 61
    5fb6:	cf 91       	pop	r28
    5fb8:	df 91       	pop	r29
    5fba:	08 95       	ret

00005fbc <FingerPS_Enrollment>:


u8 FingerPS_Enrollment(u8 page_id, u16 *ret_id)
{
    5fbc:	0f 93       	push	r16
    5fbe:	1f 93       	push	r17
    5fc0:	df 93       	push	r29
    5fc2:	cf 93       	push	r28
    5fc4:	cd b7       	in	r28, 0x3d	; 61
    5fc6:	de b7       	in	r29, 0x3e	; 62
    5fc8:	c2 59       	subi	r28, 0x92	; 146
    5fca:	d0 40       	sbci	r29, 0x00	; 0
    5fcc:	0f b6       	in	r0, 0x3f	; 63
    5fce:	f8 94       	cli
    5fd0:	de bf       	out	0x3e, r29	; 62
    5fd2:	0f be       	out	0x3f, r0	; 63
    5fd4:	cd bf       	out	0x3d, r28	; 61
    5fd6:	fe 01       	movw	r30, r28
    5fd8:	e0 57       	subi	r30, 0x70	; 112
    5fda:	ff 4f       	sbci	r31, 0xFF	; 255
    5fdc:	80 83       	st	Z, r24
    5fde:	fe 01       	movw	r30, r28
    5fe0:	ef 56       	subi	r30, 0x6F	; 111
    5fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    5fe4:	71 83       	std	Z+1, r23	; 0x01
    5fe6:	60 83       	st	Z, r22
	u8 fp_status = SUCCESS;
    5fe8:	fe 01       	movw	r30, r28
    5fea:	e1 57       	subi	r30, 0x71	; 113
    5fec:	ff 4f       	sbci	r31, 0xFF	; 255
    5fee:	81 e0       	ldi	r24, 0x01	; 1
    5ff0:	80 83       	st	Z, r24
	u16 searched_ID = 0;
    5ff2:	fe 01       	movw	r30, r28
    5ff4:	e3 57       	subi	r30, 0x73	; 115
    5ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ff8:	11 82       	std	Z+1, r1	; 0x01
    5ffa:	10 82       	st	Z, r1

	/* Search */
	fp_status &= FingerPS_genImg();
    5ffc:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <FingerPS_genImg>
    6000:	98 2f       	mov	r25, r24
    6002:	de 01       	movw	r26, r28
    6004:	a1 57       	subi	r26, 0x71	; 113
    6006:	bf 4f       	sbci	r27, 0xFF	; 255
    6008:	fe 01       	movw	r30, r28
    600a:	e1 57       	subi	r30, 0x71	; 113
    600c:	ff 4f       	sbci	r31, 0xFF	; 255
    600e:	80 81       	ld	r24, Z
    6010:	89 23       	and	r24, r25
    6012:	8c 93       	st	X, r24
    6014:	fe 01       	movw	r30, r28
    6016:	e7 57       	subi	r30, 0x77	; 119
    6018:	ff 4f       	sbci	r31, 0xFF	; 255
    601a:	80 e0       	ldi	r24, 0x00	; 0
    601c:	90 e0       	ldi	r25, 0x00	; 0
    601e:	a8 e4       	ldi	r26, 0x48	; 72
    6020:	b2 e4       	ldi	r27, 0x42	; 66
    6022:	80 83       	st	Z, r24
    6024:	91 83       	std	Z+1, r25	; 0x01
    6026:	a2 83       	std	Z+2, r26	; 0x02
    6028:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    602a:	8e 01       	movw	r16, r28
    602c:	0b 57       	subi	r16, 0x7B	; 123
    602e:	1f 4f       	sbci	r17, 0xFF	; 255
    6030:	fe 01       	movw	r30, r28
    6032:	e7 57       	subi	r30, 0x77	; 119
    6034:	ff 4f       	sbci	r31, 0xFF	; 255
    6036:	60 81       	ld	r22, Z
    6038:	71 81       	ldd	r23, Z+1	; 0x01
    603a:	82 81       	ldd	r24, Z+2	; 0x02
    603c:	93 81       	ldd	r25, Z+3	; 0x03
    603e:	20 e0       	ldi	r18, 0x00	; 0
    6040:	30 e0       	ldi	r19, 0x00	; 0
    6042:	4a e7       	ldi	r20, 0x7A	; 122
    6044:	55 e4       	ldi	r21, 0x45	; 69
    6046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    604a:	dc 01       	movw	r26, r24
    604c:	cb 01       	movw	r24, r22
    604e:	f8 01       	movw	r30, r16
    6050:	80 83       	st	Z, r24
    6052:	91 83       	std	Z+1, r25	; 0x01
    6054:	a2 83       	std	Z+2, r26	; 0x02
    6056:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6058:	fe 01       	movw	r30, r28
    605a:	eb 57       	subi	r30, 0x7B	; 123
    605c:	ff 4f       	sbci	r31, 0xFF	; 255
    605e:	60 81       	ld	r22, Z
    6060:	71 81       	ldd	r23, Z+1	; 0x01
    6062:	82 81       	ldd	r24, Z+2	; 0x02
    6064:	93 81       	ldd	r25, Z+3	; 0x03
    6066:	20 e0       	ldi	r18, 0x00	; 0
    6068:	30 e0       	ldi	r19, 0x00	; 0
    606a:	40 e8       	ldi	r20, 0x80	; 128
    606c:	5f e3       	ldi	r21, 0x3F	; 63
    606e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6072:	88 23       	and	r24, r24
    6074:	44 f4       	brge	.+16     	; 0x6086 <FingerPS_Enrollment+0xca>
		__ticks = 1;
    6076:	fe 01       	movw	r30, r28
    6078:	ed 57       	subi	r30, 0x7D	; 125
    607a:	ff 4f       	sbci	r31, 0xFF	; 255
    607c:	81 e0       	ldi	r24, 0x01	; 1
    607e:	90 e0       	ldi	r25, 0x00	; 0
    6080:	91 83       	std	Z+1, r25	; 0x01
    6082:	80 83       	st	Z, r24
    6084:	64 c0       	rjmp	.+200    	; 0x614e <FingerPS_Enrollment+0x192>
	else if (__tmp > 65535)
    6086:	fe 01       	movw	r30, r28
    6088:	eb 57       	subi	r30, 0x7B	; 123
    608a:	ff 4f       	sbci	r31, 0xFF	; 255
    608c:	60 81       	ld	r22, Z
    608e:	71 81       	ldd	r23, Z+1	; 0x01
    6090:	82 81       	ldd	r24, Z+2	; 0x02
    6092:	93 81       	ldd	r25, Z+3	; 0x03
    6094:	20 e0       	ldi	r18, 0x00	; 0
    6096:	3f ef       	ldi	r19, 0xFF	; 255
    6098:	4f e7       	ldi	r20, 0x7F	; 127
    609a:	57 e4       	ldi	r21, 0x47	; 71
    609c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    60a0:	18 16       	cp	r1, r24
    60a2:	0c f0       	brlt	.+2      	; 0x60a6 <FingerPS_Enrollment+0xea>
    60a4:	43 c0       	rjmp	.+134    	; 0x612c <FingerPS_Enrollment+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    60a6:	fe 01       	movw	r30, r28
    60a8:	e7 57       	subi	r30, 0x77	; 119
    60aa:	ff 4f       	sbci	r31, 0xFF	; 255
    60ac:	60 81       	ld	r22, Z
    60ae:	71 81       	ldd	r23, Z+1	; 0x01
    60b0:	82 81       	ldd	r24, Z+2	; 0x02
    60b2:	93 81       	ldd	r25, Z+3	; 0x03
    60b4:	20 e0       	ldi	r18, 0x00	; 0
    60b6:	30 e0       	ldi	r19, 0x00	; 0
    60b8:	40 e2       	ldi	r20, 0x20	; 32
    60ba:	51 e4       	ldi	r21, 0x41	; 65
    60bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60c0:	dc 01       	movw	r26, r24
    60c2:	cb 01       	movw	r24, r22
    60c4:	8e 01       	movw	r16, r28
    60c6:	0d 57       	subi	r16, 0x7D	; 125
    60c8:	1f 4f       	sbci	r17, 0xFF	; 255
    60ca:	bc 01       	movw	r22, r24
    60cc:	cd 01       	movw	r24, r26
    60ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60d2:	dc 01       	movw	r26, r24
    60d4:	cb 01       	movw	r24, r22
    60d6:	f8 01       	movw	r30, r16
    60d8:	91 83       	std	Z+1, r25	; 0x01
    60da:	80 83       	st	Z, r24
    60dc:	1f c0       	rjmp	.+62     	; 0x611c <FingerPS_Enrollment+0x160>
    60de:	fe 01       	movw	r30, r28
    60e0:	ef 57       	subi	r30, 0x7F	; 127
    60e2:	ff 4f       	sbci	r31, 0xFF	; 255
    60e4:	80 e9       	ldi	r24, 0x90	; 144
    60e6:	91 e0       	ldi	r25, 0x01	; 1
    60e8:	91 83       	std	Z+1, r25	; 0x01
    60ea:	80 83       	st	Z, r24
    60ec:	fe 01       	movw	r30, r28
    60ee:	ef 57       	subi	r30, 0x7F	; 127
    60f0:	ff 4f       	sbci	r31, 0xFF	; 255
    60f2:	80 81       	ld	r24, Z
    60f4:	91 81       	ldd	r25, Z+1	; 0x01
    60f6:	01 97       	sbiw	r24, 0x01	; 1
    60f8:	f1 f7       	brne	.-4      	; 0x60f6 <FingerPS_Enrollment+0x13a>
    60fa:	fe 01       	movw	r30, r28
    60fc:	ef 57       	subi	r30, 0x7F	; 127
    60fe:	ff 4f       	sbci	r31, 0xFF	; 255
    6100:	91 83       	std	Z+1, r25	; 0x01
    6102:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6104:	de 01       	movw	r26, r28
    6106:	ad 57       	subi	r26, 0x7D	; 125
    6108:	bf 4f       	sbci	r27, 0xFF	; 255
    610a:	fe 01       	movw	r30, r28
    610c:	ed 57       	subi	r30, 0x7D	; 125
    610e:	ff 4f       	sbci	r31, 0xFF	; 255
    6110:	80 81       	ld	r24, Z
    6112:	91 81       	ldd	r25, Z+1	; 0x01
    6114:	01 97       	sbiw	r24, 0x01	; 1
    6116:	11 96       	adiw	r26, 0x01	; 1
    6118:	9c 93       	st	X, r25
    611a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    611c:	fe 01       	movw	r30, r28
    611e:	ed 57       	subi	r30, 0x7D	; 125
    6120:	ff 4f       	sbci	r31, 0xFF	; 255
    6122:	80 81       	ld	r24, Z
    6124:	91 81       	ldd	r25, Z+1	; 0x01
    6126:	00 97       	sbiw	r24, 0x00	; 0
    6128:	d1 f6       	brne	.-76     	; 0x60de <FingerPS_Enrollment+0x122>
    612a:	27 c0       	rjmp	.+78     	; 0x617a <FingerPS_Enrollment+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    612c:	8e 01       	movw	r16, r28
    612e:	0d 57       	subi	r16, 0x7D	; 125
    6130:	1f 4f       	sbci	r17, 0xFF	; 255
    6132:	fe 01       	movw	r30, r28
    6134:	eb 57       	subi	r30, 0x7B	; 123
    6136:	ff 4f       	sbci	r31, 0xFF	; 255
    6138:	60 81       	ld	r22, Z
    613a:	71 81       	ldd	r23, Z+1	; 0x01
    613c:	82 81       	ldd	r24, Z+2	; 0x02
    613e:	93 81       	ldd	r25, Z+3	; 0x03
    6140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6144:	dc 01       	movw	r26, r24
    6146:	cb 01       	movw	r24, r22
    6148:	f8 01       	movw	r30, r16
    614a:	91 83       	std	Z+1, r25	; 0x01
    614c:	80 83       	st	Z, r24
    614e:	de 01       	movw	r26, r28
    6150:	a1 58       	subi	r26, 0x81	; 129
    6152:	bf 4f       	sbci	r27, 0xFF	; 255
    6154:	fe 01       	movw	r30, r28
    6156:	ed 57       	subi	r30, 0x7D	; 125
    6158:	ff 4f       	sbci	r31, 0xFF	; 255
    615a:	80 81       	ld	r24, Z
    615c:	91 81       	ldd	r25, Z+1	; 0x01
    615e:	8d 93       	st	X+, r24
    6160:	9c 93       	st	X, r25
    6162:	fe 01       	movw	r30, r28
    6164:	e1 58       	subi	r30, 0x81	; 129
    6166:	ff 4f       	sbci	r31, 0xFF	; 255
    6168:	80 81       	ld	r24, Z
    616a:	91 81       	ldd	r25, Z+1	; 0x01
    616c:	01 97       	sbiw	r24, 0x01	; 1
    616e:	f1 f7       	brne	.-4      	; 0x616c <FingerPS_Enrollment+0x1b0>
    6170:	fe 01       	movw	r30, r28
    6172:	e1 58       	subi	r30, 0x81	; 129
    6174:	ff 4f       	sbci	r31, 0xFF	; 255
    6176:	91 83       	std	Z+1, r25	; 0x01
    6178:	80 83       	st	Z, r24
	_delay_ms(50);
	fp_status &= FingerPS_convertImg2CharFile(0x01);
    617a:	81 e0       	ldi	r24, 0x01	; 1
    617c:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <FingerPS_convertImg2CharFile>
    6180:	98 2f       	mov	r25, r24
    6182:	de 01       	movw	r26, r28
    6184:	a1 57       	subi	r26, 0x71	; 113
    6186:	bf 4f       	sbci	r27, 0xFF	; 255
    6188:	fe 01       	movw	r30, r28
    618a:	e1 57       	subi	r30, 0x71	; 113
    618c:	ff 4f       	sbci	r31, 0xFF	; 255
    618e:	80 81       	ld	r24, Z
    6190:	89 23       	and	r24, r25
    6192:	8c 93       	st	X, r24
    6194:	fe 01       	movw	r30, r28
    6196:	e5 58       	subi	r30, 0x85	; 133
    6198:	ff 4f       	sbci	r31, 0xFF	; 255
    619a:	80 e0       	ldi	r24, 0x00	; 0
    619c:	90 e0       	ldi	r25, 0x00	; 0
    619e:	a8 e4       	ldi	r26, 0x48	; 72
    61a0:	b2 e4       	ldi	r27, 0x42	; 66
    61a2:	80 83       	st	Z, r24
    61a4:	91 83       	std	Z+1, r25	; 0x01
    61a6:	a2 83       	std	Z+2, r26	; 0x02
    61a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    61aa:	8e 01       	movw	r16, r28
    61ac:	09 58       	subi	r16, 0x89	; 137
    61ae:	1f 4f       	sbci	r17, 0xFF	; 255
    61b0:	fe 01       	movw	r30, r28
    61b2:	e5 58       	subi	r30, 0x85	; 133
    61b4:	ff 4f       	sbci	r31, 0xFF	; 255
    61b6:	60 81       	ld	r22, Z
    61b8:	71 81       	ldd	r23, Z+1	; 0x01
    61ba:	82 81       	ldd	r24, Z+2	; 0x02
    61bc:	93 81       	ldd	r25, Z+3	; 0x03
    61be:	20 e0       	ldi	r18, 0x00	; 0
    61c0:	30 e0       	ldi	r19, 0x00	; 0
    61c2:	4a e7       	ldi	r20, 0x7A	; 122
    61c4:	55 e4       	ldi	r21, 0x45	; 69
    61c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    61ca:	dc 01       	movw	r26, r24
    61cc:	cb 01       	movw	r24, r22
    61ce:	f8 01       	movw	r30, r16
    61d0:	80 83       	st	Z, r24
    61d2:	91 83       	std	Z+1, r25	; 0x01
    61d4:	a2 83       	std	Z+2, r26	; 0x02
    61d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    61d8:	fe 01       	movw	r30, r28
    61da:	e9 58       	subi	r30, 0x89	; 137
    61dc:	ff 4f       	sbci	r31, 0xFF	; 255
    61de:	60 81       	ld	r22, Z
    61e0:	71 81       	ldd	r23, Z+1	; 0x01
    61e2:	82 81       	ldd	r24, Z+2	; 0x02
    61e4:	93 81       	ldd	r25, Z+3	; 0x03
    61e6:	20 e0       	ldi	r18, 0x00	; 0
    61e8:	30 e0       	ldi	r19, 0x00	; 0
    61ea:	40 e8       	ldi	r20, 0x80	; 128
    61ec:	5f e3       	ldi	r21, 0x3F	; 63
    61ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    61f2:	88 23       	and	r24, r24
    61f4:	44 f4       	brge	.+16     	; 0x6206 <FingerPS_Enrollment+0x24a>
		__ticks = 1;
    61f6:	fe 01       	movw	r30, r28
    61f8:	eb 58       	subi	r30, 0x8B	; 139
    61fa:	ff 4f       	sbci	r31, 0xFF	; 255
    61fc:	81 e0       	ldi	r24, 0x01	; 1
    61fe:	90 e0       	ldi	r25, 0x00	; 0
    6200:	91 83       	std	Z+1, r25	; 0x01
    6202:	80 83       	st	Z, r24
    6204:	64 c0       	rjmp	.+200    	; 0x62ce <FingerPS_Enrollment+0x312>
	else if (__tmp > 65535)
    6206:	fe 01       	movw	r30, r28
    6208:	e9 58       	subi	r30, 0x89	; 137
    620a:	ff 4f       	sbci	r31, 0xFF	; 255
    620c:	60 81       	ld	r22, Z
    620e:	71 81       	ldd	r23, Z+1	; 0x01
    6210:	82 81       	ldd	r24, Z+2	; 0x02
    6212:	93 81       	ldd	r25, Z+3	; 0x03
    6214:	20 e0       	ldi	r18, 0x00	; 0
    6216:	3f ef       	ldi	r19, 0xFF	; 255
    6218:	4f e7       	ldi	r20, 0x7F	; 127
    621a:	57 e4       	ldi	r21, 0x47	; 71
    621c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6220:	18 16       	cp	r1, r24
    6222:	0c f0       	brlt	.+2      	; 0x6226 <FingerPS_Enrollment+0x26a>
    6224:	43 c0       	rjmp	.+134    	; 0x62ac <FingerPS_Enrollment+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6226:	fe 01       	movw	r30, r28
    6228:	e5 58       	subi	r30, 0x85	; 133
    622a:	ff 4f       	sbci	r31, 0xFF	; 255
    622c:	60 81       	ld	r22, Z
    622e:	71 81       	ldd	r23, Z+1	; 0x01
    6230:	82 81       	ldd	r24, Z+2	; 0x02
    6232:	93 81       	ldd	r25, Z+3	; 0x03
    6234:	20 e0       	ldi	r18, 0x00	; 0
    6236:	30 e0       	ldi	r19, 0x00	; 0
    6238:	40 e2       	ldi	r20, 0x20	; 32
    623a:	51 e4       	ldi	r21, 0x41	; 65
    623c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6240:	dc 01       	movw	r26, r24
    6242:	cb 01       	movw	r24, r22
    6244:	8e 01       	movw	r16, r28
    6246:	0b 58       	subi	r16, 0x8B	; 139
    6248:	1f 4f       	sbci	r17, 0xFF	; 255
    624a:	bc 01       	movw	r22, r24
    624c:	cd 01       	movw	r24, r26
    624e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6252:	dc 01       	movw	r26, r24
    6254:	cb 01       	movw	r24, r22
    6256:	f8 01       	movw	r30, r16
    6258:	91 83       	std	Z+1, r25	; 0x01
    625a:	80 83       	st	Z, r24
    625c:	1f c0       	rjmp	.+62     	; 0x629c <FingerPS_Enrollment+0x2e0>
    625e:	fe 01       	movw	r30, r28
    6260:	ed 58       	subi	r30, 0x8D	; 141
    6262:	ff 4f       	sbci	r31, 0xFF	; 255
    6264:	80 e9       	ldi	r24, 0x90	; 144
    6266:	91 e0       	ldi	r25, 0x01	; 1
    6268:	91 83       	std	Z+1, r25	; 0x01
    626a:	80 83       	st	Z, r24
    626c:	fe 01       	movw	r30, r28
    626e:	ed 58       	subi	r30, 0x8D	; 141
    6270:	ff 4f       	sbci	r31, 0xFF	; 255
    6272:	80 81       	ld	r24, Z
    6274:	91 81       	ldd	r25, Z+1	; 0x01
    6276:	01 97       	sbiw	r24, 0x01	; 1
    6278:	f1 f7       	brne	.-4      	; 0x6276 <FingerPS_Enrollment+0x2ba>
    627a:	fe 01       	movw	r30, r28
    627c:	ed 58       	subi	r30, 0x8D	; 141
    627e:	ff 4f       	sbci	r31, 0xFF	; 255
    6280:	91 83       	std	Z+1, r25	; 0x01
    6282:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6284:	de 01       	movw	r26, r28
    6286:	ab 58       	subi	r26, 0x8B	; 139
    6288:	bf 4f       	sbci	r27, 0xFF	; 255
    628a:	fe 01       	movw	r30, r28
    628c:	eb 58       	subi	r30, 0x8B	; 139
    628e:	ff 4f       	sbci	r31, 0xFF	; 255
    6290:	80 81       	ld	r24, Z
    6292:	91 81       	ldd	r25, Z+1	; 0x01
    6294:	01 97       	sbiw	r24, 0x01	; 1
    6296:	11 96       	adiw	r26, 0x01	; 1
    6298:	9c 93       	st	X, r25
    629a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    629c:	fe 01       	movw	r30, r28
    629e:	eb 58       	subi	r30, 0x8B	; 139
    62a0:	ff 4f       	sbci	r31, 0xFF	; 255
    62a2:	80 81       	ld	r24, Z
    62a4:	91 81       	ldd	r25, Z+1	; 0x01
    62a6:	00 97       	sbiw	r24, 0x00	; 0
    62a8:	d1 f6       	brne	.-76     	; 0x625e <FingerPS_Enrollment+0x2a2>
    62aa:	27 c0       	rjmp	.+78     	; 0x62fa <FingerPS_Enrollment+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    62ac:	8e 01       	movw	r16, r28
    62ae:	0b 58       	subi	r16, 0x8B	; 139
    62b0:	1f 4f       	sbci	r17, 0xFF	; 255
    62b2:	fe 01       	movw	r30, r28
    62b4:	e9 58       	subi	r30, 0x89	; 137
    62b6:	ff 4f       	sbci	r31, 0xFF	; 255
    62b8:	60 81       	ld	r22, Z
    62ba:	71 81       	ldd	r23, Z+1	; 0x01
    62bc:	82 81       	ldd	r24, Z+2	; 0x02
    62be:	93 81       	ldd	r25, Z+3	; 0x03
    62c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62c4:	dc 01       	movw	r26, r24
    62c6:	cb 01       	movw	r24, r22
    62c8:	f8 01       	movw	r30, r16
    62ca:	91 83       	std	Z+1, r25	; 0x01
    62cc:	80 83       	st	Z, r24
    62ce:	de 01       	movw	r26, r28
    62d0:	af 58       	subi	r26, 0x8F	; 143
    62d2:	bf 4f       	sbci	r27, 0xFF	; 255
    62d4:	fe 01       	movw	r30, r28
    62d6:	eb 58       	subi	r30, 0x8B	; 139
    62d8:	ff 4f       	sbci	r31, 0xFF	; 255
    62da:	80 81       	ld	r24, Z
    62dc:	91 81       	ldd	r25, Z+1	; 0x01
    62de:	8d 93       	st	X+, r24
    62e0:	9c 93       	st	X, r25
    62e2:	fe 01       	movw	r30, r28
    62e4:	ef 58       	subi	r30, 0x8F	; 143
    62e6:	ff 4f       	sbci	r31, 0xFF	; 255
    62e8:	80 81       	ld	r24, Z
    62ea:	91 81       	ldd	r25, Z+1	; 0x01
    62ec:	01 97       	sbiw	r24, 0x01	; 1
    62ee:	f1 f7       	brne	.-4      	; 0x62ec <FingerPS_Enrollment+0x330>
    62f0:	fe 01       	movw	r30, r28
    62f2:	ef 58       	subi	r30, 0x8F	; 143
    62f4:	ff 4f       	sbci	r31, 0xFF	; 255
    62f6:	91 83       	std	Z+1, r25	; 0x01
    62f8:	80 83       	st	Z, r24
	_delay_ms(50);
	fp_status &= FingerPS_genImg();
    62fa:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <FingerPS_genImg>
    62fe:	98 2f       	mov	r25, r24
    6300:	de 01       	movw	r26, r28
    6302:	a1 57       	subi	r26, 0x71	; 113
    6304:	bf 4f       	sbci	r27, 0xFF	; 255
    6306:	fe 01       	movw	r30, r28
    6308:	e1 57       	subi	r30, 0x71	; 113
    630a:	ff 4f       	sbci	r31, 0xFF	; 255
    630c:	80 81       	ld	r24, Z
    630e:	89 23       	and	r24, r25
    6310:	8c 93       	st	X, r24
    6312:	fe 01       	movw	r30, r28
    6314:	e3 59       	subi	r30, 0x93	; 147
    6316:	ff 4f       	sbci	r31, 0xFF	; 255
    6318:	80 e0       	ldi	r24, 0x00	; 0
    631a:	90 e0       	ldi	r25, 0x00	; 0
    631c:	a8 e4       	ldi	r26, 0x48	; 72
    631e:	b2 e4       	ldi	r27, 0x42	; 66
    6320:	80 83       	st	Z, r24
    6322:	91 83       	std	Z+1, r25	; 0x01
    6324:	a2 83       	std	Z+2, r26	; 0x02
    6326:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6328:	8e 01       	movw	r16, r28
    632a:	07 59       	subi	r16, 0x97	; 151
    632c:	1f 4f       	sbci	r17, 0xFF	; 255
    632e:	fe 01       	movw	r30, r28
    6330:	e3 59       	subi	r30, 0x93	; 147
    6332:	ff 4f       	sbci	r31, 0xFF	; 255
    6334:	60 81       	ld	r22, Z
    6336:	71 81       	ldd	r23, Z+1	; 0x01
    6338:	82 81       	ldd	r24, Z+2	; 0x02
    633a:	93 81       	ldd	r25, Z+3	; 0x03
    633c:	20 e0       	ldi	r18, 0x00	; 0
    633e:	30 e0       	ldi	r19, 0x00	; 0
    6340:	4a e7       	ldi	r20, 0x7A	; 122
    6342:	55 e4       	ldi	r21, 0x45	; 69
    6344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6348:	dc 01       	movw	r26, r24
    634a:	cb 01       	movw	r24, r22
    634c:	f8 01       	movw	r30, r16
    634e:	80 83       	st	Z, r24
    6350:	91 83       	std	Z+1, r25	; 0x01
    6352:	a2 83       	std	Z+2, r26	; 0x02
    6354:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6356:	fe 01       	movw	r30, r28
    6358:	e7 59       	subi	r30, 0x97	; 151
    635a:	ff 4f       	sbci	r31, 0xFF	; 255
    635c:	60 81       	ld	r22, Z
    635e:	71 81       	ldd	r23, Z+1	; 0x01
    6360:	82 81       	ldd	r24, Z+2	; 0x02
    6362:	93 81       	ldd	r25, Z+3	; 0x03
    6364:	20 e0       	ldi	r18, 0x00	; 0
    6366:	30 e0       	ldi	r19, 0x00	; 0
    6368:	40 e8       	ldi	r20, 0x80	; 128
    636a:	5f e3       	ldi	r21, 0x3F	; 63
    636c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6370:	88 23       	and	r24, r24
    6372:	44 f4       	brge	.+16     	; 0x6384 <FingerPS_Enrollment+0x3c8>
		__ticks = 1;
    6374:	fe 01       	movw	r30, r28
    6376:	e9 59       	subi	r30, 0x99	; 153
    6378:	ff 4f       	sbci	r31, 0xFF	; 255
    637a:	81 e0       	ldi	r24, 0x01	; 1
    637c:	90 e0       	ldi	r25, 0x00	; 0
    637e:	91 83       	std	Z+1, r25	; 0x01
    6380:	80 83       	st	Z, r24
    6382:	64 c0       	rjmp	.+200    	; 0x644c <FingerPS_Enrollment+0x490>
	else if (__tmp > 65535)
    6384:	fe 01       	movw	r30, r28
    6386:	e7 59       	subi	r30, 0x97	; 151
    6388:	ff 4f       	sbci	r31, 0xFF	; 255
    638a:	60 81       	ld	r22, Z
    638c:	71 81       	ldd	r23, Z+1	; 0x01
    638e:	82 81       	ldd	r24, Z+2	; 0x02
    6390:	93 81       	ldd	r25, Z+3	; 0x03
    6392:	20 e0       	ldi	r18, 0x00	; 0
    6394:	3f ef       	ldi	r19, 0xFF	; 255
    6396:	4f e7       	ldi	r20, 0x7F	; 127
    6398:	57 e4       	ldi	r21, 0x47	; 71
    639a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    639e:	18 16       	cp	r1, r24
    63a0:	0c f0       	brlt	.+2      	; 0x63a4 <FingerPS_Enrollment+0x3e8>
    63a2:	43 c0       	rjmp	.+134    	; 0x642a <FingerPS_Enrollment+0x46e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    63a4:	fe 01       	movw	r30, r28
    63a6:	e3 59       	subi	r30, 0x93	; 147
    63a8:	ff 4f       	sbci	r31, 0xFF	; 255
    63aa:	60 81       	ld	r22, Z
    63ac:	71 81       	ldd	r23, Z+1	; 0x01
    63ae:	82 81       	ldd	r24, Z+2	; 0x02
    63b0:	93 81       	ldd	r25, Z+3	; 0x03
    63b2:	20 e0       	ldi	r18, 0x00	; 0
    63b4:	30 e0       	ldi	r19, 0x00	; 0
    63b6:	40 e2       	ldi	r20, 0x20	; 32
    63b8:	51 e4       	ldi	r21, 0x41	; 65
    63ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    63be:	dc 01       	movw	r26, r24
    63c0:	cb 01       	movw	r24, r22
    63c2:	8e 01       	movw	r16, r28
    63c4:	09 59       	subi	r16, 0x99	; 153
    63c6:	1f 4f       	sbci	r17, 0xFF	; 255
    63c8:	bc 01       	movw	r22, r24
    63ca:	cd 01       	movw	r24, r26
    63cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63d0:	dc 01       	movw	r26, r24
    63d2:	cb 01       	movw	r24, r22
    63d4:	f8 01       	movw	r30, r16
    63d6:	91 83       	std	Z+1, r25	; 0x01
    63d8:	80 83       	st	Z, r24
    63da:	1f c0       	rjmp	.+62     	; 0x641a <FingerPS_Enrollment+0x45e>
    63dc:	fe 01       	movw	r30, r28
    63de:	eb 59       	subi	r30, 0x9B	; 155
    63e0:	ff 4f       	sbci	r31, 0xFF	; 255
    63e2:	80 e9       	ldi	r24, 0x90	; 144
    63e4:	91 e0       	ldi	r25, 0x01	; 1
    63e6:	91 83       	std	Z+1, r25	; 0x01
    63e8:	80 83       	st	Z, r24
    63ea:	fe 01       	movw	r30, r28
    63ec:	eb 59       	subi	r30, 0x9B	; 155
    63ee:	ff 4f       	sbci	r31, 0xFF	; 255
    63f0:	80 81       	ld	r24, Z
    63f2:	91 81       	ldd	r25, Z+1	; 0x01
    63f4:	01 97       	sbiw	r24, 0x01	; 1
    63f6:	f1 f7       	brne	.-4      	; 0x63f4 <FingerPS_Enrollment+0x438>
    63f8:	fe 01       	movw	r30, r28
    63fa:	eb 59       	subi	r30, 0x9B	; 155
    63fc:	ff 4f       	sbci	r31, 0xFF	; 255
    63fe:	91 83       	std	Z+1, r25	; 0x01
    6400:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6402:	de 01       	movw	r26, r28
    6404:	a9 59       	subi	r26, 0x99	; 153
    6406:	bf 4f       	sbci	r27, 0xFF	; 255
    6408:	fe 01       	movw	r30, r28
    640a:	e9 59       	subi	r30, 0x99	; 153
    640c:	ff 4f       	sbci	r31, 0xFF	; 255
    640e:	80 81       	ld	r24, Z
    6410:	91 81       	ldd	r25, Z+1	; 0x01
    6412:	01 97       	sbiw	r24, 0x01	; 1
    6414:	11 96       	adiw	r26, 0x01	; 1
    6416:	9c 93       	st	X, r25
    6418:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    641a:	fe 01       	movw	r30, r28
    641c:	e9 59       	subi	r30, 0x99	; 153
    641e:	ff 4f       	sbci	r31, 0xFF	; 255
    6420:	80 81       	ld	r24, Z
    6422:	91 81       	ldd	r25, Z+1	; 0x01
    6424:	00 97       	sbiw	r24, 0x00	; 0
    6426:	d1 f6       	brne	.-76     	; 0x63dc <FingerPS_Enrollment+0x420>
    6428:	27 c0       	rjmp	.+78     	; 0x6478 <FingerPS_Enrollment+0x4bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    642a:	8e 01       	movw	r16, r28
    642c:	09 59       	subi	r16, 0x99	; 153
    642e:	1f 4f       	sbci	r17, 0xFF	; 255
    6430:	fe 01       	movw	r30, r28
    6432:	e7 59       	subi	r30, 0x97	; 151
    6434:	ff 4f       	sbci	r31, 0xFF	; 255
    6436:	60 81       	ld	r22, Z
    6438:	71 81       	ldd	r23, Z+1	; 0x01
    643a:	82 81       	ldd	r24, Z+2	; 0x02
    643c:	93 81       	ldd	r25, Z+3	; 0x03
    643e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6442:	dc 01       	movw	r26, r24
    6444:	cb 01       	movw	r24, r22
    6446:	f8 01       	movw	r30, r16
    6448:	91 83       	std	Z+1, r25	; 0x01
    644a:	80 83       	st	Z, r24
    644c:	de 01       	movw	r26, r28
    644e:	ad 59       	subi	r26, 0x9D	; 157
    6450:	bf 4f       	sbci	r27, 0xFF	; 255
    6452:	fe 01       	movw	r30, r28
    6454:	e9 59       	subi	r30, 0x99	; 153
    6456:	ff 4f       	sbci	r31, 0xFF	; 255
    6458:	80 81       	ld	r24, Z
    645a:	91 81       	ldd	r25, Z+1	; 0x01
    645c:	8d 93       	st	X+, r24
    645e:	9c 93       	st	X, r25
    6460:	fe 01       	movw	r30, r28
    6462:	ed 59       	subi	r30, 0x9D	; 157
    6464:	ff 4f       	sbci	r31, 0xFF	; 255
    6466:	80 81       	ld	r24, Z
    6468:	91 81       	ldd	r25, Z+1	; 0x01
    646a:	01 97       	sbiw	r24, 0x01	; 1
    646c:	f1 f7       	brne	.-4      	; 0x646a <FingerPS_Enrollment+0x4ae>
    646e:	fe 01       	movw	r30, r28
    6470:	ed 59       	subi	r30, 0x9D	; 157
    6472:	ff 4f       	sbci	r31, 0xFF	; 255
    6474:	91 83       	std	Z+1, r25	; 0x01
    6476:	80 83       	st	Z, r24
	_delay_ms(50);
	fp_status &= FingerPS_convertImg2CharFile(0x02);
    6478:	82 e0       	ldi	r24, 0x02	; 2
    647a:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <FingerPS_convertImg2CharFile>
    647e:	98 2f       	mov	r25, r24
    6480:	de 01       	movw	r26, r28
    6482:	a1 57       	subi	r26, 0x71	; 113
    6484:	bf 4f       	sbci	r27, 0xFF	; 255
    6486:	fe 01       	movw	r30, r28
    6488:	e1 57       	subi	r30, 0x71	; 113
    648a:	ff 4f       	sbci	r31, 0xFF	; 255
    648c:	80 81       	ld	r24, Z
    648e:	89 23       	and	r24, r25
    6490:	8c 93       	st	X, r24
    6492:	fe 01       	movw	r30, r28
    6494:	e1 5a       	subi	r30, 0xA1	; 161
    6496:	ff 4f       	sbci	r31, 0xFF	; 255
    6498:	80 e0       	ldi	r24, 0x00	; 0
    649a:	90 e0       	ldi	r25, 0x00	; 0
    649c:	a8 e4       	ldi	r26, 0x48	; 72
    649e:	b2 e4       	ldi	r27, 0x42	; 66
    64a0:	80 83       	st	Z, r24
    64a2:	91 83       	std	Z+1, r25	; 0x01
    64a4:	a2 83       	std	Z+2, r26	; 0x02
    64a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    64a8:	8e 01       	movw	r16, r28
    64aa:	05 5a       	subi	r16, 0xA5	; 165
    64ac:	1f 4f       	sbci	r17, 0xFF	; 255
    64ae:	fe 01       	movw	r30, r28
    64b0:	e1 5a       	subi	r30, 0xA1	; 161
    64b2:	ff 4f       	sbci	r31, 0xFF	; 255
    64b4:	60 81       	ld	r22, Z
    64b6:	71 81       	ldd	r23, Z+1	; 0x01
    64b8:	82 81       	ldd	r24, Z+2	; 0x02
    64ba:	93 81       	ldd	r25, Z+3	; 0x03
    64bc:	20 e0       	ldi	r18, 0x00	; 0
    64be:	30 e0       	ldi	r19, 0x00	; 0
    64c0:	4a e7       	ldi	r20, 0x7A	; 122
    64c2:	55 e4       	ldi	r21, 0x45	; 69
    64c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    64c8:	dc 01       	movw	r26, r24
    64ca:	cb 01       	movw	r24, r22
    64cc:	f8 01       	movw	r30, r16
    64ce:	80 83       	st	Z, r24
    64d0:	91 83       	std	Z+1, r25	; 0x01
    64d2:	a2 83       	std	Z+2, r26	; 0x02
    64d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    64d6:	fe 01       	movw	r30, r28
    64d8:	e5 5a       	subi	r30, 0xA5	; 165
    64da:	ff 4f       	sbci	r31, 0xFF	; 255
    64dc:	60 81       	ld	r22, Z
    64de:	71 81       	ldd	r23, Z+1	; 0x01
    64e0:	82 81       	ldd	r24, Z+2	; 0x02
    64e2:	93 81       	ldd	r25, Z+3	; 0x03
    64e4:	20 e0       	ldi	r18, 0x00	; 0
    64e6:	30 e0       	ldi	r19, 0x00	; 0
    64e8:	40 e8       	ldi	r20, 0x80	; 128
    64ea:	5f e3       	ldi	r21, 0x3F	; 63
    64ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    64f0:	88 23       	and	r24, r24
    64f2:	44 f4       	brge	.+16     	; 0x6504 <FingerPS_Enrollment+0x548>
		__ticks = 1;
    64f4:	fe 01       	movw	r30, r28
    64f6:	e7 5a       	subi	r30, 0xA7	; 167
    64f8:	ff 4f       	sbci	r31, 0xFF	; 255
    64fa:	81 e0       	ldi	r24, 0x01	; 1
    64fc:	90 e0       	ldi	r25, 0x00	; 0
    64fe:	91 83       	std	Z+1, r25	; 0x01
    6500:	80 83       	st	Z, r24
    6502:	64 c0       	rjmp	.+200    	; 0x65cc <FingerPS_Enrollment+0x610>
	else if (__tmp > 65535)
    6504:	fe 01       	movw	r30, r28
    6506:	e5 5a       	subi	r30, 0xA5	; 165
    6508:	ff 4f       	sbci	r31, 0xFF	; 255
    650a:	60 81       	ld	r22, Z
    650c:	71 81       	ldd	r23, Z+1	; 0x01
    650e:	82 81       	ldd	r24, Z+2	; 0x02
    6510:	93 81       	ldd	r25, Z+3	; 0x03
    6512:	20 e0       	ldi	r18, 0x00	; 0
    6514:	3f ef       	ldi	r19, 0xFF	; 255
    6516:	4f e7       	ldi	r20, 0x7F	; 127
    6518:	57 e4       	ldi	r21, 0x47	; 71
    651a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    651e:	18 16       	cp	r1, r24
    6520:	0c f0       	brlt	.+2      	; 0x6524 <FingerPS_Enrollment+0x568>
    6522:	43 c0       	rjmp	.+134    	; 0x65aa <FingerPS_Enrollment+0x5ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6524:	fe 01       	movw	r30, r28
    6526:	e1 5a       	subi	r30, 0xA1	; 161
    6528:	ff 4f       	sbci	r31, 0xFF	; 255
    652a:	60 81       	ld	r22, Z
    652c:	71 81       	ldd	r23, Z+1	; 0x01
    652e:	82 81       	ldd	r24, Z+2	; 0x02
    6530:	93 81       	ldd	r25, Z+3	; 0x03
    6532:	20 e0       	ldi	r18, 0x00	; 0
    6534:	30 e0       	ldi	r19, 0x00	; 0
    6536:	40 e2       	ldi	r20, 0x20	; 32
    6538:	51 e4       	ldi	r21, 0x41	; 65
    653a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    653e:	dc 01       	movw	r26, r24
    6540:	cb 01       	movw	r24, r22
    6542:	8e 01       	movw	r16, r28
    6544:	07 5a       	subi	r16, 0xA7	; 167
    6546:	1f 4f       	sbci	r17, 0xFF	; 255
    6548:	bc 01       	movw	r22, r24
    654a:	cd 01       	movw	r24, r26
    654c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6550:	dc 01       	movw	r26, r24
    6552:	cb 01       	movw	r24, r22
    6554:	f8 01       	movw	r30, r16
    6556:	91 83       	std	Z+1, r25	; 0x01
    6558:	80 83       	st	Z, r24
    655a:	1f c0       	rjmp	.+62     	; 0x659a <FingerPS_Enrollment+0x5de>
    655c:	fe 01       	movw	r30, r28
    655e:	e9 5a       	subi	r30, 0xA9	; 169
    6560:	ff 4f       	sbci	r31, 0xFF	; 255
    6562:	80 e9       	ldi	r24, 0x90	; 144
    6564:	91 e0       	ldi	r25, 0x01	; 1
    6566:	91 83       	std	Z+1, r25	; 0x01
    6568:	80 83       	st	Z, r24
    656a:	fe 01       	movw	r30, r28
    656c:	e9 5a       	subi	r30, 0xA9	; 169
    656e:	ff 4f       	sbci	r31, 0xFF	; 255
    6570:	80 81       	ld	r24, Z
    6572:	91 81       	ldd	r25, Z+1	; 0x01
    6574:	01 97       	sbiw	r24, 0x01	; 1
    6576:	f1 f7       	brne	.-4      	; 0x6574 <FingerPS_Enrollment+0x5b8>
    6578:	fe 01       	movw	r30, r28
    657a:	e9 5a       	subi	r30, 0xA9	; 169
    657c:	ff 4f       	sbci	r31, 0xFF	; 255
    657e:	91 83       	std	Z+1, r25	; 0x01
    6580:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6582:	de 01       	movw	r26, r28
    6584:	a7 5a       	subi	r26, 0xA7	; 167
    6586:	bf 4f       	sbci	r27, 0xFF	; 255
    6588:	fe 01       	movw	r30, r28
    658a:	e7 5a       	subi	r30, 0xA7	; 167
    658c:	ff 4f       	sbci	r31, 0xFF	; 255
    658e:	80 81       	ld	r24, Z
    6590:	91 81       	ldd	r25, Z+1	; 0x01
    6592:	01 97       	sbiw	r24, 0x01	; 1
    6594:	11 96       	adiw	r26, 0x01	; 1
    6596:	9c 93       	st	X, r25
    6598:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    659a:	fe 01       	movw	r30, r28
    659c:	e7 5a       	subi	r30, 0xA7	; 167
    659e:	ff 4f       	sbci	r31, 0xFF	; 255
    65a0:	80 81       	ld	r24, Z
    65a2:	91 81       	ldd	r25, Z+1	; 0x01
    65a4:	00 97       	sbiw	r24, 0x00	; 0
    65a6:	d1 f6       	brne	.-76     	; 0x655c <FingerPS_Enrollment+0x5a0>
    65a8:	27 c0       	rjmp	.+78     	; 0x65f8 <FingerPS_Enrollment+0x63c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    65aa:	8e 01       	movw	r16, r28
    65ac:	07 5a       	subi	r16, 0xA7	; 167
    65ae:	1f 4f       	sbci	r17, 0xFF	; 255
    65b0:	fe 01       	movw	r30, r28
    65b2:	e5 5a       	subi	r30, 0xA5	; 165
    65b4:	ff 4f       	sbci	r31, 0xFF	; 255
    65b6:	60 81       	ld	r22, Z
    65b8:	71 81       	ldd	r23, Z+1	; 0x01
    65ba:	82 81       	ldd	r24, Z+2	; 0x02
    65bc:	93 81       	ldd	r25, Z+3	; 0x03
    65be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    65c2:	dc 01       	movw	r26, r24
    65c4:	cb 01       	movw	r24, r22
    65c6:	f8 01       	movw	r30, r16
    65c8:	91 83       	std	Z+1, r25	; 0x01
    65ca:	80 83       	st	Z, r24
    65cc:	de 01       	movw	r26, r28
    65ce:	ab 5a       	subi	r26, 0xAB	; 171
    65d0:	bf 4f       	sbci	r27, 0xFF	; 255
    65d2:	fe 01       	movw	r30, r28
    65d4:	e7 5a       	subi	r30, 0xA7	; 167
    65d6:	ff 4f       	sbci	r31, 0xFF	; 255
    65d8:	80 81       	ld	r24, Z
    65da:	91 81       	ldd	r25, Z+1	; 0x01
    65dc:	8d 93       	st	X+, r24
    65de:	9c 93       	st	X, r25
    65e0:	fe 01       	movw	r30, r28
    65e2:	eb 5a       	subi	r30, 0xAB	; 171
    65e4:	ff 4f       	sbci	r31, 0xFF	; 255
    65e6:	80 81       	ld	r24, Z
    65e8:	91 81       	ldd	r25, Z+1	; 0x01
    65ea:	01 97       	sbiw	r24, 0x01	; 1
    65ec:	f1 f7       	brne	.-4      	; 0x65ea <FingerPS_Enrollment+0x62e>
    65ee:	fe 01       	movw	r30, r28
    65f0:	eb 5a       	subi	r30, 0xAB	; 171
    65f2:	ff 4f       	sbci	r31, 0xFF	; 255
    65f4:	91 83       	std	Z+1, r25	; 0x01
    65f6:	80 83       	st	Z, r24
	_delay_ms(50);
	fp_status &= FingerPS_genTemplate();
    65f8:	0e 94 1b 2b 	call	0x5636	; 0x5636 <FingerPS_genTemplate>
    65fc:	98 2f       	mov	r25, r24
    65fe:	de 01       	movw	r26, r28
    6600:	a1 57       	subi	r26, 0x71	; 113
    6602:	bf 4f       	sbci	r27, 0xFF	; 255
    6604:	fe 01       	movw	r30, r28
    6606:	e1 57       	subi	r30, 0x71	; 113
    6608:	ff 4f       	sbci	r31, 0xFF	; 255
    660a:	80 81       	ld	r24, Z
    660c:	89 23       	and	r24, r25
    660e:	8c 93       	st	X, r24
    6610:	fe 01       	movw	r30, r28
    6612:	ef 5a       	subi	r30, 0xAF	; 175
    6614:	ff 4f       	sbci	r31, 0xFF	; 255
    6616:	80 e0       	ldi	r24, 0x00	; 0
    6618:	90 e0       	ldi	r25, 0x00	; 0
    661a:	a8 e4       	ldi	r26, 0x48	; 72
    661c:	b2 e4       	ldi	r27, 0x42	; 66
    661e:	80 83       	st	Z, r24
    6620:	91 83       	std	Z+1, r25	; 0x01
    6622:	a2 83       	std	Z+2, r26	; 0x02
    6624:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6626:	8e 01       	movw	r16, r28
    6628:	03 5b       	subi	r16, 0xB3	; 179
    662a:	1f 4f       	sbci	r17, 0xFF	; 255
    662c:	fe 01       	movw	r30, r28
    662e:	ef 5a       	subi	r30, 0xAF	; 175
    6630:	ff 4f       	sbci	r31, 0xFF	; 255
    6632:	60 81       	ld	r22, Z
    6634:	71 81       	ldd	r23, Z+1	; 0x01
    6636:	82 81       	ldd	r24, Z+2	; 0x02
    6638:	93 81       	ldd	r25, Z+3	; 0x03
    663a:	20 e0       	ldi	r18, 0x00	; 0
    663c:	30 e0       	ldi	r19, 0x00	; 0
    663e:	4a e7       	ldi	r20, 0x7A	; 122
    6640:	55 e4       	ldi	r21, 0x45	; 69
    6642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6646:	dc 01       	movw	r26, r24
    6648:	cb 01       	movw	r24, r22
    664a:	f8 01       	movw	r30, r16
    664c:	80 83       	st	Z, r24
    664e:	91 83       	std	Z+1, r25	; 0x01
    6650:	a2 83       	std	Z+2, r26	; 0x02
    6652:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6654:	fe 01       	movw	r30, r28
    6656:	e3 5b       	subi	r30, 0xB3	; 179
    6658:	ff 4f       	sbci	r31, 0xFF	; 255
    665a:	60 81       	ld	r22, Z
    665c:	71 81       	ldd	r23, Z+1	; 0x01
    665e:	82 81       	ldd	r24, Z+2	; 0x02
    6660:	93 81       	ldd	r25, Z+3	; 0x03
    6662:	20 e0       	ldi	r18, 0x00	; 0
    6664:	30 e0       	ldi	r19, 0x00	; 0
    6666:	40 e8       	ldi	r20, 0x80	; 128
    6668:	5f e3       	ldi	r21, 0x3F	; 63
    666a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    666e:	88 23       	and	r24, r24
    6670:	44 f4       	brge	.+16     	; 0x6682 <FingerPS_Enrollment+0x6c6>
		__ticks = 1;
    6672:	fe 01       	movw	r30, r28
    6674:	e5 5b       	subi	r30, 0xB5	; 181
    6676:	ff 4f       	sbci	r31, 0xFF	; 255
    6678:	81 e0       	ldi	r24, 0x01	; 1
    667a:	90 e0       	ldi	r25, 0x00	; 0
    667c:	91 83       	std	Z+1, r25	; 0x01
    667e:	80 83       	st	Z, r24
    6680:	64 c0       	rjmp	.+200    	; 0x674a <FingerPS_Enrollment+0x78e>
	else if (__tmp > 65535)
    6682:	fe 01       	movw	r30, r28
    6684:	e3 5b       	subi	r30, 0xB3	; 179
    6686:	ff 4f       	sbci	r31, 0xFF	; 255
    6688:	60 81       	ld	r22, Z
    668a:	71 81       	ldd	r23, Z+1	; 0x01
    668c:	82 81       	ldd	r24, Z+2	; 0x02
    668e:	93 81       	ldd	r25, Z+3	; 0x03
    6690:	20 e0       	ldi	r18, 0x00	; 0
    6692:	3f ef       	ldi	r19, 0xFF	; 255
    6694:	4f e7       	ldi	r20, 0x7F	; 127
    6696:	57 e4       	ldi	r21, 0x47	; 71
    6698:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    669c:	18 16       	cp	r1, r24
    669e:	0c f0       	brlt	.+2      	; 0x66a2 <FingerPS_Enrollment+0x6e6>
    66a0:	43 c0       	rjmp	.+134    	; 0x6728 <FingerPS_Enrollment+0x76c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    66a2:	fe 01       	movw	r30, r28
    66a4:	ef 5a       	subi	r30, 0xAF	; 175
    66a6:	ff 4f       	sbci	r31, 0xFF	; 255
    66a8:	60 81       	ld	r22, Z
    66aa:	71 81       	ldd	r23, Z+1	; 0x01
    66ac:	82 81       	ldd	r24, Z+2	; 0x02
    66ae:	93 81       	ldd	r25, Z+3	; 0x03
    66b0:	20 e0       	ldi	r18, 0x00	; 0
    66b2:	30 e0       	ldi	r19, 0x00	; 0
    66b4:	40 e2       	ldi	r20, 0x20	; 32
    66b6:	51 e4       	ldi	r21, 0x41	; 65
    66b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    66bc:	dc 01       	movw	r26, r24
    66be:	cb 01       	movw	r24, r22
    66c0:	8e 01       	movw	r16, r28
    66c2:	05 5b       	subi	r16, 0xB5	; 181
    66c4:	1f 4f       	sbci	r17, 0xFF	; 255
    66c6:	bc 01       	movw	r22, r24
    66c8:	cd 01       	movw	r24, r26
    66ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    66ce:	dc 01       	movw	r26, r24
    66d0:	cb 01       	movw	r24, r22
    66d2:	f8 01       	movw	r30, r16
    66d4:	91 83       	std	Z+1, r25	; 0x01
    66d6:	80 83       	st	Z, r24
    66d8:	1f c0       	rjmp	.+62     	; 0x6718 <FingerPS_Enrollment+0x75c>
    66da:	fe 01       	movw	r30, r28
    66dc:	e7 5b       	subi	r30, 0xB7	; 183
    66de:	ff 4f       	sbci	r31, 0xFF	; 255
    66e0:	80 e9       	ldi	r24, 0x90	; 144
    66e2:	91 e0       	ldi	r25, 0x01	; 1
    66e4:	91 83       	std	Z+1, r25	; 0x01
    66e6:	80 83       	st	Z, r24
    66e8:	fe 01       	movw	r30, r28
    66ea:	e7 5b       	subi	r30, 0xB7	; 183
    66ec:	ff 4f       	sbci	r31, 0xFF	; 255
    66ee:	80 81       	ld	r24, Z
    66f0:	91 81       	ldd	r25, Z+1	; 0x01
    66f2:	01 97       	sbiw	r24, 0x01	; 1
    66f4:	f1 f7       	brne	.-4      	; 0x66f2 <FingerPS_Enrollment+0x736>
    66f6:	fe 01       	movw	r30, r28
    66f8:	e7 5b       	subi	r30, 0xB7	; 183
    66fa:	ff 4f       	sbci	r31, 0xFF	; 255
    66fc:	91 83       	std	Z+1, r25	; 0x01
    66fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6700:	de 01       	movw	r26, r28
    6702:	a5 5b       	subi	r26, 0xB5	; 181
    6704:	bf 4f       	sbci	r27, 0xFF	; 255
    6706:	fe 01       	movw	r30, r28
    6708:	e5 5b       	subi	r30, 0xB5	; 181
    670a:	ff 4f       	sbci	r31, 0xFF	; 255
    670c:	80 81       	ld	r24, Z
    670e:	91 81       	ldd	r25, Z+1	; 0x01
    6710:	01 97       	sbiw	r24, 0x01	; 1
    6712:	11 96       	adiw	r26, 0x01	; 1
    6714:	9c 93       	st	X, r25
    6716:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6718:	fe 01       	movw	r30, r28
    671a:	e5 5b       	subi	r30, 0xB5	; 181
    671c:	ff 4f       	sbci	r31, 0xFF	; 255
    671e:	80 81       	ld	r24, Z
    6720:	91 81       	ldd	r25, Z+1	; 0x01
    6722:	00 97       	sbiw	r24, 0x00	; 0
    6724:	d1 f6       	brne	.-76     	; 0x66da <FingerPS_Enrollment+0x71e>
    6726:	27 c0       	rjmp	.+78     	; 0x6776 <FingerPS_Enrollment+0x7ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6728:	8e 01       	movw	r16, r28
    672a:	05 5b       	subi	r16, 0xB5	; 181
    672c:	1f 4f       	sbci	r17, 0xFF	; 255
    672e:	fe 01       	movw	r30, r28
    6730:	e3 5b       	subi	r30, 0xB3	; 179
    6732:	ff 4f       	sbci	r31, 0xFF	; 255
    6734:	60 81       	ld	r22, Z
    6736:	71 81       	ldd	r23, Z+1	; 0x01
    6738:	82 81       	ldd	r24, Z+2	; 0x02
    673a:	93 81       	ldd	r25, Z+3	; 0x03
    673c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6740:	dc 01       	movw	r26, r24
    6742:	cb 01       	movw	r24, r22
    6744:	f8 01       	movw	r30, r16
    6746:	91 83       	std	Z+1, r25	; 0x01
    6748:	80 83       	st	Z, r24
    674a:	de 01       	movw	r26, r28
    674c:	a9 5b       	subi	r26, 0xB9	; 185
    674e:	bf 4f       	sbci	r27, 0xFF	; 255
    6750:	fe 01       	movw	r30, r28
    6752:	e5 5b       	subi	r30, 0xB5	; 181
    6754:	ff 4f       	sbci	r31, 0xFF	; 255
    6756:	80 81       	ld	r24, Z
    6758:	91 81       	ldd	r25, Z+1	; 0x01
    675a:	8d 93       	st	X+, r24
    675c:	9c 93       	st	X, r25
    675e:	fe 01       	movw	r30, r28
    6760:	e9 5b       	subi	r30, 0xB9	; 185
    6762:	ff 4f       	sbci	r31, 0xFF	; 255
    6764:	80 81       	ld	r24, Z
    6766:	91 81       	ldd	r25, Z+1	; 0x01
    6768:	01 97       	sbiw	r24, 0x01	; 1
    676a:	f1 f7       	brne	.-4      	; 0x6768 <FingerPS_Enrollment+0x7ac>
    676c:	fe 01       	movw	r30, r28
    676e:	e9 5b       	subi	r30, 0xB9	; 185
    6770:	ff 4f       	sbci	r31, 0xFF	; 255
    6772:	91 83       	std	Z+1, r25	; 0x01
    6774:	80 83       	st	Z, r24
	_delay_ms(50);
	fp_status &= FingerPS_searchFinger(ret_id);
    6776:	fe 01       	movw	r30, r28
    6778:	ef 56       	subi	r30, 0x6F	; 111
    677a:	ff 4f       	sbci	r31, 0xFF	; 255
    677c:	80 81       	ld	r24, Z
    677e:	91 81       	ldd	r25, Z+1	; 0x01
    6780:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <FingerPS_searchFinger>
    6784:	98 2f       	mov	r25, r24
    6786:	de 01       	movw	r26, r28
    6788:	a1 57       	subi	r26, 0x71	; 113
    678a:	bf 4f       	sbci	r27, 0xFF	; 255
    678c:	fe 01       	movw	r30, r28
    678e:	e1 57       	subi	r30, 0x71	; 113
    6790:	ff 4f       	sbci	r31, 0xFF	; 255
    6792:	80 81       	ld	r24, Z
    6794:	89 23       	and	r24, r25
    6796:	8c 93       	st	X, r24

	if(fp_status == ERROR) // image not found before so i can start enrollment stage here
    6798:	fe 01       	movw	r30, r28
    679a:	e1 57       	subi	r30, 0x71	; 113
    679c:	ff 4f       	sbci	r31, 0xFF	; 255
    679e:	80 81       	ld	r24, Z
    67a0:	88 23       	and	r24, r24
    67a2:	09 f0       	breq	.+2      	; 0x67a6 <FingerPS_Enrollment+0x7ea>
    67a4:	9e c2       	rjmp	.+1340   	; 0x6ce2 <FingerPS_Enrollment+0xd26>
	{
		/* Enrollment */
		fp_status = FingerPS_genImg();
    67a6:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <FingerPS_genImg>
    67aa:	fe 01       	movw	r30, r28
    67ac:	e1 57       	subi	r30, 0x71	; 113
    67ae:	ff 4f       	sbci	r31, 0xFF	; 255
    67b0:	80 83       	st	Z, r24
    67b2:	fe 01       	movw	r30, r28
    67b4:	ed 5b       	subi	r30, 0xBD	; 189
    67b6:	ff 4f       	sbci	r31, 0xFF	; 255
    67b8:	80 e0       	ldi	r24, 0x00	; 0
    67ba:	90 e0       	ldi	r25, 0x00	; 0
    67bc:	a8 e4       	ldi	r26, 0x48	; 72
    67be:	b2 e4       	ldi	r27, 0x42	; 66
    67c0:	80 83       	st	Z, r24
    67c2:	91 83       	std	Z+1, r25	; 0x01
    67c4:	a2 83       	std	Z+2, r26	; 0x02
    67c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    67c8:	8e 01       	movw	r16, r28
    67ca:	01 5c       	subi	r16, 0xC1	; 193
    67cc:	1f 4f       	sbci	r17, 0xFF	; 255
    67ce:	fe 01       	movw	r30, r28
    67d0:	ed 5b       	subi	r30, 0xBD	; 189
    67d2:	ff 4f       	sbci	r31, 0xFF	; 255
    67d4:	60 81       	ld	r22, Z
    67d6:	71 81       	ldd	r23, Z+1	; 0x01
    67d8:	82 81       	ldd	r24, Z+2	; 0x02
    67da:	93 81       	ldd	r25, Z+3	; 0x03
    67dc:	20 e0       	ldi	r18, 0x00	; 0
    67de:	30 e0       	ldi	r19, 0x00	; 0
    67e0:	4a e7       	ldi	r20, 0x7A	; 122
    67e2:	55 e4       	ldi	r21, 0x45	; 69
    67e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    67e8:	dc 01       	movw	r26, r24
    67ea:	cb 01       	movw	r24, r22
    67ec:	f8 01       	movw	r30, r16
    67ee:	80 83       	st	Z, r24
    67f0:	91 83       	std	Z+1, r25	; 0x01
    67f2:	a2 83       	std	Z+2, r26	; 0x02
    67f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    67f6:	fe 01       	movw	r30, r28
    67f8:	ff 96       	adiw	r30, 0x3f	; 63
    67fa:	60 81       	ld	r22, Z
    67fc:	71 81       	ldd	r23, Z+1	; 0x01
    67fe:	82 81       	ldd	r24, Z+2	; 0x02
    6800:	93 81       	ldd	r25, Z+3	; 0x03
    6802:	20 e0       	ldi	r18, 0x00	; 0
    6804:	30 e0       	ldi	r19, 0x00	; 0
    6806:	40 e8       	ldi	r20, 0x80	; 128
    6808:	5f e3       	ldi	r21, 0x3F	; 63
    680a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    680e:	88 23       	and	r24, r24
    6810:	2c f4       	brge	.+10     	; 0x681c <FingerPS_Enrollment+0x860>
		__ticks = 1;
    6812:	81 e0       	ldi	r24, 0x01	; 1
    6814:	90 e0       	ldi	r25, 0x00	; 0
    6816:	9e af       	std	Y+62, r25	; 0x3e
    6818:	8d af       	std	Y+61, r24	; 0x3d
    681a:	46 c0       	rjmp	.+140    	; 0x68a8 <FingerPS_Enrollment+0x8ec>
	else if (__tmp > 65535)
    681c:	fe 01       	movw	r30, r28
    681e:	ff 96       	adiw	r30, 0x3f	; 63
    6820:	60 81       	ld	r22, Z
    6822:	71 81       	ldd	r23, Z+1	; 0x01
    6824:	82 81       	ldd	r24, Z+2	; 0x02
    6826:	93 81       	ldd	r25, Z+3	; 0x03
    6828:	20 e0       	ldi	r18, 0x00	; 0
    682a:	3f ef       	ldi	r19, 0xFF	; 255
    682c:	4f e7       	ldi	r20, 0x7F	; 127
    682e:	57 e4       	ldi	r21, 0x47	; 71
    6830:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6834:	18 16       	cp	r1, r24
    6836:	64 f5       	brge	.+88     	; 0x6890 <FingerPS_Enrollment+0x8d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6838:	fe 01       	movw	r30, r28
    683a:	ed 5b       	subi	r30, 0xBD	; 189
    683c:	ff 4f       	sbci	r31, 0xFF	; 255
    683e:	60 81       	ld	r22, Z
    6840:	71 81       	ldd	r23, Z+1	; 0x01
    6842:	82 81       	ldd	r24, Z+2	; 0x02
    6844:	93 81       	ldd	r25, Z+3	; 0x03
    6846:	20 e0       	ldi	r18, 0x00	; 0
    6848:	30 e0       	ldi	r19, 0x00	; 0
    684a:	40 e2       	ldi	r20, 0x20	; 32
    684c:	51 e4       	ldi	r21, 0x41	; 65
    684e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6852:	dc 01       	movw	r26, r24
    6854:	cb 01       	movw	r24, r22
    6856:	bc 01       	movw	r22, r24
    6858:	cd 01       	movw	r24, r26
    685a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    685e:	dc 01       	movw	r26, r24
    6860:	cb 01       	movw	r24, r22
    6862:	9e af       	std	Y+62, r25	; 0x3e
    6864:	8d af       	std	Y+61, r24	; 0x3d
    6866:	0f c0       	rjmp	.+30     	; 0x6886 <FingerPS_Enrollment+0x8ca>
    6868:	80 e9       	ldi	r24, 0x90	; 144
    686a:	91 e0       	ldi	r25, 0x01	; 1
    686c:	9c af       	std	Y+60, r25	; 0x3c
    686e:	8b af       	std	Y+59, r24	; 0x3b
    6870:	8b ad       	ldd	r24, Y+59	; 0x3b
    6872:	9c ad       	ldd	r25, Y+60	; 0x3c
    6874:	01 97       	sbiw	r24, 0x01	; 1
    6876:	f1 f7       	brne	.-4      	; 0x6874 <FingerPS_Enrollment+0x8b8>
    6878:	9c af       	std	Y+60, r25	; 0x3c
    687a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    687c:	8d ad       	ldd	r24, Y+61	; 0x3d
    687e:	9e ad       	ldd	r25, Y+62	; 0x3e
    6880:	01 97       	sbiw	r24, 0x01	; 1
    6882:	9e af       	std	Y+62, r25	; 0x3e
    6884:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6886:	8d ad       	ldd	r24, Y+61	; 0x3d
    6888:	9e ad       	ldd	r25, Y+62	; 0x3e
    688a:	00 97       	sbiw	r24, 0x00	; 0
    688c:	69 f7       	brne	.-38     	; 0x6868 <FingerPS_Enrollment+0x8ac>
    688e:	16 c0       	rjmp	.+44     	; 0x68bc <FingerPS_Enrollment+0x900>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6890:	fe 01       	movw	r30, r28
    6892:	ff 96       	adiw	r30, 0x3f	; 63
    6894:	60 81       	ld	r22, Z
    6896:	71 81       	ldd	r23, Z+1	; 0x01
    6898:	82 81       	ldd	r24, Z+2	; 0x02
    689a:	93 81       	ldd	r25, Z+3	; 0x03
    689c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68a0:	dc 01       	movw	r26, r24
    68a2:	cb 01       	movw	r24, r22
    68a4:	9e af       	std	Y+62, r25	; 0x3e
    68a6:	8d af       	std	Y+61, r24	; 0x3d
    68a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    68aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    68ac:	9a af       	std	Y+58, r25	; 0x3a
    68ae:	89 af       	std	Y+57, r24	; 0x39
    68b0:	89 ad       	ldd	r24, Y+57	; 0x39
    68b2:	9a ad       	ldd	r25, Y+58	; 0x3a
    68b4:	01 97       	sbiw	r24, 0x01	; 1
    68b6:	f1 f7       	brne	.-4      	; 0x68b4 <FingerPS_Enrollment+0x8f8>
    68b8:	9a af       	std	Y+58, r25	; 0x3a
    68ba:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(50);
		fp_status &= FingerPS_convertImg2CharFile(0x01);
    68bc:	81 e0       	ldi	r24, 0x01	; 1
    68be:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <FingerPS_convertImg2CharFile>
    68c2:	98 2f       	mov	r25, r24
    68c4:	de 01       	movw	r26, r28
    68c6:	a1 57       	subi	r26, 0x71	; 113
    68c8:	bf 4f       	sbci	r27, 0xFF	; 255
    68ca:	fe 01       	movw	r30, r28
    68cc:	e1 57       	subi	r30, 0x71	; 113
    68ce:	ff 4f       	sbci	r31, 0xFF	; 255
    68d0:	80 81       	ld	r24, Z
    68d2:	89 23       	and	r24, r25
    68d4:	8c 93       	st	X, r24
    68d6:	80 e0       	ldi	r24, 0x00	; 0
    68d8:	90 e0       	ldi	r25, 0x00	; 0
    68da:	a8 e4       	ldi	r26, 0x48	; 72
    68dc:	b2 e4       	ldi	r27, 0x42	; 66
    68de:	8d ab       	std	Y+53, r24	; 0x35
    68e0:	9e ab       	std	Y+54, r25	; 0x36
    68e2:	af ab       	std	Y+55, r26	; 0x37
    68e4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    68e6:	6d a9       	ldd	r22, Y+53	; 0x35
    68e8:	7e a9       	ldd	r23, Y+54	; 0x36
    68ea:	8f a9       	ldd	r24, Y+55	; 0x37
    68ec:	98 ad       	ldd	r25, Y+56	; 0x38
    68ee:	20 e0       	ldi	r18, 0x00	; 0
    68f0:	30 e0       	ldi	r19, 0x00	; 0
    68f2:	4a e7       	ldi	r20, 0x7A	; 122
    68f4:	55 e4       	ldi	r21, 0x45	; 69
    68f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    68fa:	dc 01       	movw	r26, r24
    68fc:	cb 01       	movw	r24, r22
    68fe:	89 ab       	std	Y+49, r24	; 0x31
    6900:	9a ab       	std	Y+50, r25	; 0x32
    6902:	ab ab       	std	Y+51, r26	; 0x33
    6904:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    6906:	69 a9       	ldd	r22, Y+49	; 0x31
    6908:	7a a9       	ldd	r23, Y+50	; 0x32
    690a:	8b a9       	ldd	r24, Y+51	; 0x33
    690c:	9c a9       	ldd	r25, Y+52	; 0x34
    690e:	20 e0       	ldi	r18, 0x00	; 0
    6910:	30 e0       	ldi	r19, 0x00	; 0
    6912:	40 e8       	ldi	r20, 0x80	; 128
    6914:	5f e3       	ldi	r21, 0x3F	; 63
    6916:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    691a:	88 23       	and	r24, r24
    691c:	2c f4       	brge	.+10     	; 0x6928 <FingerPS_Enrollment+0x96c>
		__ticks = 1;
    691e:	81 e0       	ldi	r24, 0x01	; 1
    6920:	90 e0       	ldi	r25, 0x00	; 0
    6922:	98 ab       	std	Y+48, r25	; 0x30
    6924:	8f a7       	std	Y+47, r24	; 0x2f
    6926:	3f c0       	rjmp	.+126    	; 0x69a6 <FingerPS_Enrollment+0x9ea>
	else if (__tmp > 65535)
    6928:	69 a9       	ldd	r22, Y+49	; 0x31
    692a:	7a a9       	ldd	r23, Y+50	; 0x32
    692c:	8b a9       	ldd	r24, Y+51	; 0x33
    692e:	9c a9       	ldd	r25, Y+52	; 0x34
    6930:	20 e0       	ldi	r18, 0x00	; 0
    6932:	3f ef       	ldi	r19, 0xFF	; 255
    6934:	4f e7       	ldi	r20, 0x7F	; 127
    6936:	57 e4       	ldi	r21, 0x47	; 71
    6938:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    693c:	18 16       	cp	r1, r24
    693e:	4c f5       	brge	.+82     	; 0x6992 <FingerPS_Enrollment+0x9d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6940:	6d a9       	ldd	r22, Y+53	; 0x35
    6942:	7e a9       	ldd	r23, Y+54	; 0x36
    6944:	8f a9       	ldd	r24, Y+55	; 0x37
    6946:	98 ad       	ldd	r25, Y+56	; 0x38
    6948:	20 e0       	ldi	r18, 0x00	; 0
    694a:	30 e0       	ldi	r19, 0x00	; 0
    694c:	40 e2       	ldi	r20, 0x20	; 32
    694e:	51 e4       	ldi	r21, 0x41	; 65
    6950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6954:	dc 01       	movw	r26, r24
    6956:	cb 01       	movw	r24, r22
    6958:	bc 01       	movw	r22, r24
    695a:	cd 01       	movw	r24, r26
    695c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6960:	dc 01       	movw	r26, r24
    6962:	cb 01       	movw	r24, r22
    6964:	98 ab       	std	Y+48, r25	; 0x30
    6966:	8f a7       	std	Y+47, r24	; 0x2f
    6968:	0f c0       	rjmp	.+30     	; 0x6988 <FingerPS_Enrollment+0x9cc>
    696a:	80 e9       	ldi	r24, 0x90	; 144
    696c:	91 e0       	ldi	r25, 0x01	; 1
    696e:	9e a7       	std	Y+46, r25	; 0x2e
    6970:	8d a7       	std	Y+45, r24	; 0x2d
    6972:	8d a5       	ldd	r24, Y+45	; 0x2d
    6974:	9e a5       	ldd	r25, Y+46	; 0x2e
    6976:	01 97       	sbiw	r24, 0x01	; 1
    6978:	f1 f7       	brne	.-4      	; 0x6976 <FingerPS_Enrollment+0x9ba>
    697a:	9e a7       	std	Y+46, r25	; 0x2e
    697c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    697e:	8f a5       	ldd	r24, Y+47	; 0x2f
    6980:	98 a9       	ldd	r25, Y+48	; 0x30
    6982:	01 97       	sbiw	r24, 0x01	; 1
    6984:	98 ab       	std	Y+48, r25	; 0x30
    6986:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6988:	8f a5       	ldd	r24, Y+47	; 0x2f
    698a:	98 a9       	ldd	r25, Y+48	; 0x30
    698c:	00 97       	sbiw	r24, 0x00	; 0
    698e:	69 f7       	brne	.-38     	; 0x696a <FingerPS_Enrollment+0x9ae>
    6990:	14 c0       	rjmp	.+40     	; 0x69ba <FingerPS_Enrollment+0x9fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6992:	69 a9       	ldd	r22, Y+49	; 0x31
    6994:	7a a9       	ldd	r23, Y+50	; 0x32
    6996:	8b a9       	ldd	r24, Y+51	; 0x33
    6998:	9c a9       	ldd	r25, Y+52	; 0x34
    699a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    699e:	dc 01       	movw	r26, r24
    69a0:	cb 01       	movw	r24, r22
    69a2:	98 ab       	std	Y+48, r25	; 0x30
    69a4:	8f a7       	std	Y+47, r24	; 0x2f
    69a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    69a8:	98 a9       	ldd	r25, Y+48	; 0x30
    69aa:	9c a7       	std	Y+44, r25	; 0x2c
    69ac:	8b a7       	std	Y+43, r24	; 0x2b
    69ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    69b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    69b2:	01 97       	sbiw	r24, 0x01	; 1
    69b4:	f1 f7       	brne	.-4      	; 0x69b2 <FingerPS_Enrollment+0x9f6>
    69b6:	9c a7       	std	Y+44, r25	; 0x2c
    69b8:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		fp_status &= FingerPS_genImg();
    69ba:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <FingerPS_genImg>
    69be:	98 2f       	mov	r25, r24
    69c0:	de 01       	movw	r26, r28
    69c2:	a1 57       	subi	r26, 0x71	; 113
    69c4:	bf 4f       	sbci	r27, 0xFF	; 255
    69c6:	fe 01       	movw	r30, r28
    69c8:	e1 57       	subi	r30, 0x71	; 113
    69ca:	ff 4f       	sbci	r31, 0xFF	; 255
    69cc:	80 81       	ld	r24, Z
    69ce:	89 23       	and	r24, r25
    69d0:	8c 93       	st	X, r24
    69d2:	80 e0       	ldi	r24, 0x00	; 0
    69d4:	90 e0       	ldi	r25, 0x00	; 0
    69d6:	a8 e4       	ldi	r26, 0x48	; 72
    69d8:	b2 e4       	ldi	r27, 0x42	; 66
    69da:	8f a3       	std	Y+39, r24	; 0x27
    69dc:	98 a7       	std	Y+40, r25	; 0x28
    69de:	a9 a7       	std	Y+41, r26	; 0x29
    69e0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    69e2:	6f a1       	ldd	r22, Y+39	; 0x27
    69e4:	78 a5       	ldd	r23, Y+40	; 0x28
    69e6:	89 a5       	ldd	r24, Y+41	; 0x29
    69e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    69ea:	20 e0       	ldi	r18, 0x00	; 0
    69ec:	30 e0       	ldi	r19, 0x00	; 0
    69ee:	4a e7       	ldi	r20, 0x7A	; 122
    69f0:	55 e4       	ldi	r21, 0x45	; 69
    69f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    69f6:	dc 01       	movw	r26, r24
    69f8:	cb 01       	movw	r24, r22
    69fa:	8b a3       	std	Y+35, r24	; 0x23
    69fc:	9c a3       	std	Y+36, r25	; 0x24
    69fe:	ad a3       	std	Y+37, r26	; 0x25
    6a00:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6a02:	6b a1       	ldd	r22, Y+35	; 0x23
    6a04:	7c a1       	ldd	r23, Y+36	; 0x24
    6a06:	8d a1       	ldd	r24, Y+37	; 0x25
    6a08:	9e a1       	ldd	r25, Y+38	; 0x26
    6a0a:	20 e0       	ldi	r18, 0x00	; 0
    6a0c:	30 e0       	ldi	r19, 0x00	; 0
    6a0e:	40 e8       	ldi	r20, 0x80	; 128
    6a10:	5f e3       	ldi	r21, 0x3F	; 63
    6a12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6a16:	88 23       	and	r24, r24
    6a18:	2c f4       	brge	.+10     	; 0x6a24 <FingerPS_Enrollment+0xa68>
		__ticks = 1;
    6a1a:	81 e0       	ldi	r24, 0x01	; 1
    6a1c:	90 e0       	ldi	r25, 0x00	; 0
    6a1e:	9a a3       	std	Y+34, r25	; 0x22
    6a20:	89 a3       	std	Y+33, r24	; 0x21
    6a22:	3f c0       	rjmp	.+126    	; 0x6aa2 <FingerPS_Enrollment+0xae6>
	else if (__tmp > 65535)
    6a24:	6b a1       	ldd	r22, Y+35	; 0x23
    6a26:	7c a1       	ldd	r23, Y+36	; 0x24
    6a28:	8d a1       	ldd	r24, Y+37	; 0x25
    6a2a:	9e a1       	ldd	r25, Y+38	; 0x26
    6a2c:	20 e0       	ldi	r18, 0x00	; 0
    6a2e:	3f ef       	ldi	r19, 0xFF	; 255
    6a30:	4f e7       	ldi	r20, 0x7F	; 127
    6a32:	57 e4       	ldi	r21, 0x47	; 71
    6a34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6a38:	18 16       	cp	r1, r24
    6a3a:	4c f5       	brge	.+82     	; 0x6a8e <FingerPS_Enrollment+0xad2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a3c:	6f a1       	ldd	r22, Y+39	; 0x27
    6a3e:	78 a5       	ldd	r23, Y+40	; 0x28
    6a40:	89 a5       	ldd	r24, Y+41	; 0x29
    6a42:	9a a5       	ldd	r25, Y+42	; 0x2a
    6a44:	20 e0       	ldi	r18, 0x00	; 0
    6a46:	30 e0       	ldi	r19, 0x00	; 0
    6a48:	40 e2       	ldi	r20, 0x20	; 32
    6a4a:	51 e4       	ldi	r21, 0x41	; 65
    6a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a50:	dc 01       	movw	r26, r24
    6a52:	cb 01       	movw	r24, r22
    6a54:	bc 01       	movw	r22, r24
    6a56:	cd 01       	movw	r24, r26
    6a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a5c:	dc 01       	movw	r26, r24
    6a5e:	cb 01       	movw	r24, r22
    6a60:	9a a3       	std	Y+34, r25	; 0x22
    6a62:	89 a3       	std	Y+33, r24	; 0x21
    6a64:	0f c0       	rjmp	.+30     	; 0x6a84 <FingerPS_Enrollment+0xac8>
    6a66:	80 e9       	ldi	r24, 0x90	; 144
    6a68:	91 e0       	ldi	r25, 0x01	; 1
    6a6a:	98 a3       	std	Y+32, r25	; 0x20
    6a6c:	8f 8f       	std	Y+31, r24	; 0x1f
    6a6e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6a70:	98 a1       	ldd	r25, Y+32	; 0x20
    6a72:	01 97       	sbiw	r24, 0x01	; 1
    6a74:	f1 f7       	brne	.-4      	; 0x6a72 <FingerPS_Enrollment+0xab6>
    6a76:	98 a3       	std	Y+32, r25	; 0x20
    6a78:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6a7a:	89 a1       	ldd	r24, Y+33	; 0x21
    6a7c:	9a a1       	ldd	r25, Y+34	; 0x22
    6a7e:	01 97       	sbiw	r24, 0x01	; 1
    6a80:	9a a3       	std	Y+34, r25	; 0x22
    6a82:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a84:	89 a1       	ldd	r24, Y+33	; 0x21
    6a86:	9a a1       	ldd	r25, Y+34	; 0x22
    6a88:	00 97       	sbiw	r24, 0x00	; 0
    6a8a:	69 f7       	brne	.-38     	; 0x6a66 <FingerPS_Enrollment+0xaaa>
    6a8c:	14 c0       	rjmp	.+40     	; 0x6ab6 <FingerPS_Enrollment+0xafa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6a8e:	6b a1       	ldd	r22, Y+35	; 0x23
    6a90:	7c a1       	ldd	r23, Y+36	; 0x24
    6a92:	8d a1       	ldd	r24, Y+37	; 0x25
    6a94:	9e a1       	ldd	r25, Y+38	; 0x26
    6a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a9a:	dc 01       	movw	r26, r24
    6a9c:	cb 01       	movw	r24, r22
    6a9e:	9a a3       	std	Y+34, r25	; 0x22
    6aa0:	89 a3       	std	Y+33, r24	; 0x21
    6aa2:	89 a1       	ldd	r24, Y+33	; 0x21
    6aa4:	9a a1       	ldd	r25, Y+34	; 0x22
    6aa6:	9e 8f       	std	Y+30, r25	; 0x1e
    6aa8:	8d 8f       	std	Y+29, r24	; 0x1d
    6aaa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6aac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6aae:	01 97       	sbiw	r24, 0x01	; 1
    6ab0:	f1 f7       	brne	.-4      	; 0x6aae <FingerPS_Enrollment+0xaf2>
    6ab2:	9e 8f       	std	Y+30, r25	; 0x1e
    6ab4:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		fp_status &= FingerPS_convertImg2CharFile(0x02);
    6ab6:	82 e0       	ldi	r24, 0x02	; 2
    6ab8:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <FingerPS_convertImg2CharFile>
    6abc:	98 2f       	mov	r25, r24
    6abe:	de 01       	movw	r26, r28
    6ac0:	a1 57       	subi	r26, 0x71	; 113
    6ac2:	bf 4f       	sbci	r27, 0xFF	; 255
    6ac4:	fe 01       	movw	r30, r28
    6ac6:	e1 57       	subi	r30, 0x71	; 113
    6ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    6aca:	80 81       	ld	r24, Z
    6acc:	89 23       	and	r24, r25
    6ace:	8c 93       	st	X, r24
    6ad0:	80 e0       	ldi	r24, 0x00	; 0
    6ad2:	90 e0       	ldi	r25, 0x00	; 0
    6ad4:	a8 e4       	ldi	r26, 0x48	; 72
    6ad6:	b2 e4       	ldi	r27, 0x42	; 66
    6ad8:	89 8f       	std	Y+25, r24	; 0x19
    6ada:	9a 8f       	std	Y+26, r25	; 0x1a
    6adc:	ab 8f       	std	Y+27, r26	; 0x1b
    6ade:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6ae0:	69 8d       	ldd	r22, Y+25	; 0x19
    6ae2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6ae4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6ae6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6ae8:	20 e0       	ldi	r18, 0x00	; 0
    6aea:	30 e0       	ldi	r19, 0x00	; 0
    6aec:	4a e7       	ldi	r20, 0x7A	; 122
    6aee:	55 e4       	ldi	r21, 0x45	; 69
    6af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6af4:	dc 01       	movw	r26, r24
    6af6:	cb 01       	movw	r24, r22
    6af8:	8d 8b       	std	Y+21, r24	; 0x15
    6afa:	9e 8b       	std	Y+22, r25	; 0x16
    6afc:	af 8b       	std	Y+23, r26	; 0x17
    6afe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6b00:	6d 89       	ldd	r22, Y+21	; 0x15
    6b02:	7e 89       	ldd	r23, Y+22	; 0x16
    6b04:	8f 89       	ldd	r24, Y+23	; 0x17
    6b06:	98 8d       	ldd	r25, Y+24	; 0x18
    6b08:	20 e0       	ldi	r18, 0x00	; 0
    6b0a:	30 e0       	ldi	r19, 0x00	; 0
    6b0c:	40 e8       	ldi	r20, 0x80	; 128
    6b0e:	5f e3       	ldi	r21, 0x3F	; 63
    6b10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6b14:	88 23       	and	r24, r24
    6b16:	2c f4       	brge	.+10     	; 0x6b22 <FingerPS_Enrollment+0xb66>
		__ticks = 1;
    6b18:	81 e0       	ldi	r24, 0x01	; 1
    6b1a:	90 e0       	ldi	r25, 0x00	; 0
    6b1c:	9c 8b       	std	Y+20, r25	; 0x14
    6b1e:	8b 8b       	std	Y+19, r24	; 0x13
    6b20:	3f c0       	rjmp	.+126    	; 0x6ba0 <FingerPS_Enrollment+0xbe4>
	else if (__tmp > 65535)
    6b22:	6d 89       	ldd	r22, Y+21	; 0x15
    6b24:	7e 89       	ldd	r23, Y+22	; 0x16
    6b26:	8f 89       	ldd	r24, Y+23	; 0x17
    6b28:	98 8d       	ldd	r25, Y+24	; 0x18
    6b2a:	20 e0       	ldi	r18, 0x00	; 0
    6b2c:	3f ef       	ldi	r19, 0xFF	; 255
    6b2e:	4f e7       	ldi	r20, 0x7F	; 127
    6b30:	57 e4       	ldi	r21, 0x47	; 71
    6b32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6b36:	18 16       	cp	r1, r24
    6b38:	4c f5       	brge	.+82     	; 0x6b8c <FingerPS_Enrollment+0xbd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6b3a:	69 8d       	ldd	r22, Y+25	; 0x19
    6b3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6b3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6b40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6b42:	20 e0       	ldi	r18, 0x00	; 0
    6b44:	30 e0       	ldi	r19, 0x00	; 0
    6b46:	40 e2       	ldi	r20, 0x20	; 32
    6b48:	51 e4       	ldi	r21, 0x41	; 65
    6b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6b4e:	dc 01       	movw	r26, r24
    6b50:	cb 01       	movw	r24, r22
    6b52:	bc 01       	movw	r22, r24
    6b54:	cd 01       	movw	r24, r26
    6b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b5a:	dc 01       	movw	r26, r24
    6b5c:	cb 01       	movw	r24, r22
    6b5e:	9c 8b       	std	Y+20, r25	; 0x14
    6b60:	8b 8b       	std	Y+19, r24	; 0x13
    6b62:	0f c0       	rjmp	.+30     	; 0x6b82 <FingerPS_Enrollment+0xbc6>
    6b64:	80 e9       	ldi	r24, 0x90	; 144
    6b66:	91 e0       	ldi	r25, 0x01	; 1
    6b68:	9a 8b       	std	Y+18, r25	; 0x12
    6b6a:	89 8b       	std	Y+17, r24	; 0x11
    6b6c:	89 89       	ldd	r24, Y+17	; 0x11
    6b6e:	9a 89       	ldd	r25, Y+18	; 0x12
    6b70:	01 97       	sbiw	r24, 0x01	; 1
    6b72:	f1 f7       	brne	.-4      	; 0x6b70 <FingerPS_Enrollment+0xbb4>
    6b74:	9a 8b       	std	Y+18, r25	; 0x12
    6b76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6b78:	8b 89       	ldd	r24, Y+19	; 0x13
    6b7a:	9c 89       	ldd	r25, Y+20	; 0x14
    6b7c:	01 97       	sbiw	r24, 0x01	; 1
    6b7e:	9c 8b       	std	Y+20, r25	; 0x14
    6b80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b82:	8b 89       	ldd	r24, Y+19	; 0x13
    6b84:	9c 89       	ldd	r25, Y+20	; 0x14
    6b86:	00 97       	sbiw	r24, 0x00	; 0
    6b88:	69 f7       	brne	.-38     	; 0x6b64 <FingerPS_Enrollment+0xba8>
    6b8a:	14 c0       	rjmp	.+40     	; 0x6bb4 <FingerPS_Enrollment+0xbf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b8c:	6d 89       	ldd	r22, Y+21	; 0x15
    6b8e:	7e 89       	ldd	r23, Y+22	; 0x16
    6b90:	8f 89       	ldd	r24, Y+23	; 0x17
    6b92:	98 8d       	ldd	r25, Y+24	; 0x18
    6b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b98:	dc 01       	movw	r26, r24
    6b9a:	cb 01       	movw	r24, r22
    6b9c:	9c 8b       	std	Y+20, r25	; 0x14
    6b9e:	8b 8b       	std	Y+19, r24	; 0x13
    6ba0:	8b 89       	ldd	r24, Y+19	; 0x13
    6ba2:	9c 89       	ldd	r25, Y+20	; 0x14
    6ba4:	98 8b       	std	Y+16, r25	; 0x10
    6ba6:	8f 87       	std	Y+15, r24	; 0x0f
    6ba8:	8f 85       	ldd	r24, Y+15	; 0x0f
    6baa:	98 89       	ldd	r25, Y+16	; 0x10
    6bac:	01 97       	sbiw	r24, 0x01	; 1
    6bae:	f1 f7       	brne	.-4      	; 0x6bac <FingerPS_Enrollment+0xbf0>
    6bb0:	98 8b       	std	Y+16, r25	; 0x10
    6bb2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		fp_status &= FingerPS_genTemplate();
    6bb4:	0e 94 1b 2b 	call	0x5636	; 0x5636 <FingerPS_genTemplate>
    6bb8:	98 2f       	mov	r25, r24
    6bba:	de 01       	movw	r26, r28
    6bbc:	a1 57       	subi	r26, 0x71	; 113
    6bbe:	bf 4f       	sbci	r27, 0xFF	; 255
    6bc0:	fe 01       	movw	r30, r28
    6bc2:	e1 57       	subi	r30, 0x71	; 113
    6bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    6bc6:	80 81       	ld	r24, Z
    6bc8:	89 23       	and	r24, r25
    6bca:	8c 93       	st	X, r24
    6bcc:	80 e0       	ldi	r24, 0x00	; 0
    6bce:	90 e0       	ldi	r25, 0x00	; 0
    6bd0:	a8 e4       	ldi	r26, 0x48	; 72
    6bd2:	b2 e4       	ldi	r27, 0x42	; 66
    6bd4:	8b 87       	std	Y+11, r24	; 0x0b
    6bd6:	9c 87       	std	Y+12, r25	; 0x0c
    6bd8:	ad 87       	std	Y+13, r26	; 0x0d
    6bda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6bdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    6bde:	7c 85       	ldd	r23, Y+12	; 0x0c
    6be0:	8d 85       	ldd	r24, Y+13	; 0x0d
    6be2:	9e 85       	ldd	r25, Y+14	; 0x0e
    6be4:	20 e0       	ldi	r18, 0x00	; 0
    6be6:	30 e0       	ldi	r19, 0x00	; 0
    6be8:	4a e7       	ldi	r20, 0x7A	; 122
    6bea:	55 e4       	ldi	r21, 0x45	; 69
    6bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6bf0:	dc 01       	movw	r26, r24
    6bf2:	cb 01       	movw	r24, r22
    6bf4:	8f 83       	std	Y+7, r24	; 0x07
    6bf6:	98 87       	std	Y+8, r25	; 0x08
    6bf8:	a9 87       	std	Y+9, r26	; 0x09
    6bfa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6bfc:	6f 81       	ldd	r22, Y+7	; 0x07
    6bfe:	78 85       	ldd	r23, Y+8	; 0x08
    6c00:	89 85       	ldd	r24, Y+9	; 0x09
    6c02:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c04:	20 e0       	ldi	r18, 0x00	; 0
    6c06:	30 e0       	ldi	r19, 0x00	; 0
    6c08:	40 e8       	ldi	r20, 0x80	; 128
    6c0a:	5f e3       	ldi	r21, 0x3F	; 63
    6c0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6c10:	88 23       	and	r24, r24
    6c12:	2c f4       	brge	.+10     	; 0x6c1e <FingerPS_Enrollment+0xc62>
		__ticks = 1;
    6c14:	81 e0       	ldi	r24, 0x01	; 1
    6c16:	90 e0       	ldi	r25, 0x00	; 0
    6c18:	9e 83       	std	Y+6, r25	; 0x06
    6c1a:	8d 83       	std	Y+5, r24	; 0x05
    6c1c:	3f c0       	rjmp	.+126    	; 0x6c9c <FingerPS_Enrollment+0xce0>
	else if (__tmp > 65535)
    6c1e:	6f 81       	ldd	r22, Y+7	; 0x07
    6c20:	78 85       	ldd	r23, Y+8	; 0x08
    6c22:	89 85       	ldd	r24, Y+9	; 0x09
    6c24:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c26:	20 e0       	ldi	r18, 0x00	; 0
    6c28:	3f ef       	ldi	r19, 0xFF	; 255
    6c2a:	4f e7       	ldi	r20, 0x7F	; 127
    6c2c:	57 e4       	ldi	r21, 0x47	; 71
    6c2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6c32:	18 16       	cp	r1, r24
    6c34:	4c f5       	brge	.+82     	; 0x6c88 <FingerPS_Enrollment+0xccc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6c36:	6b 85       	ldd	r22, Y+11	; 0x0b
    6c38:	7c 85       	ldd	r23, Y+12	; 0x0c
    6c3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    6c3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    6c3e:	20 e0       	ldi	r18, 0x00	; 0
    6c40:	30 e0       	ldi	r19, 0x00	; 0
    6c42:	40 e2       	ldi	r20, 0x20	; 32
    6c44:	51 e4       	ldi	r21, 0x41	; 65
    6c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6c4a:	dc 01       	movw	r26, r24
    6c4c:	cb 01       	movw	r24, r22
    6c4e:	bc 01       	movw	r22, r24
    6c50:	cd 01       	movw	r24, r26
    6c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c56:	dc 01       	movw	r26, r24
    6c58:	cb 01       	movw	r24, r22
    6c5a:	9e 83       	std	Y+6, r25	; 0x06
    6c5c:	8d 83       	std	Y+5, r24	; 0x05
    6c5e:	0f c0       	rjmp	.+30     	; 0x6c7e <FingerPS_Enrollment+0xcc2>
    6c60:	80 e9       	ldi	r24, 0x90	; 144
    6c62:	91 e0       	ldi	r25, 0x01	; 1
    6c64:	9c 83       	std	Y+4, r25	; 0x04
    6c66:	8b 83       	std	Y+3, r24	; 0x03
    6c68:	8b 81       	ldd	r24, Y+3	; 0x03
    6c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    6c6c:	01 97       	sbiw	r24, 0x01	; 1
    6c6e:	f1 f7       	brne	.-4      	; 0x6c6c <FingerPS_Enrollment+0xcb0>
    6c70:	9c 83       	std	Y+4, r25	; 0x04
    6c72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6c74:	8d 81       	ldd	r24, Y+5	; 0x05
    6c76:	9e 81       	ldd	r25, Y+6	; 0x06
    6c78:	01 97       	sbiw	r24, 0x01	; 1
    6c7a:	9e 83       	std	Y+6, r25	; 0x06
    6c7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    6c80:	9e 81       	ldd	r25, Y+6	; 0x06
    6c82:	00 97       	sbiw	r24, 0x00	; 0
    6c84:	69 f7       	brne	.-38     	; 0x6c60 <FingerPS_Enrollment+0xca4>
    6c86:	14 c0       	rjmp	.+40     	; 0x6cb0 <FingerPS_Enrollment+0xcf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6c88:	6f 81       	ldd	r22, Y+7	; 0x07
    6c8a:	78 85       	ldd	r23, Y+8	; 0x08
    6c8c:	89 85       	ldd	r24, Y+9	; 0x09
    6c8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c94:	dc 01       	movw	r26, r24
    6c96:	cb 01       	movw	r24, r22
    6c98:	9e 83       	std	Y+6, r25	; 0x06
    6c9a:	8d 83       	std	Y+5, r24	; 0x05
    6c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    6c9e:	9e 81       	ldd	r25, Y+6	; 0x06
    6ca0:	9a 83       	std	Y+2, r25	; 0x02
    6ca2:	89 83       	std	Y+1, r24	; 0x01
    6ca4:	89 81       	ldd	r24, Y+1	; 0x01
    6ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    6ca8:	01 97       	sbiw	r24, 0x01	; 1
    6caa:	f1 f7       	brne	.-4      	; 0x6ca8 <FingerPS_Enrollment+0xcec>
    6cac:	9a 83       	std	Y+2, r25	; 0x02
    6cae:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		fp_status &= FingerPS_strTemplate(page_id);
    6cb0:	fe 01       	movw	r30, r28
    6cb2:	e0 57       	subi	r30, 0x70	; 112
    6cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    6cb6:	80 81       	ld	r24, Z
    6cb8:	0e 94 b4 2c 	call	0x5968	; 0x5968 <FingerPS_strTemplate>
    6cbc:	98 2f       	mov	r25, r24
    6cbe:	de 01       	movw	r26, r28
    6cc0:	a1 57       	subi	r26, 0x71	; 113
    6cc2:	bf 4f       	sbci	r27, 0xFF	; 255
    6cc4:	fe 01       	movw	r30, r28
    6cc6:	e1 57       	subi	r30, 0x71	; 113
    6cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    6cca:	80 81       	ld	r24, Z
    6ccc:	89 23       	and	r24, r25
    6cce:	8c 93       	st	X, r24
		*ret_id = 0;
    6cd0:	fe 01       	movw	r30, r28
    6cd2:	ef 56       	subi	r30, 0x6F	; 111
    6cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    6cd6:	01 90       	ld	r0, Z+
    6cd8:	f0 81       	ld	r31, Z
    6cda:	e0 2d       	mov	r30, r0
    6cdc:	11 82       	std	Z+1, r1	; 0x01
    6cde:	10 82       	st	Z, r1
    6ce0:	04 c0       	rjmp	.+8      	; 0x6cea <FingerPS_Enrollment+0xd2e>
	}
	else // this case mean the image existed before and we can not enroll same finger in other location
	{
		fp_status = 0; // that mean image already existed
    6ce2:	fe 01       	movw	r30, r28
    6ce4:	e1 57       	subi	r30, 0x71	; 113
    6ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    6ce8:	10 82       	st	Z, r1
	}


	return fp_status;
    6cea:	fe 01       	movw	r30, r28
    6cec:	e1 57       	subi	r30, 0x71	; 113
    6cee:	ff 4f       	sbci	r31, 0xFF	; 255
    6cf0:	80 81       	ld	r24, Z
}
    6cf2:	ce 56       	subi	r28, 0x6E	; 110
    6cf4:	df 4f       	sbci	r29, 0xFF	; 255
    6cf6:	0f b6       	in	r0, 0x3f	; 63
    6cf8:	f8 94       	cli
    6cfa:	de bf       	out	0x3e, r29	; 62
    6cfc:	0f be       	out	0x3f, r0	; 63
    6cfe:	cd bf       	out	0x3d, r28	; 61
    6d00:	cf 91       	pop	r28
    6d02:	df 91       	pop	r29
    6d04:	1f 91       	pop	r17
    6d06:	0f 91       	pop	r16
    6d08:	08 95       	ret

00006d0a <FingerPS_Attendance>:


u8 FingerPS_Attendance(u16 *ret_pageid)
{
    6d0a:	0f 93       	push	r16
    6d0c:	1f 93       	push	r17
    6d0e:	df 93       	push	r29
    6d10:	cf 93       	push	r28
    6d12:	cd b7       	in	r28, 0x3d	; 61
    6d14:	de b7       	in	r29, 0x3e	; 62
    6d16:	c9 54       	subi	r28, 0x49	; 73
    6d18:	d0 40       	sbci	r29, 0x00	; 0
    6d1a:	0f b6       	in	r0, 0x3f	; 63
    6d1c:	f8 94       	cli
    6d1e:	de bf       	out	0x3e, r29	; 62
    6d20:	0f be       	out	0x3f, r0	; 63
    6d22:	cd bf       	out	0x3d, r28	; 61
    6d24:	fe 01       	movw	r30, r28
    6d26:	e8 5b       	subi	r30, 0xB8	; 184
    6d28:	ff 4f       	sbci	r31, 0xFF	; 255
    6d2a:	91 83       	std	Z+1, r25	; 0x01
    6d2c:	80 83       	st	Z, r24
	u8 fp_status = SUCCESS;
    6d2e:	fe 01       	movw	r30, r28
    6d30:	e9 5b       	subi	r30, 0xB9	; 185
    6d32:	ff 4f       	sbci	r31, 0xFF	; 255
    6d34:	81 e0       	ldi	r24, 0x01	; 1
    6d36:	80 83       	st	Z, r24

	/* attendance */
	fp_status &= FingerPS_genImg();
    6d38:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <FingerPS_genImg>
    6d3c:	98 2f       	mov	r25, r24
    6d3e:	de 01       	movw	r26, r28
    6d40:	a9 5b       	subi	r26, 0xB9	; 185
    6d42:	bf 4f       	sbci	r27, 0xFF	; 255
    6d44:	fe 01       	movw	r30, r28
    6d46:	e9 5b       	subi	r30, 0xB9	; 185
    6d48:	ff 4f       	sbci	r31, 0xFF	; 255
    6d4a:	80 81       	ld	r24, Z
    6d4c:	89 23       	and	r24, r25
    6d4e:	8c 93       	st	X, r24
    6d50:	fe 01       	movw	r30, r28
    6d52:	ed 5b       	subi	r30, 0xBD	; 189
    6d54:	ff 4f       	sbci	r31, 0xFF	; 255
    6d56:	80 e0       	ldi	r24, 0x00	; 0
    6d58:	90 e0       	ldi	r25, 0x00	; 0
    6d5a:	a8 e4       	ldi	r26, 0x48	; 72
    6d5c:	b2 e4       	ldi	r27, 0x42	; 66
    6d5e:	80 83       	st	Z, r24
    6d60:	91 83       	std	Z+1, r25	; 0x01
    6d62:	a2 83       	std	Z+2, r26	; 0x02
    6d64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6d66:	8e 01       	movw	r16, r28
    6d68:	01 5c       	subi	r16, 0xC1	; 193
    6d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    6d6c:	fe 01       	movw	r30, r28
    6d6e:	ed 5b       	subi	r30, 0xBD	; 189
    6d70:	ff 4f       	sbci	r31, 0xFF	; 255
    6d72:	60 81       	ld	r22, Z
    6d74:	71 81       	ldd	r23, Z+1	; 0x01
    6d76:	82 81       	ldd	r24, Z+2	; 0x02
    6d78:	93 81       	ldd	r25, Z+3	; 0x03
    6d7a:	20 e0       	ldi	r18, 0x00	; 0
    6d7c:	30 e0       	ldi	r19, 0x00	; 0
    6d7e:	4a e7       	ldi	r20, 0x7A	; 122
    6d80:	55 e4       	ldi	r21, 0x45	; 69
    6d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6d86:	dc 01       	movw	r26, r24
    6d88:	cb 01       	movw	r24, r22
    6d8a:	f8 01       	movw	r30, r16
    6d8c:	80 83       	st	Z, r24
    6d8e:	91 83       	std	Z+1, r25	; 0x01
    6d90:	a2 83       	std	Z+2, r26	; 0x02
    6d92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6d94:	fe 01       	movw	r30, r28
    6d96:	ff 96       	adiw	r30, 0x3f	; 63
    6d98:	60 81       	ld	r22, Z
    6d9a:	71 81       	ldd	r23, Z+1	; 0x01
    6d9c:	82 81       	ldd	r24, Z+2	; 0x02
    6d9e:	93 81       	ldd	r25, Z+3	; 0x03
    6da0:	20 e0       	ldi	r18, 0x00	; 0
    6da2:	30 e0       	ldi	r19, 0x00	; 0
    6da4:	40 e8       	ldi	r20, 0x80	; 128
    6da6:	5f e3       	ldi	r21, 0x3F	; 63
    6da8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6dac:	88 23       	and	r24, r24
    6dae:	2c f4       	brge	.+10     	; 0x6dba <FingerPS_Attendance+0xb0>
		__ticks = 1;
    6db0:	81 e0       	ldi	r24, 0x01	; 1
    6db2:	90 e0       	ldi	r25, 0x00	; 0
    6db4:	9e af       	std	Y+62, r25	; 0x3e
    6db6:	8d af       	std	Y+61, r24	; 0x3d
    6db8:	46 c0       	rjmp	.+140    	; 0x6e46 <FingerPS_Attendance+0x13c>
	else if (__tmp > 65535)
    6dba:	fe 01       	movw	r30, r28
    6dbc:	ff 96       	adiw	r30, 0x3f	; 63
    6dbe:	60 81       	ld	r22, Z
    6dc0:	71 81       	ldd	r23, Z+1	; 0x01
    6dc2:	82 81       	ldd	r24, Z+2	; 0x02
    6dc4:	93 81       	ldd	r25, Z+3	; 0x03
    6dc6:	20 e0       	ldi	r18, 0x00	; 0
    6dc8:	3f ef       	ldi	r19, 0xFF	; 255
    6dca:	4f e7       	ldi	r20, 0x7F	; 127
    6dcc:	57 e4       	ldi	r21, 0x47	; 71
    6dce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6dd2:	18 16       	cp	r1, r24
    6dd4:	64 f5       	brge	.+88     	; 0x6e2e <FingerPS_Attendance+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6dd6:	fe 01       	movw	r30, r28
    6dd8:	ed 5b       	subi	r30, 0xBD	; 189
    6dda:	ff 4f       	sbci	r31, 0xFF	; 255
    6ddc:	60 81       	ld	r22, Z
    6dde:	71 81       	ldd	r23, Z+1	; 0x01
    6de0:	82 81       	ldd	r24, Z+2	; 0x02
    6de2:	93 81       	ldd	r25, Z+3	; 0x03
    6de4:	20 e0       	ldi	r18, 0x00	; 0
    6de6:	30 e0       	ldi	r19, 0x00	; 0
    6de8:	40 e2       	ldi	r20, 0x20	; 32
    6dea:	51 e4       	ldi	r21, 0x41	; 65
    6dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6df0:	dc 01       	movw	r26, r24
    6df2:	cb 01       	movw	r24, r22
    6df4:	bc 01       	movw	r22, r24
    6df6:	cd 01       	movw	r24, r26
    6df8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6dfc:	dc 01       	movw	r26, r24
    6dfe:	cb 01       	movw	r24, r22
    6e00:	9e af       	std	Y+62, r25	; 0x3e
    6e02:	8d af       	std	Y+61, r24	; 0x3d
    6e04:	0f c0       	rjmp	.+30     	; 0x6e24 <FingerPS_Attendance+0x11a>
    6e06:	80 e9       	ldi	r24, 0x90	; 144
    6e08:	91 e0       	ldi	r25, 0x01	; 1
    6e0a:	9c af       	std	Y+60, r25	; 0x3c
    6e0c:	8b af       	std	Y+59, r24	; 0x3b
    6e0e:	8b ad       	ldd	r24, Y+59	; 0x3b
    6e10:	9c ad       	ldd	r25, Y+60	; 0x3c
    6e12:	01 97       	sbiw	r24, 0x01	; 1
    6e14:	f1 f7       	brne	.-4      	; 0x6e12 <FingerPS_Attendance+0x108>
    6e16:	9c af       	std	Y+60, r25	; 0x3c
    6e18:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6e1a:	8d ad       	ldd	r24, Y+61	; 0x3d
    6e1c:	9e ad       	ldd	r25, Y+62	; 0x3e
    6e1e:	01 97       	sbiw	r24, 0x01	; 1
    6e20:	9e af       	std	Y+62, r25	; 0x3e
    6e22:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6e24:	8d ad       	ldd	r24, Y+61	; 0x3d
    6e26:	9e ad       	ldd	r25, Y+62	; 0x3e
    6e28:	00 97       	sbiw	r24, 0x00	; 0
    6e2a:	69 f7       	brne	.-38     	; 0x6e06 <FingerPS_Attendance+0xfc>
    6e2c:	16 c0       	rjmp	.+44     	; 0x6e5a <FingerPS_Attendance+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6e2e:	fe 01       	movw	r30, r28
    6e30:	ff 96       	adiw	r30, 0x3f	; 63
    6e32:	60 81       	ld	r22, Z
    6e34:	71 81       	ldd	r23, Z+1	; 0x01
    6e36:	82 81       	ldd	r24, Z+2	; 0x02
    6e38:	93 81       	ldd	r25, Z+3	; 0x03
    6e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6e3e:	dc 01       	movw	r26, r24
    6e40:	cb 01       	movw	r24, r22
    6e42:	9e af       	std	Y+62, r25	; 0x3e
    6e44:	8d af       	std	Y+61, r24	; 0x3d
    6e46:	8d ad       	ldd	r24, Y+61	; 0x3d
    6e48:	9e ad       	ldd	r25, Y+62	; 0x3e
    6e4a:	9a af       	std	Y+58, r25	; 0x3a
    6e4c:	89 af       	std	Y+57, r24	; 0x39
    6e4e:	89 ad       	ldd	r24, Y+57	; 0x39
    6e50:	9a ad       	ldd	r25, Y+58	; 0x3a
    6e52:	01 97       	sbiw	r24, 0x01	; 1
    6e54:	f1 f7       	brne	.-4      	; 0x6e52 <FingerPS_Attendance+0x148>
    6e56:	9a af       	std	Y+58, r25	; 0x3a
    6e58:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	fp_status &= FingerPS_convertImg2CharFile(0x01);
    6e5a:	81 e0       	ldi	r24, 0x01	; 1
    6e5c:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <FingerPS_convertImg2CharFile>
    6e60:	98 2f       	mov	r25, r24
    6e62:	de 01       	movw	r26, r28
    6e64:	a9 5b       	subi	r26, 0xB9	; 185
    6e66:	bf 4f       	sbci	r27, 0xFF	; 255
    6e68:	fe 01       	movw	r30, r28
    6e6a:	e9 5b       	subi	r30, 0xB9	; 185
    6e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    6e6e:	80 81       	ld	r24, Z
    6e70:	89 23       	and	r24, r25
    6e72:	8c 93       	st	X, r24
    6e74:	80 e0       	ldi	r24, 0x00	; 0
    6e76:	90 e0       	ldi	r25, 0x00	; 0
    6e78:	a8 e4       	ldi	r26, 0x48	; 72
    6e7a:	b2 e4       	ldi	r27, 0x42	; 66
    6e7c:	8d ab       	std	Y+53, r24	; 0x35
    6e7e:	9e ab       	std	Y+54, r25	; 0x36
    6e80:	af ab       	std	Y+55, r26	; 0x37
    6e82:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6e84:	6d a9       	ldd	r22, Y+53	; 0x35
    6e86:	7e a9       	ldd	r23, Y+54	; 0x36
    6e88:	8f a9       	ldd	r24, Y+55	; 0x37
    6e8a:	98 ad       	ldd	r25, Y+56	; 0x38
    6e8c:	20 e0       	ldi	r18, 0x00	; 0
    6e8e:	30 e0       	ldi	r19, 0x00	; 0
    6e90:	4a e7       	ldi	r20, 0x7A	; 122
    6e92:	55 e4       	ldi	r21, 0x45	; 69
    6e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6e98:	dc 01       	movw	r26, r24
    6e9a:	cb 01       	movw	r24, r22
    6e9c:	89 ab       	std	Y+49, r24	; 0x31
    6e9e:	9a ab       	std	Y+50, r25	; 0x32
    6ea0:	ab ab       	std	Y+51, r26	; 0x33
    6ea2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    6ea4:	69 a9       	ldd	r22, Y+49	; 0x31
    6ea6:	7a a9       	ldd	r23, Y+50	; 0x32
    6ea8:	8b a9       	ldd	r24, Y+51	; 0x33
    6eaa:	9c a9       	ldd	r25, Y+52	; 0x34
    6eac:	20 e0       	ldi	r18, 0x00	; 0
    6eae:	30 e0       	ldi	r19, 0x00	; 0
    6eb0:	40 e8       	ldi	r20, 0x80	; 128
    6eb2:	5f e3       	ldi	r21, 0x3F	; 63
    6eb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6eb8:	88 23       	and	r24, r24
    6eba:	2c f4       	brge	.+10     	; 0x6ec6 <FingerPS_Attendance+0x1bc>
		__ticks = 1;
    6ebc:	81 e0       	ldi	r24, 0x01	; 1
    6ebe:	90 e0       	ldi	r25, 0x00	; 0
    6ec0:	98 ab       	std	Y+48, r25	; 0x30
    6ec2:	8f a7       	std	Y+47, r24	; 0x2f
    6ec4:	3f c0       	rjmp	.+126    	; 0x6f44 <FingerPS_Attendance+0x23a>
	else if (__tmp > 65535)
    6ec6:	69 a9       	ldd	r22, Y+49	; 0x31
    6ec8:	7a a9       	ldd	r23, Y+50	; 0x32
    6eca:	8b a9       	ldd	r24, Y+51	; 0x33
    6ecc:	9c a9       	ldd	r25, Y+52	; 0x34
    6ece:	20 e0       	ldi	r18, 0x00	; 0
    6ed0:	3f ef       	ldi	r19, 0xFF	; 255
    6ed2:	4f e7       	ldi	r20, 0x7F	; 127
    6ed4:	57 e4       	ldi	r21, 0x47	; 71
    6ed6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6eda:	18 16       	cp	r1, r24
    6edc:	4c f5       	brge	.+82     	; 0x6f30 <FingerPS_Attendance+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6ede:	6d a9       	ldd	r22, Y+53	; 0x35
    6ee0:	7e a9       	ldd	r23, Y+54	; 0x36
    6ee2:	8f a9       	ldd	r24, Y+55	; 0x37
    6ee4:	98 ad       	ldd	r25, Y+56	; 0x38
    6ee6:	20 e0       	ldi	r18, 0x00	; 0
    6ee8:	30 e0       	ldi	r19, 0x00	; 0
    6eea:	40 e2       	ldi	r20, 0x20	; 32
    6eec:	51 e4       	ldi	r21, 0x41	; 65
    6eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6ef2:	dc 01       	movw	r26, r24
    6ef4:	cb 01       	movw	r24, r22
    6ef6:	bc 01       	movw	r22, r24
    6ef8:	cd 01       	movw	r24, r26
    6efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6efe:	dc 01       	movw	r26, r24
    6f00:	cb 01       	movw	r24, r22
    6f02:	98 ab       	std	Y+48, r25	; 0x30
    6f04:	8f a7       	std	Y+47, r24	; 0x2f
    6f06:	0f c0       	rjmp	.+30     	; 0x6f26 <FingerPS_Attendance+0x21c>
    6f08:	80 e9       	ldi	r24, 0x90	; 144
    6f0a:	91 e0       	ldi	r25, 0x01	; 1
    6f0c:	9e a7       	std	Y+46, r25	; 0x2e
    6f0e:	8d a7       	std	Y+45, r24	; 0x2d
    6f10:	8d a5       	ldd	r24, Y+45	; 0x2d
    6f12:	9e a5       	ldd	r25, Y+46	; 0x2e
    6f14:	01 97       	sbiw	r24, 0x01	; 1
    6f16:	f1 f7       	brne	.-4      	; 0x6f14 <FingerPS_Attendance+0x20a>
    6f18:	9e a7       	std	Y+46, r25	; 0x2e
    6f1a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6f1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    6f1e:	98 a9       	ldd	r25, Y+48	; 0x30
    6f20:	01 97       	sbiw	r24, 0x01	; 1
    6f22:	98 ab       	std	Y+48, r25	; 0x30
    6f24:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6f26:	8f a5       	ldd	r24, Y+47	; 0x2f
    6f28:	98 a9       	ldd	r25, Y+48	; 0x30
    6f2a:	00 97       	sbiw	r24, 0x00	; 0
    6f2c:	69 f7       	brne	.-38     	; 0x6f08 <FingerPS_Attendance+0x1fe>
    6f2e:	14 c0       	rjmp	.+40     	; 0x6f58 <FingerPS_Attendance+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6f30:	69 a9       	ldd	r22, Y+49	; 0x31
    6f32:	7a a9       	ldd	r23, Y+50	; 0x32
    6f34:	8b a9       	ldd	r24, Y+51	; 0x33
    6f36:	9c a9       	ldd	r25, Y+52	; 0x34
    6f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6f3c:	dc 01       	movw	r26, r24
    6f3e:	cb 01       	movw	r24, r22
    6f40:	98 ab       	std	Y+48, r25	; 0x30
    6f42:	8f a7       	std	Y+47, r24	; 0x2f
    6f44:	8f a5       	ldd	r24, Y+47	; 0x2f
    6f46:	98 a9       	ldd	r25, Y+48	; 0x30
    6f48:	9c a7       	std	Y+44, r25	; 0x2c
    6f4a:	8b a7       	std	Y+43, r24	; 0x2b
    6f4c:	8b a5       	ldd	r24, Y+43	; 0x2b
    6f4e:	9c a5       	ldd	r25, Y+44	; 0x2c
    6f50:	01 97       	sbiw	r24, 0x01	; 1
    6f52:	f1 f7       	brne	.-4      	; 0x6f50 <FingerPS_Attendance+0x246>
    6f54:	9c a7       	std	Y+44, r25	; 0x2c
    6f56:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	fp_status &= FingerPS_genImg();
    6f58:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <FingerPS_genImg>
    6f5c:	98 2f       	mov	r25, r24
    6f5e:	de 01       	movw	r26, r28
    6f60:	a9 5b       	subi	r26, 0xB9	; 185
    6f62:	bf 4f       	sbci	r27, 0xFF	; 255
    6f64:	fe 01       	movw	r30, r28
    6f66:	e9 5b       	subi	r30, 0xB9	; 185
    6f68:	ff 4f       	sbci	r31, 0xFF	; 255
    6f6a:	80 81       	ld	r24, Z
    6f6c:	89 23       	and	r24, r25
    6f6e:	8c 93       	st	X, r24
    6f70:	80 e0       	ldi	r24, 0x00	; 0
    6f72:	90 e0       	ldi	r25, 0x00	; 0
    6f74:	a8 e4       	ldi	r26, 0x48	; 72
    6f76:	b2 e4       	ldi	r27, 0x42	; 66
    6f78:	8f a3       	std	Y+39, r24	; 0x27
    6f7a:	98 a7       	std	Y+40, r25	; 0x28
    6f7c:	a9 a7       	std	Y+41, r26	; 0x29
    6f7e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6f80:	6f a1       	ldd	r22, Y+39	; 0x27
    6f82:	78 a5       	ldd	r23, Y+40	; 0x28
    6f84:	89 a5       	ldd	r24, Y+41	; 0x29
    6f86:	9a a5       	ldd	r25, Y+42	; 0x2a
    6f88:	20 e0       	ldi	r18, 0x00	; 0
    6f8a:	30 e0       	ldi	r19, 0x00	; 0
    6f8c:	4a e7       	ldi	r20, 0x7A	; 122
    6f8e:	55 e4       	ldi	r21, 0x45	; 69
    6f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6f94:	dc 01       	movw	r26, r24
    6f96:	cb 01       	movw	r24, r22
    6f98:	8b a3       	std	Y+35, r24	; 0x23
    6f9a:	9c a3       	std	Y+36, r25	; 0x24
    6f9c:	ad a3       	std	Y+37, r26	; 0x25
    6f9e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6fa0:	6b a1       	ldd	r22, Y+35	; 0x23
    6fa2:	7c a1       	ldd	r23, Y+36	; 0x24
    6fa4:	8d a1       	ldd	r24, Y+37	; 0x25
    6fa6:	9e a1       	ldd	r25, Y+38	; 0x26
    6fa8:	20 e0       	ldi	r18, 0x00	; 0
    6faa:	30 e0       	ldi	r19, 0x00	; 0
    6fac:	40 e8       	ldi	r20, 0x80	; 128
    6fae:	5f e3       	ldi	r21, 0x3F	; 63
    6fb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6fb4:	88 23       	and	r24, r24
    6fb6:	2c f4       	brge	.+10     	; 0x6fc2 <FingerPS_Attendance+0x2b8>
		__ticks = 1;
    6fb8:	81 e0       	ldi	r24, 0x01	; 1
    6fba:	90 e0       	ldi	r25, 0x00	; 0
    6fbc:	9a a3       	std	Y+34, r25	; 0x22
    6fbe:	89 a3       	std	Y+33, r24	; 0x21
    6fc0:	3f c0       	rjmp	.+126    	; 0x7040 <FingerPS_Attendance+0x336>
	else if (__tmp > 65535)
    6fc2:	6b a1       	ldd	r22, Y+35	; 0x23
    6fc4:	7c a1       	ldd	r23, Y+36	; 0x24
    6fc6:	8d a1       	ldd	r24, Y+37	; 0x25
    6fc8:	9e a1       	ldd	r25, Y+38	; 0x26
    6fca:	20 e0       	ldi	r18, 0x00	; 0
    6fcc:	3f ef       	ldi	r19, 0xFF	; 255
    6fce:	4f e7       	ldi	r20, 0x7F	; 127
    6fd0:	57 e4       	ldi	r21, 0x47	; 71
    6fd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6fd6:	18 16       	cp	r1, r24
    6fd8:	4c f5       	brge	.+82     	; 0x702c <FingerPS_Attendance+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6fda:	6f a1       	ldd	r22, Y+39	; 0x27
    6fdc:	78 a5       	ldd	r23, Y+40	; 0x28
    6fde:	89 a5       	ldd	r24, Y+41	; 0x29
    6fe0:	9a a5       	ldd	r25, Y+42	; 0x2a
    6fe2:	20 e0       	ldi	r18, 0x00	; 0
    6fe4:	30 e0       	ldi	r19, 0x00	; 0
    6fe6:	40 e2       	ldi	r20, 0x20	; 32
    6fe8:	51 e4       	ldi	r21, 0x41	; 65
    6fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6fee:	dc 01       	movw	r26, r24
    6ff0:	cb 01       	movw	r24, r22
    6ff2:	bc 01       	movw	r22, r24
    6ff4:	cd 01       	movw	r24, r26
    6ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ffa:	dc 01       	movw	r26, r24
    6ffc:	cb 01       	movw	r24, r22
    6ffe:	9a a3       	std	Y+34, r25	; 0x22
    7000:	89 a3       	std	Y+33, r24	; 0x21
    7002:	0f c0       	rjmp	.+30     	; 0x7022 <FingerPS_Attendance+0x318>
    7004:	80 e9       	ldi	r24, 0x90	; 144
    7006:	91 e0       	ldi	r25, 0x01	; 1
    7008:	98 a3       	std	Y+32, r25	; 0x20
    700a:	8f 8f       	std	Y+31, r24	; 0x1f
    700c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    700e:	98 a1       	ldd	r25, Y+32	; 0x20
    7010:	01 97       	sbiw	r24, 0x01	; 1
    7012:	f1 f7       	brne	.-4      	; 0x7010 <FingerPS_Attendance+0x306>
    7014:	98 a3       	std	Y+32, r25	; 0x20
    7016:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7018:	89 a1       	ldd	r24, Y+33	; 0x21
    701a:	9a a1       	ldd	r25, Y+34	; 0x22
    701c:	01 97       	sbiw	r24, 0x01	; 1
    701e:	9a a3       	std	Y+34, r25	; 0x22
    7020:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7022:	89 a1       	ldd	r24, Y+33	; 0x21
    7024:	9a a1       	ldd	r25, Y+34	; 0x22
    7026:	00 97       	sbiw	r24, 0x00	; 0
    7028:	69 f7       	brne	.-38     	; 0x7004 <FingerPS_Attendance+0x2fa>
    702a:	14 c0       	rjmp	.+40     	; 0x7054 <FingerPS_Attendance+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    702c:	6b a1       	ldd	r22, Y+35	; 0x23
    702e:	7c a1       	ldd	r23, Y+36	; 0x24
    7030:	8d a1       	ldd	r24, Y+37	; 0x25
    7032:	9e a1       	ldd	r25, Y+38	; 0x26
    7034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7038:	dc 01       	movw	r26, r24
    703a:	cb 01       	movw	r24, r22
    703c:	9a a3       	std	Y+34, r25	; 0x22
    703e:	89 a3       	std	Y+33, r24	; 0x21
    7040:	89 a1       	ldd	r24, Y+33	; 0x21
    7042:	9a a1       	ldd	r25, Y+34	; 0x22
    7044:	9e 8f       	std	Y+30, r25	; 0x1e
    7046:	8d 8f       	std	Y+29, r24	; 0x1d
    7048:	8d 8d       	ldd	r24, Y+29	; 0x1d
    704a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    704c:	01 97       	sbiw	r24, 0x01	; 1
    704e:	f1 f7       	brne	.-4      	; 0x704c <FingerPS_Attendance+0x342>
    7050:	9e 8f       	std	Y+30, r25	; 0x1e
    7052:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);
	fp_status &= FingerPS_convertImg2CharFile(0x02);
    7054:	82 e0       	ldi	r24, 0x02	; 2
    7056:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <FingerPS_convertImg2CharFile>
    705a:	98 2f       	mov	r25, r24
    705c:	de 01       	movw	r26, r28
    705e:	a9 5b       	subi	r26, 0xB9	; 185
    7060:	bf 4f       	sbci	r27, 0xFF	; 255
    7062:	fe 01       	movw	r30, r28
    7064:	e9 5b       	subi	r30, 0xB9	; 185
    7066:	ff 4f       	sbci	r31, 0xFF	; 255
    7068:	80 81       	ld	r24, Z
    706a:	89 23       	and	r24, r25
    706c:	8c 93       	st	X, r24
    706e:	80 e0       	ldi	r24, 0x00	; 0
    7070:	90 e0       	ldi	r25, 0x00	; 0
    7072:	a8 e4       	ldi	r26, 0x48	; 72
    7074:	b2 e4       	ldi	r27, 0x42	; 66
    7076:	89 8f       	std	Y+25, r24	; 0x19
    7078:	9a 8f       	std	Y+26, r25	; 0x1a
    707a:	ab 8f       	std	Y+27, r26	; 0x1b
    707c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    707e:	69 8d       	ldd	r22, Y+25	; 0x19
    7080:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7082:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7084:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7086:	20 e0       	ldi	r18, 0x00	; 0
    7088:	30 e0       	ldi	r19, 0x00	; 0
    708a:	4a e7       	ldi	r20, 0x7A	; 122
    708c:	55 e4       	ldi	r21, 0x45	; 69
    708e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7092:	dc 01       	movw	r26, r24
    7094:	cb 01       	movw	r24, r22
    7096:	8d 8b       	std	Y+21, r24	; 0x15
    7098:	9e 8b       	std	Y+22, r25	; 0x16
    709a:	af 8b       	std	Y+23, r26	; 0x17
    709c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    709e:	6d 89       	ldd	r22, Y+21	; 0x15
    70a0:	7e 89       	ldd	r23, Y+22	; 0x16
    70a2:	8f 89       	ldd	r24, Y+23	; 0x17
    70a4:	98 8d       	ldd	r25, Y+24	; 0x18
    70a6:	20 e0       	ldi	r18, 0x00	; 0
    70a8:	30 e0       	ldi	r19, 0x00	; 0
    70aa:	40 e8       	ldi	r20, 0x80	; 128
    70ac:	5f e3       	ldi	r21, 0x3F	; 63
    70ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    70b2:	88 23       	and	r24, r24
    70b4:	2c f4       	brge	.+10     	; 0x70c0 <FingerPS_Attendance+0x3b6>
		__ticks = 1;
    70b6:	81 e0       	ldi	r24, 0x01	; 1
    70b8:	90 e0       	ldi	r25, 0x00	; 0
    70ba:	9c 8b       	std	Y+20, r25	; 0x14
    70bc:	8b 8b       	std	Y+19, r24	; 0x13
    70be:	3f c0       	rjmp	.+126    	; 0x713e <FingerPS_Attendance+0x434>
	else if (__tmp > 65535)
    70c0:	6d 89       	ldd	r22, Y+21	; 0x15
    70c2:	7e 89       	ldd	r23, Y+22	; 0x16
    70c4:	8f 89       	ldd	r24, Y+23	; 0x17
    70c6:	98 8d       	ldd	r25, Y+24	; 0x18
    70c8:	20 e0       	ldi	r18, 0x00	; 0
    70ca:	3f ef       	ldi	r19, 0xFF	; 255
    70cc:	4f e7       	ldi	r20, 0x7F	; 127
    70ce:	57 e4       	ldi	r21, 0x47	; 71
    70d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    70d4:	18 16       	cp	r1, r24
    70d6:	4c f5       	brge	.+82     	; 0x712a <FingerPS_Attendance+0x420>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    70d8:	69 8d       	ldd	r22, Y+25	; 0x19
    70da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    70dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    70de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    70e0:	20 e0       	ldi	r18, 0x00	; 0
    70e2:	30 e0       	ldi	r19, 0x00	; 0
    70e4:	40 e2       	ldi	r20, 0x20	; 32
    70e6:	51 e4       	ldi	r21, 0x41	; 65
    70e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    70ec:	dc 01       	movw	r26, r24
    70ee:	cb 01       	movw	r24, r22
    70f0:	bc 01       	movw	r22, r24
    70f2:	cd 01       	movw	r24, r26
    70f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    70f8:	dc 01       	movw	r26, r24
    70fa:	cb 01       	movw	r24, r22
    70fc:	9c 8b       	std	Y+20, r25	; 0x14
    70fe:	8b 8b       	std	Y+19, r24	; 0x13
    7100:	0f c0       	rjmp	.+30     	; 0x7120 <FingerPS_Attendance+0x416>
    7102:	80 e9       	ldi	r24, 0x90	; 144
    7104:	91 e0       	ldi	r25, 0x01	; 1
    7106:	9a 8b       	std	Y+18, r25	; 0x12
    7108:	89 8b       	std	Y+17, r24	; 0x11
    710a:	89 89       	ldd	r24, Y+17	; 0x11
    710c:	9a 89       	ldd	r25, Y+18	; 0x12
    710e:	01 97       	sbiw	r24, 0x01	; 1
    7110:	f1 f7       	brne	.-4      	; 0x710e <FingerPS_Attendance+0x404>
    7112:	9a 8b       	std	Y+18, r25	; 0x12
    7114:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7116:	8b 89       	ldd	r24, Y+19	; 0x13
    7118:	9c 89       	ldd	r25, Y+20	; 0x14
    711a:	01 97       	sbiw	r24, 0x01	; 1
    711c:	9c 8b       	std	Y+20, r25	; 0x14
    711e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7120:	8b 89       	ldd	r24, Y+19	; 0x13
    7122:	9c 89       	ldd	r25, Y+20	; 0x14
    7124:	00 97       	sbiw	r24, 0x00	; 0
    7126:	69 f7       	brne	.-38     	; 0x7102 <FingerPS_Attendance+0x3f8>
    7128:	14 c0       	rjmp	.+40     	; 0x7152 <FingerPS_Attendance+0x448>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    712a:	6d 89       	ldd	r22, Y+21	; 0x15
    712c:	7e 89       	ldd	r23, Y+22	; 0x16
    712e:	8f 89       	ldd	r24, Y+23	; 0x17
    7130:	98 8d       	ldd	r25, Y+24	; 0x18
    7132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7136:	dc 01       	movw	r26, r24
    7138:	cb 01       	movw	r24, r22
    713a:	9c 8b       	std	Y+20, r25	; 0x14
    713c:	8b 8b       	std	Y+19, r24	; 0x13
    713e:	8b 89       	ldd	r24, Y+19	; 0x13
    7140:	9c 89       	ldd	r25, Y+20	; 0x14
    7142:	98 8b       	std	Y+16, r25	; 0x10
    7144:	8f 87       	std	Y+15, r24	; 0x0f
    7146:	8f 85       	ldd	r24, Y+15	; 0x0f
    7148:	98 89       	ldd	r25, Y+16	; 0x10
    714a:	01 97       	sbiw	r24, 0x01	; 1
    714c:	f1 f7       	brne	.-4      	; 0x714a <FingerPS_Attendance+0x440>
    714e:	98 8b       	std	Y+16, r25	; 0x10
    7150:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	fp_status &= FingerPS_genTemplate();
    7152:	0e 94 1b 2b 	call	0x5636	; 0x5636 <FingerPS_genTemplate>
    7156:	98 2f       	mov	r25, r24
    7158:	de 01       	movw	r26, r28
    715a:	a9 5b       	subi	r26, 0xB9	; 185
    715c:	bf 4f       	sbci	r27, 0xFF	; 255
    715e:	fe 01       	movw	r30, r28
    7160:	e9 5b       	subi	r30, 0xB9	; 185
    7162:	ff 4f       	sbci	r31, 0xFF	; 255
    7164:	80 81       	ld	r24, Z
    7166:	89 23       	and	r24, r25
    7168:	8c 93       	st	X, r24
    716a:	80 e0       	ldi	r24, 0x00	; 0
    716c:	90 e0       	ldi	r25, 0x00	; 0
    716e:	a8 e4       	ldi	r26, 0x48	; 72
    7170:	b2 e4       	ldi	r27, 0x42	; 66
    7172:	8b 87       	std	Y+11, r24	; 0x0b
    7174:	9c 87       	std	Y+12, r25	; 0x0c
    7176:	ad 87       	std	Y+13, r26	; 0x0d
    7178:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    717a:	6b 85       	ldd	r22, Y+11	; 0x0b
    717c:	7c 85       	ldd	r23, Y+12	; 0x0c
    717e:	8d 85       	ldd	r24, Y+13	; 0x0d
    7180:	9e 85       	ldd	r25, Y+14	; 0x0e
    7182:	20 e0       	ldi	r18, 0x00	; 0
    7184:	30 e0       	ldi	r19, 0x00	; 0
    7186:	4a e7       	ldi	r20, 0x7A	; 122
    7188:	55 e4       	ldi	r21, 0x45	; 69
    718a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    718e:	dc 01       	movw	r26, r24
    7190:	cb 01       	movw	r24, r22
    7192:	8f 83       	std	Y+7, r24	; 0x07
    7194:	98 87       	std	Y+8, r25	; 0x08
    7196:	a9 87       	std	Y+9, r26	; 0x09
    7198:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    719a:	6f 81       	ldd	r22, Y+7	; 0x07
    719c:	78 85       	ldd	r23, Y+8	; 0x08
    719e:	89 85       	ldd	r24, Y+9	; 0x09
    71a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    71a2:	20 e0       	ldi	r18, 0x00	; 0
    71a4:	30 e0       	ldi	r19, 0x00	; 0
    71a6:	40 e8       	ldi	r20, 0x80	; 128
    71a8:	5f e3       	ldi	r21, 0x3F	; 63
    71aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    71ae:	88 23       	and	r24, r24
    71b0:	2c f4       	brge	.+10     	; 0x71bc <FingerPS_Attendance+0x4b2>
		__ticks = 1;
    71b2:	81 e0       	ldi	r24, 0x01	; 1
    71b4:	90 e0       	ldi	r25, 0x00	; 0
    71b6:	9e 83       	std	Y+6, r25	; 0x06
    71b8:	8d 83       	std	Y+5, r24	; 0x05
    71ba:	3f c0       	rjmp	.+126    	; 0x723a <FingerPS_Attendance+0x530>
	else if (__tmp > 65535)
    71bc:	6f 81       	ldd	r22, Y+7	; 0x07
    71be:	78 85       	ldd	r23, Y+8	; 0x08
    71c0:	89 85       	ldd	r24, Y+9	; 0x09
    71c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    71c4:	20 e0       	ldi	r18, 0x00	; 0
    71c6:	3f ef       	ldi	r19, 0xFF	; 255
    71c8:	4f e7       	ldi	r20, 0x7F	; 127
    71ca:	57 e4       	ldi	r21, 0x47	; 71
    71cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    71d0:	18 16       	cp	r1, r24
    71d2:	4c f5       	brge	.+82     	; 0x7226 <FingerPS_Attendance+0x51c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    71d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    71d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    71d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    71da:	9e 85       	ldd	r25, Y+14	; 0x0e
    71dc:	20 e0       	ldi	r18, 0x00	; 0
    71de:	30 e0       	ldi	r19, 0x00	; 0
    71e0:	40 e2       	ldi	r20, 0x20	; 32
    71e2:	51 e4       	ldi	r21, 0x41	; 65
    71e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    71e8:	dc 01       	movw	r26, r24
    71ea:	cb 01       	movw	r24, r22
    71ec:	bc 01       	movw	r22, r24
    71ee:	cd 01       	movw	r24, r26
    71f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    71f4:	dc 01       	movw	r26, r24
    71f6:	cb 01       	movw	r24, r22
    71f8:	9e 83       	std	Y+6, r25	; 0x06
    71fa:	8d 83       	std	Y+5, r24	; 0x05
    71fc:	0f c0       	rjmp	.+30     	; 0x721c <FingerPS_Attendance+0x512>
    71fe:	80 e9       	ldi	r24, 0x90	; 144
    7200:	91 e0       	ldi	r25, 0x01	; 1
    7202:	9c 83       	std	Y+4, r25	; 0x04
    7204:	8b 83       	std	Y+3, r24	; 0x03
    7206:	8b 81       	ldd	r24, Y+3	; 0x03
    7208:	9c 81       	ldd	r25, Y+4	; 0x04
    720a:	01 97       	sbiw	r24, 0x01	; 1
    720c:	f1 f7       	brne	.-4      	; 0x720a <FingerPS_Attendance+0x500>
    720e:	9c 83       	std	Y+4, r25	; 0x04
    7210:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7212:	8d 81       	ldd	r24, Y+5	; 0x05
    7214:	9e 81       	ldd	r25, Y+6	; 0x06
    7216:	01 97       	sbiw	r24, 0x01	; 1
    7218:	9e 83       	std	Y+6, r25	; 0x06
    721a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    721c:	8d 81       	ldd	r24, Y+5	; 0x05
    721e:	9e 81       	ldd	r25, Y+6	; 0x06
    7220:	00 97       	sbiw	r24, 0x00	; 0
    7222:	69 f7       	brne	.-38     	; 0x71fe <FingerPS_Attendance+0x4f4>
    7224:	14 c0       	rjmp	.+40     	; 0x724e <FingerPS_Attendance+0x544>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7226:	6f 81       	ldd	r22, Y+7	; 0x07
    7228:	78 85       	ldd	r23, Y+8	; 0x08
    722a:	89 85       	ldd	r24, Y+9	; 0x09
    722c:	9a 85       	ldd	r25, Y+10	; 0x0a
    722e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7232:	dc 01       	movw	r26, r24
    7234:	cb 01       	movw	r24, r22
    7236:	9e 83       	std	Y+6, r25	; 0x06
    7238:	8d 83       	std	Y+5, r24	; 0x05
    723a:	8d 81       	ldd	r24, Y+5	; 0x05
    723c:	9e 81       	ldd	r25, Y+6	; 0x06
    723e:	9a 83       	std	Y+2, r25	; 0x02
    7240:	89 83       	std	Y+1, r24	; 0x01
    7242:	89 81       	ldd	r24, Y+1	; 0x01
    7244:	9a 81       	ldd	r25, Y+2	; 0x02
    7246:	01 97       	sbiw	r24, 0x01	; 1
    7248:	f1 f7       	brne	.-4      	; 0x7246 <FingerPS_Attendance+0x53c>
    724a:	9a 83       	std	Y+2, r25	; 0x02
    724c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	fp_status &= FingerPS_searchFinger(ret_pageid);
    724e:	fe 01       	movw	r30, r28
    7250:	e8 5b       	subi	r30, 0xB8	; 184
    7252:	ff 4f       	sbci	r31, 0xFF	; 255
    7254:	80 81       	ld	r24, Z
    7256:	91 81       	ldd	r25, Z+1	; 0x01
    7258:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <FingerPS_searchFinger>
    725c:	98 2f       	mov	r25, r24
    725e:	de 01       	movw	r26, r28
    7260:	a9 5b       	subi	r26, 0xB9	; 185
    7262:	bf 4f       	sbci	r27, 0xFF	; 255
    7264:	fe 01       	movw	r30, r28
    7266:	e9 5b       	subi	r30, 0xB9	; 185
    7268:	ff 4f       	sbci	r31, 0xFF	; 255
    726a:	80 81       	ld	r24, Z
    726c:	89 23       	and	r24, r25
    726e:	8c 93       	st	X, r24

	return fp_status;
    7270:	fe 01       	movw	r30, r28
    7272:	e9 5b       	subi	r30, 0xB9	; 185
    7274:	ff 4f       	sbci	r31, 0xFF	; 255
    7276:	80 81       	ld	r24, Z
}
    7278:	c7 5b       	subi	r28, 0xB7	; 183
    727a:	df 4f       	sbci	r29, 0xFF	; 255
    727c:	0f b6       	in	r0, 0x3f	; 63
    727e:	f8 94       	cli
    7280:	de bf       	out	0x3e, r29	; 62
    7282:	0f be       	out	0x3f, r0	; 63
    7284:	cd bf       	out	0x3d, r28	; 61
    7286:	cf 91       	pop	r28
    7288:	df 91       	pop	r29
    728a:	1f 91       	pop	r17
    728c:	0f 91       	pop	r16
    728e:	08 95       	ret

00007290 <EEPROM_Init>:
#include "EEPROM.h"



void EEPROM_Init(u8 req_speed)
{
    7290:	df 93       	push	r29
    7292:	cf 93       	push	r28
    7294:	00 d0       	rcall	.+0      	; 0x7296 <EEPROM_Init+0x6>
    7296:	00 d0       	rcall	.+0      	; 0x7298 <EEPROM_Init+0x8>
    7298:	0f 92       	push	r0
    729a:	cd b7       	in	r28, 0x3d	; 61
    729c:	de b7       	in	r29, 0x3e	; 62
    729e:	8d 83       	std	Y+5, r24	; 0x05
	Error_Status_t ret_status = NO_ERROR;
    72a0:	19 82       	std	Y+1, r1	; 0x01
	i2c_t init_i2c = {.master_or_slave = I2C_MASTER_MODE,
					  .frequency = req_speed,
					  .prescaler = 0};
    72a2:	1a 82       	std	Y+2, r1	; 0x02
    72a4:	8d 81       	ldd	r24, Y+5	; 0x05
    72a6:	8b 83       	std	Y+3, r24	; 0x03
    72a8:	1c 82       	std	Y+4, r1	; 0x04
	ret_status = I2C_Init(&init_i2c);
    72aa:	ce 01       	movw	r24, r28
    72ac:	02 96       	adiw	r24, 0x02	; 2
    72ae:	0e 94 66 12 	call	0x24cc	; 0x24cc <I2C_Init>
    72b2:	89 83       	std	Y+1, r24	; 0x01
}
    72b4:	0f 90       	pop	r0
    72b6:	0f 90       	pop	r0
    72b8:	0f 90       	pop	r0
    72ba:	0f 90       	pop	r0
    72bc:	0f 90       	pop	r0
    72be:	cf 91       	pop	r28
    72c0:	df 91       	pop	r29
    72c2:	08 95       	ret

000072c4 <EEPROM_WriteByte>:


void EEPROM_WriteByte(u8 address_in_eeprom, u8 data)
{
    72c4:	df 93       	push	r29
    72c6:	cf 93       	push	r28
    72c8:	00 d0       	rcall	.+0      	; 0x72ca <EEPROM_WriteByte+0x6>
    72ca:	cd b7       	in	r28, 0x3d	; 61
    72cc:	de b7       	in	r29, 0x3e	; 62
    72ce:	89 83       	std	Y+1, r24	; 0x01
    72d0:	6a 83       	std	Y+2, r22	; 0x02
	// Send start condition
	I2C_SendStart();
    72d2:	0e 94 ca 12 	call	0x2594	; 0x2594 <I2C_SendStart>

	// Send device address with write bit
	I2C_SendByte(EEPROM_DEVICE_ADDRESS_WRITE);
    72d6:	80 ea       	ldi	r24, 0xA0	; 160
    72d8:	0e 94 af 12 	call	0x255e	; 0x255e <I2C_SendByte>

	// Send EEPROM internal address
	I2C_SendByte(address_in_eeprom);
    72dc:	89 81       	ldd	r24, Y+1	; 0x01
    72de:	0e 94 af 12 	call	0x255e	; 0x255e <I2C_SendByte>

	// Send data byte
	I2C_SendByte(data);
    72e2:	8a 81       	ldd	r24, Y+2	; 0x02
    72e4:	0e 94 af 12 	call	0x255e	; 0x255e <I2C_SendByte>

	// Send stop condition
	I2C_SendStop();
    72e8:	0e 94 df 12 	call	0x25be	; 0x25be <I2C_SendStop>
}
    72ec:	0f 90       	pop	r0
    72ee:	0f 90       	pop	r0
    72f0:	cf 91       	pop	r28
    72f2:	df 91       	pop	r29
    72f4:	08 95       	ret

000072f6 <EEPROM_ReadByte>:
u8 EEPROM_ReadByte(u8 address_in_eeprom)
{
    72f6:	df 93       	push	r29
    72f8:	cf 93       	push	r28
    72fa:	00 d0       	rcall	.+0      	; 0x72fc <EEPROM_ReadByte+0x6>
    72fc:	cd b7       	in	r28, 0x3d	; 61
    72fe:	de b7       	in	r29, 0x3e	; 62
    7300:	8a 83       	std	Y+2, r24	; 0x02
	u8 data;

	// Send start condition
	I2C_SendStart();
    7302:	0e 94 ca 12 	call	0x2594	; 0x2594 <I2C_SendStart>

	// Send device address with write bit
	I2C_SendByte(EEPROM_DEVICE_ADDRESS_WRITE);
    7306:	80 ea       	ldi	r24, 0xA0	; 160
    7308:	0e 94 af 12 	call	0x255e	; 0x255e <I2C_SendByte>

	// Send EEPROM internal address
	I2C_SendByte(address_in_eeprom);
    730c:	8a 81       	ldd	r24, Y+2	; 0x02
    730e:	0e 94 af 12 	call	0x255e	; 0x255e <I2C_SendByte>

	// Send repeated start condition
	I2C_SendStart();
    7312:	0e 94 ca 12 	call	0x2594	; 0x2594 <I2C_SendStart>

	// Send device address with read bit
	I2C_SendByte(EEPROM_DEVICE_ADDRESS_READ);
    7316:	81 ea       	ldi	r24, 0xA1	; 161
    7318:	0e 94 af 12 	call	0x255e	; 0x255e <I2C_SendByte>

	// Receive data byte with ACK
	I2C_ReceiveByte_ACK(&data);
    731c:	ce 01       	movw	r24, r28
    731e:	01 96       	adiw	r24, 0x01	; 1
    7320:	0e 94 ef 12 	call	0x25de	; 0x25de <I2C_ReceiveByte_ACK>

	// Send stop condition
	I2C_SendStop();
    7324:	0e 94 df 12 	call	0x25be	; 0x25be <I2C_SendStop>

	return data;
    7328:	89 81       	ldd	r24, Y+1	; 0x01
}
    732a:	0f 90       	pop	r0
    732c:	0f 90       	pop	r0
    732e:	cf 91       	pop	r28
    7330:	df 91       	pop	r29
    7332:	08 95       	ret

00007334 <EEPROM_EraseByte>:

void EEPROM_EraseByte(u8 address_in_eeprom)
{
    7334:	df 93       	push	r29
    7336:	cf 93       	push	r28
    7338:	0f 92       	push	r0
    733a:	cd b7       	in	r28, 0x3d	; 61
    733c:	de b7       	in	r29, 0x3e	; 62
    733e:	89 83       	std	Y+1, r24	; 0x01
    // Send start condition
    I2C_SendStart();
    7340:	0e 94 ca 12 	call	0x2594	; 0x2594 <I2C_SendStart>

    // Send device address with write bit
    I2C_SendByte(EEPROM_DEVICE_ADDRESS_WRITE);
    7344:	80 ea       	ldi	r24, 0xA0	; 160
    7346:	0e 94 af 12 	call	0x255e	; 0x255e <I2C_SendByte>

    // Send EEPROM internal address
    I2C_SendByte(address_in_eeprom);
    734a:	89 81       	ldd	r24, Y+1	; 0x01
    734c:	0e 94 af 12 	call	0x255e	; 0x255e <I2C_SendByte>

    // Send data byte for erasing (e.g., 0xFF)
    I2C_SendByte(0xFF);
    7350:	8f ef       	ldi	r24, 0xFF	; 255
    7352:	0e 94 af 12 	call	0x255e	; 0x255e <I2C_SendByte>

    // Send stop condition
    I2C_SendStop();
    7356:	0e 94 df 12 	call	0x25be	; 0x25be <I2C_SendStop>
}
    735a:	0f 90       	pop	r0
    735c:	cf 91       	pop	r28
    735e:	df 91       	pop	r29
    7360:	08 95       	ret

00007362 <DC_Motor_Init>:
 */

#include "Motor.h"

void DC_Motor_Init(u8 Motor_Pin1_Port, u8 Motor_Pin1_Num, u8 Motor_Pin2_Port, u8 Motor_Pin2_Num)
{
    7362:	df 93       	push	r29
    7364:	cf 93       	push	r28
    7366:	00 d0       	rcall	.+0      	; 0x7368 <DC_Motor_Init+0x6>
    7368:	00 d0       	rcall	.+0      	; 0x736a <DC_Motor_Init+0x8>
    736a:	cd b7       	in	r28, 0x3d	; 61
    736c:	de b7       	in	r29, 0x3e	; 62
    736e:	89 83       	std	Y+1, r24	; 0x01
    7370:	6a 83       	std	Y+2, r22	; 0x02
    7372:	4b 83       	std	Y+3, r20	; 0x03
    7374:	2c 83       	std	Y+4, r18	; 0x04
	DIO_voidSetPinDirection(Motor_Pin1_Port, Motor_Pin1_Num, GPIO_DIRECTION_OUTPUT);
    7376:	89 81       	ldd	r24, Y+1	; 0x01
    7378:	6a 81       	ldd	r22, Y+2	; 0x02
    737a:	41 e0       	ldi	r20, 0x01	; 1
    737c:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(Motor_Pin2_Port, Motor_Pin2_Num, GPIO_DIRECTION_OUTPUT);
    7380:	8b 81       	ldd	r24, Y+3	; 0x03
    7382:	6c 81       	ldd	r22, Y+4	; 0x04
    7384:	41 e0       	ldi	r20, 0x01	; 1
    7386:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <DIO_voidSetPinDirection>
}
    738a:	0f 90       	pop	r0
    738c:	0f 90       	pop	r0
    738e:	0f 90       	pop	r0
    7390:	0f 90       	pop	r0
    7392:	cf 91       	pop	r28
    7394:	df 91       	pop	r29
    7396:	08 95       	ret

00007398 <DC_Motor_ON>:


void DC_Motor_ON(u8 Motor_Pin1_Port, u8 Motor_Pin1_Num, u8 Motor_Pin2_Port, u8 Motor_Pin2_Num, Direction_t direction)
{
    7398:	0f 93       	push	r16
    739a:	df 93       	push	r29
    739c:	cf 93       	push	r28
    739e:	cd b7       	in	r28, 0x3d	; 61
    73a0:	de b7       	in	r29, 0x3e	; 62
    73a2:	27 97       	sbiw	r28, 0x07	; 7
    73a4:	0f b6       	in	r0, 0x3f	; 63
    73a6:	f8 94       	cli
    73a8:	de bf       	out	0x3e, r29	; 62
    73aa:	0f be       	out	0x3f, r0	; 63
    73ac:	cd bf       	out	0x3d, r28	; 61
    73ae:	89 83       	std	Y+1, r24	; 0x01
    73b0:	6a 83       	std	Y+2, r22	; 0x02
    73b2:	4b 83       	std	Y+3, r20	; 0x03
    73b4:	2c 83       	std	Y+4, r18	; 0x04
    73b6:	0d 83       	std	Y+5, r16	; 0x05
	switch(direction)
    73b8:	8d 81       	ldd	r24, Y+5	; 0x05
    73ba:	28 2f       	mov	r18, r24
    73bc:	30 e0       	ldi	r19, 0x00	; 0
    73be:	3f 83       	std	Y+7, r19	; 0x07
    73c0:	2e 83       	std	Y+6, r18	; 0x06
    73c2:	8e 81       	ldd	r24, Y+6	; 0x06
    73c4:	9f 81       	ldd	r25, Y+7	; 0x07
    73c6:	00 97       	sbiw	r24, 0x00	; 0
    73c8:	31 f0       	breq	.+12     	; 0x73d6 <DC_Motor_ON+0x3e>
    73ca:	2e 81       	ldd	r18, Y+6	; 0x06
    73cc:	3f 81       	ldd	r19, Y+7	; 0x07
    73ce:	21 30       	cpi	r18, 0x01	; 1
    73d0:	31 05       	cpc	r19, r1
    73d2:	61 f0       	breq	.+24     	; 0x73ec <DC_Motor_ON+0x54>
    73d4:	15 c0       	rjmp	.+42     	; 0x7400 <DC_Motor_ON+0x68>
	{
		case MOTOR_CW_DIRECTION:
			DIO_voidSetPinValue(Motor_Pin1_Port, Motor_Pin1_Num, GPIO_HIGH);
    73d6:	89 81       	ldd	r24, Y+1	; 0x01
    73d8:	6a 81       	ldd	r22, Y+2	; 0x02
    73da:	41 e0       	ldi	r20, 0x01	; 1
    73dc:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(Motor_Pin2_Port, Motor_Pin2_Num, GPIO_LOW);
    73e0:	8b 81       	ldd	r24, Y+3	; 0x03
    73e2:	6c 81       	ldd	r22, Y+4	; 0x04
    73e4:	40 e0       	ldi	r20, 0x00	; 0
    73e6:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
    73ea:	0a c0       	rjmp	.+20     	; 0x7400 <DC_Motor_ON+0x68>
			break;
		case MOTOR_CCW_DIRECTION:
			DIO_voidSetPinValue(Motor_Pin1_Port, Motor_Pin1_Num, GPIO_LOW);
    73ec:	89 81       	ldd	r24, Y+1	; 0x01
    73ee:	6a 81       	ldd	r22, Y+2	; 0x02
    73f0:	40 e0       	ldi	r20, 0x00	; 0
    73f2:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(Motor_Pin2_Port, Motor_Pin2_Num, GPIO_HIGH);
    73f6:	8b 81       	ldd	r24, Y+3	; 0x03
    73f8:	6c 81       	ldd	r22, Y+4	; 0x04
    73fa:	41 e0       	ldi	r20, 0x01	; 1
    73fc:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
			break;
	}
}
    7400:	27 96       	adiw	r28, 0x07	; 7
    7402:	0f b6       	in	r0, 0x3f	; 63
    7404:	f8 94       	cli
    7406:	de bf       	out	0x3e, r29	; 62
    7408:	0f be       	out	0x3f, r0	; 63
    740a:	cd bf       	out	0x3d, r28	; 61
    740c:	cf 91       	pop	r28
    740e:	df 91       	pop	r29
    7410:	0f 91       	pop	r16
    7412:	08 95       	ret

00007414 <DC_Motor_OFF>:


void DC_Motor_OFF(u8 Motor_Pin1_Port, u8 Motor_Pin1_Num, u8 Motor_Pin2_Port, u8 Motor_Pin2_Num)
{
    7414:	df 93       	push	r29
    7416:	cf 93       	push	r28
    7418:	00 d0       	rcall	.+0      	; 0x741a <DC_Motor_OFF+0x6>
    741a:	00 d0       	rcall	.+0      	; 0x741c <DC_Motor_OFF+0x8>
    741c:	cd b7       	in	r28, 0x3d	; 61
    741e:	de b7       	in	r29, 0x3e	; 62
    7420:	89 83       	std	Y+1, r24	; 0x01
    7422:	6a 83       	std	Y+2, r22	; 0x02
    7424:	4b 83       	std	Y+3, r20	; 0x03
    7426:	2c 83       	std	Y+4, r18	; 0x04
	DIO_voidSetPinValue(Motor_Pin1_Port, Motor_Pin1_Num, GPIO_LOW);
    7428:	89 81       	ldd	r24, Y+1	; 0x01
    742a:	6a 81       	ldd	r22, Y+2	; 0x02
    742c:	40 e0       	ldi	r20, 0x00	; 0
    742e:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Motor_Pin2_Port, Motor_Pin2_Num, GPIO_LOW);
    7432:	8b 81       	ldd	r24, Y+3	; 0x03
    7434:	6c 81       	ldd	r22, Y+4	; 0x04
    7436:	40 e0       	ldi	r20, 0x00	; 0
    7438:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <DIO_voidSetPinValue>
}
    743c:	0f 90       	pop	r0
    743e:	0f 90       	pop	r0
    7440:	0f 90       	pop	r0
    7442:	0f 90       	pop	r0
    7444:	cf 91       	pop	r28
    7446:	df 91       	pop	r29
    7448:	08 95       	ret

0000744a <Button_void_Init>:

#include "button.h"

/* Initialize the direction of button pin */
void Button_void_Init(u8 Button_Pin_Port, u8 Button_Pin_Num)
{
    744a:	df 93       	push	r29
    744c:	cf 93       	push	r28
    744e:	00 d0       	rcall	.+0      	; 0x7450 <Button_void_Init+0x6>
    7450:	cd b7       	in	r28, 0x3d	; 61
    7452:	de b7       	in	r29, 0x3e	; 62
    7454:	89 83       	std	Y+1, r24	; 0x01
    7456:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDirection(Button_Pin_Port, Button_Pin_Num, GPIO_DIRECTION_INPUT);
    7458:	89 81       	ldd	r24, Y+1	; 0x01
    745a:	6a 81       	ldd	r22, Y+2	; 0x02
    745c:	40 e0       	ldi	r20, 0x00	; 0
    745e:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <DIO_voidSetPinDirection>
}
    7462:	0f 90       	pop	r0
    7464:	0f 90       	pop	r0
    7466:	cf 91       	pop	r28
    7468:	df 91       	pop	r29
    746a:	08 95       	ret

0000746c <Button_void_Read_State>:


/* read the state of button */
void Button_void_Read_State(u8 Button_Pin_Port, u8 Button_Pin_Num, button_active_t active_type, button_state_t *button_state)
{
    746c:	df 93       	push	r29
    746e:	cf 93       	push	r28
    7470:	00 d0       	rcall	.+0      	; 0x7472 <Button_void_Read_State+0x6>
    7472:	00 d0       	rcall	.+0      	; 0x7474 <Button_void_Read_State+0x8>
    7474:	00 d0       	rcall	.+0      	; 0x7476 <Button_void_Read_State+0xa>
    7476:	cd b7       	in	r28, 0x3d	; 61
    7478:	de b7       	in	r29, 0x3e	; 62
    747a:	8a 83       	std	Y+2, r24	; 0x02
    747c:	6b 83       	std	Y+3, r22	; 0x03
    747e:	4c 83       	std	Y+4, r20	; 0x04
    7480:	3e 83       	std	Y+6, r19	; 0x06
    7482:	2d 83       	std	Y+5, r18	; 0x05
	u8 logic_state = 0;
    7484:	19 82       	std	Y+1, r1	; 0x01
	logic_state = DIO_u8GetPinValue(Button_Pin_Port, Button_Pin_Num);
    7486:	8a 81       	ldd	r24, Y+2	; 0x02
    7488:	6b 81       	ldd	r22, Y+3	; 0x03
    748a:	0e 94 80 14 	call	0x2900	; 0x2900 <DIO_u8GetPinValue>
    748e:	89 83       	std	Y+1, r24	; 0x01
	if(BUTTON_ACTIVE_HIGH == active_type)
    7490:	8c 81       	ldd	r24, Y+4	; 0x04
    7492:	88 23       	and	r24, r24
    7494:	79 f4       	brne	.+30     	; 0x74b4 <Button_void_Read_State+0x48>
	{
		if(logic_state == GPIO_HIGH)
    7496:	89 81       	ldd	r24, Y+1	; 0x01
    7498:	81 30       	cpi	r24, 0x01	; 1
    749a:	21 f4       	brne	.+8      	; 0x74a4 <Button_void_Read_State+0x38>
		{
			*button_state = BUTTON_PRESSED;
    749c:	ed 81       	ldd	r30, Y+5	; 0x05
    749e:	fe 81       	ldd	r31, Y+6	; 0x06
    74a0:	10 82       	st	Z, r1
    74a2:	19 c0       	rjmp	.+50     	; 0x74d6 <Button_void_Read_State+0x6a>
		}
		else if(logic_state == GPIO_LOW)
    74a4:	89 81       	ldd	r24, Y+1	; 0x01
    74a6:	88 23       	and	r24, r24
    74a8:	b1 f4       	brne	.+44     	; 0x74d6 <Button_void_Read_State+0x6a>
		{
			*button_state = BUTTON_RELEASED;
    74aa:	ed 81       	ldd	r30, Y+5	; 0x05
    74ac:	fe 81       	ldd	r31, Y+6	; 0x06
    74ae:	81 e0       	ldi	r24, 0x01	; 1
    74b0:	80 83       	st	Z, r24
    74b2:	11 c0       	rjmp	.+34     	; 0x74d6 <Button_void_Read_State+0x6a>
		}
	}
	else if(BUTTON_ACTIVE_LOW == active_type)
    74b4:	8c 81       	ldd	r24, Y+4	; 0x04
    74b6:	81 30       	cpi	r24, 0x01	; 1
    74b8:	71 f4       	brne	.+28     	; 0x74d6 <Button_void_Read_State+0x6a>
	{
		if(logic_state == GPIO_HIGH)
    74ba:	89 81       	ldd	r24, Y+1	; 0x01
    74bc:	81 30       	cpi	r24, 0x01	; 1
    74be:	29 f4       	brne	.+10     	; 0x74ca <Button_void_Read_State+0x5e>
		{
			*button_state = BUTTON_RELEASED;
    74c0:	ed 81       	ldd	r30, Y+5	; 0x05
    74c2:	fe 81       	ldd	r31, Y+6	; 0x06
    74c4:	81 e0       	ldi	r24, 0x01	; 1
    74c6:	80 83       	st	Z, r24
    74c8:	06 c0       	rjmp	.+12     	; 0x74d6 <Button_void_Read_State+0x6a>
		}
		else if(logic_state == GPIO_LOW)
    74ca:	89 81       	ldd	r24, Y+1	; 0x01
    74cc:	88 23       	and	r24, r24
    74ce:	19 f4       	brne	.+6      	; 0x74d6 <Button_void_Read_State+0x6a>
		{
			*button_state = BUTTON_PRESSED;
    74d0:	ed 81       	ldd	r30, Y+5	; 0x05
    74d2:	fe 81       	ldd	r31, Y+6	; 0x06
    74d4:	10 82       	st	Z, r1
		}
	}
	else{/* Nothing */}
}
    74d6:	26 96       	adiw	r28, 0x06	; 6
    74d8:	0f b6       	in	r0, 0x3f	; 63
    74da:	f8 94       	cli
    74dc:	de bf       	out	0x3e, r29	; 62
    74de:	0f be       	out	0x3f, r0	; 63
    74e0:	cd bf       	out	0x3d, r28	; 61
    74e2:	cf 91       	pop	r28
    74e4:	df 91       	pop	r29
    74e6:	08 95       	ret

000074e8 <main>:
u16 ret_ID;

u16 page_id = 1;

int main()
{
    74e8:	df 93       	push	r29
    74ea:	cf 93       	push	r28
    74ec:	cd b7       	in	r28, 0x3d	; 61
    74ee:	de b7       	in	r29, 0x3e	; 62
    74f0:	e8 97       	sbiw	r28, 0x38	; 56
    74f2:	0f b6       	in	r0, 0x3f	; 63
    74f4:	f8 94       	cli
    74f6:	de bf       	out	0x3e, r29	; 62
    74f8:	0f be       	out	0x3f, r0	; 63
    74fa:	cd bf       	out	0x3d, r28	; 61
	/* ------------------ Initialize LCD ------------- */
	H_LCD_void_Init();
    74fc:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <H_LCD_void_Init>
	/*--------------------------------------------------*/

	/* --------------------------- Keypad Initialize ------------------- */
	H_KEYPAD_void_Init();
    7500:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <H_KEYPAD_void_Init>
	/* -------------------------------------------------------------- */

	Fp_status = FingerPS_handShake();
    7504:	0e 94 22 25 	call	0x4a44	; 0x4a44 <FingerPS_handShake>
    7508:	80 93 0a 03 	sts	0x030A, r24
	Fp_status = 0;
    750c:	10 92 0a 03 	sts	0x030A, r1


	while (1)
	{
		/* ------------------------- write on keypad ---------------------- */
		H_KEYPAD_u8_getPressedKey(&pressed_key);
    7510:	87 e0       	ldi	r24, 0x07	; 7
    7512:	93 e0       	ldi	r25, 0x03	; 3
    7514:	0e 94 28 21 	call	0x4250	; 0x4250 <H_KEYPAD_u8_getPressedKey>
		/* ----------------------------------------------------------------- */


		/* ------------------- Display the selections ----------------------- */
		H_LCD_void_gotoXY(2,1);
    7518:	82 e0       	ldi	r24, 0x02	; 2
    751a:	61 e0       	ldi	r22, 0x01	; 1
    751c:	0e 94 34 1b 	call	0x3668	; 0x3668 <H_LCD_void_gotoXY>
		H_LCD_void_SendString("attendance->1");
    7520:	80 e6       	ldi	r24, 0x60	; 96
    7522:	90 e0       	ldi	r25, 0x00	; 0
    7524:	0e 94 13 1b 	call	0x3626	; 0x3626 <H_LCD_void_SendString>
		H_LCD_void_gotoXY(3,1);
    7528:	83 e0       	ldi	r24, 0x03	; 3
    752a:	61 e0       	ldi	r22, 0x01	; 1
    752c:	0e 94 34 1b 	call	0x3668	; 0x3668 <H_LCD_void_gotoXY>
		H_LCD_void_SendString("Enroll->2");
    7530:	8e e6       	ldi	r24, 0x6E	; 110
    7532:	90 e0       	ldi	r25, 0x00	; 0
    7534:	0e 94 13 1b 	call	0x3626	; 0x3626 <H_LCD_void_SendString>
		/* ------------------------------------------------------------------ */


		if(pressed_key == 1) // Attendance
    7538:	80 91 07 03 	lds	r24, 0x0307
    753c:	81 30       	cpi	r24, 0x01	; 1
    753e:	09 f0       	breq	.+2      	; 0x7542 <main+0x5a>
    7540:	0b c1       	rjmp	.+534    	; 0x7758 <main+0x270>
		{
			Fp_status = FingerPS_Attendance(&ret_ID);
    7542:	88 e0       	ldi	r24, 0x08	; 8
    7544:	93 e0       	ldi	r25, 0x03	; 3
    7546:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <FingerPS_Attendance>
    754a:	80 93 0a 03 	sts	0x030A, r24

			if(Fp_status == 1)
    754e:	80 91 0a 03 	lds	r24, 0x030A
    7552:	81 30       	cpi	r24, 0x01	; 1
    7554:	09 f0       	breq	.+2      	; 0x7558 <main+0x70>
    7556:	7f c0       	rjmp	.+254    	; 0x7656 <main+0x16e>
			{
				H_LCD_void_Clear_Display();
    7558:	0e 94 9e 1b 	call	0x373c	; 0x373c <H_LCD_void_Clear_Display>
				H_LCD_void_gotoXY(2, 3);
    755c:	82 e0       	ldi	r24, 0x02	; 2
    755e:	63 e0       	ldi	r22, 0x03	; 3
    7560:	0e 94 34 1b 	call	0x3668	; 0x3668 <H_LCD_void_gotoXY>
				H_LCD_void_SendString("Welcome Sir!");
    7564:	88 e7       	ldi	r24, 0x78	; 120
    7566:	90 e0       	ldi	r25, 0x00	; 0
    7568:	0e 94 13 1b 	call	0x3626	; 0x3626 <H_LCD_void_SendString>
    756c:	80 e0       	ldi	r24, 0x00	; 0
    756e:	90 e8       	ldi	r25, 0x80	; 128
    7570:	ab e3       	ldi	r26, 0x3B	; 59
    7572:	b5 e4       	ldi	r27, 0x45	; 69
    7574:	8d ab       	std	Y+53, r24	; 0x35
    7576:	9e ab       	std	Y+54, r25	; 0x36
    7578:	af ab       	std	Y+55, r26	; 0x37
    757a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    757c:	6d a9       	ldd	r22, Y+53	; 0x35
    757e:	7e a9       	ldd	r23, Y+54	; 0x36
    7580:	8f a9       	ldd	r24, Y+55	; 0x37
    7582:	98 ad       	ldd	r25, Y+56	; 0x38
    7584:	20 e0       	ldi	r18, 0x00	; 0
    7586:	30 e0       	ldi	r19, 0x00	; 0
    7588:	4a e7       	ldi	r20, 0x7A	; 122
    758a:	55 e4       	ldi	r21, 0x45	; 69
    758c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7590:	dc 01       	movw	r26, r24
    7592:	cb 01       	movw	r24, r22
    7594:	89 ab       	std	Y+49, r24	; 0x31
    7596:	9a ab       	std	Y+50, r25	; 0x32
    7598:	ab ab       	std	Y+51, r26	; 0x33
    759a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    759c:	69 a9       	ldd	r22, Y+49	; 0x31
    759e:	7a a9       	ldd	r23, Y+50	; 0x32
    75a0:	8b a9       	ldd	r24, Y+51	; 0x33
    75a2:	9c a9       	ldd	r25, Y+52	; 0x34
    75a4:	20 e0       	ldi	r18, 0x00	; 0
    75a6:	30 e0       	ldi	r19, 0x00	; 0
    75a8:	40 e8       	ldi	r20, 0x80	; 128
    75aa:	5f e3       	ldi	r21, 0x3F	; 63
    75ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    75b0:	88 23       	and	r24, r24
    75b2:	2c f4       	brge	.+10     	; 0x75be <main+0xd6>
		__ticks = 1;
    75b4:	81 e0       	ldi	r24, 0x01	; 1
    75b6:	90 e0       	ldi	r25, 0x00	; 0
    75b8:	98 ab       	std	Y+48, r25	; 0x30
    75ba:	8f a7       	std	Y+47, r24	; 0x2f
    75bc:	3f c0       	rjmp	.+126    	; 0x763c <main+0x154>
	else if (__tmp > 65535)
    75be:	69 a9       	ldd	r22, Y+49	; 0x31
    75c0:	7a a9       	ldd	r23, Y+50	; 0x32
    75c2:	8b a9       	ldd	r24, Y+51	; 0x33
    75c4:	9c a9       	ldd	r25, Y+52	; 0x34
    75c6:	20 e0       	ldi	r18, 0x00	; 0
    75c8:	3f ef       	ldi	r19, 0xFF	; 255
    75ca:	4f e7       	ldi	r20, 0x7F	; 127
    75cc:	57 e4       	ldi	r21, 0x47	; 71
    75ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    75d2:	18 16       	cp	r1, r24
    75d4:	4c f5       	brge	.+82     	; 0x7628 <main+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    75d6:	6d a9       	ldd	r22, Y+53	; 0x35
    75d8:	7e a9       	ldd	r23, Y+54	; 0x36
    75da:	8f a9       	ldd	r24, Y+55	; 0x37
    75dc:	98 ad       	ldd	r25, Y+56	; 0x38
    75de:	20 e0       	ldi	r18, 0x00	; 0
    75e0:	30 e0       	ldi	r19, 0x00	; 0
    75e2:	40 e2       	ldi	r20, 0x20	; 32
    75e4:	51 e4       	ldi	r21, 0x41	; 65
    75e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    75ea:	dc 01       	movw	r26, r24
    75ec:	cb 01       	movw	r24, r22
    75ee:	bc 01       	movw	r22, r24
    75f0:	cd 01       	movw	r24, r26
    75f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    75f6:	dc 01       	movw	r26, r24
    75f8:	cb 01       	movw	r24, r22
    75fa:	98 ab       	std	Y+48, r25	; 0x30
    75fc:	8f a7       	std	Y+47, r24	; 0x2f
    75fe:	0f c0       	rjmp	.+30     	; 0x761e <main+0x136>
    7600:	80 e9       	ldi	r24, 0x90	; 144
    7602:	91 e0       	ldi	r25, 0x01	; 1
    7604:	9e a7       	std	Y+46, r25	; 0x2e
    7606:	8d a7       	std	Y+45, r24	; 0x2d
    7608:	8d a5       	ldd	r24, Y+45	; 0x2d
    760a:	9e a5       	ldd	r25, Y+46	; 0x2e
    760c:	01 97       	sbiw	r24, 0x01	; 1
    760e:	f1 f7       	brne	.-4      	; 0x760c <main+0x124>
    7610:	9e a7       	std	Y+46, r25	; 0x2e
    7612:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7614:	8f a5       	ldd	r24, Y+47	; 0x2f
    7616:	98 a9       	ldd	r25, Y+48	; 0x30
    7618:	01 97       	sbiw	r24, 0x01	; 1
    761a:	98 ab       	std	Y+48, r25	; 0x30
    761c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    761e:	8f a5       	ldd	r24, Y+47	; 0x2f
    7620:	98 a9       	ldd	r25, Y+48	; 0x30
    7622:	00 97       	sbiw	r24, 0x00	; 0
    7624:	69 f7       	brne	.-38     	; 0x7600 <main+0x118>
    7626:	14 c0       	rjmp	.+40     	; 0x7650 <main+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7628:	69 a9       	ldd	r22, Y+49	; 0x31
    762a:	7a a9       	ldd	r23, Y+50	; 0x32
    762c:	8b a9       	ldd	r24, Y+51	; 0x33
    762e:	9c a9       	ldd	r25, Y+52	; 0x34
    7630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7634:	dc 01       	movw	r26, r24
    7636:	cb 01       	movw	r24, r22
    7638:	98 ab       	std	Y+48, r25	; 0x30
    763a:	8f a7       	std	Y+47, r24	; 0x2f
    763c:	8f a5       	ldd	r24, Y+47	; 0x2f
    763e:	98 a9       	ldd	r25, Y+48	; 0x30
    7640:	9c a7       	std	Y+44, r25	; 0x2c
    7642:	8b a7       	std	Y+43, r24	; 0x2b
    7644:	8b a5       	ldd	r24, Y+43	; 0x2b
    7646:	9c a5       	ldd	r25, Y+44	; 0x2c
    7648:	01 97       	sbiw	r24, 0x01	; 1
    764a:	f1 f7       	brne	.-4      	; 0x7648 <main+0x160>
    764c:	9c a7       	std	Y+44, r25	; 0x2c
    764e:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(3000);
				H_LCD_void_Clear_Display();
    7650:	0e 94 9e 1b 	call	0x373c	; 0x373c <H_LCD_void_Clear_Display>
    7654:	7e c0       	rjmp	.+252    	; 0x7752 <main+0x26a>
			}
			else
			{
				H_LCD_void_Clear_Display();
    7656:	0e 94 9e 1b 	call	0x373c	; 0x373c <H_LCD_void_Clear_Display>
				H_LCD_void_gotoXY(2, 3);
    765a:	82 e0       	ldi	r24, 0x02	; 2
    765c:	63 e0       	ldi	r22, 0x03	; 3
    765e:	0e 94 34 1b 	call	0x3668	; 0x3668 <H_LCD_void_gotoXY>
				H_LCD_void_SendString("Not existed");
    7662:	85 e8       	ldi	r24, 0x85	; 133
    7664:	90 e0       	ldi	r25, 0x00	; 0
    7666:	0e 94 13 1b 	call	0x3626	; 0x3626 <H_LCD_void_SendString>
    766a:	80 e0       	ldi	r24, 0x00	; 0
    766c:	90 e8       	ldi	r25, 0x80	; 128
    766e:	ab e3       	ldi	r26, 0x3B	; 59
    7670:	b5 e4       	ldi	r27, 0x45	; 69
    7672:	8f a3       	std	Y+39, r24	; 0x27
    7674:	98 a7       	std	Y+40, r25	; 0x28
    7676:	a9 a7       	std	Y+41, r26	; 0x29
    7678:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    767a:	6f a1       	ldd	r22, Y+39	; 0x27
    767c:	78 a5       	ldd	r23, Y+40	; 0x28
    767e:	89 a5       	ldd	r24, Y+41	; 0x29
    7680:	9a a5       	ldd	r25, Y+42	; 0x2a
    7682:	20 e0       	ldi	r18, 0x00	; 0
    7684:	30 e0       	ldi	r19, 0x00	; 0
    7686:	4a e7       	ldi	r20, 0x7A	; 122
    7688:	55 e4       	ldi	r21, 0x45	; 69
    768a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    768e:	dc 01       	movw	r26, r24
    7690:	cb 01       	movw	r24, r22
    7692:	8b a3       	std	Y+35, r24	; 0x23
    7694:	9c a3       	std	Y+36, r25	; 0x24
    7696:	ad a3       	std	Y+37, r26	; 0x25
    7698:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    769a:	6b a1       	ldd	r22, Y+35	; 0x23
    769c:	7c a1       	ldd	r23, Y+36	; 0x24
    769e:	8d a1       	ldd	r24, Y+37	; 0x25
    76a0:	9e a1       	ldd	r25, Y+38	; 0x26
    76a2:	20 e0       	ldi	r18, 0x00	; 0
    76a4:	30 e0       	ldi	r19, 0x00	; 0
    76a6:	40 e8       	ldi	r20, 0x80	; 128
    76a8:	5f e3       	ldi	r21, 0x3F	; 63
    76aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    76ae:	88 23       	and	r24, r24
    76b0:	2c f4       	brge	.+10     	; 0x76bc <main+0x1d4>
		__ticks = 1;
    76b2:	81 e0       	ldi	r24, 0x01	; 1
    76b4:	90 e0       	ldi	r25, 0x00	; 0
    76b6:	9a a3       	std	Y+34, r25	; 0x22
    76b8:	89 a3       	std	Y+33, r24	; 0x21
    76ba:	3f c0       	rjmp	.+126    	; 0x773a <main+0x252>
	else if (__tmp > 65535)
    76bc:	6b a1       	ldd	r22, Y+35	; 0x23
    76be:	7c a1       	ldd	r23, Y+36	; 0x24
    76c0:	8d a1       	ldd	r24, Y+37	; 0x25
    76c2:	9e a1       	ldd	r25, Y+38	; 0x26
    76c4:	20 e0       	ldi	r18, 0x00	; 0
    76c6:	3f ef       	ldi	r19, 0xFF	; 255
    76c8:	4f e7       	ldi	r20, 0x7F	; 127
    76ca:	57 e4       	ldi	r21, 0x47	; 71
    76cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    76d0:	18 16       	cp	r1, r24
    76d2:	4c f5       	brge	.+82     	; 0x7726 <main+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    76d4:	6f a1       	ldd	r22, Y+39	; 0x27
    76d6:	78 a5       	ldd	r23, Y+40	; 0x28
    76d8:	89 a5       	ldd	r24, Y+41	; 0x29
    76da:	9a a5       	ldd	r25, Y+42	; 0x2a
    76dc:	20 e0       	ldi	r18, 0x00	; 0
    76de:	30 e0       	ldi	r19, 0x00	; 0
    76e0:	40 e2       	ldi	r20, 0x20	; 32
    76e2:	51 e4       	ldi	r21, 0x41	; 65
    76e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    76e8:	dc 01       	movw	r26, r24
    76ea:	cb 01       	movw	r24, r22
    76ec:	bc 01       	movw	r22, r24
    76ee:	cd 01       	movw	r24, r26
    76f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    76f4:	dc 01       	movw	r26, r24
    76f6:	cb 01       	movw	r24, r22
    76f8:	9a a3       	std	Y+34, r25	; 0x22
    76fa:	89 a3       	std	Y+33, r24	; 0x21
    76fc:	0f c0       	rjmp	.+30     	; 0x771c <main+0x234>
    76fe:	80 e9       	ldi	r24, 0x90	; 144
    7700:	91 e0       	ldi	r25, 0x01	; 1
    7702:	98 a3       	std	Y+32, r25	; 0x20
    7704:	8f 8f       	std	Y+31, r24	; 0x1f
    7706:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7708:	98 a1       	ldd	r25, Y+32	; 0x20
    770a:	01 97       	sbiw	r24, 0x01	; 1
    770c:	f1 f7       	brne	.-4      	; 0x770a <main+0x222>
    770e:	98 a3       	std	Y+32, r25	; 0x20
    7710:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7712:	89 a1       	ldd	r24, Y+33	; 0x21
    7714:	9a a1       	ldd	r25, Y+34	; 0x22
    7716:	01 97       	sbiw	r24, 0x01	; 1
    7718:	9a a3       	std	Y+34, r25	; 0x22
    771a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    771c:	89 a1       	ldd	r24, Y+33	; 0x21
    771e:	9a a1       	ldd	r25, Y+34	; 0x22
    7720:	00 97       	sbiw	r24, 0x00	; 0
    7722:	69 f7       	brne	.-38     	; 0x76fe <main+0x216>
    7724:	14 c0       	rjmp	.+40     	; 0x774e <main+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7726:	6b a1       	ldd	r22, Y+35	; 0x23
    7728:	7c a1       	ldd	r23, Y+36	; 0x24
    772a:	8d a1       	ldd	r24, Y+37	; 0x25
    772c:	9e a1       	ldd	r25, Y+38	; 0x26
    772e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7732:	dc 01       	movw	r26, r24
    7734:	cb 01       	movw	r24, r22
    7736:	9a a3       	std	Y+34, r25	; 0x22
    7738:	89 a3       	std	Y+33, r24	; 0x21
    773a:	89 a1       	ldd	r24, Y+33	; 0x21
    773c:	9a a1       	ldd	r25, Y+34	; 0x22
    773e:	9e 8f       	std	Y+30, r25	; 0x1e
    7740:	8d 8f       	std	Y+29, r24	; 0x1d
    7742:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7744:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7746:	01 97       	sbiw	r24, 0x01	; 1
    7748:	f1 f7       	brne	.-4      	; 0x7746 <main+0x25e>
    774a:	9e 8f       	std	Y+30, r25	; 0x1e
    774c:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(3000);
				H_LCD_void_Clear_Display();
    774e:	0e 94 9e 1b 	call	0x373c	; 0x373c <H_LCD_void_Clear_Display>
			}
			pressed_key = 0;
    7752:	10 92 07 03 	sts	0x0307, r1
    7756:	dc ce       	rjmp	.-584    	; 0x7510 <main+0x28>
		}
		else if(pressed_key == 2) // Enrollment
    7758:	80 91 07 03 	lds	r24, 0x0307
    775c:	82 30       	cpi	r24, 0x02	; 2
    775e:	09 f0       	breq	.+2      	; 0x7762 <main+0x27a>
    7760:	d7 ce       	rjmp	.-594    	; 0x7510 <main+0x28>
		{
			Fp_status = FingerPS_Enrollment(page_id, &ret_ID);
    7762:	80 91 df 01 	lds	r24, 0x01DF
    7766:	90 91 e0 01 	lds	r25, 0x01E0
    776a:	28 e0       	ldi	r18, 0x08	; 8
    776c:	33 e0       	ldi	r19, 0x03	; 3
    776e:	b9 01       	movw	r22, r18
    7770:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <FingerPS_Enrollment>
    7774:	80 93 0a 03 	sts	0x030A, r24
			page_id++;
    7778:	80 91 df 01 	lds	r24, 0x01DF
    777c:	90 91 e0 01 	lds	r25, 0x01E0
    7780:	01 96       	adiw	r24, 0x01	; 1
    7782:	90 93 e0 01 	sts	0x01E0, r25
    7786:	80 93 df 01 	sts	0x01DF, r24
			if(Fp_status == 0)
    778a:	80 91 0a 03 	lds	r24, 0x030A
    778e:	88 23       	and	r24, r24
    7790:	09 f0       	breq	.+2      	; 0x7794 <main+0x2ac>
    7792:	87 c0       	rjmp	.+270    	; 0x78a2 <main+0x3ba>
			{
				H_LCD_void_Clear_Display();
    7794:	0e 94 9e 1b 	call	0x373c	; 0x373c <H_LCD_void_Clear_Display>
				H_LCD_void_gotoXY(1, 3);
    7798:	81 e0       	ldi	r24, 0x01	; 1
    779a:	63 e0       	ldi	r22, 0x03	; 3
    779c:	0e 94 34 1b 	call	0x3668	; 0x3668 <H_LCD_void_gotoXY>
				H_LCD_void_SendString("this finger");
    77a0:	81 e9       	ldi	r24, 0x91	; 145
    77a2:	90 e0       	ldi	r25, 0x00	; 0
    77a4:	0e 94 13 1b 	call	0x3626	; 0x3626 <H_LCD_void_SendString>
				H_LCD_void_gotoXY(2, 3);
    77a8:	82 e0       	ldi	r24, 0x02	; 2
    77aa:	63 e0       	ldi	r22, 0x03	; 3
    77ac:	0e 94 34 1b 	call	0x3668	; 0x3668 <H_LCD_void_gotoXY>
				H_LCD_void_SendString("already exist");
    77b0:	8d e9       	ldi	r24, 0x9D	; 157
    77b2:	90 e0       	ldi	r25, 0x00	; 0
    77b4:	0e 94 13 1b 	call	0x3626	; 0x3626 <H_LCD_void_SendString>
    77b8:	80 e0       	ldi	r24, 0x00	; 0
    77ba:	90 e0       	ldi	r25, 0x00	; 0
    77bc:	aa ef       	ldi	r26, 0xFA	; 250
    77be:	b4 e4       	ldi	r27, 0x44	; 68
    77c0:	89 8f       	std	Y+25, r24	; 0x19
    77c2:	9a 8f       	std	Y+26, r25	; 0x1a
    77c4:	ab 8f       	std	Y+27, r26	; 0x1b
    77c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    77c8:	69 8d       	ldd	r22, Y+25	; 0x19
    77ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    77cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    77ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    77d0:	20 e0       	ldi	r18, 0x00	; 0
    77d2:	30 e0       	ldi	r19, 0x00	; 0
    77d4:	4a e7       	ldi	r20, 0x7A	; 122
    77d6:	55 e4       	ldi	r21, 0x45	; 69
    77d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    77dc:	dc 01       	movw	r26, r24
    77de:	cb 01       	movw	r24, r22
    77e0:	8d 8b       	std	Y+21, r24	; 0x15
    77e2:	9e 8b       	std	Y+22, r25	; 0x16
    77e4:	af 8b       	std	Y+23, r26	; 0x17
    77e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    77e8:	6d 89       	ldd	r22, Y+21	; 0x15
    77ea:	7e 89       	ldd	r23, Y+22	; 0x16
    77ec:	8f 89       	ldd	r24, Y+23	; 0x17
    77ee:	98 8d       	ldd	r25, Y+24	; 0x18
    77f0:	20 e0       	ldi	r18, 0x00	; 0
    77f2:	30 e0       	ldi	r19, 0x00	; 0
    77f4:	40 e8       	ldi	r20, 0x80	; 128
    77f6:	5f e3       	ldi	r21, 0x3F	; 63
    77f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    77fc:	88 23       	and	r24, r24
    77fe:	2c f4       	brge	.+10     	; 0x780a <main+0x322>
		__ticks = 1;
    7800:	81 e0       	ldi	r24, 0x01	; 1
    7802:	90 e0       	ldi	r25, 0x00	; 0
    7804:	9c 8b       	std	Y+20, r25	; 0x14
    7806:	8b 8b       	std	Y+19, r24	; 0x13
    7808:	3f c0       	rjmp	.+126    	; 0x7888 <main+0x3a0>
	else if (__tmp > 65535)
    780a:	6d 89       	ldd	r22, Y+21	; 0x15
    780c:	7e 89       	ldd	r23, Y+22	; 0x16
    780e:	8f 89       	ldd	r24, Y+23	; 0x17
    7810:	98 8d       	ldd	r25, Y+24	; 0x18
    7812:	20 e0       	ldi	r18, 0x00	; 0
    7814:	3f ef       	ldi	r19, 0xFF	; 255
    7816:	4f e7       	ldi	r20, 0x7F	; 127
    7818:	57 e4       	ldi	r21, 0x47	; 71
    781a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    781e:	18 16       	cp	r1, r24
    7820:	4c f5       	brge	.+82     	; 0x7874 <main+0x38c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7822:	69 8d       	ldd	r22, Y+25	; 0x19
    7824:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7826:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7828:	9c 8d       	ldd	r25, Y+28	; 0x1c
    782a:	20 e0       	ldi	r18, 0x00	; 0
    782c:	30 e0       	ldi	r19, 0x00	; 0
    782e:	40 e2       	ldi	r20, 0x20	; 32
    7830:	51 e4       	ldi	r21, 0x41	; 65
    7832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7836:	dc 01       	movw	r26, r24
    7838:	cb 01       	movw	r24, r22
    783a:	bc 01       	movw	r22, r24
    783c:	cd 01       	movw	r24, r26
    783e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7842:	dc 01       	movw	r26, r24
    7844:	cb 01       	movw	r24, r22
    7846:	9c 8b       	std	Y+20, r25	; 0x14
    7848:	8b 8b       	std	Y+19, r24	; 0x13
    784a:	0f c0       	rjmp	.+30     	; 0x786a <main+0x382>
    784c:	80 e9       	ldi	r24, 0x90	; 144
    784e:	91 e0       	ldi	r25, 0x01	; 1
    7850:	9a 8b       	std	Y+18, r25	; 0x12
    7852:	89 8b       	std	Y+17, r24	; 0x11
    7854:	89 89       	ldd	r24, Y+17	; 0x11
    7856:	9a 89       	ldd	r25, Y+18	; 0x12
    7858:	01 97       	sbiw	r24, 0x01	; 1
    785a:	f1 f7       	brne	.-4      	; 0x7858 <main+0x370>
    785c:	9a 8b       	std	Y+18, r25	; 0x12
    785e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7860:	8b 89       	ldd	r24, Y+19	; 0x13
    7862:	9c 89       	ldd	r25, Y+20	; 0x14
    7864:	01 97       	sbiw	r24, 0x01	; 1
    7866:	9c 8b       	std	Y+20, r25	; 0x14
    7868:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    786a:	8b 89       	ldd	r24, Y+19	; 0x13
    786c:	9c 89       	ldd	r25, Y+20	; 0x14
    786e:	00 97       	sbiw	r24, 0x00	; 0
    7870:	69 f7       	brne	.-38     	; 0x784c <main+0x364>
    7872:	14 c0       	rjmp	.+40     	; 0x789c <main+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7874:	6d 89       	ldd	r22, Y+21	; 0x15
    7876:	7e 89       	ldd	r23, Y+22	; 0x16
    7878:	8f 89       	ldd	r24, Y+23	; 0x17
    787a:	98 8d       	ldd	r25, Y+24	; 0x18
    787c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7880:	dc 01       	movw	r26, r24
    7882:	cb 01       	movw	r24, r22
    7884:	9c 8b       	std	Y+20, r25	; 0x14
    7886:	8b 8b       	std	Y+19, r24	; 0x13
    7888:	8b 89       	ldd	r24, Y+19	; 0x13
    788a:	9c 89       	ldd	r25, Y+20	; 0x14
    788c:	98 8b       	std	Y+16, r25	; 0x10
    788e:	8f 87       	std	Y+15, r24	; 0x0f
    7890:	8f 85       	ldd	r24, Y+15	; 0x0f
    7892:	98 89       	ldd	r25, Y+16	; 0x10
    7894:	01 97       	sbiw	r24, 0x01	; 1
    7896:	f1 f7       	brne	.-4      	; 0x7894 <main+0x3ac>
    7898:	98 8b       	std	Y+16, r25	; 0x10
    789a:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(2000);
				H_LCD_void_Clear_Display();
    789c:	0e 94 9e 1b 	call	0x373c	; 0x373c <H_LCD_void_Clear_Display>
    78a0:	83 c0       	rjmp	.+262    	; 0x79a8 <main+0x4c0>
			}
			else if(Fp_status == 1)
    78a2:	80 91 0a 03 	lds	r24, 0x030A
    78a6:	81 30       	cpi	r24, 0x01	; 1
    78a8:	09 f0       	breq	.+2      	; 0x78ac <main+0x3c4>
    78aa:	7e c0       	rjmp	.+252    	; 0x79a8 <main+0x4c0>
			{
				H_LCD_void_Clear_Display();
    78ac:	0e 94 9e 1b 	call	0x373c	; 0x373c <H_LCD_void_Clear_Display>
				H_LCD_void_gotoXY(2, 1);
    78b0:	82 e0       	ldi	r24, 0x02	; 2
    78b2:	61 e0       	ldi	r22, 0x01	; 1
    78b4:	0e 94 34 1b 	call	0x3668	; 0x3668 <H_LCD_void_gotoXY>
				H_LCD_void_SendString("Enrollment Complete");
    78b8:	8b ea       	ldi	r24, 0xAB	; 171
    78ba:	90 e0       	ldi	r25, 0x00	; 0
    78bc:	0e 94 13 1b 	call	0x3626	; 0x3626 <H_LCD_void_SendString>
    78c0:	80 e0       	ldi	r24, 0x00	; 0
    78c2:	90 e0       	ldi	r25, 0x00	; 0
    78c4:	aa ef       	ldi	r26, 0xFA	; 250
    78c6:	b4 e4       	ldi	r27, 0x44	; 68
    78c8:	8b 87       	std	Y+11, r24	; 0x0b
    78ca:	9c 87       	std	Y+12, r25	; 0x0c
    78cc:	ad 87       	std	Y+13, r26	; 0x0d
    78ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    78d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    78d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    78d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    78d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    78d8:	20 e0       	ldi	r18, 0x00	; 0
    78da:	30 e0       	ldi	r19, 0x00	; 0
    78dc:	4a e7       	ldi	r20, 0x7A	; 122
    78de:	55 e4       	ldi	r21, 0x45	; 69
    78e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    78e4:	dc 01       	movw	r26, r24
    78e6:	cb 01       	movw	r24, r22
    78e8:	8f 83       	std	Y+7, r24	; 0x07
    78ea:	98 87       	std	Y+8, r25	; 0x08
    78ec:	a9 87       	std	Y+9, r26	; 0x09
    78ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    78f0:	6f 81       	ldd	r22, Y+7	; 0x07
    78f2:	78 85       	ldd	r23, Y+8	; 0x08
    78f4:	89 85       	ldd	r24, Y+9	; 0x09
    78f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    78f8:	20 e0       	ldi	r18, 0x00	; 0
    78fa:	30 e0       	ldi	r19, 0x00	; 0
    78fc:	40 e8       	ldi	r20, 0x80	; 128
    78fe:	5f e3       	ldi	r21, 0x3F	; 63
    7900:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7904:	88 23       	and	r24, r24
    7906:	2c f4       	brge	.+10     	; 0x7912 <main+0x42a>
		__ticks = 1;
    7908:	81 e0       	ldi	r24, 0x01	; 1
    790a:	90 e0       	ldi	r25, 0x00	; 0
    790c:	9e 83       	std	Y+6, r25	; 0x06
    790e:	8d 83       	std	Y+5, r24	; 0x05
    7910:	3f c0       	rjmp	.+126    	; 0x7990 <main+0x4a8>
	else if (__tmp > 65535)
    7912:	6f 81       	ldd	r22, Y+7	; 0x07
    7914:	78 85       	ldd	r23, Y+8	; 0x08
    7916:	89 85       	ldd	r24, Y+9	; 0x09
    7918:	9a 85       	ldd	r25, Y+10	; 0x0a
    791a:	20 e0       	ldi	r18, 0x00	; 0
    791c:	3f ef       	ldi	r19, 0xFF	; 255
    791e:	4f e7       	ldi	r20, 0x7F	; 127
    7920:	57 e4       	ldi	r21, 0x47	; 71
    7922:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7926:	18 16       	cp	r1, r24
    7928:	4c f5       	brge	.+82     	; 0x797c <main+0x494>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    792a:	6b 85       	ldd	r22, Y+11	; 0x0b
    792c:	7c 85       	ldd	r23, Y+12	; 0x0c
    792e:	8d 85       	ldd	r24, Y+13	; 0x0d
    7930:	9e 85       	ldd	r25, Y+14	; 0x0e
    7932:	20 e0       	ldi	r18, 0x00	; 0
    7934:	30 e0       	ldi	r19, 0x00	; 0
    7936:	40 e2       	ldi	r20, 0x20	; 32
    7938:	51 e4       	ldi	r21, 0x41	; 65
    793a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    793e:	dc 01       	movw	r26, r24
    7940:	cb 01       	movw	r24, r22
    7942:	bc 01       	movw	r22, r24
    7944:	cd 01       	movw	r24, r26
    7946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    794a:	dc 01       	movw	r26, r24
    794c:	cb 01       	movw	r24, r22
    794e:	9e 83       	std	Y+6, r25	; 0x06
    7950:	8d 83       	std	Y+5, r24	; 0x05
    7952:	0f c0       	rjmp	.+30     	; 0x7972 <main+0x48a>
    7954:	80 e9       	ldi	r24, 0x90	; 144
    7956:	91 e0       	ldi	r25, 0x01	; 1
    7958:	9c 83       	std	Y+4, r25	; 0x04
    795a:	8b 83       	std	Y+3, r24	; 0x03
    795c:	8b 81       	ldd	r24, Y+3	; 0x03
    795e:	9c 81       	ldd	r25, Y+4	; 0x04
    7960:	01 97       	sbiw	r24, 0x01	; 1
    7962:	f1 f7       	brne	.-4      	; 0x7960 <main+0x478>
    7964:	9c 83       	std	Y+4, r25	; 0x04
    7966:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7968:	8d 81       	ldd	r24, Y+5	; 0x05
    796a:	9e 81       	ldd	r25, Y+6	; 0x06
    796c:	01 97       	sbiw	r24, 0x01	; 1
    796e:	9e 83       	std	Y+6, r25	; 0x06
    7970:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7972:	8d 81       	ldd	r24, Y+5	; 0x05
    7974:	9e 81       	ldd	r25, Y+6	; 0x06
    7976:	00 97       	sbiw	r24, 0x00	; 0
    7978:	69 f7       	brne	.-38     	; 0x7954 <main+0x46c>
    797a:	14 c0       	rjmp	.+40     	; 0x79a4 <main+0x4bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    797c:	6f 81       	ldd	r22, Y+7	; 0x07
    797e:	78 85       	ldd	r23, Y+8	; 0x08
    7980:	89 85       	ldd	r24, Y+9	; 0x09
    7982:	9a 85       	ldd	r25, Y+10	; 0x0a
    7984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7988:	dc 01       	movw	r26, r24
    798a:	cb 01       	movw	r24, r22
    798c:	9e 83       	std	Y+6, r25	; 0x06
    798e:	8d 83       	std	Y+5, r24	; 0x05
    7990:	8d 81       	ldd	r24, Y+5	; 0x05
    7992:	9e 81       	ldd	r25, Y+6	; 0x06
    7994:	9a 83       	std	Y+2, r25	; 0x02
    7996:	89 83       	std	Y+1, r24	; 0x01
    7998:	89 81       	ldd	r24, Y+1	; 0x01
    799a:	9a 81       	ldd	r25, Y+2	; 0x02
    799c:	01 97       	sbiw	r24, 0x01	; 1
    799e:	f1 f7       	brne	.-4      	; 0x799c <main+0x4b4>
    79a0:	9a 83       	std	Y+2, r25	; 0x02
    79a2:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(2000);
				H_LCD_void_Clear_Display();
    79a4:	0e 94 9e 1b 	call	0x373c	; 0x373c <H_LCD_void_Clear_Display>
			}
			pressed_key = 0;
    79a8:	10 92 07 03 	sts	0x0307, r1
    79ac:	b1 cd       	rjmp	.-1182   	; 0x7510 <main+0x28>

000079ae <__mulsi3>:
    79ae:	62 9f       	mul	r22, r18
    79b0:	d0 01       	movw	r26, r0
    79b2:	73 9f       	mul	r23, r19
    79b4:	f0 01       	movw	r30, r0
    79b6:	82 9f       	mul	r24, r18
    79b8:	e0 0d       	add	r30, r0
    79ba:	f1 1d       	adc	r31, r1
    79bc:	64 9f       	mul	r22, r20
    79be:	e0 0d       	add	r30, r0
    79c0:	f1 1d       	adc	r31, r1
    79c2:	92 9f       	mul	r25, r18
    79c4:	f0 0d       	add	r31, r0
    79c6:	83 9f       	mul	r24, r19
    79c8:	f0 0d       	add	r31, r0
    79ca:	74 9f       	mul	r23, r20
    79cc:	f0 0d       	add	r31, r0
    79ce:	65 9f       	mul	r22, r21
    79d0:	f0 0d       	add	r31, r0
    79d2:	99 27       	eor	r25, r25
    79d4:	72 9f       	mul	r23, r18
    79d6:	b0 0d       	add	r27, r0
    79d8:	e1 1d       	adc	r30, r1
    79da:	f9 1f       	adc	r31, r25
    79dc:	63 9f       	mul	r22, r19
    79de:	b0 0d       	add	r27, r0
    79e0:	e1 1d       	adc	r30, r1
    79e2:	f9 1f       	adc	r31, r25
    79e4:	bd 01       	movw	r22, r26
    79e6:	cf 01       	movw	r24, r30
    79e8:	11 24       	eor	r1, r1
    79ea:	08 95       	ret

000079ec <__udivmodqi4>:
    79ec:	99 1b       	sub	r25, r25
    79ee:	79 e0       	ldi	r23, 0x09	; 9
    79f0:	04 c0       	rjmp	.+8      	; 0x79fa <__udivmodqi4_ep>

000079f2 <__udivmodqi4_loop>:
    79f2:	99 1f       	adc	r25, r25
    79f4:	96 17       	cp	r25, r22
    79f6:	08 f0       	brcs	.+2      	; 0x79fa <__udivmodqi4_ep>
    79f8:	96 1b       	sub	r25, r22

000079fa <__udivmodqi4_ep>:
    79fa:	88 1f       	adc	r24, r24
    79fc:	7a 95       	dec	r23
    79fe:	c9 f7       	brne	.-14     	; 0x79f2 <__udivmodqi4_loop>
    7a00:	80 95       	com	r24
    7a02:	08 95       	ret

00007a04 <__divmodhi4>:
    7a04:	97 fb       	bst	r25, 7
    7a06:	09 2e       	mov	r0, r25
    7a08:	07 26       	eor	r0, r23
    7a0a:	0a d0       	rcall	.+20     	; 0x7a20 <__divmodhi4_neg1>
    7a0c:	77 fd       	sbrc	r23, 7
    7a0e:	04 d0       	rcall	.+8      	; 0x7a18 <__divmodhi4_neg2>
    7a10:	2e d0       	rcall	.+92     	; 0x7a6e <__udivmodhi4>
    7a12:	06 d0       	rcall	.+12     	; 0x7a20 <__divmodhi4_neg1>
    7a14:	00 20       	and	r0, r0
    7a16:	1a f4       	brpl	.+6      	; 0x7a1e <__divmodhi4_exit>

00007a18 <__divmodhi4_neg2>:
    7a18:	70 95       	com	r23
    7a1a:	61 95       	neg	r22
    7a1c:	7f 4f       	sbci	r23, 0xFF	; 255

00007a1e <__divmodhi4_exit>:
    7a1e:	08 95       	ret

00007a20 <__divmodhi4_neg1>:
    7a20:	f6 f7       	brtc	.-4      	; 0x7a1e <__divmodhi4_exit>
    7a22:	90 95       	com	r25
    7a24:	81 95       	neg	r24
    7a26:	9f 4f       	sbci	r25, 0xFF	; 255
    7a28:	08 95       	ret

00007a2a <__udivmodsi4>:
    7a2a:	a1 e2       	ldi	r26, 0x21	; 33
    7a2c:	1a 2e       	mov	r1, r26
    7a2e:	aa 1b       	sub	r26, r26
    7a30:	bb 1b       	sub	r27, r27
    7a32:	fd 01       	movw	r30, r26
    7a34:	0d c0       	rjmp	.+26     	; 0x7a50 <__udivmodsi4_ep>

00007a36 <__udivmodsi4_loop>:
    7a36:	aa 1f       	adc	r26, r26
    7a38:	bb 1f       	adc	r27, r27
    7a3a:	ee 1f       	adc	r30, r30
    7a3c:	ff 1f       	adc	r31, r31
    7a3e:	a2 17       	cp	r26, r18
    7a40:	b3 07       	cpc	r27, r19
    7a42:	e4 07       	cpc	r30, r20
    7a44:	f5 07       	cpc	r31, r21
    7a46:	20 f0       	brcs	.+8      	; 0x7a50 <__udivmodsi4_ep>
    7a48:	a2 1b       	sub	r26, r18
    7a4a:	b3 0b       	sbc	r27, r19
    7a4c:	e4 0b       	sbc	r30, r20
    7a4e:	f5 0b       	sbc	r31, r21

00007a50 <__udivmodsi4_ep>:
    7a50:	66 1f       	adc	r22, r22
    7a52:	77 1f       	adc	r23, r23
    7a54:	88 1f       	adc	r24, r24
    7a56:	99 1f       	adc	r25, r25
    7a58:	1a 94       	dec	r1
    7a5a:	69 f7       	brne	.-38     	; 0x7a36 <__udivmodsi4_loop>
    7a5c:	60 95       	com	r22
    7a5e:	70 95       	com	r23
    7a60:	80 95       	com	r24
    7a62:	90 95       	com	r25
    7a64:	9b 01       	movw	r18, r22
    7a66:	ac 01       	movw	r20, r24
    7a68:	bd 01       	movw	r22, r26
    7a6a:	cf 01       	movw	r24, r30
    7a6c:	08 95       	ret

00007a6e <__udivmodhi4>:
    7a6e:	aa 1b       	sub	r26, r26
    7a70:	bb 1b       	sub	r27, r27
    7a72:	51 e1       	ldi	r21, 0x11	; 17
    7a74:	07 c0       	rjmp	.+14     	; 0x7a84 <__udivmodhi4_ep>

00007a76 <__udivmodhi4_loop>:
    7a76:	aa 1f       	adc	r26, r26
    7a78:	bb 1f       	adc	r27, r27
    7a7a:	a6 17       	cp	r26, r22
    7a7c:	b7 07       	cpc	r27, r23
    7a7e:	10 f0       	brcs	.+4      	; 0x7a84 <__udivmodhi4_ep>
    7a80:	a6 1b       	sub	r26, r22
    7a82:	b7 0b       	sbc	r27, r23

00007a84 <__udivmodhi4_ep>:
    7a84:	88 1f       	adc	r24, r24
    7a86:	99 1f       	adc	r25, r25
    7a88:	5a 95       	dec	r21
    7a8a:	a9 f7       	brne	.-22     	; 0x7a76 <__udivmodhi4_loop>
    7a8c:	80 95       	com	r24
    7a8e:	90 95       	com	r25
    7a90:	bc 01       	movw	r22, r24
    7a92:	cd 01       	movw	r24, r26
    7a94:	08 95       	ret

00007a96 <__prologue_saves__>:
    7a96:	2f 92       	push	r2
    7a98:	3f 92       	push	r3
    7a9a:	4f 92       	push	r4
    7a9c:	5f 92       	push	r5
    7a9e:	6f 92       	push	r6
    7aa0:	7f 92       	push	r7
    7aa2:	8f 92       	push	r8
    7aa4:	9f 92       	push	r9
    7aa6:	af 92       	push	r10
    7aa8:	bf 92       	push	r11
    7aaa:	cf 92       	push	r12
    7aac:	df 92       	push	r13
    7aae:	ef 92       	push	r14
    7ab0:	ff 92       	push	r15
    7ab2:	0f 93       	push	r16
    7ab4:	1f 93       	push	r17
    7ab6:	cf 93       	push	r28
    7ab8:	df 93       	push	r29
    7aba:	cd b7       	in	r28, 0x3d	; 61
    7abc:	de b7       	in	r29, 0x3e	; 62
    7abe:	ca 1b       	sub	r28, r26
    7ac0:	db 0b       	sbc	r29, r27
    7ac2:	0f b6       	in	r0, 0x3f	; 63
    7ac4:	f8 94       	cli
    7ac6:	de bf       	out	0x3e, r29	; 62
    7ac8:	0f be       	out	0x3f, r0	; 63
    7aca:	cd bf       	out	0x3d, r28	; 61
    7acc:	09 94       	ijmp

00007ace <__epilogue_restores__>:
    7ace:	2a 88       	ldd	r2, Y+18	; 0x12
    7ad0:	39 88       	ldd	r3, Y+17	; 0x11
    7ad2:	48 88       	ldd	r4, Y+16	; 0x10
    7ad4:	5f 84       	ldd	r5, Y+15	; 0x0f
    7ad6:	6e 84       	ldd	r6, Y+14	; 0x0e
    7ad8:	7d 84       	ldd	r7, Y+13	; 0x0d
    7ada:	8c 84       	ldd	r8, Y+12	; 0x0c
    7adc:	9b 84       	ldd	r9, Y+11	; 0x0b
    7ade:	aa 84       	ldd	r10, Y+10	; 0x0a
    7ae0:	b9 84       	ldd	r11, Y+9	; 0x09
    7ae2:	c8 84       	ldd	r12, Y+8	; 0x08
    7ae4:	df 80       	ldd	r13, Y+7	; 0x07
    7ae6:	ee 80       	ldd	r14, Y+6	; 0x06
    7ae8:	fd 80       	ldd	r15, Y+5	; 0x05
    7aea:	0c 81       	ldd	r16, Y+4	; 0x04
    7aec:	1b 81       	ldd	r17, Y+3	; 0x03
    7aee:	aa 81       	ldd	r26, Y+2	; 0x02
    7af0:	b9 81       	ldd	r27, Y+1	; 0x01
    7af2:	ce 0f       	add	r28, r30
    7af4:	d1 1d       	adc	r29, r1
    7af6:	0f b6       	in	r0, 0x3f	; 63
    7af8:	f8 94       	cli
    7afa:	de bf       	out	0x3e, r29	; 62
    7afc:	0f be       	out	0x3f, r0	; 63
    7afe:	cd bf       	out	0x3d, r28	; 61
    7b00:	ed 01       	movw	r28, r26
    7b02:	08 95       	ret

00007b04 <itoa>:
    7b04:	fb 01       	movw	r30, r22
    7b06:	9f 01       	movw	r18, r30
    7b08:	e8 94       	clt
    7b0a:	42 30       	cpi	r20, 0x02	; 2
    7b0c:	c4 f0       	brlt	.+48     	; 0x7b3e <itoa+0x3a>
    7b0e:	45 32       	cpi	r20, 0x25	; 37
    7b10:	b4 f4       	brge	.+44     	; 0x7b3e <itoa+0x3a>
    7b12:	4a 30       	cpi	r20, 0x0A	; 10
    7b14:	29 f4       	brne	.+10     	; 0x7b20 <itoa+0x1c>
    7b16:	97 fb       	bst	r25, 7
    7b18:	1e f4       	brtc	.+6      	; 0x7b20 <itoa+0x1c>
    7b1a:	90 95       	com	r25
    7b1c:	81 95       	neg	r24
    7b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    7b20:	64 2f       	mov	r22, r20
    7b22:	77 27       	eor	r23, r23
    7b24:	0e 94 37 3d 	call	0x7a6e	; 0x7a6e <__udivmodhi4>
    7b28:	80 5d       	subi	r24, 0xD0	; 208
    7b2a:	8a 33       	cpi	r24, 0x3A	; 58
    7b2c:	0c f0       	brlt	.+2      	; 0x7b30 <itoa+0x2c>
    7b2e:	89 5d       	subi	r24, 0xD9	; 217
    7b30:	81 93       	st	Z+, r24
    7b32:	cb 01       	movw	r24, r22
    7b34:	00 97       	sbiw	r24, 0x00	; 0
    7b36:	a1 f7       	brne	.-24     	; 0x7b20 <itoa+0x1c>
    7b38:	16 f4       	brtc	.+4      	; 0x7b3e <itoa+0x3a>
    7b3a:	5d e2       	ldi	r21, 0x2D	; 45
    7b3c:	51 93       	st	Z+, r21
    7b3e:	10 82       	st	Z, r1
    7b40:	c9 01       	movw	r24, r18
    7b42:	0c 94 a3 3d 	jmp	0x7b46	; 0x7b46 <strrev>

00007b46 <strrev>:
    7b46:	dc 01       	movw	r26, r24
    7b48:	fc 01       	movw	r30, r24
    7b4a:	67 2f       	mov	r22, r23
    7b4c:	71 91       	ld	r23, Z+
    7b4e:	77 23       	and	r23, r23
    7b50:	e1 f7       	brne	.-8      	; 0x7b4a <strrev+0x4>
    7b52:	32 97       	sbiw	r30, 0x02	; 2
    7b54:	04 c0       	rjmp	.+8      	; 0x7b5e <strrev+0x18>
    7b56:	7c 91       	ld	r23, X
    7b58:	6d 93       	st	X+, r22
    7b5a:	70 83       	st	Z, r23
    7b5c:	62 91       	ld	r22, -Z
    7b5e:	ae 17       	cp	r26, r30
    7b60:	bf 07       	cpc	r27, r31
    7b62:	c8 f3       	brcs	.-14     	; 0x7b56 <strrev+0x10>
    7b64:	08 95       	ret

00007b66 <_exit>:
    7b66:	f8 94       	cli

00007b68 <__stop_program>:
    7b68:	ff cf       	rjmp	.-2      	; 0x7b68 <__stop_program>
