
NTI_MohamedAli.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00001d74  00001e08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800090  00800090  00001e38  2**0
                  ALLOC
  3 .stab         000017ac  00000000  00000000  00001e38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016d7  00000000  00000000  000035e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000884c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000089ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008c39  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009407  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e7       	ldi	r30, 0x74	; 116
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <main>
      8a:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 81 0e 	jmp	0x1d02	; 0x1d02 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 81 0e 	jmp	0x1d02	; 0x1d02 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 91 0e 	jmp	0x1d22	; 0x1d22 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_SetPinDirection>:

volatile Peripheral_t *Ports_index[NUM_PORTS] = {GPIO_PINS_A, GPIO_PINS_B, GPIO_PINS_C, GPIO_PINS_D};


PROGRAM_STATUS_T DIO_SetPinDirection(const GPIO_CFG_T *obj)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DIO_SetPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <DIO_SetPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	9b 83       	std	Y+3, r25	; 0x03
     b56:	8a 83       	std	Y+2, r24	; 0x02
    PROGRAM_STATUS_T ret_status = SUCCESS;
     b58:	19 82       	std	Y+1, r1	; 0x01
    if(NULL == obj)
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	9b 81       	ldd	r25, Y+3	; 0x03
     b5e:	00 97       	sbiw	r24, 0x00	; 0
     b60:	19 f4       	brne	.+6      	; 0xb68 <DIO_SetPinDirection+0x22>
    {
        ret_status = NULL_PTR;
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	89 83       	std	Y+1, r24	; 0x01
     b66:	b9 c2       	rjmp	.+1394   	; 0x10da <DIO_SetPinDirection+0x594>
    }
    else
    {
        switch (obj->pin) {
     b68:	ea 81       	ldd	r30, Y+2	; 0x02
     b6a:	fb 81       	ldd	r31, Y+3	; 0x03
     b6c:	80 81       	ld	r24, Z
     b6e:	86 95       	lsr	r24
     b70:	86 95       	lsr	r24
     b72:	86 95       	lsr	r24
     b74:	87 70       	andi	r24, 0x07	; 7
     b76:	28 2f       	mov	r18, r24
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	3d 83       	std	Y+5, r19	; 0x05
     b7c:	2c 83       	std	Y+4, r18	; 0x04
     b7e:	8c 81       	ldd	r24, Y+4	; 0x04
     b80:	9d 81       	ldd	r25, Y+5	; 0x05
     b82:	83 30       	cpi	r24, 0x03	; 3
     b84:	91 05       	cpc	r25, r1
     b86:	09 f4       	brne	.+2      	; 0xb8a <DIO_SetPinDirection+0x44>
     b88:	1c c1       	rjmp	.+568    	; 0xdc2 <DIO_SetPinDirection+0x27c>
     b8a:	2c 81       	ldd	r18, Y+4	; 0x04
     b8c:	3d 81       	ldd	r19, Y+5	; 0x05
     b8e:	24 30       	cpi	r18, 0x04	; 4
     b90:	31 05       	cpc	r19, r1
     b92:	8c f4       	brge	.+34     	; 0xbb6 <DIO_SetPinDirection+0x70>
     b94:	8c 81       	ldd	r24, Y+4	; 0x04
     b96:	9d 81       	ldd	r25, Y+5	; 0x05
     b98:	81 30       	cpi	r24, 0x01	; 1
     b9a:	91 05       	cpc	r25, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <DIO_SetPinDirection+0x5a>
     b9e:	73 c0       	rjmp	.+230    	; 0xc86 <DIO_SetPinDirection+0x140>
     ba0:	2c 81       	ldd	r18, Y+4	; 0x04
     ba2:	3d 81       	ldd	r19, Y+5	; 0x05
     ba4:	22 30       	cpi	r18, 0x02	; 2
     ba6:	31 05       	cpc	r19, r1
     ba8:	0c f0       	brlt	.+2      	; 0xbac <DIO_SetPinDirection+0x66>
     baa:	bc c0       	rjmp	.+376    	; 0xd24 <DIO_SetPinDirection+0x1de>
     bac:	8c 81       	ldd	r24, Y+4	; 0x04
     bae:	9d 81       	ldd	r25, Y+5	; 0x05
     bb0:	00 97       	sbiw	r24, 0x00	; 0
     bb2:	d1 f0       	breq	.+52     	; 0xbe8 <DIO_SetPinDirection+0xa2>
     bb4:	90 c2       	rjmp	.+1312   	; 0x10d6 <DIO_SetPinDirection+0x590>
     bb6:	2c 81       	ldd	r18, Y+4	; 0x04
     bb8:	3d 81       	ldd	r19, Y+5	; 0x05
     bba:	25 30       	cpi	r18, 0x05	; 5
     bbc:	31 05       	cpc	r19, r1
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <DIO_SetPinDirection+0x7c>
     bc0:	9e c1       	rjmp	.+828    	; 0xefe <DIO_SetPinDirection+0x3b8>
     bc2:	8c 81       	ldd	r24, Y+4	; 0x04
     bc4:	9d 81       	ldd	r25, Y+5	; 0x05
     bc6:	85 30       	cpi	r24, 0x05	; 5
     bc8:	91 05       	cpc	r25, r1
     bca:	0c f4       	brge	.+2      	; 0xbce <DIO_SetPinDirection+0x88>
     bcc:	49 c1       	rjmp	.+658    	; 0xe60 <DIO_SetPinDirection+0x31a>
     bce:	2c 81       	ldd	r18, Y+4	; 0x04
     bd0:	3d 81       	ldd	r19, Y+5	; 0x05
     bd2:	26 30       	cpi	r18, 0x06	; 6
     bd4:	31 05       	cpc	r19, r1
     bd6:	09 f4       	brne	.+2      	; 0xbda <DIO_SetPinDirection+0x94>
     bd8:	e1 c1       	rjmp	.+962    	; 0xf9c <DIO_SetPinDirection+0x456>
     bda:	8c 81       	ldd	r24, Y+4	; 0x04
     bdc:	9d 81       	ldd	r25, Y+5	; 0x05
     bde:	87 30       	cpi	r24, 0x07	; 7
     be0:	91 05       	cpc	r25, r1
     be2:	09 f4       	brne	.+2      	; 0xbe6 <DIO_SetPinDirection+0xa0>
     be4:	2a c2       	rjmp	.+1108   	; 0x103a <DIO_SetPinDirection+0x4f4>
     be6:	77 c2       	rjmp	.+1262   	; 0x10d6 <DIO_SetPinDirection+0x590>
            case PIN0_INDEX:
            	if(obj->direction == GPIO_DIRECTION_OUTPUT)
     be8:	ea 81       	ldd	r30, Y+2	; 0x02
     bea:	fb 81       	ldd	r31, Y+3	; 0x03
     bec:	80 81       	ld	r24, Z
     bee:	80 74       	andi	r24, 0x40	; 64
     bf0:	88 23       	and	r24, r24
     bf2:	09 f1       	breq	.+66     	; 0xc36 <DIO_SetPinDirection+0xf0>
            	{
            		CLEAR_BIT(Ports_index[obj->port]->DDRx, PIN0_INDEX);
     bf4:	ea 81       	ldd	r30, Y+2	; 0x02
     bf6:	fb 81       	ldd	r31, Y+3	; 0x03
     bf8:	80 81       	ld	r24, Z
     bfa:	87 70       	andi	r24, 0x07	; 7
     bfc:	88 2f       	mov	r24, r24
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	fc 01       	movw	r30, r24
     c06:	e8 59       	subi	r30, 0x98	; 152
     c08:	ff 4f       	sbci	r31, 0xFF	; 255
     c0a:	a0 81       	ld	r26, Z
     c0c:	b1 81       	ldd	r27, Z+1	; 0x01
     c0e:	ea 81       	ldd	r30, Y+2	; 0x02
     c10:	fb 81       	ldd	r31, Y+3	; 0x03
     c12:	80 81       	ld	r24, Z
     c14:	87 70       	andi	r24, 0x07	; 7
     c16:	88 2f       	mov	r24, r24
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	88 0f       	add	r24, r24
     c1c:	99 1f       	adc	r25, r25
     c1e:	fc 01       	movw	r30, r24
     c20:	e8 59       	subi	r30, 0x98	; 152
     c22:	ff 4f       	sbci	r31, 0xFF	; 255
     c24:	01 90       	ld	r0, Z+
     c26:	f0 81       	ld	r31, Z
     c28:	e0 2d       	mov	r30, r0
     c2a:	81 81       	ldd	r24, Z+1	; 0x01
     c2c:	8e 7f       	andi	r24, 0xFE	; 254
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	8c 93       	st	X, r24
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	52 c2       	rjmp	.+1188   	; 0x10da <DIO_SetPinDirection+0x594>
            	}
            	else if(obj->direction == GPIO_DIRECTION_INPUT)
     c36:	ea 81       	ldd	r30, Y+2	; 0x02
     c38:	fb 81       	ldd	r31, Y+3	; 0x03
     c3a:	80 81       	ld	r24, Z
     c3c:	80 74       	andi	r24, 0x40	; 64
     c3e:	88 23       	and	r24, r24
     c40:	09 f0       	breq	.+2      	; 0xc44 <DIO_SetPinDirection+0xfe>
     c42:	4b c2       	rjmp	.+1174   	; 0x10da <DIO_SetPinDirection+0x594>
            	{
            		SET_BIT(Ports_index[obj->port]->DDRx, PIN0_INDEX);
     c44:	ea 81       	ldd	r30, Y+2	; 0x02
     c46:	fb 81       	ldd	r31, Y+3	; 0x03
     c48:	80 81       	ld	r24, Z
     c4a:	87 70       	andi	r24, 0x07	; 7
     c4c:	88 2f       	mov	r24, r24
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	fc 01       	movw	r30, r24
     c56:	e8 59       	subi	r30, 0x98	; 152
     c58:	ff 4f       	sbci	r31, 0xFF	; 255
     c5a:	a0 81       	ld	r26, Z
     c5c:	b1 81       	ldd	r27, Z+1	; 0x01
     c5e:	ea 81       	ldd	r30, Y+2	; 0x02
     c60:	fb 81       	ldd	r31, Y+3	; 0x03
     c62:	80 81       	ld	r24, Z
     c64:	87 70       	andi	r24, 0x07	; 7
     c66:	88 2f       	mov	r24, r24
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	fc 01       	movw	r30, r24
     c70:	e8 59       	subi	r30, 0x98	; 152
     c72:	ff 4f       	sbci	r31, 0xFF	; 255
     c74:	01 90       	ld	r0, Z+
     c76:	f0 81       	ld	r31, Z
     c78:	e0 2d       	mov	r30, r0
     c7a:	81 81       	ldd	r24, Z+1	; 0x01
     c7c:	81 60       	ori	r24, 0x01	; 1
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	8c 93       	st	X, r24
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	2a c2       	rjmp	.+1108   	; 0x10da <DIO_SetPinDirection+0x594>
            	}
            	else{/* Nothing */}

            break;
            case PIN1_INDEX:
            	if(obj->direction == GPIO_DIRECTION_OUTPUT)
     c86:	ea 81       	ldd	r30, Y+2	; 0x02
     c88:	fb 81       	ldd	r31, Y+3	; 0x03
     c8a:	80 81       	ld	r24, Z
     c8c:	80 74       	andi	r24, 0x40	; 64
     c8e:	88 23       	and	r24, r24
     c90:	09 f1       	breq	.+66     	; 0xcd4 <DIO_SetPinDirection+0x18e>
            	{
            		CLEAR_BIT(Ports_index[obj->port]->DDRx, PIN1_INDEX);
     c92:	ea 81       	ldd	r30, Y+2	; 0x02
     c94:	fb 81       	ldd	r31, Y+3	; 0x03
     c96:	80 81       	ld	r24, Z
     c98:	87 70       	andi	r24, 0x07	; 7
     c9a:	88 2f       	mov	r24, r24
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	88 0f       	add	r24, r24
     ca0:	99 1f       	adc	r25, r25
     ca2:	fc 01       	movw	r30, r24
     ca4:	e8 59       	subi	r30, 0x98	; 152
     ca6:	ff 4f       	sbci	r31, 0xFF	; 255
     ca8:	a0 81       	ld	r26, Z
     caa:	b1 81       	ldd	r27, Z+1	; 0x01
     cac:	ea 81       	ldd	r30, Y+2	; 0x02
     cae:	fb 81       	ldd	r31, Y+3	; 0x03
     cb0:	80 81       	ld	r24, Z
     cb2:	87 70       	andi	r24, 0x07	; 7
     cb4:	88 2f       	mov	r24, r24
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	fc 01       	movw	r30, r24
     cbe:	e8 59       	subi	r30, 0x98	; 152
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	01 90       	ld	r0, Z+
     cc4:	f0 81       	ld	r31, Z
     cc6:	e0 2d       	mov	r30, r0
     cc8:	81 81       	ldd	r24, Z+1	; 0x01
     cca:	8d 7f       	andi	r24, 0xFD	; 253
     ccc:	11 96       	adiw	r26, 0x01	; 1
     cce:	8c 93       	st	X, r24
     cd0:	11 97       	sbiw	r26, 0x01	; 1
     cd2:	03 c2       	rjmp	.+1030   	; 0x10da <DIO_SetPinDirection+0x594>
            	}
            	else if(obj->direction == GPIO_DIRECTION_INPUT)
     cd4:	ea 81       	ldd	r30, Y+2	; 0x02
     cd6:	fb 81       	ldd	r31, Y+3	; 0x03
     cd8:	80 81       	ld	r24, Z
     cda:	80 74       	andi	r24, 0x40	; 64
     cdc:	88 23       	and	r24, r24
     cde:	09 f0       	breq	.+2      	; 0xce2 <DIO_SetPinDirection+0x19c>
     ce0:	fc c1       	rjmp	.+1016   	; 0x10da <DIO_SetPinDirection+0x594>
            	{
            		SET_BIT(Ports_index[obj->port]->DDRx, PIN1_INDEX);
     ce2:	ea 81       	ldd	r30, Y+2	; 0x02
     ce4:	fb 81       	ldd	r31, Y+3	; 0x03
     ce6:	80 81       	ld	r24, Z
     ce8:	87 70       	andi	r24, 0x07	; 7
     cea:	88 2f       	mov	r24, r24
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	fc 01       	movw	r30, r24
     cf4:	e8 59       	subi	r30, 0x98	; 152
     cf6:	ff 4f       	sbci	r31, 0xFF	; 255
     cf8:	a0 81       	ld	r26, Z
     cfa:	b1 81       	ldd	r27, Z+1	; 0x01
     cfc:	ea 81       	ldd	r30, Y+2	; 0x02
     cfe:	fb 81       	ldd	r31, Y+3	; 0x03
     d00:	80 81       	ld	r24, Z
     d02:	87 70       	andi	r24, 0x07	; 7
     d04:	88 2f       	mov	r24, r24
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	fc 01       	movw	r30, r24
     d0e:	e8 59       	subi	r30, 0x98	; 152
     d10:	ff 4f       	sbci	r31, 0xFF	; 255
     d12:	01 90       	ld	r0, Z+
     d14:	f0 81       	ld	r31, Z
     d16:	e0 2d       	mov	r30, r0
     d18:	81 81       	ldd	r24, Z+1	; 0x01
     d1a:	82 60       	ori	r24, 0x02	; 2
     d1c:	11 96       	adiw	r26, 0x01	; 1
     d1e:	8c 93       	st	X, r24
     d20:	11 97       	sbiw	r26, 0x01	; 1
     d22:	db c1       	rjmp	.+950    	; 0x10da <DIO_SetPinDirection+0x594>
            	}
            	else{/* Nothing */}
            break;
            case PIN2_INDEX:
            	if(obj->direction == GPIO_DIRECTION_OUTPUT)
     d24:	ea 81       	ldd	r30, Y+2	; 0x02
     d26:	fb 81       	ldd	r31, Y+3	; 0x03
     d28:	80 81       	ld	r24, Z
     d2a:	80 74       	andi	r24, 0x40	; 64
     d2c:	88 23       	and	r24, r24
     d2e:	09 f1       	breq	.+66     	; 0xd72 <DIO_SetPinDirection+0x22c>
            	{
            		CLEAR_BIT(Ports_index[obj->port]->DDRx, PIN2_INDEX);
     d30:	ea 81       	ldd	r30, Y+2	; 0x02
     d32:	fb 81       	ldd	r31, Y+3	; 0x03
     d34:	80 81       	ld	r24, Z
     d36:	87 70       	andi	r24, 0x07	; 7
     d38:	88 2f       	mov	r24, r24
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	fc 01       	movw	r30, r24
     d42:	e8 59       	subi	r30, 0x98	; 152
     d44:	ff 4f       	sbci	r31, 0xFF	; 255
     d46:	a0 81       	ld	r26, Z
     d48:	b1 81       	ldd	r27, Z+1	; 0x01
     d4a:	ea 81       	ldd	r30, Y+2	; 0x02
     d4c:	fb 81       	ldd	r31, Y+3	; 0x03
     d4e:	80 81       	ld	r24, Z
     d50:	87 70       	andi	r24, 0x07	; 7
     d52:	88 2f       	mov	r24, r24
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	fc 01       	movw	r30, r24
     d5c:	e8 59       	subi	r30, 0x98	; 152
     d5e:	ff 4f       	sbci	r31, 0xFF	; 255
     d60:	01 90       	ld	r0, Z+
     d62:	f0 81       	ld	r31, Z
     d64:	e0 2d       	mov	r30, r0
     d66:	81 81       	ldd	r24, Z+1	; 0x01
     d68:	8b 7f       	andi	r24, 0xFB	; 251
     d6a:	11 96       	adiw	r26, 0x01	; 1
     d6c:	8c 93       	st	X, r24
     d6e:	11 97       	sbiw	r26, 0x01	; 1
     d70:	b4 c1       	rjmp	.+872    	; 0x10da <DIO_SetPinDirection+0x594>
            	}
            	else if(obj->direction == GPIO_DIRECTION_INPUT)
     d72:	ea 81       	ldd	r30, Y+2	; 0x02
     d74:	fb 81       	ldd	r31, Y+3	; 0x03
     d76:	80 81       	ld	r24, Z
     d78:	80 74       	andi	r24, 0x40	; 64
     d7a:	88 23       	and	r24, r24
     d7c:	09 f0       	breq	.+2      	; 0xd80 <DIO_SetPinDirection+0x23a>
     d7e:	ad c1       	rjmp	.+858    	; 0x10da <DIO_SetPinDirection+0x594>
            	{
            		SET_BIT(Ports_index[obj->port]->DDRx, PIN2_INDEX);
     d80:	ea 81       	ldd	r30, Y+2	; 0x02
     d82:	fb 81       	ldd	r31, Y+3	; 0x03
     d84:	80 81       	ld	r24, Z
     d86:	87 70       	andi	r24, 0x07	; 7
     d88:	88 2f       	mov	r24, r24
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	fc 01       	movw	r30, r24
     d92:	e8 59       	subi	r30, 0x98	; 152
     d94:	ff 4f       	sbci	r31, 0xFF	; 255
     d96:	a0 81       	ld	r26, Z
     d98:	b1 81       	ldd	r27, Z+1	; 0x01
     d9a:	ea 81       	ldd	r30, Y+2	; 0x02
     d9c:	fb 81       	ldd	r31, Y+3	; 0x03
     d9e:	80 81       	ld	r24, Z
     da0:	87 70       	andi	r24, 0x07	; 7
     da2:	88 2f       	mov	r24, r24
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	fc 01       	movw	r30, r24
     dac:	e8 59       	subi	r30, 0x98	; 152
     dae:	ff 4f       	sbci	r31, 0xFF	; 255
     db0:	01 90       	ld	r0, Z+
     db2:	f0 81       	ld	r31, Z
     db4:	e0 2d       	mov	r30, r0
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	84 60       	ori	r24, 0x04	; 4
     dba:	11 96       	adiw	r26, 0x01	; 1
     dbc:	8c 93       	st	X, r24
     dbe:	11 97       	sbiw	r26, 0x01	; 1
     dc0:	8c c1       	rjmp	.+792    	; 0x10da <DIO_SetPinDirection+0x594>
            	}
            	else{/* Nothing */}
            break;
            case PIN3_INDEX:
            	if(obj->direction == GPIO_DIRECTION_OUTPUT)
     dc2:	ea 81       	ldd	r30, Y+2	; 0x02
     dc4:	fb 81       	ldd	r31, Y+3	; 0x03
     dc6:	80 81       	ld	r24, Z
     dc8:	80 74       	andi	r24, 0x40	; 64
     dca:	88 23       	and	r24, r24
     dcc:	09 f1       	breq	.+66     	; 0xe10 <DIO_SetPinDirection+0x2ca>
            	{
            		CLEAR_BIT(Ports_index[obj->port]->DDRx, PIN3_INDEX);
     dce:	ea 81       	ldd	r30, Y+2	; 0x02
     dd0:	fb 81       	ldd	r31, Y+3	; 0x03
     dd2:	80 81       	ld	r24, Z
     dd4:	87 70       	andi	r24, 0x07	; 7
     dd6:	88 2f       	mov	r24, r24
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	88 0f       	add	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	fc 01       	movw	r30, r24
     de0:	e8 59       	subi	r30, 0x98	; 152
     de2:	ff 4f       	sbci	r31, 0xFF	; 255
     de4:	a0 81       	ld	r26, Z
     de6:	b1 81       	ldd	r27, Z+1	; 0x01
     de8:	ea 81       	ldd	r30, Y+2	; 0x02
     dea:	fb 81       	ldd	r31, Y+3	; 0x03
     dec:	80 81       	ld	r24, Z
     dee:	87 70       	andi	r24, 0x07	; 7
     df0:	88 2f       	mov	r24, r24
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	fc 01       	movw	r30, r24
     dfa:	e8 59       	subi	r30, 0x98	; 152
     dfc:	ff 4f       	sbci	r31, 0xFF	; 255
     dfe:	01 90       	ld	r0, Z+
     e00:	f0 81       	ld	r31, Z
     e02:	e0 2d       	mov	r30, r0
     e04:	81 81       	ldd	r24, Z+1	; 0x01
     e06:	87 7f       	andi	r24, 0xF7	; 247
     e08:	11 96       	adiw	r26, 0x01	; 1
     e0a:	8c 93       	st	X, r24
     e0c:	11 97       	sbiw	r26, 0x01	; 1
     e0e:	65 c1       	rjmp	.+714    	; 0x10da <DIO_SetPinDirection+0x594>
            	}
            	else if(obj->direction == GPIO_DIRECTION_INPUT)
     e10:	ea 81       	ldd	r30, Y+2	; 0x02
     e12:	fb 81       	ldd	r31, Y+3	; 0x03
     e14:	80 81       	ld	r24, Z
     e16:	80 74       	andi	r24, 0x40	; 64
     e18:	88 23       	and	r24, r24
     e1a:	09 f0       	breq	.+2      	; 0xe1e <DIO_SetPinDirection+0x2d8>
     e1c:	5e c1       	rjmp	.+700    	; 0x10da <DIO_SetPinDirection+0x594>
            	{
            		SET_BIT(Ports_index[obj->port]->DDRx, PIN3_INDEX);
     e1e:	ea 81       	ldd	r30, Y+2	; 0x02
     e20:	fb 81       	ldd	r31, Y+3	; 0x03
     e22:	80 81       	ld	r24, Z
     e24:	87 70       	andi	r24, 0x07	; 7
     e26:	88 2f       	mov	r24, r24
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	fc 01       	movw	r30, r24
     e30:	e8 59       	subi	r30, 0x98	; 152
     e32:	ff 4f       	sbci	r31, 0xFF	; 255
     e34:	a0 81       	ld	r26, Z
     e36:	b1 81       	ldd	r27, Z+1	; 0x01
     e38:	ea 81       	ldd	r30, Y+2	; 0x02
     e3a:	fb 81       	ldd	r31, Y+3	; 0x03
     e3c:	80 81       	ld	r24, Z
     e3e:	87 70       	andi	r24, 0x07	; 7
     e40:	88 2f       	mov	r24, r24
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	fc 01       	movw	r30, r24
     e4a:	e8 59       	subi	r30, 0x98	; 152
     e4c:	ff 4f       	sbci	r31, 0xFF	; 255
     e4e:	01 90       	ld	r0, Z+
     e50:	f0 81       	ld	r31, Z
     e52:	e0 2d       	mov	r30, r0
     e54:	81 81       	ldd	r24, Z+1	; 0x01
     e56:	88 60       	ori	r24, 0x08	; 8
     e58:	11 96       	adiw	r26, 0x01	; 1
     e5a:	8c 93       	st	X, r24
     e5c:	11 97       	sbiw	r26, 0x01	; 1
     e5e:	3d c1       	rjmp	.+634    	; 0x10da <DIO_SetPinDirection+0x594>
            	}
            	else{/* Nothing */}
            break;
            case PIN4_INDEX:
            	if(obj->direction == GPIO_DIRECTION_OUTPUT)
     e60:	ea 81       	ldd	r30, Y+2	; 0x02
     e62:	fb 81       	ldd	r31, Y+3	; 0x03
     e64:	80 81       	ld	r24, Z
     e66:	80 74       	andi	r24, 0x40	; 64
     e68:	88 23       	and	r24, r24
     e6a:	09 f1       	breq	.+66     	; 0xeae <DIO_SetPinDirection+0x368>
            	{
            		CLEAR_BIT(Ports_index[obj->port]->DDRx, PIN4_INDEX);
     e6c:	ea 81       	ldd	r30, Y+2	; 0x02
     e6e:	fb 81       	ldd	r31, Y+3	; 0x03
     e70:	80 81       	ld	r24, Z
     e72:	87 70       	andi	r24, 0x07	; 7
     e74:	88 2f       	mov	r24, r24
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	fc 01       	movw	r30, r24
     e7e:	e8 59       	subi	r30, 0x98	; 152
     e80:	ff 4f       	sbci	r31, 0xFF	; 255
     e82:	a0 81       	ld	r26, Z
     e84:	b1 81       	ldd	r27, Z+1	; 0x01
     e86:	ea 81       	ldd	r30, Y+2	; 0x02
     e88:	fb 81       	ldd	r31, Y+3	; 0x03
     e8a:	80 81       	ld	r24, Z
     e8c:	87 70       	andi	r24, 0x07	; 7
     e8e:	88 2f       	mov	r24, r24
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	fc 01       	movw	r30, r24
     e98:	e8 59       	subi	r30, 0x98	; 152
     e9a:	ff 4f       	sbci	r31, 0xFF	; 255
     e9c:	01 90       	ld	r0, Z+
     e9e:	f0 81       	ld	r31, Z
     ea0:	e0 2d       	mov	r30, r0
     ea2:	81 81       	ldd	r24, Z+1	; 0x01
     ea4:	8f 7e       	andi	r24, 0xEF	; 239
     ea6:	11 96       	adiw	r26, 0x01	; 1
     ea8:	8c 93       	st	X, r24
     eaa:	11 97       	sbiw	r26, 0x01	; 1
     eac:	16 c1       	rjmp	.+556    	; 0x10da <DIO_SetPinDirection+0x594>
            	}
            	else if(obj->direction == GPIO_DIRECTION_INPUT)
     eae:	ea 81       	ldd	r30, Y+2	; 0x02
     eb0:	fb 81       	ldd	r31, Y+3	; 0x03
     eb2:	80 81       	ld	r24, Z
     eb4:	80 74       	andi	r24, 0x40	; 64
     eb6:	88 23       	and	r24, r24
     eb8:	09 f0       	breq	.+2      	; 0xebc <DIO_SetPinDirection+0x376>
     eba:	0f c1       	rjmp	.+542    	; 0x10da <DIO_SetPinDirection+0x594>
            	{
            		SET_BIT(Ports_index[obj->port]->DDRx, PIN4_INDEX);
     ebc:	ea 81       	ldd	r30, Y+2	; 0x02
     ebe:	fb 81       	ldd	r31, Y+3	; 0x03
     ec0:	80 81       	ld	r24, Z
     ec2:	87 70       	andi	r24, 0x07	; 7
     ec4:	88 2f       	mov	r24, r24
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	fc 01       	movw	r30, r24
     ece:	e8 59       	subi	r30, 0x98	; 152
     ed0:	ff 4f       	sbci	r31, 0xFF	; 255
     ed2:	a0 81       	ld	r26, Z
     ed4:	b1 81       	ldd	r27, Z+1	; 0x01
     ed6:	ea 81       	ldd	r30, Y+2	; 0x02
     ed8:	fb 81       	ldd	r31, Y+3	; 0x03
     eda:	80 81       	ld	r24, Z
     edc:	87 70       	andi	r24, 0x07	; 7
     ede:	88 2f       	mov	r24, r24
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	fc 01       	movw	r30, r24
     ee8:	e8 59       	subi	r30, 0x98	; 152
     eea:	ff 4f       	sbci	r31, 0xFF	; 255
     eec:	01 90       	ld	r0, Z+
     eee:	f0 81       	ld	r31, Z
     ef0:	e0 2d       	mov	r30, r0
     ef2:	81 81       	ldd	r24, Z+1	; 0x01
     ef4:	80 61       	ori	r24, 0x10	; 16
     ef6:	11 96       	adiw	r26, 0x01	; 1
     ef8:	8c 93       	st	X, r24
     efa:	11 97       	sbiw	r26, 0x01	; 1
     efc:	ee c0       	rjmp	.+476    	; 0x10da <DIO_SetPinDirection+0x594>
            	}
            	else{/* Nothing */}
            break;
            case PIN5_INDEX:
            	if(obj->direction == GPIO_DIRECTION_OUTPUT)
     efe:	ea 81       	ldd	r30, Y+2	; 0x02
     f00:	fb 81       	ldd	r31, Y+3	; 0x03
     f02:	80 81       	ld	r24, Z
     f04:	80 74       	andi	r24, 0x40	; 64
     f06:	88 23       	and	r24, r24
     f08:	09 f1       	breq	.+66     	; 0xf4c <DIO_SetPinDirection+0x406>
            	{
            		CLEAR_BIT(Ports_index[obj->port]->DDRx, PIN5_INDEX);
     f0a:	ea 81       	ldd	r30, Y+2	; 0x02
     f0c:	fb 81       	ldd	r31, Y+3	; 0x03
     f0e:	80 81       	ld	r24, Z
     f10:	87 70       	andi	r24, 0x07	; 7
     f12:	88 2f       	mov	r24, r24
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	fc 01       	movw	r30, r24
     f1c:	e8 59       	subi	r30, 0x98	; 152
     f1e:	ff 4f       	sbci	r31, 0xFF	; 255
     f20:	a0 81       	ld	r26, Z
     f22:	b1 81       	ldd	r27, Z+1	; 0x01
     f24:	ea 81       	ldd	r30, Y+2	; 0x02
     f26:	fb 81       	ldd	r31, Y+3	; 0x03
     f28:	80 81       	ld	r24, Z
     f2a:	87 70       	andi	r24, 0x07	; 7
     f2c:	88 2f       	mov	r24, r24
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	fc 01       	movw	r30, r24
     f36:	e8 59       	subi	r30, 0x98	; 152
     f38:	ff 4f       	sbci	r31, 0xFF	; 255
     f3a:	01 90       	ld	r0, Z+
     f3c:	f0 81       	ld	r31, Z
     f3e:	e0 2d       	mov	r30, r0
     f40:	81 81       	ldd	r24, Z+1	; 0x01
     f42:	8f 7d       	andi	r24, 0xDF	; 223
     f44:	11 96       	adiw	r26, 0x01	; 1
     f46:	8c 93       	st	X, r24
     f48:	11 97       	sbiw	r26, 0x01	; 1
     f4a:	c7 c0       	rjmp	.+398    	; 0x10da <DIO_SetPinDirection+0x594>
            	}
            	else if(obj->direction == GPIO_DIRECTION_INPUT)
     f4c:	ea 81       	ldd	r30, Y+2	; 0x02
     f4e:	fb 81       	ldd	r31, Y+3	; 0x03
     f50:	80 81       	ld	r24, Z
     f52:	80 74       	andi	r24, 0x40	; 64
     f54:	88 23       	and	r24, r24
     f56:	09 f0       	breq	.+2      	; 0xf5a <DIO_SetPinDirection+0x414>
     f58:	c0 c0       	rjmp	.+384    	; 0x10da <DIO_SetPinDirection+0x594>
            	{
            		SET_BIT(Ports_index[obj->port]->DDRx, PIN5_INDEX);
     f5a:	ea 81       	ldd	r30, Y+2	; 0x02
     f5c:	fb 81       	ldd	r31, Y+3	; 0x03
     f5e:	80 81       	ld	r24, Z
     f60:	87 70       	andi	r24, 0x07	; 7
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	fc 01       	movw	r30, r24
     f6c:	e8 59       	subi	r30, 0x98	; 152
     f6e:	ff 4f       	sbci	r31, 0xFF	; 255
     f70:	a0 81       	ld	r26, Z
     f72:	b1 81       	ldd	r27, Z+1	; 0x01
     f74:	ea 81       	ldd	r30, Y+2	; 0x02
     f76:	fb 81       	ldd	r31, Y+3	; 0x03
     f78:	80 81       	ld	r24, Z
     f7a:	87 70       	andi	r24, 0x07	; 7
     f7c:	88 2f       	mov	r24, r24
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	fc 01       	movw	r30, r24
     f86:	e8 59       	subi	r30, 0x98	; 152
     f88:	ff 4f       	sbci	r31, 0xFF	; 255
     f8a:	01 90       	ld	r0, Z+
     f8c:	f0 81       	ld	r31, Z
     f8e:	e0 2d       	mov	r30, r0
     f90:	81 81       	ldd	r24, Z+1	; 0x01
     f92:	80 62       	ori	r24, 0x20	; 32
     f94:	11 96       	adiw	r26, 0x01	; 1
     f96:	8c 93       	st	X, r24
     f98:	11 97       	sbiw	r26, 0x01	; 1
     f9a:	9f c0       	rjmp	.+318    	; 0x10da <DIO_SetPinDirection+0x594>
            	}
            	else{/* Nothing */}
            break;
            case PIN6_INDEX:
            	if(obj->direction == GPIO_DIRECTION_OUTPUT)
     f9c:	ea 81       	ldd	r30, Y+2	; 0x02
     f9e:	fb 81       	ldd	r31, Y+3	; 0x03
     fa0:	80 81       	ld	r24, Z
     fa2:	80 74       	andi	r24, 0x40	; 64
     fa4:	88 23       	and	r24, r24
     fa6:	09 f1       	breq	.+66     	; 0xfea <DIO_SetPinDirection+0x4a4>
            	{
            		CLEAR_BIT(Ports_index[obj->port]->DDRx, PIN6_INDEX);
     fa8:	ea 81       	ldd	r30, Y+2	; 0x02
     faa:	fb 81       	ldd	r31, Y+3	; 0x03
     fac:	80 81       	ld	r24, Z
     fae:	87 70       	andi	r24, 0x07	; 7
     fb0:	88 2f       	mov	r24, r24
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	fc 01       	movw	r30, r24
     fba:	e8 59       	subi	r30, 0x98	; 152
     fbc:	ff 4f       	sbci	r31, 0xFF	; 255
     fbe:	a0 81       	ld	r26, Z
     fc0:	b1 81       	ldd	r27, Z+1	; 0x01
     fc2:	ea 81       	ldd	r30, Y+2	; 0x02
     fc4:	fb 81       	ldd	r31, Y+3	; 0x03
     fc6:	80 81       	ld	r24, Z
     fc8:	87 70       	andi	r24, 0x07	; 7
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	fc 01       	movw	r30, r24
     fd4:	e8 59       	subi	r30, 0x98	; 152
     fd6:	ff 4f       	sbci	r31, 0xFF	; 255
     fd8:	01 90       	ld	r0, Z+
     fda:	f0 81       	ld	r31, Z
     fdc:	e0 2d       	mov	r30, r0
     fde:	81 81       	ldd	r24, Z+1	; 0x01
     fe0:	8f 7b       	andi	r24, 0xBF	; 191
     fe2:	11 96       	adiw	r26, 0x01	; 1
     fe4:	8c 93       	st	X, r24
     fe6:	11 97       	sbiw	r26, 0x01	; 1
     fe8:	78 c0       	rjmp	.+240    	; 0x10da <DIO_SetPinDirection+0x594>
            	}
            	else if(obj->direction == GPIO_DIRECTION_INPUT)
     fea:	ea 81       	ldd	r30, Y+2	; 0x02
     fec:	fb 81       	ldd	r31, Y+3	; 0x03
     fee:	80 81       	ld	r24, Z
     ff0:	80 74       	andi	r24, 0x40	; 64
     ff2:	88 23       	and	r24, r24
     ff4:	09 f0       	breq	.+2      	; 0xff8 <DIO_SetPinDirection+0x4b2>
     ff6:	71 c0       	rjmp	.+226    	; 0x10da <DIO_SetPinDirection+0x594>
            	{
            		SET_BIT(Ports_index[obj->port]->DDRx, PIN6_INDEX);
     ff8:	ea 81       	ldd	r30, Y+2	; 0x02
     ffa:	fb 81       	ldd	r31, Y+3	; 0x03
     ffc:	80 81       	ld	r24, Z
     ffe:	87 70       	andi	r24, 0x07	; 7
    1000:	88 2f       	mov	r24, r24
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	fc 01       	movw	r30, r24
    100a:	e8 59       	subi	r30, 0x98	; 152
    100c:	ff 4f       	sbci	r31, 0xFF	; 255
    100e:	a0 81       	ld	r26, Z
    1010:	b1 81       	ldd	r27, Z+1	; 0x01
    1012:	ea 81       	ldd	r30, Y+2	; 0x02
    1014:	fb 81       	ldd	r31, Y+3	; 0x03
    1016:	80 81       	ld	r24, Z
    1018:	87 70       	andi	r24, 0x07	; 7
    101a:	88 2f       	mov	r24, r24
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	fc 01       	movw	r30, r24
    1024:	e8 59       	subi	r30, 0x98	; 152
    1026:	ff 4f       	sbci	r31, 0xFF	; 255
    1028:	01 90       	ld	r0, Z+
    102a:	f0 81       	ld	r31, Z
    102c:	e0 2d       	mov	r30, r0
    102e:	81 81       	ldd	r24, Z+1	; 0x01
    1030:	80 64       	ori	r24, 0x40	; 64
    1032:	11 96       	adiw	r26, 0x01	; 1
    1034:	8c 93       	st	X, r24
    1036:	11 97       	sbiw	r26, 0x01	; 1
    1038:	50 c0       	rjmp	.+160    	; 0x10da <DIO_SetPinDirection+0x594>
            	}
            	else{/* Nothing */}
            break;
            case PIN7_INDEX:
            	if(obj->direction == GPIO_DIRECTION_OUTPUT)
    103a:	ea 81       	ldd	r30, Y+2	; 0x02
    103c:	fb 81       	ldd	r31, Y+3	; 0x03
    103e:	80 81       	ld	r24, Z
    1040:	80 74       	andi	r24, 0x40	; 64
    1042:	88 23       	and	r24, r24
    1044:	09 f1       	breq	.+66     	; 0x1088 <DIO_SetPinDirection+0x542>
            	{
            		CLEAR_BIT(Ports_index[obj->port]->DDRx, PIN7_INDEX);
    1046:	ea 81       	ldd	r30, Y+2	; 0x02
    1048:	fb 81       	ldd	r31, Y+3	; 0x03
    104a:	80 81       	ld	r24, Z
    104c:	87 70       	andi	r24, 0x07	; 7
    104e:	88 2f       	mov	r24, r24
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	fc 01       	movw	r30, r24
    1058:	e8 59       	subi	r30, 0x98	; 152
    105a:	ff 4f       	sbci	r31, 0xFF	; 255
    105c:	a0 81       	ld	r26, Z
    105e:	b1 81       	ldd	r27, Z+1	; 0x01
    1060:	ea 81       	ldd	r30, Y+2	; 0x02
    1062:	fb 81       	ldd	r31, Y+3	; 0x03
    1064:	80 81       	ld	r24, Z
    1066:	87 70       	andi	r24, 0x07	; 7
    1068:	88 2f       	mov	r24, r24
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	fc 01       	movw	r30, r24
    1072:	e8 59       	subi	r30, 0x98	; 152
    1074:	ff 4f       	sbci	r31, 0xFF	; 255
    1076:	01 90       	ld	r0, Z+
    1078:	f0 81       	ld	r31, Z
    107a:	e0 2d       	mov	r30, r0
    107c:	81 81       	ldd	r24, Z+1	; 0x01
    107e:	8f 77       	andi	r24, 0x7F	; 127
    1080:	11 96       	adiw	r26, 0x01	; 1
    1082:	8c 93       	st	X, r24
    1084:	11 97       	sbiw	r26, 0x01	; 1
    1086:	29 c0       	rjmp	.+82     	; 0x10da <DIO_SetPinDirection+0x594>
            	}
            	else if(obj->direction == GPIO_DIRECTION_INPUT)
    1088:	ea 81       	ldd	r30, Y+2	; 0x02
    108a:	fb 81       	ldd	r31, Y+3	; 0x03
    108c:	80 81       	ld	r24, Z
    108e:	80 74       	andi	r24, 0x40	; 64
    1090:	88 23       	and	r24, r24
    1092:	19 f5       	brne	.+70     	; 0x10da <DIO_SetPinDirection+0x594>
            	{
            		SET_BIT(Ports_index[obj->port]->DDRx, PIN7_INDEX);
    1094:	ea 81       	ldd	r30, Y+2	; 0x02
    1096:	fb 81       	ldd	r31, Y+3	; 0x03
    1098:	80 81       	ld	r24, Z
    109a:	87 70       	andi	r24, 0x07	; 7
    109c:	88 2f       	mov	r24, r24
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	fc 01       	movw	r30, r24
    10a6:	e8 59       	subi	r30, 0x98	; 152
    10a8:	ff 4f       	sbci	r31, 0xFF	; 255
    10aa:	a0 81       	ld	r26, Z
    10ac:	b1 81       	ldd	r27, Z+1	; 0x01
    10ae:	ea 81       	ldd	r30, Y+2	; 0x02
    10b0:	fb 81       	ldd	r31, Y+3	; 0x03
    10b2:	80 81       	ld	r24, Z
    10b4:	87 70       	andi	r24, 0x07	; 7
    10b6:	88 2f       	mov	r24, r24
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	fc 01       	movw	r30, r24
    10c0:	e8 59       	subi	r30, 0x98	; 152
    10c2:	ff 4f       	sbci	r31, 0xFF	; 255
    10c4:	01 90       	ld	r0, Z+
    10c6:	f0 81       	ld	r31, Z
    10c8:	e0 2d       	mov	r30, r0
    10ca:	81 81       	ldd	r24, Z+1	; 0x01
    10cc:	80 68       	ori	r24, 0x80	; 128
    10ce:	11 96       	adiw	r26, 0x01	; 1
    10d0:	8c 93       	st	X, r24
    10d2:	11 97       	sbiw	r26, 0x01	; 1
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_SetPinDirection+0x594>
            	}
            	else{/* Nothing */}
            break;
            default:
            	ret_status = NULL_PTR;
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }
    return ret_status;
    10da:	89 81       	ldd	r24, Y+1	; 0x01
}
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	08 95       	ret

000010ec <DIO_SetPinValue>:
PROGRAM_STATUS_T DIO_SetPinValue(const GPIO_CFG_T *obj, Logic_t logic)
{
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	00 d0       	rcall	.+0      	; 0x10f2 <DIO_SetPinValue+0x6>
    10f2:	00 d0       	rcall	.+0      	; 0x10f4 <DIO_SetPinValue+0x8>
    10f4:	00 d0       	rcall	.+0      	; 0x10f6 <DIO_SetPinValue+0xa>
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	9b 83       	std	Y+3, r25	; 0x03
    10fc:	8a 83       	std	Y+2, r24	; 0x02
    10fe:	6c 83       	std	Y+4, r22	; 0x04
    PROGRAM_STATUS_T ret_status = SUCCESS;
    1100:	19 82       	std	Y+1, r1	; 0x01
    if(NULL == obj)
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	9b 81       	ldd	r25, Y+3	; 0x03
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	19 f4       	brne	.+6      	; 0x1110 <DIO_SetPinValue+0x24>
    {
        ret_status = NULL_PTR;
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	89 83       	std	Y+1, r24	; 0x01
    110e:	89 c2       	rjmp	.+1298   	; 0x1622 <DIO_SetPinValue+0x536>
    }
    else
    {
        switch (obj->pin) {
    1110:	ea 81       	ldd	r30, Y+2	; 0x02
    1112:	fb 81       	ldd	r31, Y+3	; 0x03
    1114:	80 81       	ld	r24, Z
    1116:	86 95       	lsr	r24
    1118:	86 95       	lsr	r24
    111a:	86 95       	lsr	r24
    111c:	87 70       	andi	r24, 0x07	; 7
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	3e 83       	std	Y+6, r19	; 0x06
    1124:	2d 83       	std	Y+5, r18	; 0x05
    1126:	8d 81       	ldd	r24, Y+5	; 0x05
    1128:	9e 81       	ldd	r25, Y+6	; 0x06
    112a:	83 30       	cpi	r24, 0x03	; 3
    112c:	91 05       	cpc	r25, r1
    112e:	09 f4       	brne	.+2      	; 0x1132 <DIO_SetPinValue+0x46>
    1130:	0a c1       	rjmp	.+532    	; 0x1346 <DIO_SetPinValue+0x25a>
    1132:	2d 81       	ldd	r18, Y+5	; 0x05
    1134:	3e 81       	ldd	r19, Y+6	; 0x06
    1136:	24 30       	cpi	r18, 0x04	; 4
    1138:	31 05       	cpc	r19, r1
    113a:	8c f4       	brge	.+34     	; 0x115e <DIO_SetPinValue+0x72>
    113c:	8d 81       	ldd	r24, Y+5	; 0x05
    113e:	9e 81       	ldd	r25, Y+6	; 0x06
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	91 05       	cpc	r25, r1
    1144:	09 f4       	brne	.+2      	; 0x1148 <DIO_SetPinValue+0x5c>
    1146:	6d c0       	rjmp	.+218    	; 0x1222 <DIO_SetPinValue+0x136>
    1148:	2d 81       	ldd	r18, Y+5	; 0x05
    114a:	3e 81       	ldd	r19, Y+6	; 0x06
    114c:	22 30       	cpi	r18, 0x02	; 2
    114e:	31 05       	cpc	r19, r1
    1150:	0c f0       	brlt	.+2      	; 0x1154 <DIO_SetPinValue+0x68>
    1152:	b0 c0       	rjmp	.+352    	; 0x12b4 <DIO_SetPinValue+0x1c8>
    1154:	8d 81       	ldd	r24, Y+5	; 0x05
    1156:	9e 81       	ldd	r25, Y+6	; 0x06
    1158:	00 97       	sbiw	r24, 0x00	; 0
    115a:	d1 f0       	breq	.+52     	; 0x1190 <DIO_SetPinValue+0xa4>
    115c:	60 c2       	rjmp	.+1216   	; 0x161e <DIO_SetPinValue+0x532>
    115e:	2d 81       	ldd	r18, Y+5	; 0x05
    1160:	3e 81       	ldd	r19, Y+6	; 0x06
    1162:	25 30       	cpi	r18, 0x05	; 5
    1164:	31 05       	cpc	r19, r1
    1166:	09 f4       	brne	.+2      	; 0x116a <DIO_SetPinValue+0x7e>
    1168:	80 c1       	rjmp	.+768    	; 0x146a <DIO_SetPinValue+0x37e>
    116a:	8d 81       	ldd	r24, Y+5	; 0x05
    116c:	9e 81       	ldd	r25, Y+6	; 0x06
    116e:	85 30       	cpi	r24, 0x05	; 5
    1170:	91 05       	cpc	r25, r1
    1172:	0c f4       	brge	.+2      	; 0x1176 <DIO_SetPinValue+0x8a>
    1174:	31 c1       	rjmp	.+610    	; 0x13d8 <DIO_SetPinValue+0x2ec>
    1176:	2d 81       	ldd	r18, Y+5	; 0x05
    1178:	3e 81       	ldd	r19, Y+6	; 0x06
    117a:	26 30       	cpi	r18, 0x06	; 6
    117c:	31 05       	cpc	r19, r1
    117e:	09 f4       	brne	.+2      	; 0x1182 <DIO_SetPinValue+0x96>
    1180:	bd c1       	rjmp	.+890    	; 0x14fc <DIO_SetPinValue+0x410>
    1182:	8d 81       	ldd	r24, Y+5	; 0x05
    1184:	9e 81       	ldd	r25, Y+6	; 0x06
    1186:	87 30       	cpi	r24, 0x07	; 7
    1188:	91 05       	cpc	r25, r1
    118a:	09 f4       	brne	.+2      	; 0x118e <DIO_SetPinValue+0xa2>
    118c:	00 c2       	rjmp	.+1024   	; 0x158e <DIO_SetPinValue+0x4a2>
    118e:	47 c2       	rjmp	.+1166   	; 0x161e <DIO_SetPinValue+0x532>
            case PIN0_INDEX:
            	if(logic == GPIO_HIGH)
    1190:	8c 81       	ldd	r24, Y+4	; 0x04
    1192:	81 30       	cpi	r24, 0x01	; 1
    1194:	09 f5       	brne	.+66     	; 0x11d8 <DIO_SetPinValue+0xec>
            	{
            		SET_BIT(Ports_index[obj->port]->PORTx, PIN0_INDEX);
    1196:	ea 81       	ldd	r30, Y+2	; 0x02
    1198:	fb 81       	ldd	r31, Y+3	; 0x03
    119a:	80 81       	ld	r24, Z
    119c:	87 70       	andi	r24, 0x07	; 7
    119e:	88 2f       	mov	r24, r24
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	fc 01       	movw	r30, r24
    11a8:	e8 59       	subi	r30, 0x98	; 152
    11aa:	ff 4f       	sbci	r31, 0xFF	; 255
    11ac:	a0 81       	ld	r26, Z
    11ae:	b1 81       	ldd	r27, Z+1	; 0x01
    11b0:	ea 81       	ldd	r30, Y+2	; 0x02
    11b2:	fb 81       	ldd	r31, Y+3	; 0x03
    11b4:	80 81       	ld	r24, Z
    11b6:	87 70       	andi	r24, 0x07	; 7
    11b8:	88 2f       	mov	r24, r24
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	fc 01       	movw	r30, r24
    11c2:	e8 59       	subi	r30, 0x98	; 152
    11c4:	ff 4f       	sbci	r31, 0xFF	; 255
    11c6:	01 90       	ld	r0, Z+
    11c8:	f0 81       	ld	r31, Z
    11ca:	e0 2d       	mov	r30, r0
    11cc:	82 81       	ldd	r24, Z+2	; 0x02
    11ce:	81 60       	ori	r24, 0x01	; 1
    11d0:	12 96       	adiw	r26, 0x02	; 2
    11d2:	8c 93       	st	X, r24
    11d4:	12 97       	sbiw	r26, 0x02	; 2
    11d6:	25 c2       	rjmp	.+1098   	; 0x1622 <DIO_SetPinValue+0x536>
            	}
            	else if(logic == GPIO_LOW)
    11d8:	8c 81       	ldd	r24, Y+4	; 0x04
    11da:	88 23       	and	r24, r24
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <DIO_SetPinValue+0xf4>
    11de:	21 c2       	rjmp	.+1090   	; 0x1622 <DIO_SetPinValue+0x536>
            	{
            		CLEAR_BIT(Ports_index[obj->port]->PORTx, PIN0_INDEX);
    11e0:	ea 81       	ldd	r30, Y+2	; 0x02
    11e2:	fb 81       	ldd	r31, Y+3	; 0x03
    11e4:	80 81       	ld	r24, Z
    11e6:	87 70       	andi	r24, 0x07	; 7
    11e8:	88 2f       	mov	r24, r24
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	fc 01       	movw	r30, r24
    11f2:	e8 59       	subi	r30, 0x98	; 152
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	a0 81       	ld	r26, Z
    11f8:	b1 81       	ldd	r27, Z+1	; 0x01
    11fa:	ea 81       	ldd	r30, Y+2	; 0x02
    11fc:	fb 81       	ldd	r31, Y+3	; 0x03
    11fe:	80 81       	ld	r24, Z
    1200:	87 70       	andi	r24, 0x07	; 7
    1202:	88 2f       	mov	r24, r24
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	fc 01       	movw	r30, r24
    120c:	e8 59       	subi	r30, 0x98	; 152
    120e:	ff 4f       	sbci	r31, 0xFF	; 255
    1210:	01 90       	ld	r0, Z+
    1212:	f0 81       	ld	r31, Z
    1214:	e0 2d       	mov	r30, r0
    1216:	82 81       	ldd	r24, Z+2	; 0x02
    1218:	8e 7f       	andi	r24, 0xFE	; 254
    121a:	12 96       	adiw	r26, 0x02	; 2
    121c:	8c 93       	st	X, r24
    121e:	12 97       	sbiw	r26, 0x02	; 2
    1220:	00 c2       	rjmp	.+1024   	; 0x1622 <DIO_SetPinValue+0x536>
            	}
            	else{/* Nothing */}

            break;
            case PIN1_INDEX:
            	if(logic == GPIO_HIGH)
    1222:	8c 81       	ldd	r24, Y+4	; 0x04
    1224:	81 30       	cpi	r24, 0x01	; 1
    1226:	09 f5       	brne	.+66     	; 0x126a <DIO_SetPinValue+0x17e>
            	{
            		SET_BIT(Ports_index[obj->port]->PORTx, PIN0_INDEX);
    1228:	ea 81       	ldd	r30, Y+2	; 0x02
    122a:	fb 81       	ldd	r31, Y+3	; 0x03
    122c:	80 81       	ld	r24, Z
    122e:	87 70       	andi	r24, 0x07	; 7
    1230:	88 2f       	mov	r24, r24
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	fc 01       	movw	r30, r24
    123a:	e8 59       	subi	r30, 0x98	; 152
    123c:	ff 4f       	sbci	r31, 0xFF	; 255
    123e:	a0 81       	ld	r26, Z
    1240:	b1 81       	ldd	r27, Z+1	; 0x01
    1242:	ea 81       	ldd	r30, Y+2	; 0x02
    1244:	fb 81       	ldd	r31, Y+3	; 0x03
    1246:	80 81       	ld	r24, Z
    1248:	87 70       	andi	r24, 0x07	; 7
    124a:	88 2f       	mov	r24, r24
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	fc 01       	movw	r30, r24
    1254:	e8 59       	subi	r30, 0x98	; 152
    1256:	ff 4f       	sbci	r31, 0xFF	; 255
    1258:	01 90       	ld	r0, Z+
    125a:	f0 81       	ld	r31, Z
    125c:	e0 2d       	mov	r30, r0
    125e:	82 81       	ldd	r24, Z+2	; 0x02
    1260:	81 60       	ori	r24, 0x01	; 1
    1262:	12 96       	adiw	r26, 0x02	; 2
    1264:	8c 93       	st	X, r24
    1266:	12 97       	sbiw	r26, 0x02	; 2
    1268:	dc c1       	rjmp	.+952    	; 0x1622 <DIO_SetPinValue+0x536>
            	}
            	else if(logic == GPIO_LOW)
    126a:	8c 81       	ldd	r24, Y+4	; 0x04
    126c:	88 23       	and	r24, r24
    126e:	09 f0       	breq	.+2      	; 0x1272 <DIO_SetPinValue+0x186>
    1270:	d8 c1       	rjmp	.+944    	; 0x1622 <DIO_SetPinValue+0x536>
            	{
            	    CLEAR_BIT(Ports_index[obj->port]->PORTx, PIN0_INDEX);
    1272:	ea 81       	ldd	r30, Y+2	; 0x02
    1274:	fb 81       	ldd	r31, Y+3	; 0x03
    1276:	80 81       	ld	r24, Z
    1278:	87 70       	andi	r24, 0x07	; 7
    127a:	88 2f       	mov	r24, r24
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	fc 01       	movw	r30, r24
    1284:	e8 59       	subi	r30, 0x98	; 152
    1286:	ff 4f       	sbci	r31, 0xFF	; 255
    1288:	a0 81       	ld	r26, Z
    128a:	b1 81       	ldd	r27, Z+1	; 0x01
    128c:	ea 81       	ldd	r30, Y+2	; 0x02
    128e:	fb 81       	ldd	r31, Y+3	; 0x03
    1290:	80 81       	ld	r24, Z
    1292:	87 70       	andi	r24, 0x07	; 7
    1294:	88 2f       	mov	r24, r24
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	fc 01       	movw	r30, r24
    129e:	e8 59       	subi	r30, 0x98	; 152
    12a0:	ff 4f       	sbci	r31, 0xFF	; 255
    12a2:	01 90       	ld	r0, Z+
    12a4:	f0 81       	ld	r31, Z
    12a6:	e0 2d       	mov	r30, r0
    12a8:	82 81       	ldd	r24, Z+2	; 0x02
    12aa:	8e 7f       	andi	r24, 0xFE	; 254
    12ac:	12 96       	adiw	r26, 0x02	; 2
    12ae:	8c 93       	st	X, r24
    12b0:	12 97       	sbiw	r26, 0x02	; 2
    12b2:	b7 c1       	rjmp	.+878    	; 0x1622 <DIO_SetPinValue+0x536>
            	}
            	else{/* Nothing */}
            break;
            case PIN2_INDEX:
            	if(logic == GPIO_HIGH)
    12b4:	8c 81       	ldd	r24, Y+4	; 0x04
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	09 f5       	brne	.+66     	; 0x12fc <DIO_SetPinValue+0x210>
            	{
            		SET_BIT(Ports_index[obj->port]->PORTx, PIN0_INDEX);
    12ba:	ea 81       	ldd	r30, Y+2	; 0x02
    12bc:	fb 81       	ldd	r31, Y+3	; 0x03
    12be:	80 81       	ld	r24, Z
    12c0:	87 70       	andi	r24, 0x07	; 7
    12c2:	88 2f       	mov	r24, r24
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	fc 01       	movw	r30, r24
    12cc:	e8 59       	subi	r30, 0x98	; 152
    12ce:	ff 4f       	sbci	r31, 0xFF	; 255
    12d0:	a0 81       	ld	r26, Z
    12d2:	b1 81       	ldd	r27, Z+1	; 0x01
    12d4:	ea 81       	ldd	r30, Y+2	; 0x02
    12d6:	fb 81       	ldd	r31, Y+3	; 0x03
    12d8:	80 81       	ld	r24, Z
    12da:	87 70       	andi	r24, 0x07	; 7
    12dc:	88 2f       	mov	r24, r24
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	fc 01       	movw	r30, r24
    12e6:	e8 59       	subi	r30, 0x98	; 152
    12e8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ea:	01 90       	ld	r0, Z+
    12ec:	f0 81       	ld	r31, Z
    12ee:	e0 2d       	mov	r30, r0
    12f0:	82 81       	ldd	r24, Z+2	; 0x02
    12f2:	81 60       	ori	r24, 0x01	; 1
    12f4:	12 96       	adiw	r26, 0x02	; 2
    12f6:	8c 93       	st	X, r24
    12f8:	12 97       	sbiw	r26, 0x02	; 2
    12fa:	93 c1       	rjmp	.+806    	; 0x1622 <DIO_SetPinValue+0x536>
            	}
            	else if(logic == GPIO_LOW)
    12fc:	8c 81       	ldd	r24, Y+4	; 0x04
    12fe:	88 23       	and	r24, r24
    1300:	09 f0       	breq	.+2      	; 0x1304 <DIO_SetPinValue+0x218>
    1302:	8f c1       	rjmp	.+798    	; 0x1622 <DIO_SetPinValue+0x536>
            	{
            		CLEAR_BIT(Ports_index[obj->port]->PORTx, PIN0_INDEX);
    1304:	ea 81       	ldd	r30, Y+2	; 0x02
    1306:	fb 81       	ldd	r31, Y+3	; 0x03
    1308:	80 81       	ld	r24, Z
    130a:	87 70       	andi	r24, 0x07	; 7
    130c:	88 2f       	mov	r24, r24
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	88 0f       	add	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	fc 01       	movw	r30, r24
    1316:	e8 59       	subi	r30, 0x98	; 152
    1318:	ff 4f       	sbci	r31, 0xFF	; 255
    131a:	a0 81       	ld	r26, Z
    131c:	b1 81       	ldd	r27, Z+1	; 0x01
    131e:	ea 81       	ldd	r30, Y+2	; 0x02
    1320:	fb 81       	ldd	r31, Y+3	; 0x03
    1322:	80 81       	ld	r24, Z
    1324:	87 70       	andi	r24, 0x07	; 7
    1326:	88 2f       	mov	r24, r24
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	fc 01       	movw	r30, r24
    1330:	e8 59       	subi	r30, 0x98	; 152
    1332:	ff 4f       	sbci	r31, 0xFF	; 255
    1334:	01 90       	ld	r0, Z+
    1336:	f0 81       	ld	r31, Z
    1338:	e0 2d       	mov	r30, r0
    133a:	82 81       	ldd	r24, Z+2	; 0x02
    133c:	8e 7f       	andi	r24, 0xFE	; 254
    133e:	12 96       	adiw	r26, 0x02	; 2
    1340:	8c 93       	st	X, r24
    1342:	12 97       	sbiw	r26, 0x02	; 2
    1344:	6e c1       	rjmp	.+732    	; 0x1622 <DIO_SetPinValue+0x536>
            	}
            	else{/* Nothing */}
            break;
            case PIN3_INDEX:
            	if(logic == GPIO_HIGH)
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	09 f5       	brne	.+66     	; 0x138e <DIO_SetPinValue+0x2a2>
            	{
            		SET_BIT(Ports_index[obj->port]->PORTx, PIN0_INDEX);
    134c:	ea 81       	ldd	r30, Y+2	; 0x02
    134e:	fb 81       	ldd	r31, Y+3	; 0x03
    1350:	80 81       	ld	r24, Z
    1352:	87 70       	andi	r24, 0x07	; 7
    1354:	88 2f       	mov	r24, r24
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	fc 01       	movw	r30, r24
    135e:	e8 59       	subi	r30, 0x98	; 152
    1360:	ff 4f       	sbci	r31, 0xFF	; 255
    1362:	a0 81       	ld	r26, Z
    1364:	b1 81       	ldd	r27, Z+1	; 0x01
    1366:	ea 81       	ldd	r30, Y+2	; 0x02
    1368:	fb 81       	ldd	r31, Y+3	; 0x03
    136a:	80 81       	ld	r24, Z
    136c:	87 70       	andi	r24, 0x07	; 7
    136e:	88 2f       	mov	r24, r24
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	fc 01       	movw	r30, r24
    1378:	e8 59       	subi	r30, 0x98	; 152
    137a:	ff 4f       	sbci	r31, 0xFF	; 255
    137c:	01 90       	ld	r0, Z+
    137e:	f0 81       	ld	r31, Z
    1380:	e0 2d       	mov	r30, r0
    1382:	82 81       	ldd	r24, Z+2	; 0x02
    1384:	81 60       	ori	r24, 0x01	; 1
    1386:	12 96       	adiw	r26, 0x02	; 2
    1388:	8c 93       	st	X, r24
    138a:	12 97       	sbiw	r26, 0x02	; 2
    138c:	4a c1       	rjmp	.+660    	; 0x1622 <DIO_SetPinValue+0x536>
            	}
            	else if(logic == GPIO_LOW)
    138e:	8c 81       	ldd	r24, Y+4	; 0x04
    1390:	88 23       	and	r24, r24
    1392:	09 f0       	breq	.+2      	; 0x1396 <DIO_SetPinValue+0x2aa>
    1394:	46 c1       	rjmp	.+652    	; 0x1622 <DIO_SetPinValue+0x536>
            	{
            		CLEAR_BIT(Ports_index[obj->port]->PORTx, PIN0_INDEX);
    1396:	ea 81       	ldd	r30, Y+2	; 0x02
    1398:	fb 81       	ldd	r31, Y+3	; 0x03
    139a:	80 81       	ld	r24, Z
    139c:	87 70       	andi	r24, 0x07	; 7
    139e:	88 2f       	mov	r24, r24
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	fc 01       	movw	r30, r24
    13a8:	e8 59       	subi	r30, 0x98	; 152
    13aa:	ff 4f       	sbci	r31, 0xFF	; 255
    13ac:	a0 81       	ld	r26, Z
    13ae:	b1 81       	ldd	r27, Z+1	; 0x01
    13b0:	ea 81       	ldd	r30, Y+2	; 0x02
    13b2:	fb 81       	ldd	r31, Y+3	; 0x03
    13b4:	80 81       	ld	r24, Z
    13b6:	87 70       	andi	r24, 0x07	; 7
    13b8:	88 2f       	mov	r24, r24
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	fc 01       	movw	r30, r24
    13c2:	e8 59       	subi	r30, 0x98	; 152
    13c4:	ff 4f       	sbci	r31, 0xFF	; 255
    13c6:	01 90       	ld	r0, Z+
    13c8:	f0 81       	ld	r31, Z
    13ca:	e0 2d       	mov	r30, r0
    13cc:	82 81       	ldd	r24, Z+2	; 0x02
    13ce:	8e 7f       	andi	r24, 0xFE	; 254
    13d0:	12 96       	adiw	r26, 0x02	; 2
    13d2:	8c 93       	st	X, r24
    13d4:	12 97       	sbiw	r26, 0x02	; 2
    13d6:	25 c1       	rjmp	.+586    	; 0x1622 <DIO_SetPinValue+0x536>
            	}
            	else{/* Nothing */}
            break;
            case PIN4_INDEX:
            	if(logic == GPIO_HIGH)
    13d8:	8c 81       	ldd	r24, Y+4	; 0x04
    13da:	81 30       	cpi	r24, 0x01	; 1
    13dc:	09 f5       	brne	.+66     	; 0x1420 <DIO_SetPinValue+0x334>
            	{
            		SET_BIT(Ports_index[obj->port]->PORTx, PIN0_INDEX);
    13de:	ea 81       	ldd	r30, Y+2	; 0x02
    13e0:	fb 81       	ldd	r31, Y+3	; 0x03
    13e2:	80 81       	ld	r24, Z
    13e4:	87 70       	andi	r24, 0x07	; 7
    13e6:	88 2f       	mov	r24, r24
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	fc 01       	movw	r30, r24
    13f0:	e8 59       	subi	r30, 0x98	; 152
    13f2:	ff 4f       	sbci	r31, 0xFF	; 255
    13f4:	a0 81       	ld	r26, Z
    13f6:	b1 81       	ldd	r27, Z+1	; 0x01
    13f8:	ea 81       	ldd	r30, Y+2	; 0x02
    13fa:	fb 81       	ldd	r31, Y+3	; 0x03
    13fc:	80 81       	ld	r24, Z
    13fe:	87 70       	andi	r24, 0x07	; 7
    1400:	88 2f       	mov	r24, r24
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	fc 01       	movw	r30, r24
    140a:	e8 59       	subi	r30, 0x98	; 152
    140c:	ff 4f       	sbci	r31, 0xFF	; 255
    140e:	01 90       	ld	r0, Z+
    1410:	f0 81       	ld	r31, Z
    1412:	e0 2d       	mov	r30, r0
    1414:	82 81       	ldd	r24, Z+2	; 0x02
    1416:	81 60       	ori	r24, 0x01	; 1
    1418:	12 96       	adiw	r26, 0x02	; 2
    141a:	8c 93       	st	X, r24
    141c:	12 97       	sbiw	r26, 0x02	; 2
    141e:	01 c1       	rjmp	.+514    	; 0x1622 <DIO_SetPinValue+0x536>
            	}
            	else if(logic == GPIO_LOW)
    1420:	8c 81       	ldd	r24, Y+4	; 0x04
    1422:	88 23       	and	r24, r24
    1424:	09 f0       	breq	.+2      	; 0x1428 <DIO_SetPinValue+0x33c>
    1426:	fd c0       	rjmp	.+506    	; 0x1622 <DIO_SetPinValue+0x536>
            	{
            		CLEAR_BIT(Ports_index[obj->port]->PORTx, PIN0_INDEX);
    1428:	ea 81       	ldd	r30, Y+2	; 0x02
    142a:	fb 81       	ldd	r31, Y+3	; 0x03
    142c:	80 81       	ld	r24, Z
    142e:	87 70       	andi	r24, 0x07	; 7
    1430:	88 2f       	mov	r24, r24
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	fc 01       	movw	r30, r24
    143a:	e8 59       	subi	r30, 0x98	; 152
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	a0 81       	ld	r26, Z
    1440:	b1 81       	ldd	r27, Z+1	; 0x01
    1442:	ea 81       	ldd	r30, Y+2	; 0x02
    1444:	fb 81       	ldd	r31, Y+3	; 0x03
    1446:	80 81       	ld	r24, Z
    1448:	87 70       	andi	r24, 0x07	; 7
    144a:	88 2f       	mov	r24, r24
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	fc 01       	movw	r30, r24
    1454:	e8 59       	subi	r30, 0x98	; 152
    1456:	ff 4f       	sbci	r31, 0xFF	; 255
    1458:	01 90       	ld	r0, Z+
    145a:	f0 81       	ld	r31, Z
    145c:	e0 2d       	mov	r30, r0
    145e:	82 81       	ldd	r24, Z+2	; 0x02
    1460:	8e 7f       	andi	r24, 0xFE	; 254
    1462:	12 96       	adiw	r26, 0x02	; 2
    1464:	8c 93       	st	X, r24
    1466:	12 97       	sbiw	r26, 0x02	; 2
    1468:	dc c0       	rjmp	.+440    	; 0x1622 <DIO_SetPinValue+0x536>
            	}
            	else{/* Nothing */}
            break;
            case PIN5_INDEX:
            	if(logic == GPIO_HIGH)
    146a:	8c 81       	ldd	r24, Y+4	; 0x04
    146c:	81 30       	cpi	r24, 0x01	; 1
    146e:	09 f5       	brne	.+66     	; 0x14b2 <DIO_SetPinValue+0x3c6>
            	{
            		SET_BIT(Ports_index[obj->port]->PORTx, PIN0_INDEX);
    1470:	ea 81       	ldd	r30, Y+2	; 0x02
    1472:	fb 81       	ldd	r31, Y+3	; 0x03
    1474:	80 81       	ld	r24, Z
    1476:	87 70       	andi	r24, 0x07	; 7
    1478:	88 2f       	mov	r24, r24
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	fc 01       	movw	r30, r24
    1482:	e8 59       	subi	r30, 0x98	; 152
    1484:	ff 4f       	sbci	r31, 0xFF	; 255
    1486:	a0 81       	ld	r26, Z
    1488:	b1 81       	ldd	r27, Z+1	; 0x01
    148a:	ea 81       	ldd	r30, Y+2	; 0x02
    148c:	fb 81       	ldd	r31, Y+3	; 0x03
    148e:	80 81       	ld	r24, Z
    1490:	87 70       	andi	r24, 0x07	; 7
    1492:	88 2f       	mov	r24, r24
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	fc 01       	movw	r30, r24
    149c:	e8 59       	subi	r30, 0x98	; 152
    149e:	ff 4f       	sbci	r31, 0xFF	; 255
    14a0:	01 90       	ld	r0, Z+
    14a2:	f0 81       	ld	r31, Z
    14a4:	e0 2d       	mov	r30, r0
    14a6:	82 81       	ldd	r24, Z+2	; 0x02
    14a8:	81 60       	ori	r24, 0x01	; 1
    14aa:	12 96       	adiw	r26, 0x02	; 2
    14ac:	8c 93       	st	X, r24
    14ae:	12 97       	sbiw	r26, 0x02	; 2
    14b0:	b8 c0       	rjmp	.+368    	; 0x1622 <DIO_SetPinValue+0x536>
            	}
            	else if(logic == GPIO_LOW)
    14b2:	8c 81       	ldd	r24, Y+4	; 0x04
    14b4:	88 23       	and	r24, r24
    14b6:	09 f0       	breq	.+2      	; 0x14ba <DIO_SetPinValue+0x3ce>
    14b8:	b4 c0       	rjmp	.+360    	; 0x1622 <DIO_SetPinValue+0x536>
            	{
            		CLEAR_BIT(Ports_index[obj->port]->PORTx, PIN0_INDEX);
    14ba:	ea 81       	ldd	r30, Y+2	; 0x02
    14bc:	fb 81       	ldd	r31, Y+3	; 0x03
    14be:	80 81       	ld	r24, Z
    14c0:	87 70       	andi	r24, 0x07	; 7
    14c2:	88 2f       	mov	r24, r24
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	fc 01       	movw	r30, r24
    14cc:	e8 59       	subi	r30, 0x98	; 152
    14ce:	ff 4f       	sbci	r31, 0xFF	; 255
    14d0:	a0 81       	ld	r26, Z
    14d2:	b1 81       	ldd	r27, Z+1	; 0x01
    14d4:	ea 81       	ldd	r30, Y+2	; 0x02
    14d6:	fb 81       	ldd	r31, Y+3	; 0x03
    14d8:	80 81       	ld	r24, Z
    14da:	87 70       	andi	r24, 0x07	; 7
    14dc:	88 2f       	mov	r24, r24
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	fc 01       	movw	r30, r24
    14e6:	e8 59       	subi	r30, 0x98	; 152
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	01 90       	ld	r0, Z+
    14ec:	f0 81       	ld	r31, Z
    14ee:	e0 2d       	mov	r30, r0
    14f0:	82 81       	ldd	r24, Z+2	; 0x02
    14f2:	8e 7f       	andi	r24, 0xFE	; 254
    14f4:	12 96       	adiw	r26, 0x02	; 2
    14f6:	8c 93       	st	X, r24
    14f8:	12 97       	sbiw	r26, 0x02	; 2
    14fa:	93 c0       	rjmp	.+294    	; 0x1622 <DIO_SetPinValue+0x536>
            	}
            	else{/* Nothing */}
            break;
            case PIN6_INDEX:
            	if(logic == GPIO_HIGH)
    14fc:	8c 81       	ldd	r24, Y+4	; 0x04
    14fe:	81 30       	cpi	r24, 0x01	; 1
    1500:	09 f5       	brne	.+66     	; 0x1544 <DIO_SetPinValue+0x458>
            	{
            		SET_BIT(Ports_index[obj->port]->PORTx, PIN0_INDEX);
    1502:	ea 81       	ldd	r30, Y+2	; 0x02
    1504:	fb 81       	ldd	r31, Y+3	; 0x03
    1506:	80 81       	ld	r24, Z
    1508:	87 70       	andi	r24, 0x07	; 7
    150a:	88 2f       	mov	r24, r24
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	fc 01       	movw	r30, r24
    1514:	e8 59       	subi	r30, 0x98	; 152
    1516:	ff 4f       	sbci	r31, 0xFF	; 255
    1518:	a0 81       	ld	r26, Z
    151a:	b1 81       	ldd	r27, Z+1	; 0x01
    151c:	ea 81       	ldd	r30, Y+2	; 0x02
    151e:	fb 81       	ldd	r31, Y+3	; 0x03
    1520:	80 81       	ld	r24, Z
    1522:	87 70       	andi	r24, 0x07	; 7
    1524:	88 2f       	mov	r24, r24
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	fc 01       	movw	r30, r24
    152e:	e8 59       	subi	r30, 0x98	; 152
    1530:	ff 4f       	sbci	r31, 0xFF	; 255
    1532:	01 90       	ld	r0, Z+
    1534:	f0 81       	ld	r31, Z
    1536:	e0 2d       	mov	r30, r0
    1538:	82 81       	ldd	r24, Z+2	; 0x02
    153a:	81 60       	ori	r24, 0x01	; 1
    153c:	12 96       	adiw	r26, 0x02	; 2
    153e:	8c 93       	st	X, r24
    1540:	12 97       	sbiw	r26, 0x02	; 2
    1542:	6f c0       	rjmp	.+222    	; 0x1622 <DIO_SetPinValue+0x536>
            	}
            	else if(logic == GPIO_LOW)
    1544:	8c 81       	ldd	r24, Y+4	; 0x04
    1546:	88 23       	and	r24, r24
    1548:	09 f0       	breq	.+2      	; 0x154c <DIO_SetPinValue+0x460>
    154a:	6b c0       	rjmp	.+214    	; 0x1622 <DIO_SetPinValue+0x536>
            	{
            		CLEAR_BIT(Ports_index[obj->port]->PORTx, PIN0_INDEX);
    154c:	ea 81       	ldd	r30, Y+2	; 0x02
    154e:	fb 81       	ldd	r31, Y+3	; 0x03
    1550:	80 81       	ld	r24, Z
    1552:	87 70       	andi	r24, 0x07	; 7
    1554:	88 2f       	mov	r24, r24
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	fc 01       	movw	r30, r24
    155e:	e8 59       	subi	r30, 0x98	; 152
    1560:	ff 4f       	sbci	r31, 0xFF	; 255
    1562:	a0 81       	ld	r26, Z
    1564:	b1 81       	ldd	r27, Z+1	; 0x01
    1566:	ea 81       	ldd	r30, Y+2	; 0x02
    1568:	fb 81       	ldd	r31, Y+3	; 0x03
    156a:	80 81       	ld	r24, Z
    156c:	87 70       	andi	r24, 0x07	; 7
    156e:	88 2f       	mov	r24, r24
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	fc 01       	movw	r30, r24
    1578:	e8 59       	subi	r30, 0x98	; 152
    157a:	ff 4f       	sbci	r31, 0xFF	; 255
    157c:	01 90       	ld	r0, Z+
    157e:	f0 81       	ld	r31, Z
    1580:	e0 2d       	mov	r30, r0
    1582:	82 81       	ldd	r24, Z+2	; 0x02
    1584:	8e 7f       	andi	r24, 0xFE	; 254
    1586:	12 96       	adiw	r26, 0x02	; 2
    1588:	8c 93       	st	X, r24
    158a:	12 97       	sbiw	r26, 0x02	; 2
    158c:	4a c0       	rjmp	.+148    	; 0x1622 <DIO_SetPinValue+0x536>
            	}
            	else{/* Nothing */}
            break;
            case PIN7_INDEX:
            	if(logic == GPIO_HIGH)
    158e:	8c 81       	ldd	r24, Y+4	; 0x04
    1590:	81 30       	cpi	r24, 0x01	; 1
    1592:	09 f5       	brne	.+66     	; 0x15d6 <DIO_SetPinValue+0x4ea>
            	{
            		SET_BIT(Ports_index[obj->port]->PORTx, PIN0_INDEX);
    1594:	ea 81       	ldd	r30, Y+2	; 0x02
    1596:	fb 81       	ldd	r31, Y+3	; 0x03
    1598:	80 81       	ld	r24, Z
    159a:	87 70       	andi	r24, 0x07	; 7
    159c:	88 2f       	mov	r24, r24
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	fc 01       	movw	r30, r24
    15a6:	e8 59       	subi	r30, 0x98	; 152
    15a8:	ff 4f       	sbci	r31, 0xFF	; 255
    15aa:	a0 81       	ld	r26, Z
    15ac:	b1 81       	ldd	r27, Z+1	; 0x01
    15ae:	ea 81       	ldd	r30, Y+2	; 0x02
    15b0:	fb 81       	ldd	r31, Y+3	; 0x03
    15b2:	80 81       	ld	r24, Z
    15b4:	87 70       	andi	r24, 0x07	; 7
    15b6:	88 2f       	mov	r24, r24
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	fc 01       	movw	r30, r24
    15c0:	e8 59       	subi	r30, 0x98	; 152
    15c2:	ff 4f       	sbci	r31, 0xFF	; 255
    15c4:	01 90       	ld	r0, Z+
    15c6:	f0 81       	ld	r31, Z
    15c8:	e0 2d       	mov	r30, r0
    15ca:	82 81       	ldd	r24, Z+2	; 0x02
    15cc:	81 60       	ori	r24, 0x01	; 1
    15ce:	12 96       	adiw	r26, 0x02	; 2
    15d0:	8c 93       	st	X, r24
    15d2:	12 97       	sbiw	r26, 0x02	; 2
    15d4:	26 c0       	rjmp	.+76     	; 0x1622 <DIO_SetPinValue+0x536>
            	}
            	else if(logic == GPIO_LOW)
    15d6:	8c 81       	ldd	r24, Y+4	; 0x04
    15d8:	88 23       	and	r24, r24
    15da:	19 f5       	brne	.+70     	; 0x1622 <DIO_SetPinValue+0x536>
            	{
            		CLEAR_BIT(Ports_index[obj->port]->PORTx, PIN0_INDEX);
    15dc:	ea 81       	ldd	r30, Y+2	; 0x02
    15de:	fb 81       	ldd	r31, Y+3	; 0x03
    15e0:	80 81       	ld	r24, Z
    15e2:	87 70       	andi	r24, 0x07	; 7
    15e4:	88 2f       	mov	r24, r24
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	fc 01       	movw	r30, r24
    15ee:	e8 59       	subi	r30, 0x98	; 152
    15f0:	ff 4f       	sbci	r31, 0xFF	; 255
    15f2:	a0 81       	ld	r26, Z
    15f4:	b1 81       	ldd	r27, Z+1	; 0x01
    15f6:	ea 81       	ldd	r30, Y+2	; 0x02
    15f8:	fb 81       	ldd	r31, Y+3	; 0x03
    15fa:	80 81       	ld	r24, Z
    15fc:	87 70       	andi	r24, 0x07	; 7
    15fe:	88 2f       	mov	r24, r24
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	fc 01       	movw	r30, r24
    1608:	e8 59       	subi	r30, 0x98	; 152
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	01 90       	ld	r0, Z+
    160e:	f0 81       	ld	r31, Z
    1610:	e0 2d       	mov	r30, r0
    1612:	82 81       	ldd	r24, Z+2	; 0x02
    1614:	8e 7f       	andi	r24, 0xFE	; 254
    1616:	12 96       	adiw	r26, 0x02	; 2
    1618:	8c 93       	st	X, r24
    161a:	12 97       	sbiw	r26, 0x02	; 2
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <DIO_SetPinValue+0x536>
            	}
            	else{/* Nothing */}
            break;
            default:
            	ret_status = NULL_PTR;
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	89 83       	std	Y+1, r24	; 0x01
            break;
        }
    }
    return ret_status;
    1622:	89 81       	ldd	r24, Y+1	; 0x01
}
    1624:	26 96       	adiw	r28, 0x06	; 6
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <DIO_GetPinValue>:
PROGRAM_STATUS_T DIO_GetPinValue(const GPIO_CFG_T *obj, u8 *pin_value)
{
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	27 97       	sbiw	r28, 0x07	; 7
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	9b 83       	std	Y+3, r25	; 0x03
    164c:	8a 83       	std	Y+2, r24	; 0x02
    164e:	7d 83       	std	Y+5, r23	; 0x05
    1650:	6c 83       	std	Y+4, r22	; 0x04
    PROGRAM_STATUS_T ret_status = SUCCESS;
    1652:	19 82       	std	Y+1, r1	; 0x01
    if((NULL == obj) || (NULL == pin_value))
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	9b 81       	ldd	r25, Y+3	; 0x03
    1658:	00 97       	sbiw	r24, 0x00	; 0
    165a:	21 f0       	breq	.+8      	; 0x1664 <DIO_GetPinValue+0x2e>
    165c:	8c 81       	ldd	r24, Y+4	; 0x04
    165e:	9d 81       	ldd	r25, Y+5	; 0x05
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	19 f4       	brne	.+6      	; 0x166a <DIO_GetPinValue+0x34>
    {
        ret_status = NULL_PTR;
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	89 83       	std	Y+1, r24	; 0x01
    1668:	ef c0       	rjmp	.+478    	; 0x1848 <DIO_GetPinValue+0x212>
    }
    else
    {
        switch ((u8)obj->pin) {
    166a:	ea 81       	ldd	r30, Y+2	; 0x02
    166c:	fb 81       	ldd	r31, Y+3	; 0x03
    166e:	80 81       	ld	r24, Z
    1670:	86 95       	lsr	r24
    1672:	86 95       	lsr	r24
    1674:	86 95       	lsr	r24
    1676:	87 70       	andi	r24, 0x07	; 7
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	3f 83       	std	Y+7, r19	; 0x07
    167e:	2e 83       	std	Y+6, r18	; 0x06
    1680:	8e 81       	ldd	r24, Y+6	; 0x06
    1682:	9f 81       	ldd	r25, Y+7	; 0x07
    1684:	83 30       	cpi	r24, 0x03	; 3
    1686:	91 05       	cpc	r25, r1
    1688:	09 f4       	brne	.+2      	; 0x168c <DIO_GetPinValue+0x56>
    168a:	6d c0       	rjmp	.+218    	; 0x1766 <DIO_GetPinValue+0x130>
    168c:	2e 81       	ldd	r18, Y+6	; 0x06
    168e:	3f 81       	ldd	r19, Y+7	; 0x07
    1690:	24 30       	cpi	r18, 0x04	; 4
    1692:	31 05       	cpc	r19, r1
    1694:	84 f4       	brge	.+32     	; 0x16b6 <DIO_GetPinValue+0x80>
    1696:	8e 81       	ldd	r24, Y+6	; 0x06
    1698:	9f 81       	ldd	r25, Y+7	; 0x07
    169a:	81 30       	cpi	r24, 0x01	; 1
    169c:	91 05       	cpc	r25, r1
    169e:	c1 f1       	breq	.+112    	; 0x1710 <DIO_GetPinValue+0xda>
    16a0:	2e 81       	ldd	r18, Y+6	; 0x06
    16a2:	3f 81       	ldd	r19, Y+7	; 0x07
    16a4:	22 30       	cpi	r18, 0x02	; 2
    16a6:	31 05       	cpc	r19, r1
    16a8:	0c f0       	brlt	.+2      	; 0x16ac <DIO_GetPinValue+0x76>
    16aa:	47 c0       	rjmp	.+142    	; 0x173a <DIO_GetPinValue+0x104>
    16ac:	8e 81       	ldd	r24, Y+6	; 0x06
    16ae:	9f 81       	ldd	r25, Y+7	; 0x07
    16b0:	00 97       	sbiw	r24, 0x00	; 0
    16b2:	d1 f0       	breq	.+52     	; 0x16e8 <DIO_GetPinValue+0xb2>
    16b4:	c9 c0       	rjmp	.+402    	; 0x1848 <DIO_GetPinValue+0x212>
    16b6:	2e 81       	ldd	r18, Y+6	; 0x06
    16b8:	3f 81       	ldd	r19, Y+7	; 0x07
    16ba:	25 30       	cpi	r18, 0x05	; 5
    16bc:	31 05       	cpc	r19, r1
    16be:	09 f4       	brne	.+2      	; 0x16c2 <DIO_GetPinValue+0x8c>
    16c0:	7f c0       	rjmp	.+254    	; 0x17c0 <DIO_GetPinValue+0x18a>
    16c2:	8e 81       	ldd	r24, Y+6	; 0x06
    16c4:	9f 81       	ldd	r25, Y+7	; 0x07
    16c6:	85 30       	cpi	r24, 0x05	; 5
    16c8:	91 05       	cpc	r25, r1
    16ca:	0c f4       	brge	.+2      	; 0x16ce <DIO_GetPinValue+0x98>
    16cc:	63 c0       	rjmp	.+198    	; 0x1794 <DIO_GetPinValue+0x15e>
    16ce:	2e 81       	ldd	r18, Y+6	; 0x06
    16d0:	3f 81       	ldd	r19, Y+7	; 0x07
    16d2:	26 30       	cpi	r18, 0x06	; 6
    16d4:	31 05       	cpc	r19, r1
    16d6:	09 f4       	brne	.+2      	; 0x16da <DIO_GetPinValue+0xa4>
    16d8:	8a c0       	rjmp	.+276    	; 0x17ee <DIO_GetPinValue+0x1b8>
    16da:	8e 81       	ldd	r24, Y+6	; 0x06
    16dc:	9f 81       	ldd	r25, Y+7	; 0x07
    16de:	87 30       	cpi	r24, 0x07	; 7
    16e0:	91 05       	cpc	r25, r1
    16e2:	09 f4       	brne	.+2      	; 0x16e6 <DIO_GetPinValue+0xb0>
    16e4:	9c c0       	rjmp	.+312    	; 0x181e <DIO_GetPinValue+0x1e8>
    16e6:	b0 c0       	rjmp	.+352    	; 0x1848 <DIO_GetPinValue+0x212>
            case PIN0_INDEX:
                *pin_value = READ_BIT(Ports_index[obj->port]->PINx, PIN0_INDEX);
    16e8:	ea 81       	ldd	r30, Y+2	; 0x02
    16ea:	fb 81       	ldd	r31, Y+3	; 0x03
    16ec:	80 81       	ld	r24, Z
    16ee:	87 70       	andi	r24, 0x07	; 7
    16f0:	88 2f       	mov	r24, r24
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	fc 01       	movw	r30, r24
    16fa:	e8 59       	subi	r30, 0x98	; 152
    16fc:	ff 4f       	sbci	r31, 0xFF	; 255
    16fe:	01 90       	ld	r0, Z+
    1700:	f0 81       	ld	r31, Z
    1702:	e0 2d       	mov	r30, r0
    1704:	80 81       	ld	r24, Z
    1706:	81 70       	andi	r24, 0x01	; 1
    1708:	ec 81       	ldd	r30, Y+4	; 0x04
    170a:	fd 81       	ldd	r31, Y+5	; 0x05
    170c:	80 83       	st	Z, r24
    170e:	9c c0       	rjmp	.+312    	; 0x1848 <DIO_GetPinValue+0x212>
            break;
            case PIN1_INDEX:
            	*pin_value = READ_BIT(Ports_index[obj->port]->PINx, PIN1_INDEX);
    1710:	ea 81       	ldd	r30, Y+2	; 0x02
    1712:	fb 81       	ldd	r31, Y+3	; 0x03
    1714:	80 81       	ld	r24, Z
    1716:	87 70       	andi	r24, 0x07	; 7
    1718:	88 2f       	mov	r24, r24
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	fc 01       	movw	r30, r24
    1722:	e8 59       	subi	r30, 0x98	; 152
    1724:	ff 4f       	sbci	r31, 0xFF	; 255
    1726:	01 90       	ld	r0, Z+
    1728:	f0 81       	ld	r31, Z
    172a:	e0 2d       	mov	r30, r0
    172c:	80 81       	ld	r24, Z
    172e:	86 95       	lsr	r24
    1730:	81 70       	andi	r24, 0x01	; 1
    1732:	ec 81       	ldd	r30, Y+4	; 0x04
    1734:	fd 81       	ldd	r31, Y+5	; 0x05
    1736:	80 83       	st	Z, r24
    1738:	87 c0       	rjmp	.+270    	; 0x1848 <DIO_GetPinValue+0x212>
            break;
            case PIN2_INDEX:
            	*pin_value = READ_BIT(Ports_index[obj->port]->PINx, PIN2_INDEX);
    173a:	ea 81       	ldd	r30, Y+2	; 0x02
    173c:	fb 81       	ldd	r31, Y+3	; 0x03
    173e:	80 81       	ld	r24, Z
    1740:	87 70       	andi	r24, 0x07	; 7
    1742:	88 2f       	mov	r24, r24
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	fc 01       	movw	r30, r24
    174c:	e8 59       	subi	r30, 0x98	; 152
    174e:	ff 4f       	sbci	r31, 0xFF	; 255
    1750:	01 90       	ld	r0, Z+
    1752:	f0 81       	ld	r31, Z
    1754:	e0 2d       	mov	r30, r0
    1756:	80 81       	ld	r24, Z
    1758:	86 95       	lsr	r24
    175a:	86 95       	lsr	r24
    175c:	81 70       	andi	r24, 0x01	; 1
    175e:	ec 81       	ldd	r30, Y+4	; 0x04
    1760:	fd 81       	ldd	r31, Y+5	; 0x05
    1762:	80 83       	st	Z, r24
    1764:	71 c0       	rjmp	.+226    	; 0x1848 <DIO_GetPinValue+0x212>
            break;
            case PIN3_INDEX:
            	*pin_value = READ_BIT(Ports_index[obj->port]->PINx, PIN3_INDEX);
    1766:	ea 81       	ldd	r30, Y+2	; 0x02
    1768:	fb 81       	ldd	r31, Y+3	; 0x03
    176a:	80 81       	ld	r24, Z
    176c:	87 70       	andi	r24, 0x07	; 7
    176e:	88 2f       	mov	r24, r24
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	fc 01       	movw	r30, r24
    1778:	e8 59       	subi	r30, 0x98	; 152
    177a:	ff 4f       	sbci	r31, 0xFF	; 255
    177c:	01 90       	ld	r0, Z+
    177e:	f0 81       	ld	r31, Z
    1780:	e0 2d       	mov	r30, r0
    1782:	80 81       	ld	r24, Z
    1784:	86 95       	lsr	r24
    1786:	86 95       	lsr	r24
    1788:	86 95       	lsr	r24
    178a:	81 70       	andi	r24, 0x01	; 1
    178c:	ec 81       	ldd	r30, Y+4	; 0x04
    178e:	fd 81       	ldd	r31, Y+5	; 0x05
    1790:	80 83       	st	Z, r24
    1792:	5a c0       	rjmp	.+180    	; 0x1848 <DIO_GetPinValue+0x212>
            break;
            case PIN4_INDEX:
            	*pin_value = READ_BIT(Ports_index[obj->port]->PINx, PIN4_INDEX);
    1794:	ea 81       	ldd	r30, Y+2	; 0x02
    1796:	fb 81       	ldd	r31, Y+3	; 0x03
    1798:	80 81       	ld	r24, Z
    179a:	87 70       	andi	r24, 0x07	; 7
    179c:	88 2f       	mov	r24, r24
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	88 0f       	add	r24, r24
    17a2:	99 1f       	adc	r25, r25
    17a4:	fc 01       	movw	r30, r24
    17a6:	e8 59       	subi	r30, 0x98	; 152
    17a8:	ff 4f       	sbci	r31, 0xFF	; 255
    17aa:	01 90       	ld	r0, Z+
    17ac:	f0 81       	ld	r31, Z
    17ae:	e0 2d       	mov	r30, r0
    17b0:	80 81       	ld	r24, Z
    17b2:	82 95       	swap	r24
    17b4:	8f 70       	andi	r24, 0x0F	; 15
    17b6:	81 70       	andi	r24, 0x01	; 1
    17b8:	ec 81       	ldd	r30, Y+4	; 0x04
    17ba:	fd 81       	ldd	r31, Y+5	; 0x05
    17bc:	80 83       	st	Z, r24
    17be:	44 c0       	rjmp	.+136    	; 0x1848 <DIO_GetPinValue+0x212>
            break;
            case PIN5_INDEX:
            	*pin_value = READ_BIT(Ports_index[obj->port]->PINx, PIN5_INDEX);
    17c0:	ea 81       	ldd	r30, Y+2	; 0x02
    17c2:	fb 81       	ldd	r31, Y+3	; 0x03
    17c4:	80 81       	ld	r24, Z
    17c6:	87 70       	andi	r24, 0x07	; 7
    17c8:	88 2f       	mov	r24, r24
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	fc 01       	movw	r30, r24
    17d2:	e8 59       	subi	r30, 0x98	; 152
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	01 90       	ld	r0, Z+
    17d8:	f0 81       	ld	r31, Z
    17da:	e0 2d       	mov	r30, r0
    17dc:	80 81       	ld	r24, Z
    17de:	82 95       	swap	r24
    17e0:	86 95       	lsr	r24
    17e2:	87 70       	andi	r24, 0x07	; 7
    17e4:	81 70       	andi	r24, 0x01	; 1
    17e6:	ec 81       	ldd	r30, Y+4	; 0x04
    17e8:	fd 81       	ldd	r31, Y+5	; 0x05
    17ea:	80 83       	st	Z, r24
    17ec:	2d c0       	rjmp	.+90     	; 0x1848 <DIO_GetPinValue+0x212>
            break;
            case PIN6_INDEX:
            	*pin_value = READ_BIT(Ports_index[obj->port]->PINx, PIN6_INDEX);
    17ee:	ea 81       	ldd	r30, Y+2	; 0x02
    17f0:	fb 81       	ldd	r31, Y+3	; 0x03
    17f2:	80 81       	ld	r24, Z
    17f4:	87 70       	andi	r24, 0x07	; 7
    17f6:	88 2f       	mov	r24, r24
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	fc 01       	movw	r30, r24
    1800:	e8 59       	subi	r30, 0x98	; 152
    1802:	ff 4f       	sbci	r31, 0xFF	; 255
    1804:	01 90       	ld	r0, Z+
    1806:	f0 81       	ld	r31, Z
    1808:	e0 2d       	mov	r30, r0
    180a:	80 81       	ld	r24, Z
    180c:	82 95       	swap	r24
    180e:	86 95       	lsr	r24
    1810:	86 95       	lsr	r24
    1812:	83 70       	andi	r24, 0x03	; 3
    1814:	81 70       	andi	r24, 0x01	; 1
    1816:	ec 81       	ldd	r30, Y+4	; 0x04
    1818:	fd 81       	ldd	r31, Y+5	; 0x05
    181a:	80 83       	st	Z, r24
    181c:	15 c0       	rjmp	.+42     	; 0x1848 <DIO_GetPinValue+0x212>
            break;
            case PIN7_INDEX:
            	*pin_value = READ_BIT(Ports_index[obj->port]->PINx, PIN7_INDEX);
    181e:	ea 81       	ldd	r30, Y+2	; 0x02
    1820:	fb 81       	ldd	r31, Y+3	; 0x03
    1822:	80 81       	ld	r24, Z
    1824:	87 70       	andi	r24, 0x07	; 7
    1826:	88 2f       	mov	r24, r24
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	fc 01       	movw	r30, r24
    1830:	e8 59       	subi	r30, 0x98	; 152
    1832:	ff 4f       	sbci	r31, 0xFF	; 255
    1834:	01 90       	ld	r0, Z+
    1836:	f0 81       	ld	r31, Z
    1838:	e0 2d       	mov	r30, r0
    183a:	80 81       	ld	r24, Z
    183c:	88 1f       	adc	r24, r24
    183e:	88 27       	eor	r24, r24
    1840:	88 1f       	adc	r24, r24
    1842:	ec 81       	ldd	r30, Y+4	; 0x04
    1844:	fd 81       	ldd	r31, Y+5	; 0x05
    1846:	80 83       	st	Z, r24
            default:

            break;
        }
    }
    return ret_status;
    1848:	89 81       	ldd	r24, Y+1	; 0x01
}
    184a:	27 96       	adiw	r28, 0x07	; 7
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	cd bf       	out	0x3d, r28	; 61
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <DIO_SetPortDirection>:


PROGRAM_STATUS_T DIO_SetPortDirection(Port_index_t port_index, u8 directions)
{
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	00 d0       	rcall	.+0      	; 0x1862 <DIO_SetPortDirection+0x6>
    1862:	0f 92       	push	r0
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	8a 83       	std	Y+2, r24	; 0x02
    186a:	6b 83       	std	Y+3, r22	; 0x03
    PROGRAM_STATUS_T ret_status = SUCCESS;
    186c:	19 82       	std	Y+1, r1	; 0x01
    Ports_index[port_index]->DDRx = directions;
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	88 2f       	mov	r24, r24
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	88 0f       	add	r24, r24
    1876:	99 1f       	adc	r25, r25
    1878:	fc 01       	movw	r30, r24
    187a:	e8 59       	subi	r30, 0x98	; 152
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	01 90       	ld	r0, Z+
    1880:	f0 81       	ld	r31, Z
    1882:	e0 2d       	mov	r30, r0
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	81 83       	std	Z+1, r24	; 0x01
    return ret_status;
    1888:	89 81       	ldd	r24, Y+1	; 0x01
}
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <DIO_SetPortValues>:


PROGRAM_STATUS_T DIO_SetPortValues(Port_index_t port_index, u8 values)
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	00 d0       	rcall	.+0      	; 0x189c <DIO_SetPortValues+0x6>
    189c:	0f 92       	push	r0
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
    18a2:	8a 83       	std	Y+2, r24	; 0x02
    18a4:	6b 83       	std	Y+3, r22	; 0x03
    PROGRAM_STATUS_T ret_status = SUCCESS;
    18a6:	19 82       	std	Y+1, r1	; 0x01
    Ports_index[port_index]->PORTx = values;
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	88 2f       	mov	r24, r24
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	fc 01       	movw	r30, r24
    18b4:	e8 59       	subi	r30, 0x98	; 152
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	01 90       	ld	r0, Z+
    18ba:	f0 81       	ld	r31, Z
    18bc:	e0 2d       	mov	r30, r0
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	82 83       	std	Z+2, r24	; 0x02
    return ret_status;
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	08 95       	ret

000018d0 <DIO_GetPortValues>:


PROGRAM_STATUS_T DIO_GetPortValues(Port_index_t port_index, u8 *port_value)
{
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <DIO_GetPortValues+0x6>
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <DIO_GetPortValues+0x8>
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	8a 83       	std	Y+2, r24	; 0x02
    18de:	7c 83       	std	Y+4, r23	; 0x04
    18e0:	6b 83       	std	Y+3, r22	; 0x03
    PROGRAM_STATUS_T ret_status = SUCCESS;
    18e2:	19 82       	std	Y+1, r1	; 0x01
    if(NULL == port_value)
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	9c 81       	ldd	r25, Y+4	; 0x04
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	19 f4       	brne	.+6      	; 0x18f2 <DIO_GetPortValues+0x22>
    {
        ret_status = NULL_PTR;
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	89 83       	std	Y+1, r24	; 0x01
    18f0:	0f c0       	rjmp	.+30     	; 0x1910 <DIO_GetPortValues+0x40>
    }
    else
    {
        *port_value = Ports_index[port_index]->PINx;
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	88 2f       	mov	r24, r24
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	fc 01       	movw	r30, r24
    18fe:	e8 59       	subi	r30, 0x98	; 152
    1900:	ff 4f       	sbci	r31, 0xFF	; 255
    1902:	01 90       	ld	r0, Z+
    1904:	f0 81       	ld	r31, Z
    1906:	e0 2d       	mov	r30, r0
    1908:	80 81       	ld	r24, Z
    190a:	eb 81       	ldd	r30, Y+3	; 0x03
    190c:	fc 81       	ldd	r31, Y+4	; 0x04
    190e:	80 83       	st	Z, r24
    }

    return ret_status;
    1910:	89 81       	ldd	r24, Y+1	; 0x01
}
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	08 95       	ret

00001920 <seven_segment_initailize>:
 *      Author: Mohamed Aly
 */
#include "seven_segment.h"

PROGRAM_STATUS_T seven_segment_initailize(const seven_segment_t *_segment)
{
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	00 d0       	rcall	.+0      	; 0x1926 <seven_segment_initailize+0x6>
    1926:	0f 92       	push	r0
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	9b 83       	std	Y+3, r25	; 0x03
    192e:	8a 83       	std	Y+2, r24	; 0x02
	PROGRAM_STATUS_T ret_status = SUCCESS;
    1930:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == _segment)
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	9b 81       	ldd	r25, Y+3	; 0x03
    1936:	00 97       	sbiw	r24, 0x00	; 0
    1938:	19 f4       	brne	.+6      	; 0x1940 <seven_segment_initailize+0x20>
	{
		ret_status = NULL_PTR;
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	89 83       	std	Y+1, r24	; 0x01
    193e:	17 c0       	rjmp	.+46     	; 0x196e <seven_segment_initailize+0x4e>
	}
	else
	{
		ret_status = DIO_SetPinDirection(&(_segment->segment_pins[0]));
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	9b 81       	ldd	r25, Y+3	; 0x03
    1944:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDirection>
    1948:	89 83       	std	Y+1, r24	; 0x01
		ret_status = DIO_SetPinDirection(&(_segment->segment_pins[1]));
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	9b 81       	ldd	r25, Y+3	; 0x03
    194e:	01 96       	adiw	r24, 0x01	; 1
    1950:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDirection>
    1954:	89 83       	std	Y+1, r24	; 0x01
		ret_status = DIO_SetPinDirection(&(_segment->segment_pins[2]));
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	9b 81       	ldd	r25, Y+3	; 0x03
    195a:	02 96       	adiw	r24, 0x02	; 2
    195c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDirection>
    1960:	89 83       	std	Y+1, r24	; 0x01
		ret_status = DIO_SetPinDirection(&(_segment->segment_pins[3]));
    1962:	8a 81       	ldd	r24, Y+2	; 0x02
    1964:	9b 81       	ldd	r25, Y+3	; 0x03
    1966:	03 96       	adiw	r24, 0x03	; 3
    1968:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDirection>
    196c:	89 83       	std	Y+1, r24	; 0x01


	}
	return ret_status;
    196e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	08 95       	ret

0000197c <seven_segment_write_number>:
PROGRAM_STATUS_T seven_segment_write_number(const seven_segment_t *_segment, u8 number)
{
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	00 d0       	rcall	.+0      	; 0x1982 <seven_segment_write_number+0x6>
    1982:	00 d0       	rcall	.+0      	; 0x1984 <seven_segment_write_number+0x8>
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	9b 83       	std	Y+3, r25	; 0x03
    198a:	8a 83       	std	Y+2, r24	; 0x02
    198c:	6c 83       	std	Y+4, r22	; 0x04
	PROGRAM_STATUS_T ret_status = SUCCESS;
    198e:	19 82       	std	Y+1, r1	; 0x01
		if((NULL == _segment) || (number > 9))
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	9b 81       	ldd	r25, Y+3	; 0x03
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	19 f0       	breq	.+6      	; 0x199e <seven_segment_write_number+0x22>
    1998:	8c 81       	ldd	r24, Y+4	; 0x04
    199a:	8a 30       	cpi	r24, 0x0A	; 10
    199c:	18 f0       	brcs	.+6      	; 0x19a4 <seven_segment_write_number+0x28>
		{
			ret_status = NULL_PTR;
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	89 83       	std	Y+1, r24	; 0x01
    19a2:	37 c0       	rjmp	.+110    	; 0x1a12 <seven_segment_write_number+0x96>
		}
		else
		{
			ret_status = DIO_SetPinValue(&(_segment->segment_pins[0]), ((number >> 0) & 0x01));
    19a4:	2a 81       	ldd	r18, Y+2	; 0x02
    19a6:	3b 81       	ldd	r19, Y+3	; 0x03
    19a8:	8c 81       	ldd	r24, Y+4	; 0x04
    19aa:	48 2f       	mov	r20, r24
    19ac:	41 70       	andi	r20, 0x01	; 1
    19ae:	c9 01       	movw	r24, r18
    19b0:	64 2f       	mov	r22, r20
    19b2:	0e 94 76 08 	call	0x10ec	; 0x10ec <DIO_SetPinValue>
    19b6:	89 83       	std	Y+1, r24	; 0x01
			ret_status = DIO_SetPinValue(&(_segment->segment_pins[1]), ((number >> 1) & 0x01));
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	9b 81       	ldd	r25, Y+3	; 0x03
    19bc:	9c 01       	movw	r18, r24
    19be:	2f 5f       	subi	r18, 0xFF	; 255
    19c0:	3f 4f       	sbci	r19, 0xFF	; 255
    19c2:	8c 81       	ldd	r24, Y+4	; 0x04
    19c4:	86 95       	lsr	r24
    19c6:	48 2f       	mov	r20, r24
    19c8:	41 70       	andi	r20, 0x01	; 1
    19ca:	c9 01       	movw	r24, r18
    19cc:	64 2f       	mov	r22, r20
    19ce:	0e 94 76 08 	call	0x10ec	; 0x10ec <DIO_SetPinValue>
    19d2:	89 83       	std	Y+1, r24	; 0x01
			ret_status = DIO_SetPinValue(&(_segment->segment_pins[2]), ((number >> 2) & 0x01));
    19d4:	8a 81       	ldd	r24, Y+2	; 0x02
    19d6:	9b 81       	ldd	r25, Y+3	; 0x03
    19d8:	9c 01       	movw	r18, r24
    19da:	2e 5f       	subi	r18, 0xFE	; 254
    19dc:	3f 4f       	sbci	r19, 0xFF	; 255
    19de:	8c 81       	ldd	r24, Y+4	; 0x04
    19e0:	86 95       	lsr	r24
    19e2:	86 95       	lsr	r24
    19e4:	48 2f       	mov	r20, r24
    19e6:	41 70       	andi	r20, 0x01	; 1
    19e8:	c9 01       	movw	r24, r18
    19ea:	64 2f       	mov	r22, r20
    19ec:	0e 94 76 08 	call	0x10ec	; 0x10ec <DIO_SetPinValue>
    19f0:	89 83       	std	Y+1, r24	; 0x01
			ret_status = DIO_SetPinValue(&(_segment->segment_pins[3]), ((number >> 3) & 0x01));
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	9b 81       	ldd	r25, Y+3	; 0x03
    19f6:	9c 01       	movw	r18, r24
    19f8:	2d 5f       	subi	r18, 0xFD	; 253
    19fa:	3f 4f       	sbci	r19, 0xFF	; 255
    19fc:	8c 81       	ldd	r24, Y+4	; 0x04
    19fe:	86 95       	lsr	r24
    1a00:	86 95       	lsr	r24
    1a02:	86 95       	lsr	r24
    1a04:	48 2f       	mov	r20, r24
    1a06:	41 70       	andi	r20, 0x01	; 1
    1a08:	c9 01       	movw	r24, r18
    1a0a:	64 2f       	mov	r22, r20
    1a0c:	0e 94 76 08 	call	0x10ec	; 0x10ec <DIO_SetPinValue>
    1a10:	89 83       	std	Y+1, r24	; 0x01
		}
		return ret_status;
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <keypad_init>:
                                                            {13, 14, 15, 16},
                                                             };


PROGRAM_STATUS_T keypad_init(const keypad_t *keypad_obj)
{
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	00 d0       	rcall	.+0      	; 0x1a28 <keypad_init+0x6>
    1a28:	00 d0       	rcall	.+0      	; 0x1a2a <keypad_init+0x8>
    1a2a:	0f 92       	push	r0
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
    1a30:	9d 83       	std	Y+5, r25	; 0x05
    1a32:	8c 83       	std	Y+4, r24	; 0x04
	PROGRAM_STATUS_T ret_status = SUCCESS;
    1a34:	1b 82       	std	Y+3, r1	; 0x03
	u8 row_counter = 0;
    1a36:	1a 82       	std	Y+2, r1	; 0x02
	u8 column_counter = 0;
    1a38:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == keypad_obj)
    1a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a3e:	00 97       	sbiw	r24, 0x00	; 0
    1a40:	19 f4       	brne	.+6      	; 0x1a48 <keypad_init+0x26>
	{
		ret_status = NULL_PTR;
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	8b 83       	std	Y+3, r24	; 0x03
    1a46:	24 c0       	rjmp	.+72     	; 0x1a90 <keypad_init+0x6e>
	}
	else
	{
		for(row_counter = 0; row_counter < KEYPAD_ROWS; row_counter++)
    1a48:	1a 82       	std	Y+2, r1	; 0x02
    1a4a:	0d c0       	rjmp	.+26     	; 0x1a66 <keypad_init+0x44>
		{
			ret_status = DIO_SetPinDirection(&(keypad_obj->keypad_rows_pins[row_counter]));
    1a4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	88 2f       	mov	r24, r24
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	82 0f       	add	r24, r18
    1a58:	93 1f       	adc	r25, r19
    1a5a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDirection>
    1a5e:	8b 83       	std	Y+3, r24	; 0x03
	{
		ret_status = NULL_PTR;
	}
	else
	{
		for(row_counter = 0; row_counter < KEYPAD_ROWS; row_counter++)
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	8f 5f       	subi	r24, 0xFF	; 255
    1a64:	8a 83       	std	Y+2, r24	; 0x02
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	84 30       	cpi	r24, 0x04	; 4
    1a6a:	80 f3       	brcs	.-32     	; 0x1a4c <keypad_init+0x2a>
		{
			ret_status = DIO_SetPinDirection(&(keypad_obj->keypad_rows_pins[row_counter]));
		}

		for(column_counter = 0; column_counter < KEYPAD_COLUMNS; column_counter++)
    1a6c:	19 82       	std	Y+1, r1	; 0x01
    1a6e:	0d c0       	rjmp	.+26     	; 0x1a8a <keypad_init+0x68>
		{
			ret_status = DIO_SetPinDirection(&(keypad_obj->keypad_rows_pins[column_counter]));
    1a70:	2c 81       	ldd	r18, Y+4	; 0x04
    1a72:	3d 81       	ldd	r19, Y+5	; 0x05
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	88 2f       	mov	r24, r24
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	82 0f       	add	r24, r18
    1a7c:	93 1f       	adc	r25, r19
    1a7e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDirection>
    1a82:	8b 83       	std	Y+3, r24	; 0x03
		for(row_counter = 0; row_counter < KEYPAD_ROWS; row_counter++)
		{
			ret_status = DIO_SetPinDirection(&(keypad_obj->keypad_rows_pins[row_counter]));
		}

		for(column_counter = 0; column_counter < KEYPAD_COLUMNS; column_counter++)
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	8f 5f       	subi	r24, 0xFF	; 255
    1a88:	89 83       	std	Y+1, r24	; 0x01
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
    1a8c:	84 30       	cpi	r24, 0x04	; 4
    1a8e:	80 f3       	brcs	.-32     	; 0x1a70 <keypad_init+0x4e>
		{
			ret_status = DIO_SetPinDirection(&(keypad_obj->keypad_rows_pins[column_counter]));
		}
	}
	return ret_status;
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	0f 90       	pop	r0
    1a9c:	cf 91       	pop	r28
    1a9e:	df 91       	pop	r29
    1aa0:	08 95       	ret

00001aa2 <keypad_read_value>:

PROGRAM_STATUS_T keypad_read_value(const keypad_t *keypad_obj, u8 *value)
{
    1aa2:	df 93       	push	r29
    1aa4:	cf 93       	push	r28
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	29 97       	sbiw	r28, 0x09	; 9
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	de bf       	out	0x3e, r29	; 62
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	cd bf       	out	0x3d, r28	; 61
    1ab6:	9f 83       	std	Y+7, r25	; 0x07
    1ab8:	8e 83       	std	Y+6, r24	; 0x06
    1aba:	79 87       	std	Y+9, r23	; 0x09
    1abc:	68 87       	std	Y+8, r22	; 0x08
	PROGRAM_STATUS_T ret_status = SUCCESS;
    1abe:	1c 82       	std	Y+4, r1	; 0x04
		u8 l_row_counter = 0;
    1ac0:	1b 82       	std	Y+3, r1	; 0x03
		u8 l_column_counter = 0;
    1ac2:	1a 82       	std	Y+2, r1	; 0x02
		u8 l_counter = 0;
    1ac4:	19 82       	std	Y+1, r1	; 0x01
		u8 column_logic = 0;
    1ac6:	1d 82       	std	Y+5, r1	; 0x05
		if(NULL == keypad_obj)
    1ac8:	8e 81       	ldd	r24, Y+6	; 0x06
    1aca:	9f 81       	ldd	r25, Y+7	; 0x07
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	19 f4       	brne	.+6      	; 0x1ad6 <keypad_read_value+0x34>
		{
			ret_status = NULL_PTR;
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	8c 83       	std	Y+4, r24	; 0x04
    1ad4:	57 c0       	rjmp	.+174    	; 0x1b84 <keypad_read_value+0xe2>
		}
		else
		{
			for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
    1ad6:	1b 82       	std	Y+3, r1	; 0x03
    1ad8:	51 c0       	rjmp	.+162    	; 0x1b7c <keypad_read_value+0xda>
			{
				// Set All pins to be low at first
				for(l_counter = 0; l_counter < KEYPAD_ROWS; l_counter++)
    1ada:	19 82       	std	Y+1, r1	; 0x01
    1adc:	0e c0       	rjmp	.+28     	; 0x1afa <keypad_read_value+0x58>
				{
					ret_status = DIO_SetPinValue(&(keypad_obj->keypad_rows_pins[l_counter]), GPIO_LOW);
    1ade:	2e 81       	ldd	r18, Y+6	; 0x06
    1ae0:	3f 81       	ldd	r19, Y+7	; 0x07
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
    1ae4:	88 2f       	mov	r24, r24
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	82 0f       	add	r24, r18
    1aea:	93 1f       	adc	r25, r19
    1aec:	60 e0       	ldi	r22, 0x00	; 0
    1aee:	0e 94 76 08 	call	0x10ec	; 0x10ec <DIO_SetPinValue>
    1af2:	8c 83       	std	Y+4, r24	; 0x04
		else
		{
			for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
			{
				// Set All pins to be low at first
				for(l_counter = 0; l_counter < KEYPAD_ROWS; l_counter++)
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	8f 5f       	subi	r24, 0xFF	; 255
    1af8:	89 83       	std	Y+1, r24	; 0x01
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	84 30       	cpi	r24, 0x04	; 4
    1afe:	78 f3       	brcs	.-34     	; 0x1ade <keypad_read_value+0x3c>
				{
					ret_status = DIO_SetPinValue(&(keypad_obj->keypad_rows_pins[l_counter]), GPIO_LOW);
				}

				ret_status = DIO_SetPinValue(&(keypad_obj->keypad_rows_pins[l_row_counter]), GPIO_HIGH);
    1b00:	2e 81       	ldd	r18, Y+6	; 0x06
    1b02:	3f 81       	ldd	r19, Y+7	; 0x07
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	88 2f       	mov	r24, r24
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	82 0f       	add	r24, r18
    1b0c:	93 1f       	adc	r25, r19
    1b0e:	61 e0       	ldi	r22, 0x01	; 1
    1b10:	0e 94 76 08 	call	0x10ec	; 0x10ec <DIO_SetPinValue>
    1b14:	8c 83       	std	Y+4, r24	; 0x04

				for(l_column_counter = 0; l_column_counter < KEYPAD_COLUMNS; l_column_counter++)
    1b16:	1a 82       	std	Y+2, r1	; 0x02
    1b18:	2b c0       	rjmp	.+86     	; 0x1b70 <keypad_read_value+0xce>
				{
					ret_status = DIO_GetPinValue(&(keypad_obj->keypad_columns_pins[l_column_counter]), &column_logic);
    1b1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b1e:	9c 01       	movw	r18, r24
    1b20:	2c 5f       	subi	r18, 0xFC	; 252
    1b22:	3f 4f       	sbci	r19, 0xFF	; 255
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	88 2f       	mov	r24, r24
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	82 0f       	add	r24, r18
    1b2c:	93 1f       	adc	r25, r19
    1b2e:	9e 01       	movw	r18, r28
    1b30:	2b 5f       	subi	r18, 0xFB	; 251
    1b32:	3f 4f       	sbci	r19, 0xFF	; 255
    1b34:	b9 01       	movw	r22, r18
    1b36:	0e 94 1b 0b 	call	0x1636	; 0x1636 <DIO_GetPinValue>
    1b3a:	8c 83       	std	Y+4, r24	; 0x04

					if(column_logic == GPIO_HIGH)
    1b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3e:	81 30       	cpi	r24, 0x01	; 1
    1b40:	a1 f4       	brne	.+40     	; 0x1b6a <keypad_read_value+0xc8>
					{
						*value = btn_values[l_row_counter][l_column_counter];
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	48 2f       	mov	r20, r24
    1b46:	50 e0       	ldi	r21, 0x00	; 0
    1b48:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4a:	28 2f       	mov	r18, r24
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	ca 01       	movw	r24, r20
    1b50:	88 0f       	add	r24, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	82 0f       	add	r24, r18
    1b5a:	93 1f       	adc	r25, r19
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	e1 58       	subi	r30, 0x81	; 129
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	80 81       	ld	r24, Z
    1b64:	e8 85       	ldd	r30, Y+8	; 0x08
    1b66:	f9 85       	ldd	r31, Y+9	; 0x09
    1b68:	80 83       	st	Z, r24
					ret_status = DIO_SetPinValue(&(keypad_obj->keypad_rows_pins[l_counter]), GPIO_LOW);
				}

				ret_status = DIO_SetPinValue(&(keypad_obj->keypad_rows_pins[l_row_counter]), GPIO_HIGH);

				for(l_column_counter = 0; l_column_counter < KEYPAD_COLUMNS; l_column_counter++)
    1b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6c:	8f 5f       	subi	r24, 0xFF	; 255
    1b6e:	8a 83       	std	Y+2, r24	; 0x02
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	84 30       	cpi	r24, 0x04	; 4
    1b74:	90 f2       	brcs	.-92     	; 0x1b1a <keypad_read_value+0x78>
		{
			ret_status = NULL_PTR;
		}
		else
		{
			for(l_row_counter = 0; l_row_counter < KEYPAD_ROWS; l_row_counter++)
    1b76:	8b 81       	ldd	r24, Y+3	; 0x03
    1b78:	8f 5f       	subi	r24, 0xFF	; 255
    1b7a:	8b 83       	std	Y+3, r24	; 0x03
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	84 30       	cpi	r24, 0x04	; 4
    1b80:	08 f4       	brcc	.+2      	; 0x1b84 <keypad_read_value+0xe2>
    1b82:	ab cf       	rjmp	.-170    	; 0x1ada <keypad_read_value+0x38>
						*value = btn_values[l_row_counter][l_column_counter];
					}
				}
			}
		}
		return ret_status;
    1b84:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1b86:	29 96       	adiw	r28, 0x09	; 9
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <main>:
					 .logic = GPIO_HIGH};

u8 keypad_val = 0;

int main()
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	2e 97       	sbiw	r28, 0x0e	; 14
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	f8 94       	cli
    1ba6:	de bf       	out	0x3e, r29	; 62
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	cd bf       	out	0x3d, r28	; 61
//	ret_status = DIO_SetPinDirection(&my_pin);
	ret_status = DIO_SetPinDirection(&my_pin1);
    1bac:	8d e7       	ldi	r24, 0x7D	; 125
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDirection>
    1bb4:	80 93 90 00 	sts	0x0090, r24
	ret_status = DIO_SetPinDirection(&my_pin2);
    1bb8:	8e e7       	ldi	r24, 0x7E	; 126
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPinDirection>
    1bc0:	80 93 90 00 	sts	0x0090, r24

	ret_status = DIO_SetPinValue(&my_pin1, GPIO_HIGH);
    1bc4:	8d e7       	ldi	r24, 0x7D	; 125
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	61 e0       	ldi	r22, 0x01	; 1
    1bca:	0e 94 76 08 	call	0x10ec	; 0x10ec <DIO_SetPinValue>
    1bce:	80 93 90 00 	sts	0x0090, r24
	ret_status = DIO_SetPinValue(&my_pin2, GPIO_HIGH);
    1bd2:	8e e7       	ldi	r24, 0x7E	; 126
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	61 e0       	ldi	r22, 0x01	; 1
    1bd8:	0e 94 76 08 	call	0x10ec	; 0x10ec <DIO_SetPinValue>
    1bdc:	80 93 90 00 	sts	0x0090, r24
	ret_status = seven_segment_initailize(&my_seg);
    1be0:	80 e7       	ldi	r24, 0x70	; 112
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	0e 94 90 0c 	call	0x1920	; 0x1920 <seven_segment_initailize>
    1be8:	80 93 90 00 	sts	0x0090, r24
	ret_status = keypad_init(&keypad);
    1bec:	85 e7       	ldi	r24, 0x75	; 117
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <keypad_init>
    1bf4:	80 93 90 00 	sts	0x0090, r24
	while (1)
	{
		ret_status = keypad_read_value(&keypad, &keypad_val);
    1bf8:	85 e7       	ldi	r24, 0x75	; 117
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	21 e9       	ldi	r18, 0x91	; 145
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	b9 01       	movw	r22, r18
    1c02:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <keypad_read_value>
    1c06:	80 93 90 00 	sts	0x0090, r24
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	a0 e2       	ldi	r26, 0x20	; 32
    1c10:	b1 e4       	ldi	r27, 0x41	; 65
    1c12:	8b 87       	std	Y+11, r24	; 0x0b
    1c14:	9c 87       	std	Y+12, r25	; 0x0c
    1c16:	ad 87       	std	Y+13, r26	; 0x0d
    1c18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	4a e7       	ldi	r20, 0x7A	; 122
    1c28:	55 e4       	ldi	r21, 0x45	; 69
    1c2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	8f 83       	std	Y+7, r24	; 0x07
    1c34:	98 87       	std	Y+8, r25	; 0x08
    1c36:	a9 87       	std	Y+9, r26	; 0x09
    1c38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3c:	78 85       	ldd	r23, Y+8	; 0x08
    1c3e:	89 85       	ldd	r24, Y+9	; 0x09
    1c40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	40 e8       	ldi	r20, 0x80	; 128
    1c48:	5f e3       	ldi	r21, 0x3F	; 63
    1c4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c4e:	88 23       	and	r24, r24
    1c50:	2c f4       	brge	.+10     	; 0x1c5c <main+0xc4>
		__ticks = 1;
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	9e 83       	std	Y+6, r25	; 0x06
    1c58:	8d 83       	std	Y+5, r24	; 0x05
    1c5a:	3f c0       	rjmp	.+126    	; 0x1cda <main+0x142>
	else if (__tmp > 65535)
    1c5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5e:	78 85       	ldd	r23, Y+8	; 0x08
    1c60:	89 85       	ldd	r24, Y+9	; 0x09
    1c62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	3f ef       	ldi	r19, 0xFF	; 255
    1c68:	4f e7       	ldi	r20, 0x7F	; 127
    1c6a:	57 e4       	ldi	r21, 0x47	; 71
    1c6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c70:	18 16       	cp	r1, r24
    1c72:	4c f5       	brge	.+82     	; 0x1cc6 <main+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	40 e2       	ldi	r20, 0x20	; 32
    1c82:	51 e4       	ldi	r21, 0x41	; 65
    1c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	bc 01       	movw	r22, r24
    1c8e:	cd 01       	movw	r24, r26
    1c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	9e 83       	std	Y+6, r25	; 0x06
    1c9a:	8d 83       	std	Y+5, r24	; 0x05
    1c9c:	0f c0       	rjmp	.+30     	; 0x1cbc <main+0x124>
    1c9e:	80 e9       	ldi	r24, 0x90	; 144
    1ca0:	91 e0       	ldi	r25, 0x01	; 1
    1ca2:	9c 83       	std	Y+4, r25	; 0x04
    1ca4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca8:	9c 81       	ldd	r25, Y+4	; 0x04
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	f1 f7       	brne	.-4      	; 0x1caa <main+0x112>
    1cae:	9c 83       	std	Y+4, r25	; 0x04
    1cb0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	9e 83       	std	Y+6, r25	; 0x06
    1cba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc0:	00 97       	sbiw	r24, 0x00	; 0
    1cc2:	69 f7       	brne	.-38     	; 0x1c9e <main+0x106>
    1cc4:	14 c0       	rjmp	.+40     	; 0x1cee <main+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc8:	78 85       	ldd	r23, Y+8	; 0x08
    1cca:	89 85       	ldd	r24, Y+9	; 0x09
    1ccc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	9e 83       	std	Y+6, r25	; 0x06
    1cd8:	8d 83       	std	Y+5, r24	; 0x05
    1cda:	8d 81       	ldd	r24, Y+5	; 0x05
    1cdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cde:	9a 83       	std	Y+2, r25	; 0x02
    1ce0:	89 83       	std	Y+1, r24	; 0x01
    1ce2:	89 81       	ldd	r24, Y+1	; 0x01
    1ce4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	f1 f7       	brne	.-4      	; 0x1ce6 <main+0x14e>
    1cea:	9a 83       	std	Y+2, r25	; 0x02
    1cec:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		ret_status = seven_segment_write_number(&my_seg, keypad_val);
    1cee:	20 91 91 00 	lds	r18, 0x0091
    1cf2:	80 e7       	ldi	r24, 0x70	; 112
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	62 2f       	mov	r22, r18
    1cf8:	0e 94 be 0c 	call	0x197c	; 0x197c <seven_segment_write_number>
    1cfc:	80 93 90 00 	sts	0x0090, r24
    1d00:	7b cf       	rjmp	.-266    	; 0x1bf8 <main+0x60>

00001d02 <__prologue_saves__>:
    1d02:	2f 92       	push	r2
    1d04:	3f 92       	push	r3
    1d06:	4f 92       	push	r4
    1d08:	5f 92       	push	r5
    1d0a:	6f 92       	push	r6
    1d0c:	7f 92       	push	r7
    1d0e:	8f 92       	push	r8
    1d10:	9f 92       	push	r9
    1d12:	af 92       	push	r10
    1d14:	bf 92       	push	r11
    1d16:	cf 92       	push	r12
    1d18:	df 92       	push	r13
    1d1a:	ef 92       	push	r14
    1d1c:	ff 92       	push	r15
    1d1e:	0f 93       	push	r16
    1d20:	1f 93       	push	r17
    1d22:	cf 93       	push	r28
    1d24:	df 93       	push	r29
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	ca 1b       	sub	r28, r26
    1d2c:	db 0b       	sbc	r29, r27
    1d2e:	0f b6       	in	r0, 0x3f	; 63
    1d30:	f8 94       	cli
    1d32:	de bf       	out	0x3e, r29	; 62
    1d34:	0f be       	out	0x3f, r0	; 63
    1d36:	cd bf       	out	0x3d, r28	; 61
    1d38:	09 94       	ijmp

00001d3a <__epilogue_restores__>:
    1d3a:	2a 88       	ldd	r2, Y+18	; 0x12
    1d3c:	39 88       	ldd	r3, Y+17	; 0x11
    1d3e:	48 88       	ldd	r4, Y+16	; 0x10
    1d40:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d42:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d44:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d46:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d48:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d4a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d4c:	b9 84       	ldd	r11, Y+9	; 0x09
    1d4e:	c8 84       	ldd	r12, Y+8	; 0x08
    1d50:	df 80       	ldd	r13, Y+7	; 0x07
    1d52:	ee 80       	ldd	r14, Y+6	; 0x06
    1d54:	fd 80       	ldd	r15, Y+5	; 0x05
    1d56:	0c 81       	ldd	r16, Y+4	; 0x04
    1d58:	1b 81       	ldd	r17, Y+3	; 0x03
    1d5a:	aa 81       	ldd	r26, Y+2	; 0x02
    1d5c:	b9 81       	ldd	r27, Y+1	; 0x01
    1d5e:	ce 0f       	add	r28, r30
    1d60:	d1 1d       	adc	r29, r1
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	f8 94       	cli
    1d66:	de bf       	out	0x3e, r29	; 62
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	cd bf       	out	0x3d, r28	; 61
    1d6c:	ed 01       	movw	r28, r26
    1d6e:	08 95       	ret

00001d70 <_exit>:
    1d70:	f8 94       	cli

00001d72 <__stop_program>:
    1d72:	ff cf       	rjmp	.-2      	; 0x1d72 <__stop_program>
